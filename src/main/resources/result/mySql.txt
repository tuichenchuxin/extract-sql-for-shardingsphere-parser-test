CALL mtr.add_suppression("default_storage_engine is set to a disabled storage engine .*");
CALL mtr.add_suppression("default_tmp_storage_engine is set to a disabled storage engine .*");
CALL mtr.add_suppression("Plugin mysqlx reported: 'All I/O interfaces are disabled");
CREATE TABLESPACE tb1 ADD DATAFILE 't1.ibd' ENGINE=INNODB;
CREATE TABLESPACE t1 ADD DATAFILE 't1.ibd' ENGINE=INNODB;
CREATE TABLESPACE t1 ADD DATAFILE 't1.ibd' ENGINE=HEAP;
CREATE PROCEDURE p1() BEGIN   CREATE TABLE t1 (c1 int) ENGINE=MYISAM;  END |
connect (con1, localhost, root,,);
connect (con1, localhost, root,,);
RENAME TABLE t1 to t2;
connect (con1, localhost, root,,);
LOCK TABLES t2 WRITE;
RENAME TABLE t2 TO t1;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
RENAME TABLE t1 TO t3;
UNLOCK TABLES;
LOCK TABLES t2 WRITE;
RENAME TABLE t2 TO t1;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
disconnect con1;
if ($VALGRIND_TEST) { } SELECT @@GLOBAL.sort_buffer_size;
flush table;
PREPARE check_view_columns FROM   'SELECT table_name, column_name, column_type FROM information_schema.columns    WHERE table_name= ? ORDER BY table_name, column_name';
PREPARE check_view_status FROM   'SELECT table_name, table_comment FROM information_schema.tables WHERE    table_name= ?';
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
RENAME TABLE t2 TO t5;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
RENAME TABLE t5 to t2;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns using @view;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
EXECUTE check_view_columns using @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_columns USING @view;
EXECUTE check_view_status USING @view;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
EXECUTE check_view_status USING @view;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
EXECUTE check_view_status USING @view;
EXECUTE check_view_status USING @view;
DEALLOCATE PREPARE check_view_columns;
DEALLOCATE PREPARE check_view_status;
connect (con1,localhost,root,,);
UNLOCK TABLES;
UNLOCK TABLES;
connect (con2,localhost,root,,);
disconnect con2;
disconnect con1;
CALL mtr.add_suppression("Failed to find tablespace");
CALL mtr.add_suppression("Ignoring tablespace");
CALL mtr.add_suppression("Cannot rename");
CALL mtr.add_suppression("Cannot calculate");
CALL mtr.add_suppression("Cannot open datafile");
CALL mtr.add_suppression("The error means the system cannot find");
CALL mtr.add_suppression("File ./s/t_innodb.ibd");
CALL mtr.add_suppression("Operating system error number");
disconnect unlocked_user_con;
disconnect unlocked_user_con;
connect(unlocked_user_con, localhost, unlocked_user, pas);
disconnect unlocked_user_con;
connect(unlocked_user_con, localhost, unlocked_user, pas);
connect(unlocked_user_con, localhost, unlocked_user2, pas);
disconnect unlocked_user_con;
connect(unlocked_user_con, localhost, unlocked_user2, pas);
disconnect unlocked_user_con;
connect(unlocked_user_con, localhost, unlocked_user, pas);
disconnect unlocked_user_con;
connect(anonymous_user_con, localhost, '', pass);
disconnect anonymous_user_con;
connect(anonymous_user_con, localhost, '', pass);
disconnect anonymous_user_con;
connect(anonymous_user_con, localhost, '', pass);
connect(anonymous_user_con, localhost, '', pass);
connect(anonymous_user_con, localhost, '', pass);
disconnect anonymous_user_con;
connect(anonymous_user_con, localhost, '', pass);
connect(unlocked_user_con, localhost, unlocked_user, pass);
disconnect unlocked_user_con;
connect(unlocked_user_con, localhost, unlocked_user, pass);
disconnect unlocked_user_con;
disconnect anonymous_user_con;
CREATE TABLE mysql.t1(counter INT)| INSERT INTO mysql.t1 VALUES(0)| CREATE DEFINER = u1@localhost PROCEDURE mysql.p1() BEGIN   UPDATE mysql.t1 SET counter = counter + 1;
END| DELIMITER ;| CALL mysql.p1();
connect(u1_con,localhost,u1,pass);
connect(u2_con,localhost,u2,pass);
CALL mysql.p1();
disconnect u2_con;
disable_query_log;
while ($1) {   connect(unlocked_user_con, localhost, u3, pass);
connect(unlocked_user_con, localhost, u3, pass);
disconnect unlocked_user_con;
dec $1;
} enable_query_log;
CREATE USER u1@localhost REQUIRE NONE ACCOUNT LOCK WITH MAX_QUERIES_PER_HOUR 100;
ALTER USER u1@localhost ACCOUNT UNLOCK WITH MAX_QUERIES_PER_HOUR 97 PASSWORD EXPIRE;
call mtr.add_suppression("Column count of mysql.* is wrong. "                          "Expected .*, found .*. "                          "The table is probably corrupted");
CREATE PROCEDURE account.account(OUT ac CHAR(20)) BEGIN   SELECT account.`account`.account INTO ac FROM account.account; END|
CALL account.account(@account);
select _rowid,t1._rowid,skey,sval from t1;
echo '#________________________VAR_09_INNODB_LOG_FILE_SIZE__________________#' echo '##' SELECT COUNT(@@GLOBAL.innodb_log_file_size);
CALL mtr.add_suppression("Failed to set up SSL because of the following *");
cat_file $MYSQLD_DATADIR/test_system_variable_source.log;
remove_file $MYSQLD_DATADIR/test_system_variable_source.log;
cat_file $MYSQLD_DATADIR/test_system_variable_source.log;
remove_file $MYSQLD_DATADIR/test_system_variable_source.log;
cat_file $MYSQLD_DATADIR/test_system_variable_source.log;
remove_file $MYSQLD_DATADIR/test_system_variable_source.log;
cat_file $MYSQLD_DATADIR/test_system_variable_source.log;
remove_file $MYSQLD_DATADIR/test_system_variable_source.log;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost USING r1;
connect(con1, localhost, u1, foo, test);
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR CURRENT_USER() USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
disconnect con1;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost USING r1;
connect(con1, localhost, u1, foo, test);
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
disconnect con1;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost USING r1,r2;
connect(con1, localhost, u1, foo, test);
SHOW GRANTS FOR u1@localhost USING r1,r2;
SHOW GRANTS FOR u1@localhost USING r1,r2;
SHOW GRANTS FOR u1@localhost USING r1,r2;
SHOW GRANTS FOR u1@localhost USING r1,r2;
SHOW GRANTS FOR u1@localhost USING r1,r2;
SHOW GRANTS FOR u1@localhost USING r1,r2;
SHOW GRANTS FOR u1@localhost USING r1,r2;
disconnect con1;
SHOW GRANTS FOR u1@localhost;
connect(con1, localhost, u1, foo, test);
disconnect con1;
call mtr.add_suppression("192.0.2.4");
PREPARE s FROM "SELECT * FROM t1 ot WHERE ot.b<0 OR EXISTS(SELECT it.b FROM v2 it WHERE ot.a=it.a+1)";
EXECUTE s;
connect (ce, localhost, root,, test);
connect (cq, localhost, root,, test);
( K INT NOT NULL AUTO_INCREMENT,   I INT,   A INT,   PRIMARY KEY(K), KEY IX(A) ) engine = InnoDB;
while ($i < 62) {   INSERT INTO t$i(I,A) SELECT X.K,X.K FROM t100 AS X, t100 AS Y WHERE X.K < 20 AND Y.K <= $i;
inc $i;
} set optimizer_prune_level=1;
while ($depth<4) {   if ($depth==0)   {     set optimizer_search_depth=0;    }   if ($depth==1)   {     set optimizer_search_depth=1;
}   if ($depth==2)   {     set optimizer_search_depth=3;
}   if ($depth==3)   {     set optimizer_search_depth=62;
}   inc $depth;
while ($i < 61)   {     inc $i;
}   while ($i <= 56)   {     inc $i;
inc $i;
inc $i;
inc $i;
inc $i;
inc $i;
inc $i;
inc $i;
}   while ($i < 60)   {     inc $i;
inc $i;
inc $i;
inc $i;
}   while ($i < 60)   {     inc $i;
inc $i;
inc $i;
inc $i;
}   while ($i < 60)   {     inc $i;
inc $i;
inc $i;
inc $i;
}   while ($i < 61)   {     inc $i;
} } while ($i < 62) {   inc $i;
} SET OPTIMIZER_SEARCH_DEPTH = DEFAULT;
SELECT INSERT(`字段一`, 1, 1, '㐊') FROM `表一`;
SELECT INSERT(`字段一`, 1, 2, '㐊') FROM `表一`;
SELECT INSERT(`字段一`, 1, 3, '㐊') FROM `表一`;
SELECT INSERT(`字段一`, 1, 4, '㐊') FROM `表一`;
SELECT INSERT(`字段一`, 1, 5, '㐊') FROM `表一`;
SELECT INSERT(`字段一`, 4, 1, '𠻠') FROM `表一`;
SELECT INSERT(`字段一`, 4, 2, '𠻠') FROM `表一`;
SELECT INSERT(`字段一`, 5, 1, '𠻠') FROM `表一`;
SELECT INSERT(`字段一`, 1, 1, ' ') FROM `表一`;
SELECT INSERT(`字段一`, 1, 2, '  ') FROM `表一`;
SELECT INSERT(`字段一`, 1, 3, '   ') FROM `表一`;
SELECT INSERT(`字段一`, 1, 4, '    ') FROM `表一`;
SELECT INSERT(`字段一`, 1, 5, '     ') FROM `表一`;
SELECT INSERT(`字段一`, 4, 1, ' ') FROM `表一`;
SELECT INSERT(`字段一`, 4, 2, '  ') FROM `表一`;
SELECT INSERT(`字段一`, 5, 1, ' ') FROM `表一`;
SELECT INSERT(`字段一`, 1, 1, '岝') FROM `表一`;
SELECT INSERT(`字段一`, 1, 2, '岝岝') FROM `表一`;
SELECT INSERT(`字段一`, 1, 3, '岝岝岝') FROM `表一`;
SELECT INSERT(`字段一`, 1, 4, '岝岝岝岝') FROM `表一`;
SELECT INSERT(`字段一`, 1, 5, '岝岝岝岝岝') FROM `表一`;
SELECT INSERT(`字段一`, 4, 1, '𠀂') FROM `表一`;
SELECT INSERT(`字段一`, 4, 2, '𠀂𠀂') FROM `表一`;
SELECT INSERT(`字段一`, 5, 1, '𠀂') FROM `表一`;
SELECT c1, TRIM(TRAILING '𠻞' FROM c1) FROM `表一`;
SELECT c1, TRIM(LEADING '𠻞' FROM c1) FROM `表一`;
SELECT c1, TRIM(BOTH '𠻞' FROM c1) FROM `表一`;
PREPARE stmt1 FROM 'SELECT ? FROM t3';
PREPARE stmt2 FROM 'SELECT * FROM t3 ORDER BY ?';
PREPARE stmt3 FROM 'SELECT COUNT(*) FROM t3 GROUP BY ?';
PREPARE stmt4 FROM 'SELECT CHAR_LENGTH(?)';
PREPARE stmt5 FROM 'SELECT CHARSET(?)';
PREPARE stmt6 FROM 'SELECT INSERT(c1,1,1,?) FROM t1';
PREPARE stmt7 FROM 'SELECT INSTR(c1,?) FROM t2';
PREPARE stmt8 FROM 'SELECT LOCATE(?,c1) FROM t2';
PREPARE stmt9 FROM 'SELECT LPAD(c1,9,?) FROM t1';
PREPARE stmt10 FROM 'SELECT REPLACE(c1,?,\'x\') FROM t2';
PREPARE stmt11 FROM 'SELECT REPLACE(c1,\'x\',?) FROM t1';
PREPARE stmt12 FROM 'SELECT RPAD(c1,9,?) FROM t1';
PREPARE stmt13 FROM 'UPDATE t4 SET c1=\'x\' WHERE c1=?';
PREPARE stmt14 FROM 'UPDATE t4 SET c1=? WHERE c1=\'x\'';
EXECUTE stmt1 USING @arg;
EXECUTE stmt2 USING @arg;
EXECUTE stmt3 USING @arg;
EXECUTE stmt4 USING @arg;
EXECUTE stmt5 USING @arg;
EXECUTE stmt6 USING @arg;
EXECUTE stmt7 USING @arg;
EXECUTE stmt8 USING @arg;
EXECUTE stmt9 USING @arg;
EXECUTE stmt10 USING @arg;
EXECUTE stmt11 USING @arg;
EXECUTE stmt12 USING @arg;
EXECUTE stmt13 USING @arg;
EXECUTE stmt14 USING @arg;
EXECUTE stmt1 USING @arg;
EXECUTE stmt2 USING @arg;
EXECUTE stmt3 USING @arg;
EXECUTE stmt4 USING @arg;
EXECUTE stmt5 USING @arg;
EXECUTE stmt6 USING @arg;
EXECUTE stmt7 USING @arg;
EXECUTE stmt8 USING @arg;
EXECUTE stmt9 USING @arg;
EXECUTE stmt10 USING @arg;
EXECUTE stmt11 USING @arg;
EXECUTE stmt12 USING @arg;
EXECUTE stmt13 USING @arg;
EXECUTE stmt14 USING @arg;
EXECUTE stmt1 USING @arg;
EXECUTE stmt2 USING @arg;
EXECUTE stmt3 USING @arg;
EXECUTE stmt4 USING @arg;
EXECUTE stmt5 USING @arg;
EXECUTE stmt6 USING @arg;
EXECUTE stmt7 USING @arg;
EXECUTE stmt8 USING @arg;
EXECUTE stmt9 USING @arg;
EXECUTE stmt10 USING @arg;
EXECUTE stmt11 USING @arg;
EXECUTE stmt12 USING @arg;
EXECUTE stmt13 USING @arg;
EXECUTE stmt14 USING @arg;
DEALLOCATE PREPARE stmt1;
DEALLOCATE PREPARE stmt2;
DEALLOCATE PREPARE stmt3;
DEALLOCATE PREPARE stmt4;
DEALLOCATE PREPARE stmt5;
DEALLOCATE PREPARE stmt6;
DEALLOCATE PREPARE stmt7;
DEALLOCATE PREPARE stmt8;
DEALLOCATE PREPARE stmt9;
DEALLOCATE PREPARE stmt10;
DEALLOCATE PREPARE stmt11;
DEALLOCATE PREPARE stmt12;
DEALLOCATE PREPARE stmt13;
DEALLOCATE PREPARE stmt14;
connect(con1, localhost, root,,);
disconnect con1;
send INSERT INTO t1 VALUES (3), (NULL), (4);
connect (con1, localhost, root,,);
reap;
send INSERT INTO t1 VALUES (3), (NULL), (4);
reap;
send INSERT INTO t1 SELECT * FROM t2;
reap;
send INSERT INTO t1 SELECT * FROM t2;
reap;
disconnect con1;
prepare s1 from '   select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in (    select a from t1 where a in ( select a from t1)    )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))';
execute s1;
call mtr.add_suppression('Can not read and process value of User_attributes column from mysql.user table for user');
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disconnect default;
connect (con1, localhost, root,,);
while ($i<$brands) {   inc $i;
} CREATE TABLE models (   id_pk int PRIMARY KEY,    id_nokey int,    brand_id int,    name varchar(100),    INDEX(`brand_id`) );
while ($i<$brands) {   inc $i;
while ($j<$models_pr_brand)   {      inc $cnt;
inc $j;
} } CREATE TABLE subtypes (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE colors (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_big) {   inc $i;
} CREATE TABLE heating (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE windows (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE fuels (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE transmissions (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE steerings (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE interiors (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_big) {   inc $i;
} CREATE TABLE drives (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE wheels (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE engine (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE price_ranges (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_small) {   inc $i;
} CREATE TABLE countries (   id_pk int primary key,    id_nokey int,    name varchar(100) );
while ($i<$misc_properties_big) {   inc $i;
} CREATE TABLE vehicles (   id int primary key,    model_id int,    subtype_id int,    color_id int,    heating_id int,    window_id int,    fuel_id int,    transmission_id int,    steering_id int,    interior_id int,    drive_id int,    price_range_id int,    assembled_in int,    engine_id int,    wheels_id int );
while ($i<$vehicles) {   inc $i;
$i, $i%2, $i%3, $i%4, $i%5, $i%6, $i%7,                                      $i );
} ANALYZE TABLE models, subtypes, colors, heating, windows, fuels, transmissions, steerings, interiors, drives, wheels, engine, price_ranges, countries, brands;
while ($i < 8) {   inc $j;
inc $i;
} while ($i < 8) {   inc $j;
inc $i;
} while ($i < 8) {   inc $j;
inc $i;
} while ($i < 8) {   inc $j;
inc $i;
} UPDATE mysql.engine_cost SET cost_value = DEFAULT WHERE cost_name = 'memory_block_read_cost';
write_file $BOOTSTRAP_SQL;
call mtr.add_suppression("Resizing redo log from");
call mtr.add_suppression("Upgrading redo log");
call mtr.add_suppression("Starting to delete and rewrite log files");
call mtr.add_suppression("New log files created");
call mtr.add_suppression("Unknown system variable 'show_compatibility_56'");
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work");
call mtr.add_suppression("Creating routine without parsing routine body");
call mtr.add_suppression("Resolving dependency for the view");
call mtr.add_suppression("references invalid");
call mtr.add_suppression("doesn't exist");
call mtr.add_suppression("information_schema");
call mtr.add_suppression("Storage engine '.*' does not support system tables. \\[mysql.*\\]");
call mtr.add_suppression("Table 'mysql.component' doesn't exist");
call mtr.add_suppression("is expected to be transactional");
call mtr.add_suppression("table is missing or has an incorrect definition");
call mtr.add_suppression("ACL DDLs will not work unless mysql_upgrade is executed");
call mtr.add_suppression(".* Native table .* has the wrong structure");
call mtr.add_suppression("Column count of mysql.* is wrong");
call mtr.add_suppression("Column count of performance_schema.events_statements_summary_by_digest is wrong.*");
call mtr.add_suppression("The privilege system failed to initialize correctly.*");
call mtr.add_suppression(".*The system table mysql.global_grants is missing.*");
call mtr.add_suppression("Unable to delete statistics for table mysql.");
call mtr.add_suppression("Column count of performance_schema.replication_group_members is wrong. Expected 7, found 5.*");
call mtr.add_suppression("Column count of performance_schema.replication_group_member_stats is wrong. Expected 13, found 9.*");
call mtr.add_suppression("Column count of performance_schema.threads is wrong. Expected 18, found 17.*");
call mtr.add_suppression("ACL table mysql.[a-zA-Z_]* missing. Some operations may fail.");
call mtr.add_suppression("Info table is not ready to be used. Table 'mysql.slave_master_info' cannot be opened");
call mtr.add_suppression("Error in checking mysql.slave_master_info repository info type of TABLE");
call mtr.add_suppression("Error creating master info: Error checking repositories.");
call mtr.add_suppression("Slave: Failed to initialize the master info structure for channel");
call mtr.add_suppression("Failed to create or recover replication info repositories.");
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* Missing .ibd file for table `test`\.`t1` .* ");
create table t1 (id int) partition by range (id) (partition p0 values less than (1000),  partition p1 values less than (maxvalue));
LOCK TABLE t1 WRITE;
connect (conn1, localhost, root,,);
disconnect conn1;
CREATE FUNCTION f1() RETURNS INT  BEGIN      return 1;
END| DELIMITER ;| INSERT INTO t2 SELECT * FROM t1;
while ($x) {   dec $x;
} SET GLOBAL long_query_time = 0;
connect (con,localhost,root,,);
connect (con1,localhost,root,,);
disconnect con1;
disconnect con;
SELECT AES_ENCRYPT('a', 'a') = AES_ENCRYPT(REPEAT('a',1000), 'a');
SELECT AES_ENCRYPT('a', 'a') = AES_ENCRYPT('a', REPEAT('a',1000));
SELECT AES_ENCRYPT('a', 'a') = AES_ENCRYPT('a', 'a', REPEAT('a', 16));
SELECT AES_ENCRYPT('a', 'a') = AES_ENCRYPT('a', 'a', REPEAT('b', 16));
SELECT TO_BASE64(AES_ENCRYPT('a', 'a', REPEAT('a', 1024)));
SELECT AES_DECRYPT(AES_ENCRYPT(_UTF8'Жоро', 'a'), 'a') = _UTF8'Жоро';
SELECT 'a' = AES_DECRYPT(AES_ENCRYPT('a', 'a'), 'a', REPEAT('a',16));
SELECT 'a' = AES_DECRYPT(AES_ENCRYPT('a', 'a'), 'a', REPEAT('a',100));
INSERT INTO aes_ecb (a) VALUES ('a'), ('Жоро'), (REPEAT('a', 10));
source include/func_aes_block.inc;
connect(con1, localhost, root,,);
connect(con_u1,localhost,u1,,test);
disconnect con_u1;
RENAME TABLE T1 TO T2;
RENAME TABLE T2 TO t3;
RENAME TABLE T3 TO T1;
LOCK TABLE T2 WRITE;
UNLOCK TABLES;
RENAME TABLE T2 TO T1;
RENAME TABLE T1 TO T2;
RENAME TABLE T2 TO t3;
RENAME TABLE T3 TO T1;
LOCK TABLE T2 WRITE;
UNLOCK TABLES;
RENAME TABLE T2 TO T1;
CREATE TRIGGER BUP_XPFM_COMPAT_DB2.trigger1 AFTER INSERT   ON BUP_XPFM_COMPAT_DB2.table1 FOR EACH ROW   update BUP_XPFM_COMPAT_DB2.table1 set c13=12; |
CREATE TRIGGER BUP_XPFM_COMPAT_DB2.TRIGGER2 AFTER INSERT   ON BUP_XPFM_COMPAT_DB2.TABLE2 FOR EACH ROW   update BUP_XPFM_COMPAT_DB2.table1 set c13=12; |
CREATE TRIGGER BUP_XPFM_COMPAT_DB2.TrigGer3 AFTER INSERT   ON BUP_XPFM_COMPAT_DB2.TaBle3 FOR EACH ROW   update BUP_XPFM_COMPAT_DB2.table1 set c13=12; |
RENAME TABLE T1 to T2;
RENAME TABLE T2 to T1;
RENAME TABLE T1 to T2;
RENAME TABLE T2 TO T3;
RENAME TABLE t3 TO T4;
RENAME TABLE T2 TO T3;
CREATE TRIGGER `test`.`test_table_t1_before_insert` BEFORE INSERT ON `T1` FOR EACH ROW BEGIN   SET NEW.creation_utc = UTC_TIMESTAMP();
END $$ DELIMITER ;$$ SHOW CREATE TRIGGER `test`.`test_table_t1_before_insert`;
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* Parent table of FTS auxiliary table.*");
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work");
TYPE=TRIGGERS triggers='CREATE DEFINER=`root`@`localhost` TRIGGER tr1_bi BEFORE INSERT ON vt2 FOR EACH ROW SET @a:=1' sql_modes=1073741824 1073741824 definers='root@localhost' 'root@localhost' client_cs_names='latin1' 'latin1' db_cl_names='latin1_swedish_ci' 'latin1_swedish_ci' TYPE=TRIGGERNAME trigger_table=vt2 SET sql_mode='';
INSERT INTO test.proc VALUES ('sp','bug24805140','PROCEDURE','bug24805140','SQL',                               'CONTAINS_SQL','NO','DEFINER','out a int','',                               'begin select requesting_trx_id from '                               'information_schema.INNODB_LOCK_WAITS limit 1 into a; end',                               'root@localhost','2016-10-05 21:44:21',                               '2016-10-05 21:44:21',                               'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,'                               'NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,'                               'NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION',                               '','utf8','utf8_general_ci','latin1_swedish_ci',                               'begin select requesting_trx_id from '                               'information_schema.INNODB_LOCK_WAITS limit 1 into a; end'),                               ('sp','proc2','PROCEDURE','proc2','SQL',                               'CONTAINS_SQL','NO','DEFINER','out b int','',                               'begin select   @@show_compatibility_56 into b; end',                               'root@localhost','2016-10-05 21:55:05',                               '2016-10-05 21:55:05','ONLY_FULL_GROUP_BY,'                               'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,'                               'NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,'                               'NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION','',                               'utf8','utf8_general_ci','latin1_swedish_ci',                               'begin select   @@show_compatibility_56 into b; end');
INSERT INTO `proc` VALUES ('test','downgrade_alter_proc','PROCEDURE',                            'downgrade_alter_proc',                            'SQL','CONTAINS_SQL','NO','INVOKER','','',                            'BEGIN\n      SELECT c1, English, French FROM t1 '                            'JOIN t2 ON t1.c3 = t2.col2;\n     END',                            'root@localhost','1988-04-25 20:45:00',                            '1988-04-25 20:45:00','NO_ZERO_DATE','','latin1',                            'latin1_swedish_ci','latin1_swedish_ci',                            'BEGIN\n      SELECT c1, English, French FROM t1 '                            'JOIN t2 ON t1.c3 = t2.col2;\n     END'),                           ('test','my_test_func','FUNCTION','myfunc','SQL',                            'CONTAINS_SQL','NO','DEFINER', '',                            'varchar(20) CHARSET latin1',                            'BEGIN\n  RETURN \'å\';\nEND',                            'root@localhost','2017-03-08 09:07:36',                            '2017-03-08 09:07:36', 'ONLY_FULL_GROUP_BY,'                            'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,'                            'ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,'                            'NO_ENGINE_SUBSTITUTION','','latin1','latin1_swedish_ci',                            'latin1_swedish_ci','BEGIN\n  RETURN \'Ã¥\';\nEND');
write_file $DB_OPT_FILE;
default-character-set=koi8r default-collation=koi8r_bin perl;
my $log= $ENV{'ENV_MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_e= grep(/\[Warning\] Parsing \'sys\.diagnostics\' routine body failed\. Creating routine without parsing routine body/gi,<FILE>);
print "# Sys Schema routine parsing warning found : $c_e times.\n";
seek(FILE,0,0);
$c_e= grep(/\[ERROR\] .* Unknown system variable \'show_compatibility_56\'/gi,<FILE>);
print "# Sys Schema routine parsing error found : $c_e times.\n";
seek(FILE,0,0);
$c_e= grep(/\[Warning\] Resolving dependency for the view \'sys\.innodb_lock_waits\' failed\. View is no more valid to use/gi,<FILE>);
print "# Sys Schema view parsing warning found : $c_e times.\n";
seek(FILE,0,0);
$c_e= grep(/\[ERROR\] .* Unknown table \'INNODB_LOCK_WAITS\' in information_schema/gi,<FILE>);
print "# Sys Schema view parsing error found : $c_e times.\n";
close(FILE);
SHOW CREATE DATABASE db_charset_koi8r;
call sp.bug24805140();
if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 0) { } if ($MTR_RECORD == 1) { } SHOW CREATE TABLE test.t_set;
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work");
connect (con1,localhost,test,,test);
disconnect con1;
connect(con1, localhost, test, , test);
UNLOCK TABLES;
disconnect con1;
connect(con1,localhost,bug33669,,db1);
LOCK TABLES t1 READ, t2 READ;
UNLOCK TABLES;
LOCK TABLES t1 READ, temp WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
LOCK TABLES t1 READ, t2 READ;
UNLOCK TABLES;
LOCK TABLES t2 READ;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 READ;
UNLOCK TABLES;
disconnect con1;
echo =============Test of '::1' ========================================;
echo =============Test of '127.0.0.1' (IPv4) ===========================;
echo =============Test of '::1/128' ====================================;
echo =============Test of '0000:0000:0000:0000:0000:0000:0000:0001' ====;
echo =============Test of '0:0:0:0:0:0:0:1' ============================;
WHERE PROCESSLIST_ID = $thread_id AND    ATTR_NAME IN ('program_name', '_client_replication_channel_name', '_client_role');
perl;
my $mysqlbinlog= $ENV{'MYSQL_BINLOG'};
my $port= $ENV{'MASTER_MYPORT'};
my $binlog_file= $ENV{'BINLOG_FILE'};
system("$mysqlbinlog --stop-never --read-from-remote-server --user=root --host=127.0.0.1 --port=$port $binlog_file > /dev/null &");
WHERE PROCESSLIST_ID = $thread_id AND    ATTR_NAME IN ('program_name', '_client_replication_channel_name', '_client_role');
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
connect (con2, localhost, root, ,test);
disconnect con1;
disconnect con2;
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
disconnect con1;
connect (con1, localhost, root, ,test);
disconnect con1;
if (!$require_case_insensitive_file_system) { } SET @old_log_output= @@global.log_output;
CREATE TABLE ```ab``cd``` (i INT);
SHOW CREATE TABLE ```ab``cd```;
DROP TABLE ```ab``cd```;
CREATE TABLE ```ab````cd``` (i INT);
SHOW CREATE TABLE ```ab````cd```;
DROP TABLE ```ab````cd```;
CREATE TABLE ```a` (i INT);
SHOW CREATE TABLE ```a`;
DROP TABLE ```a`;
show create database mysqltest;
connect (con1,localhost,mysqltest_1,,mysqltest);
show create database mysqltest;
disconnect con1;
connect (con2,localhost,mysqltest_2,,test);
show create database mysqltest;
disconnect con2;
connect (con3,localhost,mysqltest_3,,test);
show create database mysqltest;
disconnect con3;
create table t1 (   c1 int NOT NULL,   c2 int NOT NULL,   PRIMARY KEY USING HASH (c1),   INDEX USING BTREE(c2) );
show slave hosts;
show create database test;
SHOW CREATE DATABASE mysqltest1;
connect(shm_con,localhost,root,,,,$shm_name,SHM);
disconnect shm_con;
select concat("a",NULL),replace(NULL,"a","b"),replace("string","i",NULL),replace("string",NULL,"i"),insert("abc",1,1,NULL),left(NULL,1);
select repeat("a",0),repeat("ab",5+5),repeat("ab",-1),reverse(NULL);
select 2 between null and 1,2 between 3 AND NULL,NULL between 1 and 2,2 between NULL and 3, 2 between 1 AND null;
explain select 2 between null and 1,2 between 3 AND NULL,NULL between 1 and 2,2 between NULL and 3, 2 between 1 AND null;
create table t1 select   null as c00,   if(1, null, 'string') as c01,   if(0, null, 'string') as c02,   ifnull(null, 'string') as c03,   ifnull('string', null) as c04,   case when 0 then null else 'string' end as c05,   case when 1 then null else 'string' end as c06,   coalesce(null, 'string') as c07,   coalesce('string', null) as c08,   least('string',null) as c09,   least(null, 'string') as c10,   greatest('string',null) as c11,   greatest(null, 'string') as c12,   nullif('string', null) as c13,   nullif(null, 'string') as c14,   trim('string' from null) as c15,   trim(null from 'string') as c16,   substring_index('string', null, 1) as c17,   substring_index(null, 'string', 1) as c18,   elt(1, null, 'string') as c19,   elt(1, 'string', null) as c20,   concat('string', null) as c21,   concat(null, 'string') as c22,   concat_ws('sep', 'string', null) as c23,   concat_ws('sep', null, 'string') as c24,   concat_ws(null, 'string', 'string') as c25,   make_set(3, 'string', null) as c26,   make_set(3, null, 'string') as c27,   export_set(3, null, 'off', 'sep') as c29,   export_set(3, 'on', null, 'sep') as c30,   export_set(3, 'on', 'off', null) as c31,   replace(null, 'from', 'to') as c32,   replace('str', null, 'to') as c33,   replace('str', 'from', null) as c34,   insert('str', 1, 2, null) as c35,   insert(null, 1, 2, 'str') as c36,   lpad('str', 10, null) as c37,   rpad(null, 10, 'str') as c38;
select    case 'str' when 'STR' then 'str' when null then 'null' end as c01,   case 'str' when null then 'null' when 'STR' then 'str' end as c02,   field(null, 'str1', 'str2') as c03,   field('str1','STR1', null) as c04,   field('str1', null, 'STR1') as c05,   'string' in ('STRING', null) as c08,   'string' in (null, 'STRING') as c09;
SELECT \N;
INSERT INTO t2 (a, b) VALUES (REPEAT('a', 512), REPEAT('b', 512));
INSERT INTO t2 (a, b) VALUES (REPEAT('A', 512), REPEAT('B', 512));
while ($i) {   INSERT INTO t2 (a, b) SELECT a, b FROM t2;
dec $i;
} SET GLOBAL debug = '+d,print_select_into_flush_stats';
INSERT INTO t2 (a, b) VALUES (REPEAT('a', 10000), REPEAT('b', 10000));
connect (con1,localhost,root,,);
xa start 0x7465737462, 0x2030405060, 0xb;
disconnect con1;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
connect(con1,localhost,root,,);
SEND UPDATE t1 SET a=5 WHERE a=2;
WHERE ID=$conn_id AND STATE='Searching rows for update';
REAP;
SEND UPDATE t1 SET a=5 WHERE a=2;
WHERE ID=$conn_id AND STATE='Searching rows for update';
REAP;
disconnect con1;
connect (con1, localhost, root);
disconnect con1;
disconnect con2;
xa start 0xABCDEF1234567890, 0x01, 0x02 ;
xa end 0xABCDEF1234567890, 0x01, 0x02 ;
xa prepare 0xABCDEF1234567890, 0x01, 0x02 ;
xa rollback 0xABCDEF1234567890, 0x01, 0x02 ;
xa start 0x4142434445, 0x46, 0x02 ;
xa end 0x4142434445, 0x46, 0x02 ;
xa prepare 0x4142434445, 0x46, 0x02 ;
xa rollback 0x4142434445, 0x46, 0x02 ;
call mtr.add_suppression("Found 1 prepared XA transactions");
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con_tmp,localhost,root,,);
flush table with read lock;
unlock tables;
unlock tables;
disconnect con_tmp;
SHOW GRANTS FOR u1;
call mtr.add_suppression("When binlog_format=STATEMENT, the option binlog_row_value_options=PARTIAL_JSON");
call mtr.add_suppression("When binlog_row_image=FULL, the option binlog_row_value_options=PARTIAL_JSON");
call mtr.add_suppression("When binlog_row_value_options=PARTIAL_JSON, the option log_bin_use_v1_row_events=1");
call mtr.add_suppression("When the binary log is disabled, the option binlog_row_value_options=PARTIAL_JSON");
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work.");
if (`SELECT CURTIME() > SEC_TO_TIME(24 * 3600 - 5)`) { } INSERT INTO t1 VALUES (DATE(NOW()), 1);
CREATE UNDO TABLESPACE undo_003 ADD DATAFILE 'undo_003.ibu' ENGINE InnoDB;
ALTER UNDO TABLESPACE undo_003 SET ACTIVE ENGINE InnoDB;
ALTER UNDO TABLESPACE undo_003 SET INACTIVE ENGINE InnoDB;
source include/wait_until_undo_space_is_empty.inc;
select (1,2,3) IN ((3,2,3), (1,2,3), (1,3,3));
select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3));
select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));
select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));
select row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a'));
select row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3));
select row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3));
select row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));
select row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));
select row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3));
select row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3));
select (1,2,(3,4)) IN ((3,2,(3,4)), (1,2,(3,4)));
select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,4));
select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));
explain select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));
select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5)));
select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5)));
select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1;
select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1;
select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1;
select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1;
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,1));
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,1),ROW(1,ROW(2,3)));
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,ROW(2,2,2)));
SELECT ROW(1,ROW(2,3,4)) IN (ROW(1,ROW(2,3,4)),ROW(1,ROW(2,2)));
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),(SELECT 1,1));
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),(SELECT 1,1),ROW(1,ROW(2,4)));
SELECT ROW(1,ROW(2,3)) IN ((SELECT 1,1),ROW(1,ROW(2,3)));
SELECT ROW(2,1) IN (ROW(21,2),ROW(ROW(1,1,3),0));
SELECT ROW(2,1) IN (ROW(ROW(1,1,3),0),ROW(21,2));
SET @x:= (SELECT h FROM t1 WHERE (a,b,c,d,e,f,g)=(1,2,3,4,5,6,7));
SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a;
SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a;
SELECT 1 <=>ALL (SELECT 1);
CREATE TABLE v0(v1 DEC, v2 INT);
if (!$require_case_insensitive_file_system) { } set @orig_sql_mode= @@sql_mode;
DO ST_ASTEXT(ST_UNION(ST_GEOMFROMTEXT('POLYGON((525000 183300,525400 183300,525400 18370, 525000 183700,525000 183300))'), ST_GeomFromText('POLYGON((525298.67 183511.53,525296.57 183510.39,525296.42 183510.31,525289.11 183506.62,525283.17 183503.47,525280.98 183502.26,525278.63 183500.97,525278.39 183500.84,525276.79 183500,525260.7 183491.55,525263.95 183484.75,525265.58 183481.95,525278.97 183488.73,525276.5 183493.45,525275.5 183495.7,525280.35 183498.2,525282.3 183499.1,525282.2 183499.3,525283.55 183500,525301.75 183509.35,525304.45 183504.25,525307.85 183504.95,525304.5 183510.83,525302.81 183513.8,525298.67 183511.53),(525275.06 183489.89,525272.06 183488.37,525268.94 183494.51,525271.94 183496.03,525275.06 183489.89),(525263.26 183491.55,525266.15 183493.04,525269.88 183485.82,525266.99 183484.33,525263.26 183491.55))'))) st_u;
select (ST_aswkb(cast(st_union(multipoint(                                        point(8,6), point(1,-17679),                                        point(-9,-9)),                             linestring(point(91,12), point(-77,49),                                        point(53,-81)))as char(18)))) in  ('1','2');
DO ST_AsText(@centroid_point) as centroid;
DO MBRWITHIN(@centroid_point, ST_INTERSECTION(ST_GEOMFROMTEXT('MULTILINESTRING((541 -927,-414 316,-429 -444,212 260,-125 104,445 563,-713 -975,-976 514),(-830 882,-377 914,-915 919,-535 -23,-508 979),(806 347,-87 220,226 -22,-12 468,707 598,83 951,-592 701,833 964,270 -932,743 -514,231 469,-575 -122,-99 -245,416 465,801 -587))'), ST_GEOMFROMTEXT('LINESTRING(-96 -182,-373 75,697 687,-881 -463,-557 -959,-493 810)'))) as result;
do st_distance(linestring(point(26,87),point(13,95)),                geometrycollection(point(4.297374e+307,8.433875e+307)));
DO ST_AsText(@centroid_point) as centroid;
DO MBRWITHIN(@centroid_point, ST_INTERSECTION(ST_GEOMFROMTEXT('MULTILINESTRING((541 -927,-414 316,-429 -444,212 260,-125 104,445 563,-713 -975,-976 514),(-830 882,-377 914,-915 919,-535 -23,-508 979),(806 347,-87 220,226 -22,-12 468,707 598,83 951,-592 701,833 964,270 -932,743 -514,231 469,-575 -122,-99 -245,416 465,801 -587))'), ST_GEOMFROMTEXT('LINESTRING(-96 -182,-373 75,697 687,-881 -463,-557 -959,-493 810)'))) as result;
DO ST_ASTEXT(ST_UNION(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((4 -10,-3 0,-5 6,9 9,5 7,9 -6,9 -10,7 9,0 -4,-6 10,0 -3,9 3, 4 -10)),                                                            GEOMETRYCOLLECTION(),                                                            GEOMETRYCOLLECTION(MULTIPOLYGON(((-8 0,-2 -6,-10 -9,-9 7,-2 -10,7 -9,3 -6,-5 -8,-10 -7,-6 10,4 -10,-7 -8,6 -1, -8 0)),((-4 -3,7 -10,-4 -1,-10 -3,3 -3,-10 -4,-1 2,-2 -10,6 -7,-9 -8, -4 -3))),                                                                               POINT(5 0),                                                                               MULTIPOINT(-3 0,-4 -8,-3 -4,10 4,0 7,-7 2,4 -8,1 -6),                                                                               MULTILINESTRING((-10 10,-10 5,9 -9,2 2,-7 2,0 -3,2 3,-6 -4,0 -2),(5 -9,0 -9,6 -4,1 -4,-1 6,2 -9,5 -7,8 10)),                                                                               MULTILINESTRING((-10 10,-10 5,9 -9,2 2,-7 2,0 -3,2 3,-6 -4,0 -2),(5 -9,0 -9,6 -4,1 -4,-1 6,2 -9,5 -7,8 10)),                                                                               LINESTRING(10 5,-4 7,-5 -8,-4 4,-4 6,-5 9,-1 6,0 -5)),                                                            GEOMETRYCOLLECTION(MULTILINESTRING((-8 5,9 -10,-9 9,-9 4,3 -2,4 -6),(3 -10,3 8,-10 4,6 -3,8 -2,3 3,4 -7,-8 6,-3 2,5 3,0 10,2 4,1 -5,-6 1),(10 3,-4 2,4 -4,3 -1,-8 0,-7 -2,10 9,-5 5,-3 6),(0 3,3 7,0 2,4 -1,8 8,-10 -4,2 7,-4 5)),                                                                               POINT(2 -1),                                                                               MULTIPOLYGON(((-10 8,1 -4,0 -8,9 2,-8 -6,-3 -7,-10 -1,-10 -9,10 -3, -10 8)),((-6 7,-1 3,2 8,10 -6,-8 4,-9 -10,-8 -8,-2 -1,-9 7,6 -9,5 1,-1 -6, -6 7)),((8 9,0 1,-5 -8,0 8,-3 -6,-9 -2,9 -6,-5 5,-1 -3,-8 2,2 -9,5 -5,7 -7,-9 3,0 -3, 8 9)),((1 -4,-7 -10,10 10,5 3,8 -9,-6 5,2 2,-5 5,-1 5, 1 -4))),                                                                               MULTIPOLYGON(((-10 8,1 -4,0 -8,9 2,-8 -6,-3 -7,-10 -1,-10 -9,10 -3, -10 8)),((-6 7,-1 3,2 8,10 -6,-8 4,-9 -10,-8 -8,-2 -1,-9 7,6 -9,5 1,-1 -6, -6 7)),((8 9,0 1,-5 -8,0 8,-3 -6,-9 -2,9 -6,-5 5,-1 -3,-8 2,2 -9,5 -5,7 -7,-9 3,0 -3, 8 9)),((1 -4,-7 -10,10 10,5 3,8 -9,-6 5,2 2,-5 5,-1 5, 1 -4)))),                                                            MULTIPOLYGON(((8 0,7 -6,7 -2,-7 -9,-3 10,-4 -3,3 -10, 8 0)),((7 3,7 6,1 8,4 6,-8 -7,-6 -7,9 -4,-1 3,-7 10, 7 3)),((3 -6,5 4,-3 -6,-5 1,-6 0,0 0,0 -7,-2 -10,-4 8,9 9,4 6, 3 -6)),((7 -7,3 4,-5 0, 7 -7)),((4 -9,-2 -9,-2 10, 4 -9))),                                                            POLYGON((-3 -6,-3 0,3 -10,3 10,1 -4,-6 -10,8 -5,-9 -8,2 -4,9 10,1 -3, -3 -6)),                                                            POLYGON((2 -5,0 -2,-3 9,0 4,6 -6,5 -4,-4 2,-6 6,3 -4,1 0,-10 -7,1 6,-7 2, 2 -5)),                                                            MULTIPOINT(7 8,-6 -3,-1 -7,0 7,-2 1,-8 -8))'),                           ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()'))) as result;  SELECT ST_ASTEXT(ST_UNION(ST_ENVELOPE(ST_GEOMFROMTEXT('LINESTRING(5 9,-1 10,-2 -6,2 9,2 0,3 6,-3 3,9 -2,-3 -10,-7 -4,1 4)')),                        ST_UNION(ST_GEOMFROMTEXT('MULTILINESTRING((6 -8,10 -8,3 0,-6 1,0 8,-1 8,-3 -3,6 -6,0 6,1 -6,-1 7,8 3),(-9 -10,-4 0,0 1,-9 1,6 9,-8 7,-2 -6,2 10,-1 -5,3 -5,-1 -10))'),                                  ST_GEOMFROMTEXT('MULTILINESTRING((8 7,2 6,-6 -8,-2 10,4 1,9 7,5 9,4 1,8 2,-2 10,8 -5))')))) as result;
DO ST_ASTEXT(ST_UNION(ST_INTERSECTION(ST_GEOMFROMTEXT('MULTIPOINT(7 2,-4 -5,6 -9,-7 3,-10 5,8 -6,0 -10,10 -4,8 -10,2 6,8 -4,-8 2,-4 2)'),                                        ST_GEOMFROMTEXT('MULTIPOLYGON(((6 2,1 1,-4 5,1 4,-3 -4,-7 9,-10 2,-6 1,10 -7,0 1,9 4, 6 2)))')),                         ST_UNION(ST_GEOMFROMTEXT('LINESTRING(-1 -5,0 -6,4 6,3 3,2 8,-2 6,-4 5,6 -7,-1 -1,-8 6,4 -2)'),                                  ST_GEOMFROMTEXT('MULTIPOLYGON(((5 -4,-5 -9,-1 -6,-3 0,5 -2, 5 -4)),((-5 -10,-8 -2,-3 7,1 5,5 -10,1 -5,0 10,3 2,1 1, -5 -10)),((4 -2,6 3,7 5,1 2,8 -9,-10 -5,7 -10,-2 -9,-2 0,2 -8,-8 3,5 0, 4 -2)),((6 -4,0 4,-8 -2,10 -10,-6 5, 6 -4)))')))) as result;
do st_buffer(point(-5,0),8772,              st_buffer_strategy('point_circle',1024*1024*1024));
do st_union(cast(point(1,1)as char(12)),point(1,1));
do st_union(cast(point(1,1)as char(13)),point(1,1));
CALL mtr.add_suppression("Storage engine '.*' does not support system tables. \\[mysql.*\\]");
CALL mtr.add_suppression("Column count of mysql.* is wrong. "                          "Expected .*, found .*. "                          "The table is probably corrupted");
CALL mtr.add_suppression("Cannot load from mysql.*. The table is probably corrupted");
send ALTER USER u1@h, u2@h, u3@h PASSWORD EXPIRE INTERVAL 250 DAY;
CREATE PROCEDURE p1() SET PASSWORD FOR u1@h = '12345';
CREATE FUNCTION f1() RETURNS INT BEGIN   SET PASSWORD FOR u1@h = '12345';   RETURN 0; END; $
call mtr.add_suppression("Did not write failed .*");
call mtr.add_suppression("REVOKE/GRANT failed .* An incident event has been written to the binary log which will stop the slaves.");
CREATE PROCEDURE p1() SET @a :=1;
CREATE USER user1@;
GRANT UPDATE (a) ON t1 TO user1@;
DROP USER user1@;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
CALL mtr.add_suppression(".*Out of memory *");
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u2@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
SHOW GRANTS FOR u1@h;
RENAME TABLE mysql.user TO mysql.user_bak;
RENAME TABLE mysql.db TO mysql.db_bak;
RENAME TABLE mysql.columns_priv TO mysql.columns_priv_bak;
RENAME TABLE mysql.procs_priv TO mysql.procs_priv_bak;
RENAME TABLE mysql.proxies_priv TO mysql.proxies_priv_bak;
RENAME TABLE mysql.tables_priv TO mysql.tables_priv_bak;
RENAME TABLE mysql.user_bak TO mysql.user;
RENAME TABLE mysql.db_bak TO mysql.db;
RENAME TABLE mysql.columns_priv_bak TO mysql.columns_priv;
RENAME TABLE mysql.procs_priv_bak TO mysql.procs_priv;
RENAME TABLE mysql.proxies_priv_bak TO mysql.proxies_priv;
RENAME TABLE mysql.tables_priv_bak TO mysql.tables_priv;
RENAME TABLE mysql.user TO mysql.user_bak;
RENAME TABLE mysql.db TO mysql.db_bak;
RENAME TABLE mysql.columns_priv TO mysql.columns_priv_bak;
RENAME TABLE mysql.procs_priv TO mysql.procs_priv_bak;
RENAME TABLE mysql.proxies_priv TO mysql.proxies_priv_bak;
RENAME TABLE mysql.tables_priv TO mysql.tables_priv_bak;
call mtr.add_suppression("mysql.user has no `Event_priv` column at position 28");
RENAME TABLE mysql.user_bak TO mysql.user;
RENAME TABLE mysql.db_bak TO mysql.db;
RENAME TABLE mysql.columns_priv_bak TO mysql.columns_priv;
RENAME TABLE mysql.procs_priv_bak TO mysql.procs_priv;
RENAME TABLE mysql.proxies_priv_bak TO mysql.proxies_priv;
RENAME TABLE mysql.tables_priv_bak TO mysql.tables_priv;
WHERE state = 'Waiting for table metadata lock' AND       info = 'GRANT ALL ON t1 TO \'u1\'';
connect (ssl_compress_con,localhost,root,,,,,SSL COMPRESS);
disconnect ssl_compress_con;
CREATE PROCEDURE p1() BEGIN   CREATE TABLE t6(c1 INT) ENGINE= MyISAM;
END / DELIMITER ;/ CALL p1();
query_attributes a b;
query_attributes a b c d;
query_attributes 'a' "b c";
query_attributes '' 'a';
write_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
query_attributes a b;
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql;
remove_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
write_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
query_attributes a b;
query_attributes a c;
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql;
remove_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
write_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
query_attributes a;
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql;
remove_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
write_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
query_attributes a b c d;
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql;
remove_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
write_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
query_attributes 'a' 'b c';
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql;
remove_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
write_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
query_attributes 'a' 'b c';
resetconnection;
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql;
remove_file $MYSQLTEST_VARDIR/tmp/wl12542.sql;
query_attributes 'a' 'b c';
reset_connection;
connect (applier_thread,127.0.0.1,root,,test,,);
connect (xa_commit_thread,127.0.0.1,root,,test,,);
create procedure p_verify_reprepare_count(expected int) begin   declare old_reprepare_count int default @reprepare_count;   select variable_value from   performance_schema.session_status where   variable_name='com_stmt_reprepare'   into @reprepare_count;   if old_reprepare_count + expected <> @reprepare_count then     select concat("Expected: ", expected,                    ", actual: ", @reprepare_count - old_reprepare_count)     as "ERROR";   else     select '' as "SUCCESS";   end if; end|
prepare stmt from "repair table t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
prepare stmt from "analyze table t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
prepare stmt from "optimize table t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
CALL mtr.add_suppression("Out of sort memory");
connect (con1, localhost, root);
connect (con2, localhost, root);
KILL @id;
disconnect con1;
disconnect con2;
INSERT INTO t1 VALUES (REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), 1, REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096));
INSERT INTO t1 VALUES (REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), 2, REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096));
INSERT INTO t1 VALUES (REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), 3, REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096), REPEAT('x', 4096));
CALL mtr.add_suppression("Out of sort memory");
1 2 3 SELECT * FROM b12688860_db.b12688860_tab;
connect(con1, localhost, root,,);
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
disconnect con1;
PREPARE stmt1 FROM "SELECT *, SLEEP(0.5) FROM t1 WHERE b= 'new_string'";
PREPARE stmt2 FROM "SELECT /*+ MAX_EXECUTION_TIME(2) */ *, SLEEP(0.5) FROM t1 WHERE b= 'new_string'";
PREPARE stmt3 FROM "SELECT /*+ MAX_EXECUTION_TIME(3600000) */ count(*) FROM t1";
EXECUTE stmt1;
EXECUTE stmt2;
EXECUTE stmt3;
DEALLOCATE PREPARE stmt1;
DEALLOCATE PREPARE stmt2;
DEALLOCATE PREPARE stmt3;
CREATE FUNCTION f1() RETURNS INT BEGIN   SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1.5) INTO @a;
RETURN 1;
END| DROP FUNCTION f1| CREATE FUNCTION f1() RETURNS INT BEGIN   SELECT SLEEP(3) INTO @a;
RETURN 1;
END| CREATE FUNCTION f2() RETURNS INT BEGIN   INSERT INTO t2 SELECT * FROM t2;
RETURN 1;
END| DELIMITER ;| INSERT INTO t2 VALUES (1, 'string1', 'string2');
CREATE PROCEDURE p1() BEGIN   SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1.5);
END| DROP PROCEDURE p1| CREATE PROCEDURE p1() BEGIN   INSERT INTO t2 SELECT DISTINCT * FROM t2;
END| DELIMITER ;| CALL p1();
CREATE EVENT event1 ON SCHEDULE AT CURRENT_TIMESTAMP DO BEGIN   SELECT SLEEP(2) into @a;   SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(2) into @b;   INSERT INTO t2 VALUES(@a, @b); END|
CREATE TABLE t3 (f1 int)|
CREATE TRIGGER t1_before_trigger BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SELECT SLEEP(2) into @a;   SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(2) into @b;   INSERT INTO t3 VALUES(@a);   INSERT INTO t3 VALUES(@b); END|
DROP TRIGGER t1_before_trigger|
CREATE TRIGGER t1_before_trigger BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SELECT SLEEP(2) into @a;   INSERT INTO t3 VALUES(@a); END |
connect(con1, localhost, root,,);
disconnect con1;
select sum(col1) as co12 from t1 group by col2 having col2 10;  select sum(col1) as co2, count(col2) as cc from t1 group by col1 having col1 =10;  select t2.col2 from t2 group by t2.col1, t2.col2 having t1.col1 <= 10;
CREATE FUNCTION next_seq_value() RETURNS INT BEGIN  DECLARE next_val INT;
SELECT val INTO next_val FROM series;
RETURN next_val;
END;
| DELIMITER ;| CREATE TABLE t1 (t INT, u INT, KEY(t));
PREPARE STMT FROM 'SELECT t, next_seq_value() r FROM t1 FORCE INDEX(t)               GROUP BY t HAVING (SELECT 1 FROM t1 WHERE r = 1 LIMIT 1)               ORDER BY t1.u';
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SELECT 1 HAVING json_objectagg(utc_date(), 1416) <> 0;
connect (connection_for_table_check,127.0.0.1,root,,test,$MASTER_MYPORT);
LOCK TABLE t2 read;
UNLOCK TABLES;
source include/compare_digests.inc;
source include/compare_digests.inc;
select !0,NOT 0=1,!(0=0),1 AND 1,1 && 0,0 OR 1,1 || NULL, 1=1 or 1=1 and 1=0;
select 2 between 1 and 3, "monty" between "max" and "my",2=2 and "monty" between "max" and "my" and 3=3;
select 'b' between 'a' and 'c', 'B' between 'a' and 'c';
select 2 in (3,2,5,9,5,1),"monty" in ("david","monty","allan"), 1.2 in (1.4,1.2,1.0);
select 5 between 0 and 10 between 0 and 1,(5 between 0 and 10) between 0 and 1;
CREATE TABLE t2 AS SELECT COALESCE(5, -5) AS c1,        COALESCE(5, 5.5) AS c2,        COALESCE(5, 5.5e5) AS c3,        COALESCE(5, '5') AS c4,        COALESCE(20010101, date '2005-05-05') AS c5,        COALESCE(010101, time '05:05:05.555555') AS c6,        COALESCE(010101, timestamp '2005-05-05 05:05:05.555555') AS c7,        COALESCE(20010101, NOW(0)) AS c8,        COALESCE(5.55, 88.8) AS c11,        COALESCE(5.5, 5.5e5) AS c12,        COALESCE(5.5, '5') AS c13,        COALESCE(010101.5, date '2005-05-05') AS c14,        COALESCE(5.5, time '05:05:05.555555') AS c15,        COALESCE(010101.5, timestamp '2005-05-05 05:05:05.555555') AS c16,        COALESCE(5.5e5, '5') AS c21,        COALESCE(2004041e1, date '2005-05-05') AS c22,        COALESCE(150505.0e5, time '05:05:05.555555') AS c23,        COALESCE(2004041e1, timestamp '2005-05-05 05:05:05.555555') AS c24,        COALESCE('010101', date '2005-05-05') AS c31,        COALESCE('5', time '05:05:05.555555') AS c32,        COALESCE('010101', timestamp '2005-05-05 05:05:05.555555') AS c33,        COALESCE(date '2005-05-05', time '05:05:05.555555') AS c41,        COALESCE(date '2005-05-05', timestamp '2005-05-05 05:05:05.555555') AS c42,        COALESCE(time '05:05:05.555555', timestamp '2005-05-05 05:05:05.555555') AS c51,        COALESCE(x'c3a5', '1') AS c61,        COALESCE(x'c3a5', _binary '1') AS c62,        COALESCE(_utf8mb4 x'c3a5', '1') AS c63,        COALESCE(_utf8mb4 x'c3a5', _binary '1') AS c64,        COALESCE(JSON_OBJECT('a', 1), NULL) AS c71;
CREATE TABLE t3 AS SELECT GREATEST(5, -5) AS c1,        GREATEST(5, 5.5) AS c2,        GREATEST(5, 5.5e5) AS c3,        GREATEST(5, '5') AS c4,        GREATEST(20010101, date '2005-05-05') AS c5,        GREATEST(010101, time '05:05:05.555555') AS c6,        GREATEST(010101, timestamp '2005-05-05 05:05:05.555555') AS c7,        GREATEST(20010101, NOW(0)) AS c8,        GREATEST(5.55, 88.8) AS c11,        GREATEST(5.5, 5.5e5) AS c12,        GREATEST(5.5, '5') AS c13,        GREATEST(010101.5, date '2005-05-05') AS c14,        GREATEST(5.5, time '05:05:05.555555') AS c15,        GREATEST(010101.5, timestamp '2005-05-05 05:05:05.555555') AS c16,        GREATEST(5.5e5, '5') AS c21,        GREATEST(2004041e1, date '2005-05-05') AS c22,        GREATEST(150505.0e5, time '05:05:05.555555') AS c23,        GREATEST(2004041e1, timestamp '2005-05-05 05:05:05.555555') AS c24,        GREATEST('010101', date '2005-05-05') AS c31,        GREATEST('5', time '05:05:05.555555') AS c32,        GREATEST('010101', timestamp '2005-05-05 05:05:05.555555') AS c33,        GREATEST(date '2005-05-05', time '05:05:05.555555') AS c41,        GREATEST(date '2005-05-05', timestamp '2005-05-05 05:05:05.555555') AS c42,        GREATEST(time '05:05:05.555555', timestamp '2005-05-05 05:05:05.555555') AS c51,        GREATEST(x'c3a5', '1') AS c61,        GREATEST(x'c3a5', _binary '1') AS c62,        GREATEST(_utf8mb4 x'c3a5', '1') AS c63,        GREATEST(_utf8mb4 x'c3a5', _binary '1') AS c64;
SET @a:='11';
DO GREATEST(RIGHT(@a,1),1);
DO LEAST(RIGHT(@a,1),1);
DO NULLIF((GREATEST(FROM_UNIXTIME(1537024679) , _utf32 "*b!" )),           (FROM_UNIXTIME(1537013301) ) 	 );
while (!$json_planet_done) { }   ["Afghanistan", "Bangladesh", "Cambodia"],   ["Albania", "Belgium", "Cyprus"],   ["Argentina", "Bolivia", "Colombia"],   ["Angola", "Burundi", "Cameroon"] ];
while (!$json_continent_done) {   while (!$json_country_done) {   } }   {     "author": "Kerstin Ekman",     "title": "Grand final i skojarbranschen"   },   {     "author": "Bjarne Stroustrup",     "title": "The C++ Programming Language"   },   {     "author": "Pelle Holmberg and Hans Marklund",     "title": "Nya svampboken"   } ];
while (!$json_book_done) { }   {     "name": "Apple",     "fruit_color": "red",     "flower_color": "white"   },   {     "name": "Tussilago",     "flower_color": "yellow"   },   {     "name": "Chanterelle",     "fruit_color": "yellow"   } ];
while (!$json_plant_done) {   if ($fruit_color) {   }   if (!$fruit_color) {   }   if ($flower_color) {   }   if (!$flower_color) {   } }   { "species": "ant", "color": "brown", "legs": 6 },   { "species": "bear", "color": "black" },   { "species": "cat", "color": "orange" } ];
while (!$json_animal_done) { }   "first": "Ain't Talkin'",   "second": "Don't Think Twice, It's All Right",   "third": "It Ain't Me, Babe",   "fourth": "Rollin' and Tumblin'",   "fifth": "Where are you?" };
INSERT INTO t1 VALUES ( 2, REPEAT('-', 1048576) );
INSERT INTO t1 VALUES ( 1, REPEAT('x', 1048576) );
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (-1),(0),(1),(2),(3),(4),(5),(6),(7),(8);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (-1),(0),(1),(2),(3),(4),(5),(6),(7),(8);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (-1),(0),(1),(2),(3),(4),(5),(6),(7);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES ('0000-00-00'), ('0000-01-02'), ('0001-01-01'),       ('1001-00-00'), ('1001-01-01'), ('1002-00-00'), ('2001-01-01');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES ('0000-00-00'), ('0000-01-02'), ('0001-01-01'),       ('1001-00-00'), ('1001-01-01'), ('1002-00-00'), ('2001-01-01');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES ('0000-00-00'), ('0000-01-02'), ('0001-01-01'),       ('1001-00-00'), ('1001-01-01'), ('1002-00-00'), ('2001-01-01');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (1, '2009-01-01'), (1, '2009-04-01'), (2, '2009-04-01'),   (1, '2009-04-02'), (2, '2009-04-02'), (1, '2009-04-02 23:59:59'),   (1, '2009-04-03'), (2, '2009-04-03'), (1, '2009-04-04'), (2, '2009-04-04'),   (1, '2009-04-05'), (1, '2009-04-06'), (1, '2009-04-07');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (1, '2009-01-01'), (1, '2009-04-01'), (2, '2009-04-01'),   (1, '2009-04-02'), (2, '2009-04-02'), (1, '2009-04-03'), (2, '2009-04-03'),   (1, '2009-04-04'), (2, '2009-04-04'), (1, '2009-04-05'), (1, '2009-04-06'),   (1, '2009-04-07');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (1, '2009-01-01'), (1, '2009-04-01'), (2, '2009-04-01'),   (1, '2009-04-02'), (2, '2009-04-02'), (1, '2009-04-02 23:59:59'),   (1, '2009-04-03'), (2, '2009-04-03'), (1, '2009-04-04'), (2, '2009-04-04'),   (1, '2009-04-05'), (1, '2009-04-06'), (1, '2009-04-07');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (1, '2009-01-01'), (1, '2009-04-01'), (2, '2009-04-01'),   (1, '2009-04-02'), (2, '2009-04-02'), (1, '2009-04-03'), (2, '2009-04-03'),   (1, '2009-04-04'), (2, '2009-04-04'), (1, '2009-04-05'), (1, '2009-04-06'),   (1, '2009-04-07');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES (1, '2009-01-01'), (2, NULL);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} SELECT a,b FROM t1 WHERE b >= '2008-12-01' AND b < '2009-12-00';
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1),(2),(3);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1),(2),(3);
if ($verify_without_partitions) { ALTER TABLE t2 REMOVE PARTITIONING;
} insert into t2 values (1,1),(2,2),(3,3);
if ($verify_without_partitions) { ALTER TABLE t3 REMOVE PARTITIONING;
} insert into t3 values (5),(15);
if ($verify_without_partitions) { ALTER TABLE t4 REMOVE PARTITIONING;
} insert into t4 values (10,2), (10,4);
if ($verify_without_partitions) { ALTER TABLE t5 REMOVE PARTITIONING;
} insert into t5 values (10,2,0,0), (10,4,0,0), (10,2,0,1), (10,4,0,1);
if ($verify_without_partitions) { ALTER TABLE t6 REMOVE PARTITIONING;
} insert into t6 values (1),(3),(5);
if ($verify_without_partitions) { ALTER TABLE t6 REMOVE PARTITIONING;
} insert into t6 values (1),(3),(5);
if ($verify_without_partitions) { ALTER TABLE t7 REMOVE PARTITIONING;
} insert into t7 values (10),(30),(50);
if ($verify_without_partitions) { ALTER TABLE t7 REMOVE PARTITIONING;
} insert into t7 values (10),(30),(50);
if ($verify_without_partitions) { ALTER TABLE t8 REMOVE PARTITIONING;
} insert into t8 values ('1985-05-05'),('1995-05-05');
create table t9 (a date not null) partition by RANGE(TO_DAYS(a)) (   partition p0 values less than (732299), -- 2004-12-19   partition p1 values less than (732468), -- 2005-06-06   partition p2 values less than (732664)  -- 2005-12-19 );
if ($verify_without_partitions) { ALTER TABLE t9 REMOVE PARTITIONING;
} insert into t9 values ('2005-05-05'), ('2005-04-04');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1),(2),(3);
if ($verify_without_partitions) { ALTER TABLE t3 REMOVE PARTITIONING;
} insert into t3 values (1,1),(2,2),(3,3);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1),(2);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1,1),(2,2),(3,3),(4,4);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1),(2),(3);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1,1),(2,2),(3,3);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1),(1),(2),(2),(3),(4),(3),(4);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} CREATE TABLE `t3` (   `a` int(11) default NULL,   `b` int(11) default NULL );
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t2 select a,1 from t1 where a < 100;
if ($use_optimizer_trace) { SET @@optimizer_trace="enabled=on";
} if ($use_optimizer_trace) { SELECT * FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
} flush status;
if ($use_optimizer_trace) { SET @@optimizer_trace="enabled=on";
} if ($use_optimizer_trace) { SELECT * FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
} flush status;
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (9, 9), (8, 8), (7, 7), (6, 6), (5, 5),                       (4, 4), (3, 3), (2, 2), (1, 1);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 set f_int1 = null;
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1,1),(1,2),(1,3),(1,4),   (2,1),(2,2),(2,3),(2,4);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (1,1),(1,2),(1,3),(1,4),   (2,1),(2,2),(2,3),(2,4), (NULL,1);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (NULL), (0),(1),(2),(3),(4),(5),(6);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (0),(1),(null);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values ('na');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} select * from t1 where s1 = 0 or s1 is null;
if ($verify_without_partitions) { ALTER TABLE t2 REMOVE PARTITIONING;
} insert into t2 values (1,1),(2,2);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (5),(15),(105),(1005);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} create table t2 (a int)   partition by range(a+0) (   partition p0 values less than (64),   partition p1 values less than (128),   partition p2 values less than (255) );
if ($verify_without_partitions) { ALTER TABLE t2 REMOVE PARTITIONING;
} insert into t1 values (0x20), (0x20), (0x41), (0x41), (0xFE), (0xFE);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (9),(19),(0xFFFF0000FFFF000-1), (0xFFFF0000FFFFFFF-1);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} insert into t1 values (-15),(-5),(5),(15),(-15),(-5),(5),(15);
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES ('2007-03-01 12:00:00');
if ($verify_without_partitions) { ALTER TABLE t1 REMOVE PARTITIONING;
} INSERT INTO t1 VALUES ('2005-03-01 12:00:00');
if ($verify_without_partitions) { ALTER TABLE t0 REMOVE PARTITIONING;
} insert into t1 select A.a + 10*B.a from t0 A, t0 B;
connect (addconroot1, localhost, root,,);
connect (addconroot2, localhost, root,,);
connect (addconroot3, localhost, root,,);
set @a:=0;
set @a:=0;
set @a:=0;
create trigger t1_bi before insert on t1 for each row set @a:=1;
source include/show_binlog_events.inc;
disconnect addconroot1;
disconnect addconroot2;
disconnect addconroot3;
source include/show_binlog_events.inc;
while ($colnum) {   dec $colnum;
} ALTER TABLE t1 ADD COLUMN too_much int;
while ($colnum) {   dec $colnum;
} ALTER TABLE t1 ADD COLUMN too_much ENUM('a9999');
while ($colnum) {   dec $colnum;
} ALTER TABLE t1 ADD COLUMN too_much SET('a9999');
while ($elenum) {   dec $elenum;
} INSERT INTO t1 values ('a0'), ('a1'), ('a2');
while ($iter) {   dec $iter;
} DROP TABLE t1;
call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
dirty_close con1;
disconnect con2;
connect(con1, localhost, root,,);
dirty_close con1;
connect(con1, localhost, root,,);
disconnect con1;
drop procedure if exists `empty`|
create procedure `empty`() begin end|
call `empty`()|
drop procedure `empty`|
drop procedure if exists scope|
create procedure scope(a int, b float) begin   declare b int;   declare c float;   begin     declare c int;   end; end|
drop procedure scope|
drop procedure if exists two|
create procedure two(x1 char(16), x2 char(16), y int) begin   insert into test.t1 values (x1, y);   insert into test.t1 values (x2, y); end|
call two("one", "two", 3)|
select * from t1|
delete from t1|
drop procedure two|
drop procedure if exists locset|
create procedure locset(x char(16), y int) begin   declare z1, z2 int;   set z1 = y;   set z2 = z1+2;   insert into test.t1 values (x, z2); end|
call locset("locset", 19)|
select * from t1|
delete from t1|
drop procedure locset|
drop procedure if exists setcontext|
create procedure setcontext() begin   declare data int default 2;   insert into t1 (id, data) values ("foo", 1);   replace t1 set data = data, id = "bar";   update t1 set id = "kaka", data = 3 where t1.data = data; end|
call setcontext()|
select * from t1 order by data|
delete from t1|
drop procedure setcontext|
create table t3 ( d date, i int, f double, s varchar(32) )|
drop procedure if exists nullset|
create procedure nullset() begin   declare ld date;   declare li int;   declare lf double;   declare ls varchar(32);   set ld = null, li = null, lf = null, ls = null;   insert into t3 values (ld, li, lf, ls);   insert into t3 (i, f, s) values ((ld is null), 1,    "ld is null"),                                   ((li is null), 1,    "li is null"), 				  ((li = 0),     null, "li = 0"), 				  ((lf is null), 1,    "lf is null"), 				  ((lf = 0),     null, "lf = 0"), 				  ((ls is null), 1,    "ls is null"); end|
call nullset()|
select * from t3|
drop table t3|
drop procedure nullset|
drop procedure if exists mixset|
create procedure mixset(x char(16), y int) begin   declare z int;   set @z = y, z = 666;   insert into test.t1 values (x, z); end|
call mixset("mixset", 19)|
show variables like 'max_join_size'|
select id,data,@z from t1|
delete from t1|
drop procedure mixset|
drop procedure if exists zip|
create procedure zip(x char(16), y int) begin   declare z int;   call zap(y, z);   call bar(x, z); end|
drop procedure if exists zap|
create procedure zap(x int, out y int) begin   declare z int;   set z = x+1, y = z; end|
call zip("zip", 99)|
select * from t1|
delete from t1|
drop procedure zip|
drop procedure bar|
call zap(7, @zap)|
select @zap|
drop procedure zap|
drop procedure if exists c1|
create procedure c1(x int)   call c2("c", x)|
drop procedure if exists c2|
create procedure c2(s char(16), x int)   call c3(x, s)|
drop procedure if exists c3|
create procedure c3(x int, s char(16))   call c4("level", x, s)|
drop procedure if exists c4|
create procedure c4(l char(8), x int, s char(16))   insert into t1 values (concat(l,s), x)|
call c1(42)|
select * from t1|
delete from t1|
drop procedure c1|
drop procedure c2|
drop procedure c3|
drop procedure c4|
drop procedure if exists iotest|
create procedure iotest(x1 char(16), x2 char(16), y int) begin   call inc2(x2, y);   insert into test.t1 values (x1, y); end|
drop procedure if exists inc2|
create procedure inc2(x char(16), y int) begin   call inc(y);   insert into test.t1 values (x, y); end|
drop procedure if exists inc|
create procedure inc(inout io int)   set io = io + 1|
call iotest("io1", "io2", 1)|
select * from t1 order by data desc|
delete from t1|
drop procedure iotest|
drop procedure inc2|
drop procedure if exists incr|
create procedure incr(inout x int)   call inc(x)|
select @zap|
call incr(@zap)|
select @zap|
drop procedure inc|
drop procedure incr|
drop procedure if exists cbv1|
create procedure cbv1() begin   declare y int default 3;   call cbv2(y+1, y);   insert into test.t1 values ("cbv1", y); end|
drop procedure if exists cbv2|
create procedure cbv2(y1 int, inout y2 int) begin   set y2 = 4711;   insert into test.t1 values ("cbv2", y1); end|
call cbv1()|
select * from t1 order by data|
delete from t1|
drop procedure cbv1|
drop procedure cbv2|
insert into t2 values ("a", 1, 1.1), ("b", 2, 1.2), ("c", 3, 1.3)|
drop procedure if exists sub1|
create procedure sub1(id char(16), x int)   insert into test.t1 values (id, x)|
drop procedure if exists sub2|
create procedure sub2(id char(16)) begin   declare x int;   set x = (select sum(t.i) from test.t2 t);   insert into test.t1 values (id, x); end|
drop procedure if exists sub3|
create function sub3(i int) returns int deterministic   return i+1|
call sub1("sub1a", (select 7))|
call sub1("sub1b", (select max(i) from t2))|
call sub1("sub1c", (select i,d from t2 limit 1))|
call sub1("sub1d", (select 1 from (select 1) a))|
call sub2("sub2")|
select * from t1 order by id|
select sub3((select max(i) from t2))|
drop procedure sub1|
drop procedure sub2|
drop function sub3|
delete from t1|
delete from t2|
drop procedure if exists a0|
create procedure a0(x int) while x do   set x = x-1;   insert into test.t1 values ("a0", x); end while|
call a0(3)|
select * from t1 order by data desc|
delete from t1|
drop procedure a0|
drop procedure if exists a|
create procedure a(x int) while x > 0 do   set x = x-1;   insert into test.t1 values ("a", x); end while|
call a(3)|
select * from t1 order by data desc|
delete from t1|
drop procedure a|
drop procedure if exists b|
create procedure b(x int) repeat   insert into test.t1 values (repeat("b",3), x);   set x = x-1; until x = 0 end repeat|
call b(3)|
select * from t1 order by data desc|
delete from t1|
drop procedure b|
drop procedure if exists b2|
create procedure b2(x int) repeat   select 1 into outfile 'b2';   insert into test.t1 values (repeat("b2",3), x);   set x = x-1; until x = 0 end repeat|
drop procedure b2|
drop procedure if exists c|
create procedure c(x int) hmm: while x > 0 do   insert into test.t1 values ("c", x);   set x = x-1;   iterate hmm;   insert into test.t1 values ("x", x); end while hmm|
call c(3)|
select * from t1 order by data desc|
delete from t1|
drop procedure c|
drop procedure if exists d|
create procedure d(x int) hmm: while x > 0 do   insert into test.t1 values ("d", x);   set x = x-1;   leave hmm;   insert into test.t1 values ("x", x); end while|
call d(3)|
select * from t1|
delete from t1|
drop procedure d|
drop procedure if exists e|
create procedure e(x int) foo: loop   if x = 0 then     leave foo;   end if;   insert into test.t1 values ("e", x);   set x = x-1; end loop foo|
call e(3)|
select * from t1 order by data desc|
delete from t1|
drop procedure e|
drop procedure if exists f|
create procedure f(x int) if x < 0 then   insert into test.t1 values ("f", 0); elseif x = 0 then   insert into test.t1 values ("f", 1); else   insert into test.t1 values ("f", 2); end if|
call f(-2)|
call f(0)|
call f(4)|
select * from t1 order by data|
delete from t1|
drop procedure f|
drop procedure if exists g|
create procedure g(x int) case when x < 0 then   insert into test.t1 values ("g", 0); when x = 0 then   insert into test.t1 values ("g", 1); else   insert into test.t1 values ("g", 2); end case|
call g(-42)|
call g(0)|
call g(1)|
select * from t1 order by data|
delete from t1|
drop procedure g|
drop procedure if exists h|
create procedure h(x int) case x when 0 then   insert into test.t1 values ("h0", x); when 1 then   insert into test.t1 values ("h1", x); else   insert into test.t1 values ("h?", x); end case|
call h(0)|
call h(1)|
call h(17)|
select * from t1 order by data|
delete from t1|
drop procedure h|
drop procedure if exists i|
create procedure i(x int) foo: begin   if x = 0 then     leave foo;   end if;   insert into test.t1 values ("i", x); end foo|
call i(0)|
call i(3)|
select * from t1|
delete from t1|
drop procedure i|
insert into t1 values ("foo", 3), ("bar", 19)|
insert into t2 values ("x", 9, 4.1), ("y", -1, 19.2), ("z", 3, 2.2)|
drop procedure if exists sel1|
create procedure sel1() begin   select * from t1 order by data; end|
call sel1()|
drop procedure sel1|
drop procedure if exists sel2|
create procedure sel2() begin   select * from t1 order by data;   select * from t2 order by s; end|
call sel2()|
drop procedure sel2|
delete from t1|
delete from t2|
drop procedure if exists into_test|
create procedure into_test(x char(16), y int) begin   insert into test.t1 values (x, y);   select id,data into x,y from test.t1 limit 1;   insert into test.t1 values (concat(x, "2"), y+2); end|
call into_test("into", 100)|
select * from t1 order by data|
delete from t1|
drop procedure into_test|
drop procedure if exists into_tes2|
create procedure into_test2(x char(16), y int) begin   insert into test.t1 values (x, y);   select id,data into x,@z from test.t1 limit 1;   insert into test.t1 values (concat(x, "2"), y+2); end|
call into_test2("into", 100)|
select id,data,@z from t1 order by data|
delete from t1|
drop procedure into_test2|
drop procedure if exists into_test3|
create procedure into_test3() begin   declare x char(16);   declare y int;   select * into x,y from test.t1 limit 1;   insert into test.t2 values (x, y, 0.0); end|
insert into t1 values ("into3", 19)|
call into_test3()|
call into_test3()|
select * from t2|
delete from t1|
delete from t2|
drop procedure into_test3|
drop procedure if exists into_test4|
create procedure into_test4() begin   declare x int;   select data into x from test.t1 limit 1;   insert into test.t3 values ("into4", x); end|
delete from t1|
create table t3 ( s char(16), d int)|
call into_test4()|
select * from t3|
insert into t1 values ("i4", 77)|
call into_test4()|
select * from t3|
delete from t1|
drop table t3|
drop procedure into_test4|
drop procedure if exists into_outfile|
begin   insert into test.t1 values (x, y);   select * into outfile "$MYSQLTEST_VARDIR/tmp/spout" from test.t1;   insert into test.t1 values (concat(x, "2"), y+2); end|
call into_outfile("ofile", 1)|
delete from t1|
drop procedure into_outfile|
drop procedure if exists into_dumpfile|
begin   insert into test.t1 values (x, y);   select * into dumpfile "$MYSQLTEST_VARDIR/tmp/spdump" from test.t1 limit 1;   insert into test.t1 values (concat(x, "2"), y+2); end|
call into_dumpfile("dfile", 1)|
delete from t1|
drop procedure into_dumpfile|
drop procedure if exists create_select|
create procedure create_select(x char(16), y int) begin   insert into test.t1 values (x, y);   create temporary table test.t3 select * from test.t1;   insert into test.t3 values (concat(x, "2"), y+2); end|
call create_select("cs", 90)|
select * from t1, t3|
drop table t3|
delete from t1|
drop procedure create_select|
drop function if exists e|
create function e() returns double   return 2.7182818284590452354|
set @e = e()|
select e(), @e|
drop function if exists inc|
create function inc(i int) returns int   return i+1|
select inc(1), inc(99), inc(-71)|
drop function if exists mul|
create function mul(x int, y int) returns int   return x*y|
select mul(1,1), mul(3,5), mul(4711, 666)|
drop function if exists append|
create function append(s1 char(8), s2 char(8)) returns char(16)   return concat(s1, s2)|
select append("foo", "bar")|
drop function if exists fac|
create function fac(n int unsigned) returns bigint unsigned begin   declare f bigint unsigned default 1;   while n > 1 do     set f = f * n;     set n = n - 1;   end while;   return f; end|
select fac(1), fac(2), fac(5), fac(10)|
drop function if exists fun|
create function fun(d double, i int, u int unsigned) returns double   return mul(inc(i), fac(u)) / e()|
select fun(2.3, 3, 5)|
insert into t2 values (append("xxx", "yyy"), mul(4,3), e())|
insert into t2 values (append("a", "b"), mul(2,mul(3,4)), fun(1.7, 4, 6))|
select * from t2 where s = append("a", "b")|
select * from t2 where i = mul(4,3) or i = mul(mul(3,4),2) order by i|
select * from t2 where d = e()|
select * from t2 order by i|
delete from t2|
drop function e|
drop function inc|
drop function mul|
drop function append|
drop function fun|
drop procedure if exists hndlr1|
create procedure hndlr1(val int) begin   declare x int default 0;   declare foo condition for 1136;   declare bar condition for sqlstate '42S98';        # Just for testing syntax   declare zip condition for sqlstate value '42S99';  # Just for testing syntax   declare continue handler for foo set x = 1;   insert into test.t1 values ("hndlr1", val, 2);  # Too many values   if (x) then     insert into test.t1 values ("hndlr1", val);   # This instead then   end if; end|
call hndlr1(42)|
select * from t1|
delete from t1|
drop procedure hndlr1|
drop procedure if exists hndlr2|
create procedure hndlr2(val int) begin   declare x int default 0;   begin     declare exit handler for sqlstate '21S01' set x = 1;     insert into test.t1 values ("hndlr2", val, 2); # Too many values   end;   insert into test.t1 values ("hndlr2", x); end|
call hndlr2(42)|
select * from t1|
delete from t1|
drop procedure hndlr2|
drop procedure if exists hndlr3|
create procedure hndlr3(val int) begin   declare x int default 0;   declare continue handler for sqlexception        # Any error   begin     declare z int;     set z = 2 * val;     set x = 1;   end;   if val < 10 then     begin       declare y int;       set y = val + 10;       insert into test.t1 values ("hndlr3", y, 2);  # Too many values       if x then         insert into test.t1 values ("hndlr3", y);       end if;     end;   end if; end|
call hndlr3(3)|
select * from t1|
delete from t1|
drop procedure hndlr3|
create table t3 ( id   char(16), data int )|
drop procedure if exists hndlr4|
create procedure hndlr4() begin   declare x int default 0;   declare val int;	                           # No default   declare continue handler for sqlstate '02000' set x=1;   select data into val from test.t3 where id='z' limit 1;  # No hits   insert into test.t3 values ('z', val); end|
call hndlr4()|
select * from t3|
drop table t3|
drop procedure hndlr4|
drop procedure if exists cur1|
create procedure cur1() begin   declare a char(16);   declare b int;   declare c double;   declare done int default 0;   declare c cursor for select * from test.t2;   declare continue handler for sqlstate '02000' set done = 1;   open c;   repeat     fetch c into a, b, c;     if not done then        insert into test.t1 values (a, b+c);     end if;   until done end repeat;   close c; end|
insert into t2 values ("foo", 42, -1.9), ("bar", 3, 12.1), ("zap", 666, -3.14)|
call cur1()|
select * from t1|
drop procedure cur1|
create table t3 ( s char(16), i int )|
drop procedure if exists cur2|
create procedure cur2() begin   declare done int default 0;   declare c1 cursor for select id,data from test.t1 order by id,data;   declare c2 cursor for select i from test.t2 order by i;   declare continue handler for sqlstate '02000' set done = 1;   open c1;   open c2;   repeat   begin     declare a char(16);     declare b,c int;     fetch from c1 into a, b;     fetch next from c2 into c;     if not done then       if b < c then         insert into test.t3 values (a, b);       else         insert into test.t3 values (a, c);       end if;     end if;   end;   until done end repeat;   close c1;   close c2; end|
call cur2()|
select * from t3 order by i,s|
delete from t1|
delete from t2|
drop table t3|
drop procedure cur2|
drop procedure if exists chistics|
create procedure chistics()     language sql     modifies sql data     not deterministic     sql security definer     comment 'Characteristics procedure test'   insert into t1 values ("chistics", 1)|
show create procedure chistics|
call chistics()|
select * from t1|
delete from t1|
alter procedure chistics sql security invoker|
show create procedure chistics|
drop procedure chistics|
drop function if exists chistics|
create function chistics() returns int     language sql     deterministic     sql security invoker     comment 'Characteristics procedure test'   return 42|
show create function chistics|
select chistics()|
alter function chistics    no sql    comment 'Characteristics function test'|
show create function chistics|
drop function chistics|
insert into t1 values ("foo", 1), ("bar", 2), ("zip", 3)|
set @@sql_mode = 'ANSI'|
create procedure modes(out c1 int, out c2 int) begin   declare done int default 0;   declare x int;   declare c cursor for select data from t1;   declare continue handler for sqlstate '02000' set done = 1;   select 1 || 2 into c1;   set c2 = 0;   open c;   repeat     fetch c into x;     if not done then       set c2 = c2 + 1;     end if;   until done end repeat;   close c; end$
set @@sql_mode = ''|
set sql_select_limit = 1|
call modes(@c1, @c2)|
set sql_select_limit = default|
select @c1, @c2|
delete from t1|
drop procedure modes|
create database sp_db1|
drop database sp_db1|
create database sp_db2|
use sp_db2|
create table t3 ( s char(4), t int )|
insert into t3 values ("abcd", 42), ("dcba", 666)|
use test|
drop database sp_db2|
create database sp_db3|
use sp_db3|
drop procedure if exists dummy|
create procedure dummy(out x int)   set x = 42|
use test|
drop database sp_db3|
select routine_type, routine_schema, routine_name from information_schema.routines where routine_schema = 'sp_db3'|
drop procedure if exists rc|
create procedure rc() begin   delete from t1;   insert into t1 values ("a", 1), ("b", 2), ("c", 3); end|
call rc()|
select row_count()|
delete from t1|
select row_count()|
delete from t1|
select row_count()|
select * from t1|
select row_count()|
drop procedure rc|
drop function if exists f0|
drop function if exists f1|
drop function if exists f2|
drop function if exists f3|
drop function if exists f4|
drop function if exists f5|
drop function if exists f6|
drop function if exists f7|
drop function if exists f8|
drop function if exists f9|
drop function if exists f10|
drop function if exists f11|
drop function if exists f12_1|
drop function if exists f12_2|
drop view if exists v0|
drop view if exists v1|
drop view if exists v2|
delete from t1|
delete from t2|
insert into t1 values ("a", 1), ("b", 2) |
insert into t2 values ("a", 1, 1.0), ("b", 2, 2.0), ("c", 3, 3.0) |
create function f1() returns int   return (select sum(data) from t1)|
select f1()|
select id, f1() from t1 order by id|
create function f2() returns int   return (select data from t1 where data <= (select sum(data) from t1) order by data limit 1)|
select f2()|
select id, f2() from t1 order by id|
create function f3() returns int begin   declare n int;   declare m int;   set n:= (select min(data) from t1);   set m:= (select max(data) from t1);   return n < m; end|
select f3()|
select id, f3() from t1 order by id|
select f1(), f3()|
select id, f1(), f3() from t1 order by id|
create function f4() returns double    return (select d from t1, t2 where t1.data = t2.i and t1.id= "b")|
select f4()|
select s, f4() from t2 order by s|
create function f5(i int) returns int begin   if i <= 0 then     return 0;   elseif i = 1  then     return (select count(*) from t1 where data = i);   else     return (select count(*) + f5( i - 1) from t1 where data = i);   end if; end|
select f5(1)|
select f5(2)|
select f5(3)|
create function f6() returns int begin   declare n int;   set n:= f1();   return (select count(*) from t1 where data <= f7() and data <= n); end|
create function f7() returns int   return (select sum(data) from t1 where data <= f1())|
select f6()|
select id, f6() from t1 order by id|
create view v1 (a) as select f1()|
select * from v1|
select id, a from t1, v1 order by id|
select * from v1, v1 as v|
create view v2 (a) as select a*10 from v1|
select * from v2|
select id, a from t1, v2 order by id|
select * from v1, v2|
create function f8 () returns int   return (select count(*) from v2)|
select *, f8() from v1|
drop function f1|
select * from v1|
create function f1() returns int   return (select sum(data) from t1) + (select sum(a) from v1)|
select f1()|
select * from v1|
select * from v2|
drop function f1|
create function f1() returns int   return (select sum(data) from t1)|
create function f0() returns int   return (select * from (select 100) as r)|
select f0()|
select *, f0() from (select 1) as t|
create view v0 as select f0()|
select * from v0|
select *, f0() from v0|
lock tables t1 read, t1 as t11 read|
select f3()|
select id, f3() from t1 as t11 order by id|
select f0()|
select * from v0|
select *, f0() from v0, (select 123) as d1|
select id, f3() from t1|
select f4()|
unlock tables|
create function f9() returns int begin   declare a, b int;   drop temporary table if exists t3;   create temporary table t3 (id int);   insert into t3 values (1), (2), (3);   set a:= (select count(*) from t3);   set b:= (select count(*) from t3 t3_alias);   return a + b; end|
select f9()|
select f9() from t1 limit 1|
create function f10() returns int begin   drop temporary table if exists t3;   create temporary table t3 (id int);   insert into t3 select id from t4;   return (select count(*) from t3); end|
select f10()|
create table t4 as select 1 as id|
select f10()|
create function f11() returns int begin   drop temporary table if exists t3;   create temporary table t3 (id int);   insert into t3 values (1), (2), (3);   return (select count(*) from t3 as a, t3 as b); end|
select f11()|
select f11() from t1|
create function f12_1() returns int begin   drop temporary table if exists t3;   create temporary table t3 (id int);   insert into t3 values (1), (2), (3);   return f12_2(); end|
create function f12_2() returns int   return (select count(*) from t3)|
drop temporary table t3|
select f12_1()|
select f12_1() from t1 limit 1|
drop function f0|
drop function f1|
drop function f2|
drop function f3|
drop function f4|
drop function f5|
drop function f6|
drop function f7|
drop function f8|
drop function f9|
drop function f10|
drop function f11|
drop function f12_1|
drop function f12_2|
drop view v0|
drop view v1|
drop view v2|
truncate table t1 |
truncate table t2 |
drop table t4|
drop table if exists t3|
create table t3 (n int unsigned not null primary key, f bigint unsigned)|
drop procedure if exists ifac|
create procedure ifac(n int unsigned) begin   declare i int unsigned default 1;   if n > 20 then     set n = 20;		# bigint overflow otherwise   end if;   while i <= n do     begin       insert into test.t3 values (i, fac(i));       set i = i + 1;     end;   end while; end|
call ifac(20)|
select * from t3|
drop table t3|
show function status like '%fac'|
drop procedure ifac|
drop function fac|
show function status like '%fac'|
drop table if exists t3|
create table t3 (   i int unsigned not null primary key,   p bigint unsigned not null )|
insert into t3 values  ( 0,   3), ( 1,   5), ( 2,   7), ( 3,  11), ( 4,  13),  ( 5,  17), ( 6,  19), ( 7,  23), ( 8,  29), ( 9,  31),  (10,  37), (11,  41), (12,  43), (13,  47), (14,  53),  (15,  59), (16,  61), (17,  67), (18,  71), (19,  73),  (20,  79), (21,  83), (22,  89), (23,  97), (24, 101),  (25, 103), (26, 107), (27, 109), (28, 113), (29, 127),  (30, 131), (31, 137), (32, 139), (33, 149), (34, 151),  (35, 157), (36, 163), (37, 167), (38, 173), (39, 179),  (40, 181), (41, 191), (42, 193), (43, 197), (44, 199)|
drop procedure if exists opp|
create procedure opp(n bigint unsigned, out pp bool) begin   declare r double;   declare b, s bigint unsigned default 0;   set r = sqrt(n);  again:   loop     if s = 45 then       set b = b+200, s = 0;     else       begin         declare p bigint unsigned;         select t.p into p from test.t3 t where t.i = s;         if b+p > r then           set pp = 1;           leave again;         end if;         if mod(n, b+p) = 0 then           set pp = 0;           leave again;         end if;         set s = s+1;       end;     end if;   end loop; end|
drop procedure if exists ip|
create procedure ip(m int unsigned) begin   declare p bigint unsigned;   declare i int unsigned;   set i=45, p=201;   while i < m do     begin       declare pp bool default 0;       call opp(p, pp);       if pp then         insert into test.t3 values (i, p);         set i = i+1;       end if;       set p = p+2;     end;   end while; end|
show create procedure opp|
show procedure status where name like '%p%' and db='test'|
call ip(200)|
select * from t3 where i=45 or i=100 or i=199|
drop table t3|
drop procedure opp|
drop procedure ip|
show procedure status where name like '%p%' and db='test'|
drop procedure if exists bar|
create procedure bar(x char(16), y int)  comment "111111111111" sql security invoker  insert into test.t1 values (x, y)|
show procedure status like 'bar'|
alter procedure bar comment "2222222222" sql security definer|
alter procedure bar comment "3333333333"|
alter procedure bar|
show create procedure bar|
show procedure status like 'bar'|
drop procedure bar|
drop procedure if exists p1|
create procedure p1 ()   select (select s1 from t3) from t3|
create table t3 (s1 int)|
call p1()|
insert into t3 values (1)|
call p1()|
drop procedure p1|
drop table t3|
drop function if exists foo|
create function `foo` () returns int   return 5|
select `foo` ()|
drop function `foo`|
drop function if exists t1max|
create function t1max() returns int begin   declare x int;   select max(data) into x from t1;   return x; end|
insert into t1 values ("foo", 3), ("bar", 2), ("zip", 5), ("zap", 1)|
select t1max()|
drop function t1max|
create table t3 (   v char(16) not null primary key,   c int unsigned not null )|
create function getcount(s char(16)) returns int begin   declare x int;   select count(*) into x from t3 where v = s;   if x = 0 then     insert into t3 values (s, 1);   else     update t3 set c = c+1 where v = s;   end if;   return x; end|
select * from t1 where data = getcount("bar")|
select * from t3|
select getcount("zip")|
select getcount("zip")|
select * from t3|
select getcount(id) from t1 where data = 3|
select getcount(id) from t1 where data = 5|
select * from t3|
drop table t3|
drop function getcount|
drop table if exists t3|
drop procedure if exists h_ee|
drop procedure if exists h_es|
drop procedure if exists h_en|
drop procedure if exists h_ew|
drop procedure if exists h_ex|
drop procedure if exists h_se|
drop procedure if exists h_ss|
drop procedure if exists h_sn|
drop procedure if exists h_sw|
drop procedure if exists h_sx|
drop procedure if exists h_ne|
drop procedure if exists h_ns|
drop procedure if exists h_nn|
drop procedure if exists h_we|
drop procedure if exists h_ws|
drop procedure if exists h_ww|
drop procedure if exists h_xe|
drop procedure if exists h_xs|
drop procedure if exists h_xx|
create table t3 (a smallint primary key)|
insert into t3 (a) values (1)|
create procedure h_ee()     deterministic begin   declare continue handler for 1062 -- ER_DUP_ENTRY     select 'Outer (bad)' as 'h_ee';   begin     declare continue handler for 1062 -- ER_DUP_ENTRY         select 'Inner (good)' as 'h_ee';     insert into t3 values (1);   end; end|
create procedure h_es()     deterministic begin   declare continue handler for 1062 -- ER_DUP_ENTRY     select 'Outer (bad)' as 'h_es';   begin     declare continue handler for sqlstate '23000'       select 'Inner (good)' as 'h_es';     insert into t3 values (1);   end; end|
create procedure h_en()     deterministic begin   declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA     select 'Outer (bad)' as 'h_en';   begin     declare x int;     declare continue handler for sqlstate '02000' -- no data       select 'Inner (good)' as 'h_en';     select a into x from t3 where a = 42;   end; end|
create procedure h_ew()     deterministic begin   declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE     select 'Outer (bad)' as 'h_ew';   begin     declare continue handler for sqlwarning       select 'Inner (good)' as 'h_ew';     insert into t3 values (123456789012);   end;   delete from t3;   insert into t3 values (1); end|
create procedure h_ex()     deterministic begin   declare continue handler for 1062 -- ER_DUP_ENTRY     select 'Outer (bad)' as 'h_ex';   begin     declare continue handler for sqlexception       select 'Inner (good)' as 'h_ex';     insert into t3 values (1);   end; end|
create procedure h_se()     deterministic begin   declare continue handler for sqlstate '23000'      select 'Outer (bad)' as 'h_se';   begin     declare continue handler for 1062 -- ER_DUP_ENTRY       select 'Inner (good)' as 'h_se';     insert into t3 values (1);   end; end|
create procedure h_ss()     deterministic begin   declare continue handler for sqlstate '23000'      select 'Outer (bad)' as 'h_ss';   begin     declare continue handler for sqlstate '23000'        select 'Inner (good)' as 'h_ss';     insert into t3 values (1);   end; end|
create procedure h_sn()     deterministic begin   declare continue handler for sqlstate '02000' -- no data     select 'Outer (bad)' as 'h_sn';   begin     declare x int;     declare continue handler for not found       select 'Inner (good)' as 'h_sn';     select a into x from t3 where a = 42;   end; end|
create procedure h_sw()     deterministic begin   declare continue handler for sqlstate '22003'     select 'Outer (bad)' as 'h_sw';   begin     declare continue handler for sqlwarning       select 'Inner (good)' as 'h_sw';     insert into t3 values (123456789012);   end;   delete from t3;   insert into t3 values (1); end|
create procedure h_sx()     deterministic begin   declare continue handler for sqlstate '23000'      select 'Outer (bad)' as 'h_sx';   begin     declare continue handler for sqlexception       select 'Inner (good)' as 'h_sx';     insert into t3 values (1);   end; end|
create procedure h_ne()     deterministic begin   declare continue handler for not found     select 'Outer (bad)' as 'h_ne';   begin     declare x int;     declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA       select 'Inner (good)' as 'h_ne';     select a into x from t3 where a = 42;   end; end|
create procedure h_ns()     deterministic begin   declare continue handler for not found     select 'Outer (bad)' as 'h_ns';   begin     declare x int;     declare continue handler for sqlstate '02000' -- no data       select 'Inner (good)' as 'h_ns';     select a into x from t3 where a = 42;   end; end|
create procedure h_nn()     deterministic begin   declare continue handler for not found     select 'Outer (bad)' as 'h_nn';   begin     declare x int;     declare continue handler for not found       select 'Inner (good)' as 'h_nn';     select a into x from t3 where a = 42;   end; end|
create procedure h_we()     deterministic begin   declare continue handler for sqlwarning     select 'Outer (bad)' as 'h_we';   begin     declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE       select 'Inner (good)' as 'h_we';     insert into t3 values (123456789012);   end;   delete from t3;   insert into t3 values (1); end|
create procedure h_ws()     deterministic begin   declare continue handler for sqlwarning     select 'Outer (bad)' as 'h_ws';   begin     declare continue handler for sqlstate '22003'       select 'Inner (good)' as 'h_ws';     insert into t3 values (123456789012);   end;   delete from t3;   insert into t3 values (1); end|
create procedure h_ww()     deterministic begin   declare continue handler for sqlwarning     select 'Outer (bad)' as 'h_ww';   begin     declare continue handler for sqlwarning       select 'Inner (good)' as 'h_ww';     insert into t3 values (123456789012);   end;   delete from t3;   insert into t3 values (1); end|
create procedure h_xe()     deterministic begin   declare continue handler for sqlexception     select 'Outer (bad)' as 'h_xe';   begin     declare continue handler for 1062 -- ER_DUP_ENTRY       select 'Inner (good)' as 'h_xe';     insert into t3 values (1);   end; end|
create procedure h_xs()     deterministic begin   declare continue handler for sqlexception     select 'Outer (bad)' as 'h_xs';   begin     declare continue handler for sqlstate '23000'       select 'Inner (good)' as 'h_xs';     insert into t3 values (1);   end; end|
create procedure h_xx()     deterministic begin   declare continue handler for sqlexception     select 'Outer (bad)' as 'h_xx';   begin     declare continue handler for sqlexception       select 'Inner (good)' as 'h_xx';     insert into t3 values (1);   end; end|
call h_ee()|
call h_es()|
call h_en()|
call h_ew()|
call h_ex()|
call h_se()|
call h_ss()|
call h_sn()|
call h_sw()|
call h_sx()|
call h_ne()|
call h_ns()|
call h_nn()|
call h_we()|
call h_ws()|
call h_ww()|
call h_xe()|
call h_xs()|
call h_xx()|
drop table t3|
drop procedure h_ee|
drop procedure h_es|
drop procedure h_en|
drop procedure h_ew|
drop procedure h_ex|
drop procedure h_se|
drop procedure h_ss|
drop procedure h_sn|
drop procedure h_sw|
drop procedure h_sx|
drop procedure h_ne|
drop procedure h_ns|
drop procedure h_nn|
drop procedure h_we|
drop procedure h_ws|
drop procedure h_ww|
drop procedure h_xe|
drop procedure h_xs|
drop procedure h_xx|
drop procedure if exists bug822|
create procedure bug822(a_id char(16), a_data int) begin   declare n int;   select count(*) into n from t1 where id = a_id and data = a_data;   if n = 0 then     insert into t1 (id, data) values (a_id, a_data);   end if; end|
delete from t1|
call bug822('foo', 42)|
call bug822('foo', 42)|
call bug822('bar', 666)|
select * from t1 order by data|
delete from t1|
drop procedure bug822|
drop procedure if exists bug1495|
create procedure bug1495() begin   declare x int;   select data into x from t1 order by id limit 1;   if x > 10 then     insert into t1 values ("less", x-10);   else     insert into t1 values ("more", x+10);   end if; end|
insert into t1 values ('foo', 12)|
call bug1495()|
delete from t1 where id='foo'|
insert into t1 values ('bar', 7)|
call bug1495()|
delete from t1 where id='bar'|
select * from t1 order by data|
delete from t1|
drop procedure bug1495|
drop procedure if exists bug1547|
create procedure bug1547(s char(16)) begin   declare x int;   select data into x from t1 where s = id limit 1;   if x > 10 then     insert into t1 values ("less", x-10);   else     insert into t1 values ("more", x+10);   end if; end|
insert into t1 values ("foo", 12), ("bar", 7)|
call bug1547("foo")|
call bug1547("bar")|
select * from t1 order by id|
delete from t1|
drop procedure bug1547|
drop table if exists t70|
create table t70 (s1 int,s2 int)|
insert into t70 values (1,2)|
drop procedure if exists bug1656|
create procedure bug1656(out p1 int, out p2 int)   select * into p1, p1 from t70|
call bug1656(@1, @2)|
select @1, @2|
drop table t70|
drop procedure bug1656|
create table t3(a int)|
drop procedure if exists bug1862|
create procedure bug1862() begin   insert into t3 values(2);       flush tables; end|
call bug1862()|
call bug1862()|
select * from t3|
drop table t3|
drop procedure bug1862|
drop procedure if exists bug1874|
create procedure bug1874() begin   declare x int;   declare y double;   select max(data) into x from t1;   insert into t2 values ("max", x, 0);   select min(data) into x from t1;   insert into t2 values ("min", x, 0);   select sum(data) into x from t1;   insert into t2 values ("sum", x, 0);   select avg(data) into y from t1;   insert into t2 values ("avg", 0, y); end|
insert into t1 (data) values (3), (1), (5), (9), (4)|
call bug1874()|
select * from t2 order by i|
delete from t1|
delete from t2|
drop procedure bug1874|
drop procedure if exists bug2260|
create procedure bug2260() begin   declare v1 int;   declare c1 cursor for select data from t1;   declare continue handler for not found set @x2 = 1;   open c1;   fetch c1 into v1;   set @x2 = 2;   close c1; end|
call bug2260()|
select @x2|
drop procedure bug2260|
drop procedure if exists bug2267_1|
create procedure bug2267_1() begin   show procedure status where db='test'; end|
drop procedure if exists bug2267_2|
create procedure bug2267_2() begin   show function status where db='test'; end|
drop procedure if exists bug2267_3|
create procedure bug2267_3() begin   show create procedure bug2267_1; end|
drop procedure if exists bug2267_4|
drop function if exists bug2267_4|
create procedure bug2267_4() begin   show create function bug2267_4; end|
create function bug2267_4() returns int return 100|
call bug2267_1()|
call bug2267_2()|
call bug2267_3()|
call bug2267_4()|
drop procedure bug2267_1|
drop procedure bug2267_2|
drop procedure bug2267_3|
drop procedure bug2267_4|
drop function bug2267_4|
drop procedure if exists bug2227|
create procedure bug2227(x int) begin   declare y float default 2.6;   declare z char(16) default "zzz";   select 1.3, x, y, 42, z; end|
call bug2227(9)|
drop procedure bug2227|
drop procedure if exists bug2614|
create procedure bug2614() begin   drop table if exists t3;   create table t3 (id int default '0' not null);   insert into t3 select 12;   insert into t3 select * from t3; end|
call bug2614()|
call bug2614()|
drop table t3|
drop procedure bug2614|
drop function if exists bug2674|
create function bug2674() returns int   return @@sort_buffer_size|
set @osbs = @@sort_buffer_size|
set @@sort_buffer_size = 262000|
select bug2674()|
drop function bug2674|
set @@sort_buffer_size = @osbs|
drop procedure if exists bug3259_1 |
create procedure bug3259_1 () begin end|
drop procedure if exists BUG3259_2 |
create procedure BUG3259_2 () begin end|
drop procedure if exists Bug3259_3 |
create procedure Bug3259_3 () begin end|
call BUG3259_1()|
call BUG3259_1()|
call bug3259_2()|
call Bug3259_2()|
call bug3259_3()|
call bUG3259_3()|
drop procedure bUg3259_1|
drop procedure BuG3259_2|
drop procedure BUG3259_3|
drop function if exists bug2772|
create function bug2772() returns char(10) character set latin2   return 'a'|
select bug2772()|
drop function bug2772|
create table t3 (s1 smallint)|
insert into t3 values (123456789012)|
drop procedure if exists bug2780|
create procedure bug2780() begin   declare exit handler for sqlwarning set @x = 1;    set @x = 0;   insert into t3 values (123456789012);   insert into t3 values (0); end|
call bug2780()|
select @x|
select * from t3|
drop procedure bug2780|
drop table t3|
create table t3 (content varchar(10) )|
insert into t3 values ("test1")|
insert into t3 values ("test2")|
create table t4 (f1 int, rc int, t3 int)|
drop procedure if exists bug1863|
create procedure bug1863(in1 int) begin    declare ind int default 0;   declare t1 int;   declare t2 int;   declare t3 int;   declare rc int default 0;   declare continue handler for 1065 set rc = 1;   drop temporary table if exists temp_t1;   create temporary table temp_t1 (     f1 int auto_increment, f2 varchar(20), primary key (f1)   );   insert into temp_t1 (f2) select content from t3;   select f2 into t3 from temp_t1 where f1 = 10;   if (rc) then        insert into t4 values (1, rc, t3);   end if;   insert into t4 values (2, rc, t3); end|
call bug1863(10)|
call bug1863(10)|
select * from t4|
drop procedure bug1863|
create table t3 (    OrderID  int not null,   MarketID int,   primary key (OrderID) )|
create table t4 (    MarketID int not null,   Market varchar(60),   Status char(1),   primary key (MarketID) )|
insert t3 (OrderID,MarketID) values (1,1)|
insert t3 (OrderID,MarketID) values (2,2)|
insert t4 (MarketID,Market,Status) values (1,"MarketID One","A")|
insert t4 (MarketID,Market,Status) values (2,"MarketID Two","A")|
drop procedure if exists bug2656_1|
create procedure bug2656_1() begin    select     m.Market   from  t4 m JOIN t3 o          ON o.MarketID != 1 and o.MarketID = m.MarketID; end |
drop procedure if exists bug2656_2|
create procedure bug2656_2() begin    select     m.Market   from       t4 m, t3 o   where            m.MarketID != 1 and m.MarketID = o.MarketID; end |
call bug2656_1()|
call bug2656_1()|
call bug2656_2()|
call bug2656_2()|
drop procedure bug2656_1|
drop procedure bug2656_2|
drop table t3, t4|
drop procedure if exists bug3426|
create procedure bug3426(in_time int unsigned, out x int) begin   if in_time is null then     set @stamped_time=10;     set x=1;   else     set @stamped_time=in_time;     set x=2;   end if; end|
select @i, from_unixtime(@stamped_time, '%d-%m-%Y %h:%i:%s') as time|
call bug3426(NULL, @i)|
select @i, from_unixtime(@stamped_time, '%d-%m-%Y %h:%i:%s') as time|
alter procedure bug3426 sql security invoker|
call bug3426(NULL, @i)|
select @i, from_unixtime(@stamped_time, '%d-%m-%Y %h:%i:%s') as time|
call bug3426(1000, @i)|
select @i, from_unixtime(@stamped_time, '%d-%m-%Y %h:%i:%s') as time|
drop procedure bug3426|
create table t3 (   id int unsigned auto_increment not null primary key,   title VARCHAR(200),   body text,   fulltext (title,body) )|
insert into t3 (title,body) values   ('MySQL Tutorial','DBMS stands for DataBase ...'),   ('How To Use MySQL Well','After you went through a ...'),   ('Optimizing MySQL','In this tutorial we will show ...'),   ('1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'),   ('MySQL vs. YourSQL','In the following database comparison ...'),   ('MySQL Security','When configured properly, MySQL ...')|
drop procedure if exists bug3734 |
create procedure bug3734 (param1 varchar(100))   select * from t3 where match (title,body) against (param1)|
call bug3734('database')|
call bug3734('Security')|
drop procedure bug3734|
drop table t3|
drop procedure if exists bug3863|
create procedure bug3863() begin   set @a = 0;   while @a < 5 do     set @a = @a + 1;   end while; end|
call bug3863()|
select @a|
call bug3863()|
select @a|
drop procedure bug3863|
create table t3 (   id int(10) unsigned not null default 0,   rid int(10) unsigned not null default 0,   msg text not null,   primary key (id),   unique key rid (rid, id) )|
drop procedure if exists bug2460_1|
create procedure bug2460_1(in v int) begin     ( select n0.id from t3 as n0 where n0.id = v )   union     ( select n0.id from t3 as n0, t3 as n1         where n0.id = n1.rid and n1.id = v )   union     ( select n0.id from t3 as n0, t3 as n1, t3 as n2         where n0.id = n1.rid and n1.id = n2.rid and n2.id = v ); end|
call bug2460_1(2)|
call bug2460_1(2)|
insert into t3 values (1, 1, 'foo'), (2, 1, 'bar'), (3, 1, 'zip zap')|
call bug2460_1(2)|
call bug2460_1(2)|
drop procedure if exists bug2460_2|
create procedure bug2460_2() begin   drop table if exists t3;   create temporary table t3 (s1 int);   insert into t3 select 1 union select 1; end|
call bug2460_2()|
call bug2460_2()|
select * from t3|
drop procedure bug2460_1|
drop procedure bug2460_2|
drop table t3|
set @@sql_mode = ''|
drop procedure if exists bug2564_1|
create procedure bug2564_1()     comment 'Joe''s procedure'   insert into `t1` values ("foo", 1)|
set @@sql_mode = 'ANSI_QUOTES'|
drop procedure if exists bug2564_2|
create procedure bug2564_2()   insert into "t1" values ('foo', 1)|
set @@sql_mode = ''$
set @@sql_mode = 'ANSI'$
set @@sql_mode = ''|
show create procedure bug2564_1|
show create procedure bug2564_2|
show create function bug2564_3|
show create function bug2564_4|
drop procedure bug2564_1|
drop procedure bug2564_2|
drop function bug2564_3|
drop function bug2564_4|
drop function if exists bug3132|
create function bug3132(s char(20)) returns char(50)   return concat('Hello, ', s, '!')|
select bug3132('Bob') union all select bug3132('Judy')|
drop function bug3132|
drop procedure if exists bug3843|
create procedure bug3843()   analyze table t1|
call bug3843()|
call bug3843()|
select 1+2|
drop procedure bug3843|
create table t3 ( s1 char(10) )|
insert into t3 values ('a'), ('b')|
drop procedure if exists bug3368|
create procedure bug3368(v char(10)) begin   select group_concat(v) from t3; end|
call bug3368('x')|
call bug3368('yz')|
drop procedure bug3368|
drop table t3|
create table t3 (f1 int, f2 int)|
insert into t3 values (1,1)|
drop procedure if exists bug4579_1|
create procedure bug4579_1 () begin   declare sf1 int;   select f1 into sf1 from t3 where f1=1 and f2=1;   update t3 set f2 = f2 + 1 where f1=1 and f2=1;   call bug4579_2(); end|
drop procedure if exists bug4579_2|
create procedure bug4579_2 () begin end|
call bug4579_1()|
call bug4579_1()|
call bug4579_1()|
drop procedure bug4579_1|
drop procedure bug4579_2|
drop table t3|
drop procedure if exists bug2773|
create function bug2773() returns int return null|
create table t3 as select bug2773()|
show create table t3|
drop table t3|
drop function bug2773|
drop procedure if exists bug3788|
create function bug3788() returns date return cast("2005-03-04" as date)|
select bug3788()|
drop function bug3788|
create function bug3788() returns binary(1) return 5|
select bug3788()|
drop function bug3788|
create table t3 (f1 int, f2 int, f3 int)|
insert into t3 values (1,1,1)|
drop procedure if exists bug4726|
create procedure bug4726() begin    declare tmp_o_id INT;    declare tmp_d_id INT default 1;    while tmp_d_id <= 2 do    begin      select f1 into tmp_o_id from t3 where f2=1 and f3=1;      set tmp_d_id = tmp_d_id + 1;    end;    end while; end|
call bug4726()|
call bug4726()|
call bug4726()|
drop procedure bug4726|
drop table t3|
create table t3 (s1 int)|
insert into t3 values (3), (4)|
drop procedure if exists bug4318|
create procedure bug4318()   handler t3 read next|
handler t3 open|
call bug4318()|
call bug4318()|
handler t3 close|
drop procedure bug4318|
drop table t3|
drop procedure if exists bug4902|
set SQL_BIG_SELECTS=1|
create procedure bug4902() begin   show charset like 'foo';   show collation like 'foo';   show create table t1;   show create database test;   show databases like 'foo';   show errors;   show columns from t1;   show keys from t1;   show open tables like 'foo';   show status like 'foo';   show tables like 'foo';   show variables like 'foo';   show warnings; end|
show binlog events|
show storage engines|
show master status|
show slave hosts|
show slave status|
call bug4902()|
call bug4902()|
drop procedure bug4902|
drop procedure if exists bug4904|
create procedure bug4904() begin   declare continue handler for sqlstate 'HY000' begin end;   create table t2 as select * from t3; end|
call bug4904()|
drop procedure bug4904|
create table t3 (s1 char character set latin1, s2 char character set latin2)|
drop procedure if exists bug4904|
create procedure bug4904 () begin   declare continue handler for sqlstate 'HY000' begin end;   select s1 from t3 union select s2 from t3;  end|
call bug4904()|
drop procedure bug4904|
drop table t3|
drop procedure if exists bug336|
create procedure bug336(out y int) begin   declare x int;   set x = (select sum(t.data) from test.t1 t);   set y = x; end|
insert into t1 values ("a", 2), ("b", 3)|
call bug336(@y)|
select @y|
delete from t1|
drop procedure bug336|
drop procedure if exists bug3157|
create procedure bug3157() begin   if exists(select * from t1) then     set @n= @n + 1;   end if;   if (select count(*) from t1) then     set @n= @n + 1;   end if; end|
set @n = 0|
insert into t1 values ("a", 1)|
call bug3157()|
select @n|
delete from t1|
drop procedure bug3157|
drop procedure if exists bug5251|
create procedure bug5251() begin end|
select created into @c1 from information_schema.routines   where routine_schema='test' and routine_name='bug5251'|
alter procedure bug5251 comment 'foobar'|
select count(*) from information_schema.routines   where routine_schema='test' and routine_name='bug5251' and created = @c1|
drop procedure bug5251|
drop procedure if exists bug5251|
create procedure bug5251()   checksum table t1|
call bug5251()|
call bug5251()|
drop procedure bug5251|
drop procedure if exists bug5287|
create procedure bug5287(param1 int) label1:   begin     declare c cursor for select 5;     loop       if param1 >= 0 then         leave label1;       end if;     end loop; end|
call bug5287(1)|
drop procedure bug5287|
drop procedure if exists bug5307|
call bug5307()|
select @x|
drop procedure bug5307|
drop procedure if exists bug5258|
create procedure bug5258() begin end|
drop procedure if exists bug5258_aux|
create procedure bug5258_aux() begin   declare c, m char(19);   select created,last_altered into c,m from information_schema.routines where routine_name = 'bug5258';   if c = m then     select 'Ok';   else     select c, m;   end if; end|
call bug5258_aux()|
drop procedure bug5258|
drop procedure bug5258_aux|
drop function if exists bug4487|
create function bug4487() returns char begin   declare v char;   return v; end|
select bug4487()|
drop function bug4487|
drop procedure if exists bug4941|
drop procedure if exists bug4941|
create procedure bug4941(out x int) begin   declare c cursor for select i from t2 limit 1;   open c;   fetch c into x;   close c; end|
insert into t2 values (null, null, null)|
set @x = 42|
call bug4941(@x)|
select @x|
delete from t1|
drop procedure bug4941|
drop procedure if exists bug4905|
create table t3 (s1 int,primary key (s1))|
drop procedure if exists bug4905|
create procedure bug4905() begin   declare v int;   declare continue handler for sqlstate '23000' set v = 5;   insert into t3 values (1); end|
call bug4905()|
select row_count()|
call bug4905()|
select row_count()|
call bug4905()|
select row_count()|
select * from t3|
drop procedure bug4905|
drop table t3|
create function bug6022(x int) returns int begin   if x < 0 then     return 0;   else     return bug6022(x-1);   end if; end|
select bug6022(5)|
drop function bug6022|
drop procedure if exists bug6029|
drop procedure if exists bug6029|
create procedure bug6029() begin   declare exit handler for 1136  select '1136';   declare exit handler for sqlstate '23000'  select 'sqlstate 23000';   declare continue handler for sqlexception  select 'sqlexception';   insert into t3 values (1);   insert into t3 values (1,2); end|
create table t3 (s1 int, primary key (s1))|
insert into t3 values (1)|
call bug6029()|
delete from t3|
call bug6029()|
drop procedure bug6029|
drop table t3|
drop procedure if exists bug8540|
create procedure bug8540() begin   declare x int default 1;   select x as y, x+0 as z; end|
call bug8540()|
drop procedure bug8540|
create table t3 (s1 int)|
drop procedure if exists bug6642|
create procedure bug6642()   select abs(count(s1)) from t3|
call bug6642()|
call bug6642()|
drop procedure bug6642|
insert into t3 values (0),(1)|
drop procedure if exists bug7013|
create procedure bug7013()   select s1,count(s1) from t3 group by s1 with rollup|
call bug7013()|
call bug7013()|
drop procedure bug7013|
drop table if exists t4|
create table t4 (   a mediumint(8) unsigned not null auto_increment,   b smallint(5) unsigned not null,   c char(32) not null,   primary key  (a) ) engine=myisam default charset=latin1|
insert into t4 values (1, 2, 'oneword')|
insert into t4 values (2, 2, 'anotherword')|
drop procedure if exists bug7743|
create procedure bug7743 ( searchstring char(28) ) begin   declare var mediumint(8) unsigned;   select a into var from t4 where b = 2 and c = binary searchstring limit 1;   show warnings;   select var; end|
call bug7743("oneword")|
call bug7743("OneWord")|
call bug7743("anotherword")|
call bug7743("AnotherWord")|
drop procedure bug7743|
drop table t4|
delete from t3|
insert into t3 values(1)|
drop procedure if exists bug7992_1|
drop procedure if exists bug7992_2|
create procedure bug7992_1() begin   declare i int;   select max(s1)+1 into i from t3; end|
create procedure bug7992_2()   insert into t3 (s1) select max(t4.s1)+1 from t3 as t4|
call bug7992_1()|
call bug7992_1()|
call bug7992_2()|
call bug7992_2()|
drop procedure bug7992_1|
drop procedure bug7992_2|
drop table t3|
create table t3 (  userid bigint(20) not null default 0 )|
drop procedure if exists bug8116|
create procedure bug8116(in _userid int)    select * from t3 where userid = _userid|
call bug8116(42)|
call bug8116(42)|
drop procedure bug8116|
drop table t3|
drop procedure if exists bug6857|
create procedure bug6857() begin   declare t0, t1 int;   declare plus bool default 0;   set t0 = unix_timestamp();   select sleep(1.1);   set t1 = unix_timestamp();   if t1 > t0 then     set plus = 1;   end if;   select plus; end|
call bug6857()|
drop procedure bug6857|
drop procedure if exists bug8757|
create procedure bug8757() begin   declare x int;   declare c1 cursor for select data from t1 limit 1;   begin     declare y int;     declare c2 cursor for select i from t2 limit 1;     open c2;     fetch c2 into y;     close c2;     select 2,y;   end;   open c1;   fetch c1 into x;   close c1;   select 1,x; end|
delete from t1|
delete from t2|
insert into t1 values ("x", 1)|
insert into t2 values ("y", 2, 0.0)|
call bug8757()|
delete from t1|
delete from t2|
drop procedure bug8757|
drop procedure if exists bug8762|
drop procedure bug8762|
drop function if exists bug5240|
create function bug5240 () returns int begin   declare x int;   declare c cursor for select data from t1 limit 1;   open c;   fetch c into x;   close c;   return x; end|
delete from t1|
insert into t1 values ("answer", 42)|
select id, bug5240() from t1|
drop function bug5240|
drop procedure if exists p1|
create table t3(id int)|
insert into t3 values(1)|
create procedure bug7992() begin   declare i int;   select max(id)+1 into i from t3; end|
call bug7992()|
call bug7992()|
drop procedure bug7992|
drop table t3|
create table t3 (   lpitnumber int(11) default null,   lrecordtype int(11) default null )|
create table t4 (   lbsiid int(11) not null default '0',   ltradingmodeid int(11) not null default '0',   ltradingareaid int(11) not null default '0',   csellingprice decimal(19,4) default null,   primary key  (lbsiid,ltradingmodeid,ltradingareaid) )|
create table t5 (   lbsiid int(11) not null default '0',   ltradingareaid int(11) not null default '0',   primary key  (lbsiid,ltradingareaid) )|
drop procedure if exists bug8849|
create procedure bug8849() begin   insert into t5   (    t5.lbsiid,    t5.ltradingareaid   )   select distinct t3.lpitnumber, t4.ltradingareaid   from     t4 join t3 on       t3.lpitnumber = t4.lbsiid       and t3.lrecordtype = 1     left join t4 as price01 on       price01.lbsiid = t4.lbsiid and       price01.ltradingmodeid = 1 and       t4.ltradingareaid = price01.ltradingareaid; end|
call bug8849()|
call bug8849()|
call bug8849()|
drop procedure bug8849|
drop tables t3,t4,t5|
drop procedure if exists bug8937|
create procedure bug8937() begin   declare s,x,y,z int;   declare a float;   select sum(data),avg(data),min(data),max(data) into s,x,y,z from t1;   select s,x,y,z;   select avg(data) into a from t1;   select a; end|
delete from t1|
insert into t1 (data) values (1), (2), (3), (4), (6)|
call bug8937()|
drop procedure bug8937|
delete from t1|
drop procedure if exists bug6900|
drop procedure if exists bug9074|
drop procedure if exists bug6900_9074|
create table t3 (w char unique, x char)|
insert into t3 values ('a', 'b')|
create procedure bug6900() begin   declare exit handler for sqlexception select '1';   begin     declare exit handler for sqlexception select '2';     insert into t3 values ('x', 'y', 'z');   end; end|
create procedure bug9074() begin   declare x1, x2, x3, x4, x5, x6 int default 0;   begin         declare continue handler for sqlstate '23000' set x5 = 1;           insert into t3 values ('a', 'b');           set x6 = 1;         end;  begin1_label:   begin     declare continue handler for sqlstate '23000' set x1 = 1;           insert into t3 values ('a', 'b');           set x2 = 1;          begin2_label:     begin         declare exit handler for sqlstate '23000' set x3 = 1;                set x4= 1;                insert into t3 values ('a','b');       set x4= 0;     end begin2_label;   end begin1_label;   select x1, x2, x3, x4, x5, x6; end|
create procedure bug6900_9074(z int) begin   declare exit handler for sqlstate '23000' select '23000';   begin     declare exit handler for sqlexception select 'sqlexception';     if z = 1 then       insert into t3 values ('a', 'b');     else       insert into t3 values ('x', 'y', 'z');     end if;   end; end|
call bug6900()|
call bug9074()|
call bug6900_9074(0)|
call bug6900_9074(1)|
drop procedure bug6900|
drop procedure bug9074|
drop procedure bug6900_9074|
drop table t3|
drop procedure if exists avg|
create procedure avg () begin end|
call avg ()|
drop procedure avg|
drop procedure if exists bug6129|
call bug6129()|
set @@sql_mode= "STRICT_ALL_TABLES,NO_ZERO_DATE"|
call bug6129()|
set @@sql_mode= "NO_ZERO_IN_DATE"|
call bug6129()|
drop procedure if exists bug9856|
create procedure bug9856() begin   declare v int;   declare c cursor for select data from t1;   declare exit handler for sqlexception, not found select '16';   open c;   fetch c into v;   select v; end|
delete from t1|
call bug9856()|
call bug9856()|
drop procedure bug9856|
drop procedure if exists bug9674_1|
drop procedure if exists bug9674_2|
create procedure bug9674_1(out arg int) begin   declare temp_in1 int default 0;   declare temp_fl1 int default 0;   set temp_in1 = 100;   set temp_fl1 = temp_in1/10;   set arg = temp_fl1; end|
create procedure bug9674_2() begin   declare v int default 100;   select v/10; end|
call bug9674_1(@sptmp)|
call bug9674_1(@sptmp)|
select @sptmp|
call bug9674_2()|
call bug9674_2()|
drop procedure bug9674_1|
drop procedure bug9674_2|
drop procedure if exists bug9598_1|
drop procedure if exists bug9598_2|
create procedure bug9598_1(in var_1 char(16),                            out var_2 integer, out var_3 integer) begin   set var_2 = 50;   set var_3 = 60; end|
create procedure bug9598_2(in v1 char(16),                            in v2 integer,                            in v3 integer,                            in v4 integer,                            in v5 integer) begin   select v1,v2,v3,v4,v5;   call bug9598_1(v1,@tmp1,@tmp2);   select v1,v2,v3,v4,v5; end|
call bug9598_2('Test',2,3,4,5)|
select @tmp1, @tmp2|
drop procedure bug9598_1|
drop procedure bug9598_2|
drop function if exists bug9102|
create function bug9102() returns blob return 'a'|
select bug9102()|
drop function bug9102|
drop function if exists bug7648|
create function bug7648() returns bit(8) return 'a'|
select bug7648()|
drop function bug7648|
drop function if exists bug9775|
create function bug9775(v1 char(1)) returns enum('a','b') return v1|
select bug9775('a'),bug9775('b'),bug9775('c')|
drop function bug9775|
create function bug9775(v1 int) returns enum('a','b') return v1|
select bug9775(1),bug9775(2),bug9775(3)|
drop function bug9775|
create function bug9775(v1 char(1)) returns set('a','b') return v1|
select bug9775('a'),bug9775('b'),bug9775('a,b'),bug9775('c')|
drop function bug9775|
create function bug9775(v1 int) returns set('a','b') return v1|
select bug9775(1),bug9775(2),bug9775(3),bug9775(4)|
drop function bug9775|
drop function if exists bug8861|
create function bug8861(v1 int) returns year return v1|
select bug8861(05)|
set @x = bug8861(05)|
select @x|
drop function bug8861|
drop procedure if exists bug9004_1|
drop procedure if exists bug9004_2|
create procedure bug9004_1(x char(16)) begin   insert into t1 values (x, 42);   insert into t1 values (x, 17); end|
create procedure bug9004_2(x char(16))   call bug9004_1(x)|
call bug9004_1('12345678901234567')|
call bug9004_2('12345678901234567890')|
delete from t1|
drop procedure bug9004_1|
drop procedure bug9004_2|
drop procedure if exists bug7293|
insert into t1 values ('secret', 0)|  create procedure bug7293(p1 varchar(100)) begin   if exists (select id from t1 where soundex(p1)=soundex(id)) then     select 'yes';   end if; end;|  call bug7293('secret')|  call bug7293 ('secrete')|  drop procedure bug7293|
delete from t1|
drop procedure if exists bug9841|
drop view if exists v1|
create view v1 as select * from t1, t2 where id = s|
create procedure bug9841 ()   update v1 set data = 10|  call bug9841()|
drop view v1|
drop procedure bug9841|
drop procedure if exists bug5963|
create procedure bug5963_1 () begin declare v int; set v = (select s1 from t3); select v; end;|
create table t3 (s1 int)|
insert into t3 values (5)|
call bug5963_1()|
call bug5963_1()|
drop procedure bug5963_1|
drop table t3|
create procedure bug5963_2 (cfk_value int)  begin    if cfk_value in (select cpk from t3) then      set @x = 5;    end if;    end;  |  create table t3 (cpk int)|  insert into t3 values (1)|  call bug5963_2(1)|
call bug5963_2(1)|
drop procedure bug5963_2|
drop table t3|
drop function if exists bug9559|
create function bug9559()   returns int begin   set @y = -6/2;   return @y; end|
select bug9559()|
drop function bug9559|
drop procedure if exists bug10961|
create procedure bug10961() begin   declare v char;   declare x int;   declare c cursor for select * from dual;   declare continue handler for sqlexception select x;   set x = 1;   open c;   set x = 2;   fetch c into v;   set x = 3;   close c; end|
call bug10961()|
call bug10961()|
drop procedure bug10961|
DROP PROCEDURE IF EXISTS bug6866|
DROP VIEW IF EXISTS tv|
DROP TABLE IF EXISTS tt1,tt2,tt3|
CREATE TABLE tt1 (a1 int, a2 int, a3 int, data varchar(10))|
CREATE TABLE tt2 (a2 int, data2 varchar(10))|
CREATE TABLE tt3 (a3 int, data3 varchar(10))|
INSERT INTO tt1 VALUES (1, 1, 4, 'xx')|
INSERT INTO tt2 VALUES (1, 'a')|
INSERT INTO tt2 VALUES (2, 'b')|
INSERT INTO tt2 VALUES (3, 'c')|
INSERT INTO tt3 VALUES (4, 'd')|
INSERT INTO tt3 VALUES (5, 'e')|
INSERT INTO tt3 VALUES (6, 'f')|
CREATE VIEW tv AS SELECT tt1.*, tt2.data2, tt3.data3   FROM tt1 INNER JOIN tt2 ON tt1.a2 = tt2.a2          LEFT JOIN tt3 ON tt1.a3 = tt3.a3     ORDER BY tt1.a1, tt2.a2, tt3.a3|
CREATE PROCEDURE bug6866 (_a1 int) BEGIN SELECT * FROM tv WHERE a1 = _a1; END|
CALL bug6866(1)|
CALL bug6866(1)|
CALL bug6866(1)|
DROP TABLE tt1, tt2, tt3|
DROP PROCEDURE IF EXISTS bug10136|
create table t3 ( name char(5) not null primary key, val float not null)|
insert into t3 values ('aaaaa', 1), ('bbbbb', 2), ('ccccc', 3)|
create procedure bug10136() begin   declare done int default 3;   repeat     select * from t3;     set done = done - 1;   until done <= 0 end repeat; end|
call bug10136()|
call bug10136()|
call bug10136()|
drop procedure bug10136|
drop table t3|
drop procedure if exists bug11529|
create procedure bug11529() begin   declare c cursor for select id, data from t1 where data in (10,13);   open c;   begin     declare vid char(16);     declare vdata int;     declare exit handler for not found begin end;     while true do       fetch c into vid, vdata;     end while;   end;   close c; end|
insert into t1 values   ('Name1', 10),   ('Name2', 11),   ('Name3', 12),   ('Name4', 13),   ('Name5', 14)|
call bug11529()|
call bug11529()|
delete from t1|
drop procedure bug11529|
set character set utf8|
drop procedure if exists bug6063|
drop procedure if exists bug7088_1|
drop procedure if exists bug7088_2|
create procedure bug6063() begin   lâbel: begin end;   label: begin end;   label1: begin end; end|
create procedure bug7088_1()   label1: begin end label1|
create procedure bug7088_2()   läbel1: begin end|
call bug6063()|
call bug7088_1()|
call bug7088_2()|
set character set default|
show create procedure bug6063|
show create procedure bug7088_1|
show create procedure bug7088_2|
drop procedure bug6063|
drop procedure bug7088_1|
drop procedure bug7088_2|
drop procedure if exists bug9565_sub|
drop procedure if exists bug9565|
create procedure bug9565_sub() begin   select * from t1; end|
create procedure bug9565() begin   insert into t1 values ("one", 1);   call bug9565_sub(); end|
call bug9565()|
delete from t1|
drop procedure bug9565_sub|
drop procedure bug9565|
drop procedure if exists bug9538|
create procedure bug9538()   set @@sort_buffer_size = 1000000|
set @x = @@sort_buffer_size|
set @@sort_buffer_size = 2000000|
select @@sort_buffer_size|
call bug9538()|
select @@sort_buffer_size|
set @@sort_buffer_size = @x|
drop procedure bug9538|
drop procedure if exists bug8692|
create table t3 (c1 varchar(5), c2 char(5), c3 enum('one','two'), c4 text, c5 blob, c6 char(5), c7 varchar(5))|
insert into t3 values ('', '', '', '', '', '', NULL)|
create procedure bug8692() begin      declare v1 VARCHAR(10);      declare v2 VARCHAR(10);      declare v3 VARCHAR(10);      declare v4 VARCHAR(10);      declare v5 VARCHAR(10);      declare v6 VARCHAR(10);      declare v7 VARCHAR(10);      declare c8692 cursor for select c1,c2,c3,c4,c5,c6,c7 from t3;      open c8692;      fetch c8692 into v1,v2,v3,v4,v5,v6,v7;     select v1, v2, v3, v4, v5, v6, v7; end|
call bug8692()|
drop procedure bug8692|
drop table t3|
drop function if exists bug10055|
create function bug10055(v char(255)) returns char(255) return lower(v)|
select t.column_name, bug10055(t.column_name) from information_schema.columns as t where t.table_schema = 'test' and t.table_name = 't1' order by t.column_name|
drop function bug10055|
drop procedure if exists bug12297|
create procedure bug12297(lim int) begin   set @x = 0;   repeat     insert into t1(id,data)     values('aa', @x);     set @x = @x + 1;   until @x >= lim   end repeat; end|
call bug12297(10)|
drop procedure bug12297|
drop function if exists f_bug11247|
drop procedure if exists p_bug11247|
create function f_bug11247(param int)   returns int return param + 1|
create procedure p_bug11247(lim int) begin   declare v int default 0;   while v < lim do     set v= f_bug11247(v);   end while; end|
call p_bug11247(10)|
drop function f_bug11247|
drop procedure p_bug11247|
drop procedure if exists bug12168|
drop table if exists t3, t4|
create table t3 (a int)|
insert into t3 values (1),(2),(3),(4)|
create table t4 (a int)|
create procedure bug12168(arg1 char(1)) begin   declare b, c integer;   if arg1 = 'a' then     begin       declare c1 cursor for select a from t3 where a % 2;       declare continue handler for not found set b = 1;       set b = 0;       open c1;       c1_repeat: repeat         fetch c1 into c;         if (b = 1) then           leave c1_repeat;         end if;         insert into t4 values (c);         until b = 1       end repeat;     end;   end if;   if arg1 = 'b' then     begin       declare c2 cursor for select a from t3 where not a % 2;       declare continue handler for not found set b = 1;       set b = 0;       open c2;       c2_repeat: repeat         fetch c2 into c;         if (b = 1) then           leave c2_repeat;         end if;         insert into t4 values (c);         until b = 1       end repeat;     end;   end if; end|
call bug12168('a')|
select * from t4|
truncate t4|
call bug12168('b')|
select * from t4|
truncate t4|
call bug12168('a')|
select * from t4|
truncate t4|
call bug12168('b')|
select * from t4|
truncate t4|
drop table t3, t4|
drop procedure if exists bug12168|
drop table if exists t3|
drop procedure if exists bug11333|
create table t3 (c1 char(128))|
insert into t3 values    ('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')|
create procedure bug11333(i int) begin     declare tmp varchar(128);     set @x = 0;     repeat         select c1 into tmp from t3           where c1 = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';         set @x = @x + 1;         until @x >= i     end repeat; end|
call bug11333(10)|
drop procedure bug11333|
drop table t3|
drop function if exists bug9048|
create function bug9048(f1 char binary) returns char begin   set f1= concat( 'hello', f1 );   return f1; end|
drop function bug9048|
create function bug9048(f1 char binary) returns char binary begin   set f1= concat( 'hello', f1 );   return f1; end|
drop procedure if exists bug12849_1|
create procedure bug12849_1(inout x char) select x into x|
set @var='a'|
call bug12849_1(@var)|
select @var|
drop procedure bug12849_1|
drop procedure if exists bug12849_2|
create procedure bug12849_2(inout foo varchar(15)) begin select concat(foo, foo) INTO foo; end|
set @var='abcd'|
call bug12849_2(@var)|
select @var|
drop procedure bug12849_2|
drop procedure if exists bug131333|
drop function if exists bug131333|
create procedure bug131333() begin   begin     declare a int;     select a;     set a = 1;     select a;   end;   begin     declare b int;     select b;   end; end|
create function bug131333()   returns int begin   begin     declare a int;     set a = 1;   end;   begin     declare b int;     return b;   end; end|
call bug131333()|
select bug131333()|
drop procedure bug131333|
drop function bug131333|
drop function if exists bug12379|
drop procedure if exists bug12379_1|
drop procedure if exists bug12379_2|
drop procedure if exists bug12379_3|
drop table if exists t3|
create table t3 (c1 char(1) primary key not null)|
create function bug12379()   returns integer begin    insert into t3 values('X');    insert into t3 values('X');    return 0; end|
create procedure bug12379_1() begin    declare exit handler for sqlexception select 42;    select bug12379(); END|
create procedure bug12379_2() begin    declare exit handler for sqlexception begin end;    select bug12379(); end|
create procedure bug12379_3() begin    select bug12379(); end|
select bug12379()|
select 1|
call bug12379_1()|
select 2|
call bug12379_2()|
select 3|
call bug12379_3()|
select 4|
drop function bug12379|
drop procedure bug12379_1|
drop procedure bug12379_2|
drop procedure bug12379_3|
drop table t3|
drop procedure if exists bug13124|
create procedure bug13124() begin   declare y integer;   set @x=y; end|
call bug13124()|
drop procedure  bug13124|
drop procedure if exists bug12979_1|
create procedure bug12979_1(inout d decimal(5)) set d = d / 2|
set @bug12979_user_var = NULL|
call bug12979_1(@bug12979_user_var)|
drop procedure bug12979_1|
drop procedure if exists bug12979_2|
create procedure bug12979_2() begin declare internal_var decimal(5); set internal_var= internal_var / 2; select internal_var; end|
call bug12979_2()|
drop procedure bug12979_2|
drop table if exists t3|
drop procedure if exists bug6127|
create table t3 (s1 int unique)|
set @sm=@@sql_mode|
set sql_mode='traditional'|
create procedure bug6127() begin   declare continue handler for sqlstate '23000'     begin       declare continue handler for sqlstate '22003'         insert into t3 values (0);       insert into t3 values (1000000000000000);     end;   insert into t3 values (1);   insert into t3 values (1); end|
call bug6127()|
select * from t3|
call bug6127()|
select * from t3|
set sql_mode=@sm|
drop table t3|
drop procedure bug6127|
drop procedure if exists bug12589_1|
drop procedure if exists bug12589_2|
drop procedure if exists bug12589_3|
create procedure bug12589_1() begin   declare spv1 decimal(3,3);   set spv1= 123.456;   set spv1 = 'test';   create temporary table tm1 as select spv1;   show create table tm1;   drop temporary table tm1; end|
create procedure bug12589_2() begin   declare spv1 decimal(6,3);   set spv1= 123.456;   create temporary table tm1 as select spv1;   show create table tm1;   drop temporary table tm1; end|
create procedure bug12589_3() begin   declare spv1 decimal(6,3);   set spv1= -123.456;   create temporary table tm1 as select spv1;   show create table tm1;   drop temporary table tm1; end|
call bug12589_1()|
call bug12589_2()|
call bug12589_3()|
drop procedure bug12589_1|
drop procedure bug12589_2|
drop procedure bug12589_3|
drop table if exists t3|
drop procedure if exists bug7049_1|
drop procedure if exists bug7049_2|
drop procedure if exists bug7049_3|
drop procedure if exists bug7049_4|
drop function if exists bug7049_1|
drop function if exists bug7049_2|
create table t3 ( x int unique )|
create procedure bug7049_1() begin   insert into t3 values (42);   insert into t3 values (42); end|
create procedure bug7049_2() begin   declare exit handler for sqlexception     select 'Caught it' as 'Result';   call bug7049_1();   select 'Missed it' as 'Result'; end|
create procedure bug7049_3()   call bug7049_1()|
create procedure bug7049_4() begin   declare exit handler for sqlexception     select 'Caught it' as 'Result';   call bug7049_3();   select 'Missed it' as 'Result'; end|
create function bug7049_1()   returns int begin   insert into t3 values (42);   insert into t3 values (42);   return 42; end|
create function bug7049_2()   returns int begin   declare x int default 0;   declare continue handler for sqlexception     set x = 1;   set x = bug7049_1();   return x; end|
call bug7049_2()|
select * from t3|
delete from t3|
call bug7049_4()|
select * from t3|
select bug7049_2()|
drop table t3|
drop procedure bug7049_1|
drop procedure bug7049_2|
drop procedure bug7049_3|
drop procedure bug7049_4|
drop function bug7049_1|
drop function bug7049_2|
drop function if exists bug13941|
drop procedure if exists bug13941|
create function bug13941(p_input_str text)   returns text begin   declare p_output_str text;   set p_output_str = p_input_str;   set p_output_str = replace(p_output_str, 'xyzzy', 'plugh');   set p_output_str = replace(p_output_str, 'test', 'prova');   set p_output_str = replace(p_output_str, 'this', 'questo');   set p_output_str = replace(p_output_str, ' a ', 'una ');   set p_output_str = replace(p_output_str, 'is', '');   return p_output_str; end|
create procedure bug13941(out sout varchar(128)) begin   set sout = 'Local';   set sout = ifnull(sout, 'DEF'); end|
select bug13941('this is a test')|
call bug13941(@a)|
select @a|
drop function bug13941|
drop procedure bug13941|
CREATE PROCEDURE bug13095(tbl_name varchar(32)) BEGIN   SET @str =     CONCAT("CREATE TABLE ", tbl_name, "(stuff char(15))");   SELECT @str;   PREPARE stmt FROM @str;   EXECUTE stmt;   SET @str =     CONCAT("INSERT INTO ", tbl_name, " VALUES('row1'),('row2'),('row3')" );   SELECT @str;   PREPARE stmt FROM @str;   EXECUTE stmt;   SET @str =     CONCAT("CREATE VIEW bug13095_v1(c1) AS SELECT stuff FROM ", tbl_name);   SELECT @str;   PREPARE stmt FROM @str;   EXECUTE stmt;   SELECT * FROM bug13095_v1;   SET @str =     "DROP VIEW bug13095_v1";   SELECT @str;   PREPARE stmt FROM @str;   EXECUTE stmt; END|
drop function if exists bug14723|
drop procedure if exists bug14723|
/*!50003 create function bug14723()  returns bigint(20) main_loop: begin   return 42;
end */;;
/*!50003 create procedure bug14723() main_loop: begin   select 42;
end */;;
drop function bug14723|
drop procedure bug14723|
create procedure bug14845() begin   declare a char(255);   declare done int default 0;   declare c cursor for select count(*) from t1 where 1 = 0;   declare continue handler for sqlstate '02000' set done = 1;   open c;   repeat     fetch c into a;     if not done then       select a;     end if;   until done end repeat;   close c; end|
call bug14845()|
drop procedure bug14845|
drop procedure if exists bug13549_1|
drop procedure if exists bug13549_2|
CREATE PROCEDURE `bug13549_2`() begin   call bug13549_1(); end|
CREATE PROCEDURE `bug13549_1`() begin   declare done int default 0;   set done= not done; end|
CALL bug13549_2()|
drop procedure bug13549_2|
drop procedure bug13549_1|
drop function if exists bug10100f|
drop procedure if exists bug10100p|
drop procedure if exists bug10100t|
drop procedure if exists bug10100pt|
drop procedure if exists bug10100pv|
drop procedure if exists bug10100pd|
drop procedure if exists bug10100pc|
create function bug10100f(prm int) returns int begin   if prm > 1 then     return prm * bug10100f(prm - 1);   end if;   return 1; end|
create procedure bug10100p(prm int, inout res int) begin   set res = res * prm;   if prm > 1 then     call bug10100p(prm - 1, res);     end if; end|
create procedure bug10100t(prm int) begin   declare res int;   set res = 1;   call bug10100p(prm, res);   select res; end|
create table t3 (a int)|
insert into t3 values (0)|
create view v1 as select a from t3|
create procedure bug10100pt(level int, lim int) begin   if level < lim then     update t3 set a=level;     FLUSH TABLES;     call bug10100pt(level+1, lim);   else     select * from t3;   end if; end|
create procedure bug10100pv(level int, lim int) begin   if level < lim then     update v1 set a=level;     FLUSH TABLES;     call bug10100pv(level+1, lim);   else     select * from v1;   end if; end|
prepare stmt2 from "select * from t3;"|
create procedure bug10100pd(level int, lim int) begin   if level < lim then     select level;     prepare stmt1 from "update t3 set a=a+2";     execute stmt1;     FLUSH TABLES;     execute stmt1;     FLUSH TABLES;     execute stmt1;     FLUSH TABLES;     deallocate prepare stmt1;     execute stmt2;     select * from t3;     call bug10100pd(level+1, lim);   else     execute stmt2;   end if; end|
create procedure bug10100pc(level int, lim int) begin   declare lv int;   declare c cursor for select a from t3;   open c;   if level < lim then     select level;     fetch c into lv;     select lv;     update t3 set a=level+lv;     FLUSH TABLES;     call bug10100pc(level+1, lim);   else     select * from t3;   end if;   close c; end|
set @@max_sp_recursion_depth=4|
select @@max_sp_recursion_depth|
select bug10100f(3)|
select bug10100f(6)|
call bug10100t(5)|
call bug10100pt(1,5)|
call bug10100pv(1,5)|
update t3 set a=1|
call bug10100pd(1,5)|
select * from t3|
update t3 set a=1|
call bug10100pc(1,5)|
select * from t3|
set @@max_sp_recursion_depth=0|
select @@max_sp_recursion_depth|
select bug10100f(5)|
call bug10100t(5)|
deallocate prepare stmt2|
drop function bug10100f|
drop procedure bug10100p|
drop procedure bug10100t|
drop procedure bug10100pt|
drop procedure bug10100pv|
drop procedure bug10100pd|
drop procedure bug10100pc|
drop view v1|
drop procedure if exists bug13729|
drop table if exists t3|
create table t3 (s1 int, primary key (s1))|
insert into t3 values (1),(2)|
create procedure bug13729() begin   declare continue handler for sqlexception select 55;   update t3 set s1 = 1; end|
call bug13729()|
select * from t3|
drop procedure bug13729|
drop table t3|
drop procedure if exists bug14643_1|
drop procedure if exists bug14643_2|
create procedure bug14643_1() begin   declare continue handler for sqlexception select 'boo' as 'Handler';   begin     declare v int default undefined_var;     if v = 1 then       select 1;     else       select v, isnull(v);     end if;   end; end|
create procedure bug14643_2() begin   declare continue handler for sqlexception select 'boo' as 'Handler';   case undefined_var   when 1 then     select 1;   else     select 2;   end case;   select undefined_var; end|
call bug14643_1()|
call bug14643_2()|
drop procedure bug14643_1|
drop procedure bug14643_2|
drop procedure if exists bug14304|
drop table if exists t3, t4|
create table t3(a int primary key auto_increment)|
create table t4(a int primary key auto_increment)|
create procedure bug14304() begin   insert into t3 set a=null;   insert into t4 set a=null;   insert into t4 set a=null;   insert into t4 set a=null;   insert into t4 set a=null;   insert into t4 set a=null;   insert into t4 select null as a;   insert into t3 set a=null;   insert into t3 set a=null;   select * from t3; end|
call bug14304()|
drop procedure bug14304|
drop table t3, t4|
drop procedure if exists bug14376|
create procedure bug14376() begin   declare x int default x; end|
call bug14376()|
drop procedure bug14376|
create procedure bug14376() begin   declare x int default 42;   begin     declare x int default x;     select x;   end; end|
call bug14376()|
drop procedure bug14376|
create procedure bug14376(x int) begin   declare x int default x;   select x; end|
call bug14376(4711)|
drop procedure bug14376|
drop procedure if exists bug5967|
drop table if exists t3|
create table t3 (a varchar(255)) engine=myisam|
insert into t3 (a) values ("a - table column")|
create procedure bug5967(a varchar(255)) begin   declare i varchar(255);   declare c cursor for select a from t3;   select a;   select a from t3 into i;   select i as 'Parameter takes precedence over table column';                     open c;   fetch c into i;   close c;   select i as 'Parameter takes precedence over table column in cursors';   begin     declare a varchar(255) default 'a - local variable';     declare c1 cursor for select a from t3;     select a as 'A local variable takes precedence over parameter';     open c1;     fetch c1 into i;     close c1;     select i as 'A local variable takes precedence over parameter in cursors';     begin       declare a varchar(255) default 'a - local variable in a nested compound statement';       declare c2 cursor for select a from t3;       select a as 'A local variable in a nested compound statement takes precedence over a local variable in the outer statement';       select a from t3 into i;       select i as  'A local variable in a nested compound statement takes precedence over table column';       open c2;       fetch c2 into i;       close c2;       select i as  'A local variable in a nested compound statement takes precedence over table column in cursors';     end;   end; end|
call bug5967("a - stored procedure parameter")|
drop procedure bug5967|
drop procedure if exists bug13012|
BEGIN        REPAIR TABLE t1;     END|
call bug13012()|
drop procedure bug13012|
create view v1 as select * from t1|
create procedure bug13012() BEGIN   REPAIR TABLE t1,t2,t3,v1;   OPTIMIZE TABLE t1,t2,t3,v1;   ANALYZE TABLE t1,t2,t3,v1; END|
call bug13012()|
call bug13012()|
call bug13012()|
drop procedure bug13012|
drop view v1|
select * from t1 order by data|
drop schema if exists mysqltest1|
drop schema if exists mysqltest2|
drop schema if exists mysqltest3|
create schema mysqltest1|
create schema mysqltest2|
create schema mysqltest3|
use mysqltest3|
create procedure mysqltest1.p1 (out prequestid varchar(100)) begin   call mysqltest2.p2('call mysqltest3.p3(1, 2)'); end|
create procedure mysqltest2.p2(in psql text) begin   declare lsql text;   set @lsql= psql;   prepare lstatement from @lsql;   execute lstatement;   deallocate prepare lstatement; end|
create procedure mysqltest3.p3(in p1 int) begin   select p1; end|
call mysqltest1.p1(@rs)|
call mysqltest1.p1(@rs)|
call mysqltest1.p1(@rs)|
drop schema if exists mysqltest1|
drop schema if exists mysqltest2|
drop schema if exists mysqltest3|
use test|
drop table if exists t3|
drop procedure if exists bug15441|
create table t3 (id int not null primary key, county varchar(25))|
insert into t3 (id, county) values (1, 'York')|
create procedure bug15441(c varchar(25)) begin   update t3 set id=2, county=values(c); end|
call bug15441('county')|
drop procedure bug15441|
create procedure bug15441(county varchar(25)) begin   declare c varchar(25) default "hello";   insert into t3 (id, county) values (1, county)   on duplicate key update county= values(county);   select * from t3;   update t3 set id=2, county=values(id);   select * from t3; end|
call bug15441('Yale')|
drop table t3|
drop procedure bug15441|
drop procedure if exists bug14498_1|
drop procedure if exists bug14498_2|
drop procedure if exists bug14498_3|
drop procedure if exists bug14498_4|
drop procedure if exists bug14498_5|
create procedure bug14498_1() begin   declare continue handler for sqlexception select 'error' as 'Handler';   if v then     select 'yes' as 'v';   else     select 'no' as 'v';   end if;   select 'done' as 'End'; end|
create procedure bug14498_2() begin   declare continue handler for sqlexception select 'error' as 'Handler';   while v do     select 'yes' as 'v';   end while;   select 'done' as 'End'; end|
create procedure bug14498_3() begin   declare continue handler for sqlexception select 'error' as 'Handler';   repeat     select 'maybe' as 'v';   until v end repeat;   select 'done' as 'End'; end|
create procedure bug14498_4() begin   declare continue handler for sqlexception select 'error' as 'Handler';   case v   when 1 then     select '1' as 'v';   when 2 then     select '2' as 'v';   else     select '?' as 'v';   end case;   select 'done' as 'End'; end|
create procedure bug14498_5() begin   declare continue handler for sqlexception select 'error' as 'Handler';   case   when v = 1 then     select '1' as 'v';   when v = 2 then     select '2' as 'v';   else     select '?' as 'v';   end case;   select 'done' as 'End'; end|
call bug14498_1()|
call bug14498_2()|
call bug14498_3()|
call bug14498_4()|
call bug14498_5()|
drop procedure bug14498_1|
drop procedure bug14498_2|
drop procedure bug14498_3|
drop procedure bug14498_4|
drop procedure bug14498_5|
drop table if exists t3|
drop procedure if exists bug15231_1|
drop procedure if exists bug15231_2|
drop procedure if exists bug15231_3|
drop procedure if exists bug15231_4|
drop procedure if exists bug15231_5|
drop procedure if exists bug15231_6|
create table t3 (id int not null)|
create procedure bug15231_1() begin   declare xid integer;   declare xdone integer default 0;   declare continue handler for not found set xdone = 1;   set xid=null;   call bug15231_2(xid);   select xid, xdone; end|
create procedure bug15231_2(inout ioid integer) begin   select "Before NOT FOUND condition is triggered" as '1';   select id into ioid from t3 where id=ioid;   select "After NOT FOUND condtition is triggered" as '2';   if ioid is null then     set ioid=1;   end if; end|
create procedure bug15231_3() begin   declare exit handler for sqlwarning     select 'Caught it (correct)' as 'Result';   call bug15231_4(); end|
create procedure bug15231_4() begin   declare x decimal(2,1);   set x = 'zap';   select 'Missed it (correct)' as 'Result';   show warnings; end|
create procedure bug15231_5() begin   declare exit handler for sqlwarning     select 'Caught it (wrong)' as 'Result';   call bug15231_6(); end|
create procedure bug15231_6() begin   declare x decimal(2,1);   set x = 'zap';   select 'Missed it (correct)' as 'Result';   select id from t3; end|
call bug15231_1()|
call bug15231_3()|
call bug15231_5()|
drop table t3|
drop procedure bug15231_1|
drop procedure bug15231_2|
drop procedure bug15231_3|
drop procedure bug15231_4|
drop procedure bug15231_5|
drop procedure bug15231_6|
drop procedure if exists bug15011|
create table t3 (c1 int primary key)|
insert into t3 values (1)|
create procedure bug15011()   deterministic begin   declare continue handler for 1062     select 'Outer' as 'Handler';   begin     declare continue handler for 1062       select 'Inner' as 'Handler';     insert into t3 values (1);   end; end|
call bug15011()|
drop procedure bug15011|
drop table t3|
drop procedure if exists bug17476|
create table t3 ( d date )|
insert into t3 values   ( '2005-01-01' ), ( '2005-01-02' ), ( '2005-01-03' ),   ( '2005-01-04' ), ( '2005-02-01' ), ( '2005-02-02' )|
create procedure bug17476(pDateFormat varchar(10))   select date_format(t3.d, pDateFormat), count(*)     from t3      group by date_format(t3.d, pDateFormat)|
call bug17476('%Y-%m')|
call bug17476('%Y-%m')|
drop table t3|
drop procedure bug17476|
drop table if exists t3|
drop procedure if exists bug16887|
create table t3 ( c varchar(1) )|
insert into t3 values   (' '),('.'),(';'),(','),('-'),('_'),('('),(')'),('/'),('\\')|
create procedure bug16887() begin   declare i int default 10;  again:   while i > 0 do   begin     declare breakchar varchar(1);     declare done int default 0;     declare t3_cursor cursor for select c from t3;     declare continue handler for not found set done = 1;     set i = i - 1;     select i;     if i = 3 then       iterate again;     end if;     open t3_cursor;     loop       fetch t3_cursor into breakchar;       if done = 1 then         begin           close t3_cursor;           iterate again;         end;       end if;      end loop;    end;    end while; end|
call bug16887()|
drop table t3|
drop procedure bug16887|
drop procedure if exists bug16474_1|
drop procedure if exists bug16474_2|
delete from t1|
insert into t1 values ('c', 2), ('b', 3), ('a', 1)|
create procedure bug16474_1() begin   declare x int;   select id from t1 order by x, id; end|
drop procedure if exists bug14945|
create table t3 (id int not null auto_increment primary key)|
create procedure bug14945() deterministic truncate t3|
insert into t3 values (null)|
call bug14945()|
insert into t3 values (null)|
select * from t3|
drop table t3|
drop procedure bug14945|
create procedure bug16474_2(x int)   select id from t1 order by x, id|
call bug16474_1()|
call bug16474_2(1)|
call bug16474_2(2)|
drop procedure bug16474_1|
drop procedure bug16474_2|
set @x = 2|
select * from t1 order by @x, data|
delete from t1|
drop function if exists bug15728|
drop table if exists t3|
create table t3 (   id int not null auto_increment,   primary key (id) )|
create function bug15728() returns int(11)   return last_insert_id()|
insert into t3 values (0)|
select last_insert_id()|
select bug15728()|
drop function bug15728|
drop table t3|
drop procedure if exists bug18787|
create procedure bug18787() begin   declare continue handler for sqlexception begin end;   select no_such_function(); end|
call bug18787()|
drop procedure bug18787|
create database bug18344_012345678901|  use bug18344_012345678901|
create procedure bug18344() begin end|
create procedure bug18344_2() begin end|
create database bug18344_0123456789012|  use bug18344_0123456789012|
create procedure bug18344() begin end|
create procedure bug18344_2() begin end|
use test|
select schema_name from information_schema.schemata where    schema_name like 'bug18344%'|
select routine_name,routine_schema from information_schema.routines where   routine_schema like 'bug18344%'|
drop database bug18344_012345678901|  drop database bug18344_0123456789012|  select schema_name from information_schema.schemata where    schema_name like 'bug18344%'|
select routine_name,routine_schema from information_schema.routines where   routine_schema like 'bug18344%'|
drop function if exists bug12472|
create function bug12472() returns int return (select count(*) from t1)|
create table t3 as select bug12472() as i|
show create table t3|
select * from t3|
drop table t3|
create view v1 as select bug12472() as j|
create table t3 as select * from v1|
show create table t3|
select * from t3|
drop table t3|
drop view v1|
drop function bug12472|
DROP FUNCTION IF EXISTS bug18589_f1|
DROP PROCEDURE IF EXISTS bug18589_p1|
DROP PROCEDURE IF EXISTS bug18589_p2|
CREATE FUNCTION bug18589_f1(arg TEXT) RETURNS TEXT BEGIN   RETURN CONCAT(arg, ""); END|
CREATE PROCEDURE bug18589_p1(arg TEXT, OUT ret TEXT) BEGIN   SET ret = CONCAT(arg, ""); END|
CREATE PROCEDURE bug18589_p2(arg TEXT) BEGIN   DECLARE v TEXT;   CALL bug18589_p1(arg, v);   SELECT v; END|
SELECT bug18589_f1(REPEAT("a", 767))|
SET @bug18589_v1 = ""|
CALL bug18589_p1(REPEAT("a", 767), @bug18589_v1)|
SELECT @bug18589_v1|
CALL bug18589_p2(REPEAT("a", 767))|
DROP FUNCTION bug18589_f1|
DROP PROCEDURE bug18589_p1|
DROP PROCEDURE bug18589_p2|
DROP FUNCTION IF EXISTS bug18037_f1|
DROP PROCEDURE IF EXISTS bug18037_p1|
DROP PROCEDURE IF EXISTS bug18037_p2|
CREATE FUNCTION bug18037_f1() RETURNS INT BEGIN   RETURN @@server_id; END|
CREATE PROCEDURE bug18037_p1() BEGIN   DECLARE v INT DEFAULT @@server_id; END|
CREATE PROCEDURE bug18037_p2() BEGIN   CASE @@server_id   WHEN -1 THEN     SELECT 0;   ELSE     SELECT 1;   END CASE; END|
SELECT bug18037_f1()|
CALL bug18037_p1()|
CALL bug18037_p2()|
DROP FUNCTION bug18037_f1|
DROP PROCEDURE bug18037_p1|
DROP PROCEDURE bug18037_p2|
use test|
create table t3 (i int)|
insert into t3 values (1), (2)|
create database mysqltest1|
use mysqltest1|
create function bug17199() returns varchar(2) deterministic return 'ok'|
use test|
select *, mysqltest1.bug17199() from t3|
use mysqltest1|
create function bug18444(i int) returns int no sql deterministic return i + 1|
use test|
select mysqltest1.bug18444(i) from t3|
drop database mysqltest1|
create database mysqltest1 charset=utf8|
create database mysqltest2 charset=utf8|
create procedure mysqltest1.p1() begin   alter database character set koi8r; end|
use mysqltest1|
call p1()|
show create database mysqltest1|
show create database mysqltest2|
alter database mysqltest1 character set utf8|
use mysqltest2|
call mysqltest1.p1()|
show create database mysqltest1|
show create database mysqltest2|
drop database mysqltest1|
drop database mysqltest2|
use test|
drop table if exists t3|
drop procedure if exists bug15217|
create table t3 as select 1|
create procedure bug15217() begin   declare var1 char(255);   declare cur1 cursor for select * from t3;   open cur1;   fetch cur1 into var1;   select concat('data was: /', var1, '/');   close cur1; end |
call bug15217()|
flush tables |
call bug15217()|
drop table t3|
drop procedure bug15217|
DROP PROCEDURE IF EXISTS bug21013 |
CREATE PROCEDURE bug21013(IN lim INT) BEGIN   DECLARE i INT DEFAULT 0;   WHILE (i < lim) DO     SET @b = LOCATE(_latin1'b', @a, 1);     SET i = i + 1;   END WHILE; END |
SET @a = _latin2"aaaaaaaaaa" |
CALL bug21013(10) |
DROP PROCEDURE bug21013 |
DROP DATABASE IF EXISTS mysqltest1|
DROP DATABASE IF EXISTS mysqltest2|
CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8|
CREATE DATABASE mysqltest2 DEFAULT CHARACTER SET utf8|
use mysqltest1|
CREATE FUNCTION bug16211_f1() RETURNS CHAR(10)   RETURN ""|
CREATE FUNCTION bug16211_f2() RETURNS CHAR(10) CHARSET koi8r   RETURN ""|
CREATE FUNCTION mysqltest2.bug16211_f3() RETURNS CHAR(10)   RETURN ""|
CREATE FUNCTION mysqltest2.bug16211_f4() RETURNS CHAR(10) CHARSET koi8r   RETURN ""|
SHOW CREATE FUNCTION bug16211_f1|
SHOW CREATE FUNCTION bug16211_f2|
SHOW CREATE FUNCTION mysqltest2.bug16211_f3|
SHOW CREATE FUNCTION mysqltest2.bug16211_f4|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest1" AND ROUTINE_NAME = "bug16211_f1"|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest1" AND ROUTINE_NAME = "bug16211_f2"|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest2" AND ROUTINE_NAME = "bug16211_f3"|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest2" AND ROUTINE_NAME = "bug16211_f4"|
SELECT CHARSET(bug16211_f1())|
SELECT CHARSET(bug16211_f2())|
SELECT CHARSET(mysqltest2.bug16211_f3())|
SELECT CHARSET(mysqltest2.bug16211_f4())|
ALTER DATABASE mysqltest1 CHARACTER SET cp1251|
ALTER DATABASE mysqltest2 CHARACTER SET cp1251|
SHOW CREATE FUNCTION bug16211_f1|
SHOW CREATE FUNCTION bug16211_f2|
SHOW CREATE FUNCTION mysqltest2.bug16211_f3|
SHOW CREATE FUNCTION mysqltest2.bug16211_f4|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest1" AND ROUTINE_NAME = "bug16211_f1"|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest1" AND ROUTINE_NAME = "bug16211_f2"|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest2" AND ROUTINE_NAME = "bug16211_f3"|
SELECT dtd_identifier FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = "mysqltest2" AND ROUTINE_NAME = "bug16211_f4"|
SELECT CHARSET(bug16211_f1())|
SELECT CHARSET(bug16211_f2())|
SELECT CHARSET(mysqltest2.bug16211_f3())|
SELECT CHARSET(mysqltest2.bug16211_f4())|
use test|
DROP DATABASE mysqltest1|
DROP DATABASE mysqltest2|
CREATE DATABASE mysqltest1 DEFAULT CHARACTER SET utf8|
use mysqltest1|
CREATE PROCEDURE bug16676_p1(   IN p1 CHAR(10),   INOUT p2 CHAR(10),   OUT p3 CHAR(10)) BEGIN   SELECT CHARSET(p1), COLLATION(p1);   SELECT CHARSET(p2), COLLATION(p2);   SELECT CHARSET(p3), COLLATION(p3); END|
CREATE PROCEDURE bug16676_p2(   IN p1 CHAR(10) CHARSET koi8r,   INOUT p2 CHAR(10) CHARSET cp1251,   OUT p3 CHAR(10) CHARSET greek) BEGIN   SELECT CHARSET(p1), COLLATION(p1);   SELECT CHARSET(p2), COLLATION(p2);   SELECT CHARSET(p3), COLLATION(p3); END|
SET @v2 = 'b'|
SET @v3 = 'c'|
CALL bug16676_p1('a', @v2, @v3)|
CALL bug16676_p2('a', @v2, @v3)|
use test|
DROP DATABASE mysqltest1|
drop table if exists t3|
drop table if exists t4|
drop procedure if exists bug8153_subselect|
drop procedure if exists bug8153_subselect_a|
drop procedure if exists bug8153_subselect_b|
drop procedure if exists bug8153_proc_a|
drop procedure if exists bug8153_proc_b|
create table t3 (a int)|
create table t4 (a int)|
insert into t3 values (1), (1), (2), (3)|
insert into t4 values (1), (1)|
create procedure bug8153_subselect() begin   declare continue handler for sqlexception   begin     select 'statement failed';   end;   update t3 set a=a+1 where (select a from t4 where a=1) is null;   select 'statement after update'; end|
call bug8153_subselect()|
select * from t3|
call bug8153_subselect()|
select * from t3|
drop procedure bug8153_subselect|
create procedure bug8153_subselect_a() begin   declare continue handler for sqlexception   begin     select 'in continue handler';   end;   select 'reachable code a1';   call bug8153_subselect_b();   select 'reachable code a2'; end|
create procedure bug8153_subselect_b() begin   select 'reachable code b1';   update t3 set a=a+1 where (select a from t4 where a=1) is null;   select 'unreachable code b2'; end|
call bug8153_subselect_a()|
select * from t3|
call bug8153_subselect_a()|
select * from t3|
drop procedure bug8153_subselect_a|
drop procedure bug8153_subselect_b|
create procedure bug8153_proc_a() begin   declare continue handler for sqlexception   begin     select 'in continue handler';   end;   select 'reachable code a1';   call bug8153_proc_b();   select 'reachable code a2'; end|
create procedure bug8153_proc_b() begin   select 'reachable code b1';   select no_such_function();   select 'unreachable code b2'; end|
call bug8153_proc_a()|
drop procedure bug8153_proc_a|
drop procedure bug8153_proc_b|
drop table t3|
drop table t4|
drop procedure if exists bug19862|
CREATE TABLE t11 (a INT)|
CREATE TABLE t12 (a INT)|
CREATE FUNCTION bug19862(x INT) RETURNS INT   BEGIN     INSERT INTO t11 VALUES (x);     RETURN x+1;   END|
INSERT INTO t12 VALUES (1), (2)|
SELECT bug19862(a) FROM t12 ORDER BY 1|
SELECT * FROM t11|
DROP TABLE t11, t12|
DROP FUNCTION bug19862|
drop table if exists t3|
drop database if exists mysqltest1|
create table t3 (a int)|
insert into t3 (a) values (1), (2)|
create database mysqltest1|
use mysqltest1|
drop database mysqltest1|
select database()|
select * from (select 1 as a) as t1 natural join (select * from test.t3) as t2|
use test|
drop table t3|
DROP PROCEDURE IF EXISTS bug16899_p1|
DROP FUNCTION IF EXISTS bug16899_f1|
CREATE DEFINER=1234567890abcdefGHIKLsdafdsjakfhkshfkshsndvkjsddngjhasdkjghskahfdksjhcnsndkhjkghskjfjsdhfkhskfdhksjdhfkjshfksh@localhost PROCEDURE bug16899_p1() BEGIN   SET @a = 1; END|
CREATE DEFINER=some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890X   FUNCTION bug16899_f1() RETURNS INT BEGIN   RETURN 1; END|
drop procedure if exists bug21416|
create procedure bug21416() show create procedure bug21416|
call bug21416()|
drop procedure bug21416|
DROP PROCEDURE IF EXISTS bug21414|
CREATE PROCEDURE bug21414() SELECT 1|
FLUSH TABLES WITH READ LOCK|
DROP PROCEDURE bug21414|
UNLOCK TABLES|
DROP PROCEDURE bug21414|
CREATE TABLE t3 (   Member_ID varchar(15) NOT NULL,   PRIMARY KEY (Member_ID) )|
CREATE TABLE t4 (   ID int(10) unsigned NOT NULL auto_increment,   Member_ID varchar(15) NOT NULL default '',   Action varchar(12) NOT NULL,   Action_Date datetime NOT NULL,   Track varchar(15) default NULL,   User varchar(12) default NULL,   Date_Updated timestamp NOT NULL default CURRENT_TIMESTAMP on update     CURRENT_TIMESTAMP,   PRIMARY KEY (ID),   KEY Action (Action),   KEY Action_Date (Action_Date) )|
INSERT INTO t3(Member_ID) VALUES   ('111111'), ('222222'), ('333333'), ('444444'), ('555555'), ('666666')|
INSERT INTO t4(Member_ID, Action, Action_Date, Track) VALUES   ('111111', 'Disenrolled', '2006-03-01', 'CAD' ),   ('111111', 'Enrolled', '2006-03-01', 'CAD' ),   ('111111', 'Disenrolled', '2006-07-03', 'CAD' ),   ('222222', 'Enrolled', '2006-03-07', 'CAD' ),   ('222222', 'Enrolled', '2006-03-07', 'CHF' ),   ('222222', 'Disenrolled', '2006-08-02', 'CHF' ),   ('333333', 'Enrolled', '2006-03-01', 'CAD' ),   ('333333', 'Disenrolled', '2006-03-01', 'CAD' ),   ('444444', 'Enrolled', '2006-03-01', 'CAD' ),   ('555555', 'Disenrolled', '2006-03-01', 'CAD' ),   ('555555', 'Enrolled', '2006-07-21', 'CAD' ),   ('555555', 'Disenrolled', '2006-03-01', 'CHF' ),   ('666666', 'Enrolled', '2006-02-09', 'CAD' ),   ('666666', 'Enrolled', '2006-05-12', 'CHF' ),   ('666666', 'Disenrolled', '2006-06-01', 'CAD' )|
DROP FUNCTION IF EXISTS bug21493|
CREATE FUNCTION bug21493(paramMember VARCHAR(15)) RETURNS varchar(45) BEGIN DECLARE tracks VARCHAR(45); SELECT GROUP_CONCAT(Track SEPARATOR ', ') INTO tracks FROM t4   WHERE Member_ID=paramMember AND Action='Enrolled' AND          (Track,Action_Date) IN (SELECT Track, MAX(Action_Date) FROM t4                                   WHERE Member_ID=paramMember GROUP BY Track); RETURN tracks; END|
SELECT bug21493('111111')|
SELECT bug21493('222222')|
SELECT bug21493(Member_ID) FROM t3|
DROP FUNCTION bug21493|
DROP TABLE t3,t4|
drop function if exists func_20028_a|
drop function if exists func_20028_b|
drop function if exists func_20028_c|
drop procedure if exists proc_20028_a|
drop procedure if exists proc_20028_b|
drop procedure if exists proc_20028_c|
drop table if exists table_20028|
create table table_20028 (i int)|
SET @save_sql_mode=@@sql_mode|
SET sql_mode=''|
create function func_20028_a() returns integer begin   declare temp integer;   select i into temp from table_20028 limit 1;   return ifnull(temp, 0); end|
create function func_20028_b() returns integer begin   return func_20028_a(); end|
create function func_20028_c() returns integer begin   declare div_zero integer;   set SQL_MODE='TRADITIONAL';   select 1/0 into div_zero;   return div_zero; end|
create procedure proc_20028_a() begin   declare temp integer;   select i into temp from table_20028 limit 1; end|
create procedure proc_20028_b() begin   call proc_20028_a(); end|
create procedure proc_20028_c() begin   declare div_zero integer;   set SQL_MODE='TRADITIONAL';   select 1/0 into div_zero; end|
select func_20028_a()|
select func_20028_b()|
select func_20028_c()|
call proc_20028_a()|
call proc_20028_b()|
call proc_20028_c()|
SET sql_mode='TRADITIONAL'|
drop function func_20028_a|
drop function func_20028_b|
drop function func_20028_c|
drop procedure proc_20028_a|
drop procedure proc_20028_b|
drop procedure proc_20028_c|
create function func_20028_a() returns integer begin   declare temp integer;   select i into temp from table_20028 limit 1;   return ifnull(temp, 0); end|
create function func_20028_b() returns integer begin   return func_20028_a(); end|
create function func_20028_c() returns integer begin   declare div_zero integer;   set SQL_MODE='';   select 1/0 into div_zero;   return div_zero; end|
create procedure proc_20028_a() begin   declare temp integer;   select i into temp from table_20028 limit 1; end|
create procedure proc_20028_b() begin   call proc_20028_a(); end|
create procedure proc_20028_c() begin   declare div_zero integer;   set SQL_MODE='';   select 1/0 into div_zero; end|
select func_20028_a()|
select func_20028_b()|
select func_20028_c()|
call proc_20028_a()|
call proc_20028_b()|
call proc_20028_c()|
SET @@sql_mode=@save_sql_mode|
drop function func_20028_a|
drop function func_20028_b|
drop function func_20028_c|
drop procedure proc_20028_a|
drop procedure proc_20028_b|
drop procedure proc_20028_c|
drop table table_20028|
drop procedure if exists proc_21462_a|
drop procedure if exists proc_21462_b|
create procedure proc_21462_a() begin   select "Called A"; end|
create procedure proc_21462_b(x int) begin   select "Called B"; end|
call proc_21462_a|
call proc_21462_a()|
call proc_21462_a(1)|
call proc_21462_b|
call proc_21462_b()|
call proc_21462_b(1)|
drop procedure proc_21462_a|
drop procedure proc_21462_b|
drop table if exists t3|
drop procedure if exists proc_bug19733|
create table t3 (s1 int)|
create procedure proc_bug19733() begin   declare v int default 0;   while v < 100 do     create index i on t3 (s1);     drop index i on t3;     set v = v + 1;   end while; end|
call proc_bug19733()|
call proc_bug19733()|
call proc_bug19733()|
drop procedure proc_bug19733|
drop table t3|
DROP PROCEDURE IF EXISTS p1|
DROP VIEW IF EXISTS v1, v2|
DROP TABLE IF EXISTS t3, t4|
CREATE TABLE t3 (t3_id INT)|
INSERT INTO t3 VALUES (0)|
INSERT INTO t3 VALUES (1)|
CREATE TABLE t4 (t4_id INT)|
INSERT INTO t4 VALUES (2)|
CREATE VIEW v1 AS SELECT t3.t3_id, t4.t4_id FROM t3 JOIN t4 ON t3.t3_id = 0|
CREATE VIEW v2 AS SELECT t3.t3_id AS t3_id_1, v1.t3_id AS t3_id_2, v1.t4_id FROM t3 LEFT JOIN v1 ON t3.t3_id = 0|
CREATE PROCEDURE p1() SELECT * FROM v2|
CALL p1()|
CALL p1()|
DROP PROCEDURE p1|
DROP VIEW v1, v2|
DROP TABLE t3, t4|
select test.pi(), test.pi ();
select test.pi(), test.pi ();
drop function if exists test.database;
drop function if exists test.current_user;
select test.database(), test.database ();
select test.current_user(), test.current_user ();
select test.md5("aaa"), test.md5 ("aaa");
select test.database(), test.database ();
select test.current_user(), test.current_user ();
select test.md5("aaa"), test.md5 ("aaa");
drop function test.database;
drop function test.current_user;
DROP TABLE IF EXISTS bug23760|
DROP TABLE IF EXISTS bug23760_log|
DROP PROCEDURE IF EXISTS bug23760_update_log|
DROP PROCEDURE IF EXISTS bug23760_test_row_count|
DROP FUNCTION IF EXISTS bug23760_rc_test|
CREATE TABLE bug23760 (   id INT NOT NULL AUTO_INCREMENT ,   num INT NOT NULL ,   PRIMARY KEY ( id )  )|
CREATE TABLE bug23760_log (  id INT NOT NULL AUTO_INCREMENT ,  reason VARCHAR(50)NULL ,  ammount INT NOT NULL ,   PRIMARY KEY ( id )  )|
CREATE PROCEDURE bug23760_update_log(r Varchar(50), a INT) BEGIN   INSERT INTO bug23760_log (reason, ammount) VALUES(r, a); END|
CREATE PROCEDURE bug23760_test_row_count() BEGIN   UPDATE bug23760 SET num = num + 1;   CALL bug23760_update_log('Test is working', ROW_COUNT());   UPDATE bug23760 SET num = num - 1; END|
CREATE PROCEDURE bug23760_test_row_count2(level INT) BEGIN   IF level THEN     UPDATE bug23760 SET num = num + 1;     CALL bug23760_update_log('Test2 is working', ROW_COUNT());     CALL bug23760_test_row_count2(level - 1);   END IF; END|
CREATE FUNCTION bug23760_rc_test(in_var INT) RETURNS INT RETURN in_var|
INSERT INTO bug23760 (num) VALUES (0), (1), (1), (2), (3), (5), (8)|
SELECT ROW_COUNT()|
CALL bug23760_test_row_count()|
SELECT * FROM bug23760_log ORDER BY id|
SET @save_max_sp_recursion= @@max_sp_recursion_depth|
SELECT @save_max_sp_recursion|
SET max_sp_recursion_depth= 5|
SELECT @@max_sp_recursion_depth|
CALL bug23760_test_row_count2(2)|
SELECT ROW_COUNT()|
SELECT * FROM bug23760_log ORDER BY id|
SELECT * FROM bug23760 ORDER by ID|
SET max_sp_recursion_depth= @save_max_sp_recursion|
SELECT bug23760_rc_test(123)|
INSERT INTO bug23760 (num) VALUES (13), (21), (34), (55)|
SELECT bug23760_rc_test(ROW_COUNT())|
DROP TABLE bug23760, bug23760_log|
DROP PROCEDURE bug23760_update_log|
DROP PROCEDURE bug23760_test_row_count|
DROP PROCEDURE bug23760_test_row_count2|
DROP FUNCTION bug23760_rc_test|
DROP PROCEDURE IF EXISTS bug24117|
DROP TABLE IF EXISTS t3|
CREATE TABLE t3(c1 ENUM('abc'))|
INSERT INTO t3 VALUES('abc')|
CREATE PROCEDURE bug24117() BEGIN   DECLARE t3c1 ENUM('abc');   DECLARE mycursor CURSOR FOR SELECT c1 FROM t3;   OPEN mycursor;   FLUSH TABLES;   FETCH mycursor INTO t3c1;   CLOSE mycursor; END|
CALL bug24117()|
DROP PROCEDURE bug24117|
DROP TABLE t3|
drop function if exists func_8407_a|
drop function if exists func_8407_b|
create function func_8407_a() returns int begin   declare x int;   declare continue handler for sqlexception   begin   end;   select 1 from no_such_view limit 1 into x;   return x; end|
create function func_8407_b() returns int begin   declare x int default 0;   declare continue handler for sqlstate '42S02'   begin     set x:= x+1000;   end;   case (select 1 from no_such_view limit 1)     when 1 then set x:= x+1;     when 2 then set x:= x+2;     else set x:= x+100;   end case;   set x:=x + 500;   return x; end|
select func_8407_a()|
select func_8407_b()|
drop function func_8407_a|
drop function func_8407_b|
drop table if exists table_26503|
drop procedure if exists proc_26503_ok_1|
drop procedure if exists proc_26503_ok_2|
drop procedure if exists proc_26503_ok_3|
drop procedure if exists proc_26503_ok_4|
create table table_26503(a int unique)|
create procedure proc_26503_ok_1(v int) begin   declare i int default 5;   declare continue handler for sqlexception   begin     select 'caught something';     retry:     while i > 0 do       begin         set i = i - 1;         select 'looping', i;         iterate retry;         select 'dead code';       end;     end while retry;     select 'leaving handler';   end;   select 'do something';   insert into table_26503 values (v);   select 'do something again';   insert into table_26503 values (v); end|
create procedure proc_26503_ok_2(v int) begin   declare i int default 5;   declare continue handler for sqlexception   begin     select 'caught something';     retry:     while i > 0 do       begin         set i = i - 1;         select 'looping', i;         leave retry;         select 'dead code';       end;     end while;     select 'leaving handler';   end;   select 'do something';   insert into table_26503 values (v);   select 'do something again';   insert into table_26503 values (v); end|
create procedure proc_26503_ok_3(v int) begin   declare i int default 5; retry:   begin     declare continue handler for sqlexception     begin       select 'caught something';       retry:       while i > 0 do         begin           set i = i - 1;           select 'looping', i;           iterate retry;           select 'dead code';         end;       end while retry;       select 'leaving handler';     end;     select 'do something';     insert into table_26503 values (v);     select 'do something again';     insert into table_26503 values (v);   end; end|
create procedure proc_26503_ok_4(v int) begin   declare i int default 5; retry:   begin     declare continue handler for sqlexception     begin       select 'caught something';       retry:       while i > 0 do         begin           set i = i - 1;           select 'looping', i;           leave retry;           select 'dead code';         end;       end while;       select 'leaving handler';     end;     select 'do something';     insert into table_26503 values (v);     select 'do something again';     insert into table_26503 values (v);   end; end|
call proc_26503_ok_1(1)|
call proc_26503_ok_2(2)|
call proc_26503_ok_3(3)|
call proc_26503_ok_4(4)|
drop table table_26503|
drop procedure proc_26503_ok_1|
drop procedure proc_26503_ok_2|
drop procedure proc_26503_ok_3|
drop procedure proc_26503_ok_4|
DROP FUNCTION IF EXISTS bug25373|
CREATE FUNCTION bug25373(p1 INTEGER) RETURNS INTEGER LANGUAGE SQL DETERMINISTIC RETURN p1;|
CREATE TABLE t3 (f1 INT, f2 FLOAT)|
INSERT INTO t3 VALUES (1, 3.4), (1, 2), (1, 0.9), (2, 8), (2, 7)|
SELECT SUM(f2), bug25373(f1) FROM t3 GROUP BY bug25373(f1) WITH ROLLUP|
DROP FUNCTION bug25373|
DROP TABLE t3|
DROP DATABASE IF EXISTS mysqltest1|
DROP DATABASE IF EXISTS mysqltest2|
CREATE DATABASE mysqltest1|
CREATE DATABASE mysqltest2|
CREATE PROCEDURE mysqltest1.p1()   DROP DATABASE mysqltest2|
use mysqltest2|
CALL mysqltest1.p1()|
SELECT DATABASE()|
DROP DATABASE mysqltest1|
use test|
drop function if exists bug20777|
drop table if exists examplebug20777|
create function bug20777(f1 bigint unsigned) returns bigint unsigned begin   set f1 = (f1 - 10); set f1 = (f1 + 10); return f1; end|
CREATE TABLE 🐬(a INT);
CREATE TABLE t1(🐬 INT);
DROP TABLE 🐬;
PREPARE stmt FROM "SELECT 'x' AS '🐬'";
EXECUTE stmt;
CREATE TABLE 🐬(a INT);
CREATE TABLE t1(🐬 INT);
PREPARE stmt FROM "SELECT 'x' AS '🐬'";
EXECUTE stmt;
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2);
(SELECT COUNT(a) AS cnt FROM t2) AS derived              ON TRUE              WHERE t1.a > derived.cnt;
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) OR t1.a = 2;
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2) AND                    t1.a < (SELECT MAX(a) * 4 AS mx FROM t2);
LEFT JOIN (SELECT COUNT(a) AS cnt FROM t2) AS lj1 ON TRUE              LEFT JOIN (SELECT MAX(a) * 4 AS mx FROM t2) AS lj2 ON TRUE              WHERE t1.a > cnt AND t1.a < mx;
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t3 GROUP BY a);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1);
WHERE t1.a > (SELECT a from t1 WHERE false);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 1);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 1 OFFSET 0);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 0);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION SELECT 1 LIMIT 2 OFFSET 1);
WHERE t1.a > (SELECT COUNT(a) AS cnt FROM t2 UNION (SELECT 1 LIMIT 1));
WHERE t1.a > (SELECT a FROM t2 LIMIT 1);
WHERE t1.a > (SELECT a FROM t2);
FROM t1                  JOIN t2                  ON t1.a+t2.a = (SELECT COUNT(*) FROM t1);
FROM t1                  JOIN t2                  ON t1.a+t2.a = (SELECT COUNT(*) FROM t1)                  JOIN t3                  ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
FROM t1                  LEFT JOIN ( t2                              JOIN t3                              ON t2.a = (SELECT COUNT(*) FROM t1) )                  ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
FROM t1                  STRAIGHT_JOIN ( t2                                  STRAIGHT_JOIN t3                                  ON t2.a = (SELECT COUNT(*) FROM t1) )                  ON t1.a + (SELECT MIN(a) FROM t1) = t3.b;
FROM t2                   LEFT OUTER JOIN (SELECT -SUM(a) AS cnt FROM t1) AS derived                   ON TRUE;
SELECT derived0.cnct AS subq FROM t1      LEFT JOIN LATERAL (WITH RECURSIVE dt AS (SELECT t1.a AS a UNION                                               SELECT (dt.a + 1)                                               FROM dt WHERE dt.a < 10)                         SELECT t1.a * CONCAT(COUNT(0), '.', FLOOR(AVG(dt.a))) AS cnct                         FROM dt) derived0      ON TRUE;
SELECT (derived_1.`COUNT(*) + outer_t.a` +         IFNULL(derived_0.`MAX(b)`,0)) + 1 + 5 AS mx FROM (SELECT STRAIGHT_JOIN MAX(outer_t.b) AS `MAX(b)`,                            outer_t.a AS d_1       FROM t1 outer_t       GROUP BY outer_t.a) derived_0      LEFT JOIN LATERAL (SELECT (COUNT(0) + derived_0.d_1)                                AS `COUNT(*) + outer_t.a`                         FROM t1) derived_1      ON(true) WHERE true;
while ($i) { dec $i;
} while ($i) { dec $i;
} COMMIT;
EXECUTE p;
DROP PREPARE p;
PREPARE s FROM   'SELECT a FROM t1 WHERE a=(SELECT MAX(a) FROM t1) AND (a="20060606155555")';
EXECUTE s;
PREPARE s FROM   'SELECT a FROM t1 WHERE a=(SELECT MAX(a) FROM t1) AND (a="20060606155555")';
EXECUTE s;
EXECUTE p;
EXECUTE p;
EXECUTE p;
PREPARE prep_stmt FROM 'SELECT col_varchar_key  FROM (SELECT * FROM X        WHERE X.col_varchar_key > (SELECT MIN(col_varchar_key)                                   FROM X)) AS table1';
EXECUTE prep_stmt;
PREPARE prep_stmt FROM 'SELECT (SELECT t2.pk FROM (m AS t1                             JOIN                             (m AS t2                              JOIN m AS t3))),         (SELECT SUM(pk) FROM m),         MIN(table1.pk)  FROM (m AS table1 JOIN        ((view_m AS table2          JOIN          m AS table3))        ON (table3.pk = table2.pk))';
EXECUTE prep_stmt;
PREPARE p FROM 'SELECT (SELECT MAX(i) FROM n) AS field2,         COUNT(table1.i) AS field3 ,         (SELECT AVG(i) FROM n) AS field4  FROM (n AS table1        JOIN        ( view_n AS table2          JOIN          n AS table3          ON true )        ON (table2.i = table2.i))';
EXECUTE p;
SELECT alias1.col_decimal_10_8 AS field1 ,        ( SELECT SUM(table1.col_smallint ) AS SQ1_field1          FROM ( t1 as table1 RIGHT JOIN t1 as table2 ON 1 )        ) AS field2 ,        GROUPING( LOG(alias1.col_int) ) AS field3 FROM ( t1 AS alias1        JOIN        t1 AS alias2 ON 1  ) WHERE alias2.pk IN ( SELECT col_char_255 FROM t1 ) GROUP BY field1, field2, LOG(alias1.col_int) WITH ROLLUP ORDER BY alias1.col_datetime, field1, field2, LOG(alias1.col_int) ;
LET $MYSQL_TMP_DIR_UCASE= `SELECT upper('$MYSQL_TMP_DIR')`;
LET $MYSQL_TMP_DIR_LCASE= `SELECT lower('$MYSQL_TMP_DIR')`;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
call mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
connect (monitor, localhost, root);
FROM performance_schema.status_by_thread   WHERE VARIABLE_NAME LIKE 'HANDLER_%' AND VARIABLE_VALUE > 0     AND THREAD_ID IN (SELECT thread_id from test.thread_to_monitor);
SHOW CREATE TABLE t1 PARTITION (subp0);
INSERT INTO t1 PARTITION () VALUES (1, "error");
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 READ, t1 as TableAlias READ;
UNLOCK TABLES;
SELECT * FROM t1 PARTITION;
SELECT * FROM t1 AS PARTITION;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOAD DATA INFILE 'loadtest.txt' INTO TABLE t1 PARTITION (pNeg);
LOAD DATA INFILE 'loadtest.txt' INTO TABLE t1 PARTITION (pNeg, subp4, subp5);
LOCK TABLE t1 WRITE;
LOAD DATA INFILE 'loadtest.txt' INTO TABLE t1 PARTITION (pNeg, `p10-99`) CHARACTER SET latin1;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
DELETE t1 PARTITION (pNeg), t3 FROM t1, t3 WHERE t1.a = t3.a AND t3.b = 'subp3';
TRUNCATE TABLE t1 PARTITION(`p10-99`);
CREATE TABLE t2 LIKE t1 PARTITION (p0, p2);
SET @old_innodb_thread_concurrency := @@innodb_thread_concurrency;
SET @old_innodb_thread_sleep_delay := @@innodb_thread_sleep_delay;
CREATE TABLE t1 (user_num BIGINT,  hours SMALLINT,  KEY user_num (user_num)) ENGINE = InnoDB    PARTITION BY RANGE COLUMNS (hours) (PARTITION hour_003 VALUES LESS THAN (3),  PARTITION hour_004 VALUES LESS THAN (4),  PARTITION hour_005 VALUES LESS THAN (5),  PARTITION hour_last VALUES LESS THAN (MAXVALUE));
SET @old_transaction_isolation := @@session.transaction_isolation;
INSERT INTO t1 VALUES (concat(repeat('MySQL',100),'1'),repeat('0',257));
INSERT INTO t1 VALUES (concat(repeat('MySQL',100),'3'),repeat('0',257));
INSERT INTO t1 VALUES (concat(repeat('MySQL',100),'2'),repeat('0',257));
SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a ASC;
SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a DESC;
SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a ASC;
SELECT right(a,1) FROM t1 WHERE b = repeat('0',257) ORDER BY a DESC;
connect (con1, localhost, root,,);
disconnect con1;
UNLOCK TABLES;
CREATE TABLE t5 (     f1 INT,     f2 INT ) ENGINE=InnoDB PARTITION BY RANGE COLUMNS(f1,f2) (     PARTITION p0 VALUES LESS THAN (10000,12),     PARTITION p1 VALUES LESS THAN (MAXVALUE, MAXVALUE) );
CREATE TABLE t6 (     a INT,     b INT ) ENGINE=InnoDB PARTITION BY RANGE COLUMNS(a,b) SUBPARTITION BY KEY(a,b) SUBPARTITIONS 2 (     PARTITION p0 VALUES LESS THAN (10000,12),     PARTITION p1 VALUES LESS THAN (MAXVALUE, MAXVALUE) );
LET $MYSQL_DATA_DIR = `select @@datadir`;
`f1` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,        `f2` MEDIUMTEXT NOT NULL,        `f3` CHAR(100) NOT NULL,        `f4` TINYINT(1) unsigned NOT NULL,        PRIMARY KEY (`f1`,`f4`)      ) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=latin1      PARTITION BY LIST (`f4`)      (PARTITION p0 VALUES IN (0) ENGINE = InnoDB,       PARTITION p1 VALUES IN (1) DATA DIRECTORY = '$MYSQL_TMP_DIR/temp_dir' ENGINE = InnoDB);
call mtr.add_suppression("Missing .ibd file for table");
HANDLER t1 OPEN;
HANDLER t1 READ `PRIMARY` FIRST;
HANDLER t1 READ `PRIMARY` NEXT;
HANDLER t1 READ `PRIMARY` NEXT;
HANDLER t1 READ `PRIMARY` NEXT;
HANDLER t1 READ `PRIMARY` NEXT;
HANDLER t1 READ `PRIMARY` LAST;
HANDLER t1 READ `PRIMARY` PREV;
HANDLER t1 READ `PRIMARY` PREV;
HANDLER t1 READ `PRIMARY` PREV;
HANDLER t1 READ ab_asc FIRST;
HANDLER t1 READ ab_asc NEXT;
HANDLER t1 READ ab_asc NEXT;
HANDLER t1 READ ab_asc NEXT;
HANDLER t1 READ ab_asc NEXT;
HANDLER t1 READ ab_asc LAST;
HANDLER t1 READ ab_asc PREV;
HANDLER t1 READ ab_asc PREV;
HANDLER t1 READ ab_asc PREV;
HANDLER t1 CLOSE;
RESET PERSIST IF EXISTS;
RESET PERSIST IF EXISTS max_connections, long_query_time;
RESET PERSIST max_connections, long_query_time;
connect (conn1,localhost,root,,);
connect (conn2,localhost,root,,);
disconnect conn1;
disconnect conn2;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
lock tables mysql.general_log WRITE;
lock tables mysql.slow_log WRITE;
lock tables mysql.general_log READ;
lock tables mysql.slow_log READ;
connect (con1, localhost, root,,);
disconnect con1;
prepare st_ins from 'insert into t1 set emp = ?, salary = ?, l = ?, r = ?';
execute st_ins using @arg_nam, @arg_sal, @arg_l, @arg_r ;
execute st_ins using @arg_nam, @arg_sal, @arg_l, @arg_r ;
execute st_ins using @arg_nam, @arg_sal, @arg_l, @arg_r ;
execute st_ins using @arg_nam, @arg_sal, @arg_l, @arg_r ;
execute st_ins using @arg_nam, @arg_sal, @arg_l, @arg_r ;
execute st_ins using @arg_nam, @arg_sal, @arg_l, @arg_r ;
prepare st_raise_base from 'update t1 set salary = salary * ( 1 + ? ) where r - l = 1';
prepare st_raise_mgr  from 'update t1 set salary = salary + ? where r - l > 1';
while ($1) {   execute st_raise_base using @arg_percent;
execute st_raise_mgr  using @arg_amount;
dec $1;
} select * from t1;
prepare st_round from 'update t1 set salary = salary + ? - ( salary MOD ? )';
execute st_round using @arg_round, @arg_round;
CREATE TABLE t ( of INT );
CREATE TABLE t0 ( skip INT, locked INT, nowait INT );
CREATE PROCEDURE p() BEGIN of: LOOP LEAVE of; END LOOP of; END|
CREATE PROCEDURE p1() BEGIN skip: LOOP LEAVE skip; END LOOP skip; END|
CREATE PROCEDURE p2() BEGIN locked: LOOP LEAVE locked; END LOOP locked; END|
CREATE PROCEDURE p3() BEGIN nowait: LOOP LEAVE nowait; END LOOP nowait; END|
SELECT * FROM t1 FOR SHARE WAIT WAIT;
SELECT * FROM t1 FOR SHARE WAIT NOWAIT;
SELECT * FROM t1 FOR SHARE WAIT SKIP LOCKED;
SELECT 1 FOR UPDATE UNION SELECT 2;
SELECT 1 LOCK IN SHARE MODE UNION SELECT 2;
SELECT 1 FOR SHARE UNION SELECT 2;
SELECT * FROM t1 LEFT JOIN t2 FOR UPDATE;
SELECT * FROM t1 LEFT JOIN t2 FOR SHARE;
SELECT * FROM t1 LEFT JOIN t2 FOR SHARE OF t1 FOR UPDATE OF t2;
SELECT * FROM t1 RIGHT JOIN t2 FOR SHARE OF t1 FOR UPDATE OF t2;
CREATE PROCEDURE p1() BEGIN   DECLARE c CURSOR FOR SELECT a FROM t1 FOR UPDATE; END|
CREATE PROCEDURE p2() BEGIN   DECLARE c CURSOR FOR SELECT a FROM t1 LOCK IN SHARE MODE; END|
connect (con1, localhost, test, , test);
connect (con2,localhost,test2,,test);
disconnect con1;
disconnect con2;
connect (con1, localhost, user_1, , test);
connect (con2,localhost,user_2,,test);
disconnect con1;
disconnect con2;
SELECT 1 FROM DUAL LIMIT 1 INTO @var FOR UPDATE INTO @var;
connect (con1, localhost, root);
disconnect con1;
source include/have_debug.inc;
source include/have_debug_sync.inc;
connect (con1, localhost, root,,);
send INSERT INTO result(c1, c2, c3) SELECT * FROM t1 ON DUPLICATE KEY UPDATE c2=t1.c2, c3='UT1', update_count=update_count+1;
reap;
HANDLER t OPEN;
HANDLER t READ k1= (5);
HANDLER t CLOSE;
while ($cond) {   if ($field_value == No such row)   {   }   if ($field_value == root)   {   }   inc $rowno;
} SELECT (@id3=@id4);
HANDLER t1 OPEN;
LOCK TABLE t1 WRITE;
send TRUNCATE TABLE t1;
KILL QUERY @id;
reap;
UNLOCK TABLES;
HANDLER t1 CLOSE;
send TRUNCATE TABLE t1;
KILL QUERY @id;
reap;
UNLOCK TABLES;
source include/dd_pfs_save_state.inc;
source include/dd_pfs_report_state.inc;
while ($i > 0) {   dec $i;
} while ($i > 0) {   dec $i;
} while ($i > 0) {   dec $i;
} CREATE SCHEMA s;
while ($i > 0) {   dec $i;
} CREATE SCHEMA s1;
CHANGE REPLICATION SOURCE TO    SOURCE_USER=     'plug_user',   SOURCE_PASSWORD= 'plug_user',   SOURCE_RETRY_COUNT= 0;
WHERE t1.f1 IN (SELECT f1 FROM t4) AND t2.f1 IN (SELECT f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t2) AND                     t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t2);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
JOIN_ORDER(t2, t5@subq2, t4@subq1, t3, t1)                         JOIN_PREFIX(t2, t5@subq2, t4@subq1, t3, t1) */ count(*)              FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                 AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
WHERE t1.f1 IN (SELECT f1 FROM t4) AND t2.f1 IN (SELECT f1 FROM t5);
WHERE t1.f1 IN (SELECT f1 FROM t4) AND t2.f1 IN (SELECT f1 FROM t5);
WHERE t1.f1 IN (SELECT f1 FROM t4) AND t2.f1 IN (SELECT f1 FROM t5);
WHERE t1.f1 IN (SELECT f1 FROM t4) AND t2.f1 IN (SELECT f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
FROM t1 JOIN t2 JOIN t3                WHERE t1.f1 IN (SELECT /*+ QB_NAME(subq1) */ f1 FROM t4)                  AND t2.f1 IN (SELECT /*+ QB_NAME(subq2) */ f1 FROM t5);
SELECT INSERT(a, 10, 2, b) FROM t1;
SELECT INSERT(a, 1, 2, b) FROM t1;
PREPARE stmt1 FROM @str2;
EXECUTE stmt1 USING @ivar;
PREPARE stmt FROM 'SELECT utext FROM t1 where utext like ?';
EXECUTE stmt USING @param1;
EXECUTE stmt USING @param1;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM 'SELECT utext FROM t1 where utext like ?';
EXECUTE stmt USING @param1;
EXECUTE stmt USING @param1;
DEALLOCATE PREPARE stmt;
CREATE TABLE t1 AS SELECT REPEAT('abcd', 128) AS a;
CREATE TABLE t1 AS SELECT REPEAT('abcd', 128) AS a LIMIT 0;
CREATE TABLE t1 AS SELECT REPEAT('a',2) as s1 LIMIT 0;
CREATE TABLE t1 AS SELECT REPEAT(' ', 10) as c LIMIT 0;
CREATE PROCEDURE p1(IN val BLOB) BEGIN      SET @tval = val;      SET @sql_cmd = CONCAT_WS(' ', 'insert into t1(f1) values(?)');      PREPARE stmt FROM @sql_cmd;      EXECUTE stmt USING @tval;      DEALLOCATE PREPARE stmt; END|
SET @`tcontent`:=_binary 0x50434B000900000000000000E9000000 COLLATE `binary`/*!*/;
RENAME TABLE t1 to t2;
copy_file $MYSQLD_DATADIR/binlog.000001 $MYSQLD_DATADIR/binlog.saved;
UNLOCK TABLES;
LOCK TABLE t1 READ, v1 READ;
UNLOCK TABLES;
CREATE FUNCTION func1() RETURNS INT DETERMINISTIC BEGIN   DECLARE a int;
SELECT COUNT(*) INTO a     FROM information_schema.columns     WHERE table_name='db';
RETURN a;
END $ CREATE PROCEDURE proc1() BEGIN   DECLARE i INT;
SELECT (func1() + COUNT(*)) INTO i     FROM information_schema.tables m          JOIN information_schema.columns n          ON m.table_name = n.table_name     WHERE m.table_name='db';
END $ DELIMITER ;$ CALL proc1();
LOCK TABLE t1 WRITE, t1 as X READ, t3 READ;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ;
connect (con1, localhost, root,,);
UNLOCK TABLES;
disconnect con1;
if($log_error_ == "stderr") { } FLUSH LOGS;
perl;
use File::stat;
my $file= $ENV{'GREP_FILE'} or die("grep file not set");
my $pattern="^20";
my $stime= $ENV{'GREP_START'};
open(FILE, "$file") or die("Unable to open $file: $!");
while (<FILE>) {      my $line = $_;
my $ts = 0;
if ($stime == 0) {        print "$line";
}      elsif ($line =~ /$pattern/) {        $line =~ /([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])T([0-9][0-9]):([0-9][0-9]):([0-9][0-9])\.([0-9][0-9][0-9][0-9][0-9][0-9])[-+Z][0-9:]* *[0-9]* *?(\[.*)/;
$ts=$1.$2.$3.$4.$5.$6.$7;
if ($ts >= $stime) {          $stime= 0;
}      }    }    close(FILE);
CALL mtr.add_suppression("Plugin test_plugin_server reported: 'Wrong password supplied for plug_dest'");
CALL mtr.add_suppression("The plugin 'new_plugin_server' used to authenticate user 'new_user'@'%' is not loaded. Nobody can currently login using this account.");
connect(plug_user,localhost,plug_user,plug_dest);
disconnect plug_user;
connect(plug_user,localhost,new_user,plug_dest);
disconnect plug_user;
connect(plug_user,localhost,plug_user,plug_dest);
disconnect plug_user;
connect(plug_user,localhost,new_user,new_dest);
connect(plug_user,localhost,new_user,new_dest);
disconnect plug_user;
connect(plug_user,localhost,new_dest,new_dest_passwd);
disconnect plug_user;
connect(proxy_con,localhost,proxied_user,proxied_user_passwd);
disconnect proxy_con;
connect(proxy_con,localhost,proxy_user,proxied_user);
connect(proxy_con,localhost,proxied_user,proxied_user_passwd);
disconnect proxy_con;
connect(proxy_con,localhost,proxy_user,proxied_user);
disconnect proxy_con;
connect(proxy_con,localhost,proxied_user,proxied_user_passwd);
disconnect proxy_con;
connect(proxy_con,localhost,proxy_user,proxied_user);
connect(proxy_con,localhost,proxied_user,proxied_user_passwd);
disconnect proxy_con;
connect(proxy_con,localhost,proxy_user,proxied_user);
disconnect proxy_con;
connect(proxy_con_1,localhost,proxied_user_1,'proxied_user_1_pwd');
connect(proxy_con_2,localhost,proxied_user_2,proxied_user_2_pwd);
connect(proxy_con_3,localhost,proxied_user_3,proxied_user_3_pwd);
connect(proxy_con_4,localhost,proxied_user_4,proxied_user_4_pwd);
connect(proxy_con_5,localhost,proxied_user_5,proxied_user_5_pwd);
disconnect proxy_con_1;
disconnect proxy_con_2;
disconnect proxy_con_3;
disconnect proxy_con_4;
disconnect proxy_con_5;
[mysqlpump] exclude_databases=db1,mysql,mtr CREATE DATABASE db1;
CALL mtr.add_suppression("Incorrect information in file");
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
connect(con1, localhost, u1, foo, test);
connect(con2, localhost, u2, foo, test);
disconnect con1;
disconnect con2;
call mtr.add_suppression("Dictionary file not specified");
CALL mtr.add_suppression("currently unknown variable 'validate_password_*");
CALL mtr.add_suppression("currently unknown variable 'validate_password_*");
CREATE TABLE t1(f1 int CHECK);
CREATE TABLE t1(f1 int CHECK());
CREATE TABLE t1(f1 int CONSTRAINT CHECK());
CREATE TABLE t1(f1 int t1_ck CHECK());
CREATE TABLE t1(f1 int CONSTRAINT t1_ck CHECK());
CREATE TABLE t1(f1 int CONSTRAINT t1_ck CHECK( f1 < 10) NOT);
CREATE TABLE t1(f1 int CHECK(f1 < 10), f2 int CHECK);
CREATE TABLE t1(f1 int CHECK(f1 < 10), f2 int CHECK());
CREATE TABLE t1(f1 int CHECK(f1 < 10), f2 int CONSTRAINT CHECK());
CREATE TABLE t1(f1 int CHECK(f1 < 10), f2 int t1_f2_ck CHECK(f2 < 10));
CREATE TABLE t1(f1 int CHECK(f1 < 10), f2 int CONSTRAINT t1_f2_ck CHECK(f2 < 10) NOT);
CREATE TABLE t1(f1 int CHECK(f1 < 10), f2 int CHECK(f2 < 10) NOT);
CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK);
CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK();
CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK());
CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK(f1<10), CONSTRAINT t2_ck CHECK);
CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK(f1<10), CONSTRAINT t2_ck CHECK();
CREATE TABLE t1(f1 int, CONSTRAINT t1_ck CHECK(f1<10), CONSTRAINT t2_ck CHECK(f2 > 0) NOT);
CREATE TABLE t1(c1 INT, c2 INT, CONSTRAINT FLOAT CHECK (c2 < 10));
RENAME TABLE t1 TO t123456789012345678901234567890123456789012345678901234567890;
LOAD DATA INFILE 'tmp1.txt' INTO TABLE t1;
LOAD DATA INFILE 'tmp2.txt' INTO TABLE t1;
LOAD DATA INFILE 'tmp2.txt' IGNORE INTO TABLE t1;
LOAD DATA INFILE '../../std_data/loaddata3.dat' IGNORE INTO TABLE t1   FIELDS TERMINATED BY '' ENCLOSED BY '' IGNORE 1 LINES;
remove_file $MYSQLD_DATADIR/test/tmp1.txt;
remove_file $MYSQLD_DATADIR/test/tmp2.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.xml;
remove_file $MYSQLTEST_VARDIR/tmp/tmp2.xml;
RENAME TABLE t1 TO t2;
RENAME TABLE t1 TO t3, t2 TO t1, t3 TO t2;
ALTER TABLE t1 MODIFY COLUMN c1 FLOAT(10.3), DROP CHECK t1_chk_1, ADD CONSTRAINT CHECK(C1 > 10.1) ENFORCED;
CREATE TABLE t1 (f1 INT CHECK (f1 = default(f1)));
CREATE TABLE t1 (f1 DATETIME CHECK (f1 + UTC_DATE() > '2011-11-21'));
CREATE TABLE t1 (f1 DATETIME CHECK (f1 + UTC_TIME() > '23:11:21'));
CREATE TRIGGER before_t2_insert   BEFORE INSERT ON t2   FOR EACH ROW   BEGIN     INSERT INTO t1 VALUES(NEW.c1,NEW.c2);
END // DELIMITER ;// INSERT INTO t2 VALUES(1,20);
CREATE TRIGGER after_t2_insert   AFTER INSERT ON t2   FOR EACH ROW   BEGIN     INSERT INTO t1 VALUES(NEW.c1,NEW.c2);
END // DELIMITER ;// INSERT INTO t2 VALUES(1,30);
CREATE TRIGGER before_t2_update   BEFORE UPDATE ON t2   FOR EACH ROW   BEGIN     UPDATE t1 SET c2=NEW.c2 WHERE c1=NEW.c1;
END // DELIMITER ;// UPDATE t2 SET c2=20 WHERE c1=1;
CREATE TRIGGER after_t2_update   AFTER UPDATE ON t2   FOR EACH ROW   BEGIN     UPDATE t1 SET c2=NEW.c2 WHERE c1=NEW.c1;
END // DELIMITER ;// UPDATE t2 SET c2=20 WHERE c1=1;
CREATE TRIGGER before_t1_insert   BEFORE INSERT ON t1   FOR EACH ROW   BEGIN     IF (NEW.c2 >= 10) THEN       SET NEW.c2 = 0;
END IF;
END // CREATE TRIGGER before_t1_update   BEFORE UPDATE ON t1   FOR EACH ROW   BEGIN     IF (NEW.c2 >= 10) THEN       SET NEW.c2 = 0;
END IF;
END // DELIMITER ;// INSERT INTO t1 VALUES(1, 11);
CREATE PROCEDURE proc1 (IN val1 INT) BEGIN    IF val1 < 10 THEN       SIGNAL SQLSTATE '45000'       SET MESSAGE_TEXT = 'check constraint on c1 failed';
END IF;
END // CREATE TRIGGER before_t1_insert    BEFORE INSERT ON t1    FOR EACH ROW    BEGIN       CALL proc1(new.c1);
END // DELIMITER ;// INSERT INTO t1 VALUES(20);
PREPARE stmt1 FROM 'INSERT INTO t1 VALUES(1)';
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PREPARE stmt2 FROM 'INSERT INTO t1 VALUES(20)';
EXECUTE stmt2;
DEALLOCATE PREPARE stmt2;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
CREATE TRIGGER t1_before_insert_trg BEFORE INSERT ON t1 FOR EACH ROW BEGIN    IF NEW.f1 = 1 THEN      SET NEW.f2 = '2017-06-06 00:00:00';
ELSEIF NEW.f1 = 2 THEN      SET NEW.f2 = '2019-06-06 00:00:00';
ELSEIF NEW.f1 = 3 THEN      SET NEW.f2 = '2018-06-06 00:00:00';
END IF;
END;$ CREATE TRIGGER t1_before_update_trg BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   IF OLD.f1 = 4 THEN     SET NEW.f2 = '2017-06-06 00:00:00';
ELSEIF OLD.f1 = 5 THEN      SET NEW.f2 = '2019-06-06 00:00:00';
ELSEIF OLD.f1 = 6 THEN      SET NEW.f2 = '2018-06-06 00:00:00';
END IF;
END;$ DELIMITER ;$ INSERT INTO v1(f1) VALUES(1);
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.xml;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.txt;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.xml;
FLUSH TABLE t1 FOR EXPORT;
UNLOCK TABLES;
IMPORT TABLE FROM 't1_*.sdi';
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work.");
call mtr.add_suppression("You need to use --log-bin to make --log-replica-updates work.");
PREPARE stmt1 FROM ' EXPLAIN SELECT a FROM t1 ORDER BY b ';
EXECUTE stmt1;
PREPARE stmt1 FROM ' EXPLAIN SELECT a FROM t1 WHERE a > ? ORDER BY b ';
EXECUTE stmt1 USING @arg00;
RENAME TABLE t1 TO t1_1, t9 TO t9_1 ;
RENAME TABLE t1 TO t1_2, t9 TO t9_2 ;
CREATE FUNCTION f1() RETURNS INT BEGIN   INSERT INTO t1 VALUES (1);
RETURN 1;
END| DELIMITER ;| SET DEBUG_SYNC= "sp_lex_instr_before_exec_core SIGNAL sp_ready WAIT_FOR sp_finish";
send SELECT f1();
reap;
disconnect con1;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
SHOW FUNCTION CODE testdb.func_root;
SHOW FUNCTION CODE testdb.func_definer;
disable_query_log;
call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
enable_query_log;
drop procedure if exists bug8850|
create table t1 (a int) engine=innodb|
create procedure bug8850() begin   truncate table t1; insert t1 values (1); rollback; end|
set autocommit=0|
insert t1 values (2)|
call bug8850()|
commit|
select * from t1|
call bug8850()|
set autocommit=1|
select * from t1|
drop table t1|
drop procedure bug8850|
drop function if exists bug10015_1|
drop function if exists bug10015_2|
drop function if exists bug10015_3|
drop function if exists bug10015_4|
drop function if exists bug10015_5|
drop function if exists bug10015_6|
drop function if exists bug10015_7|
drop procedure if exists bug10015_8|
create table t1 (id int) engine=innodb|
create table t2 (id int primary key, j int) engine=innodb|
insert into t1 values (1),(2),(3)|
create function bug10015_1() returns int return (select count(*) from t1)|
select *, bug10015_1() from t1|
drop function bug10015_1|
create function bug10015_2() returns int    begin     declare i, s int;     set i:= (select min(id) from t1);     set s:= (select max(id) from t1);     return (s - i);   end|
select *, bug10015_2() from t1|
drop function bug10015_2|
create function bug10015_3() returns int    return (select max(a.id - b.id) from t1 as a, t1 as b where a.id >= b.id)|
select *, bug10015_3() from t1|
drop function bug10015_3|
create function bug10015_4(i int) returns int    begin     declare m int;     set m:= (select max(id) from t2);     insert into t2 values (i, m);     return m;   end|
select *, bug10015_4(id) from t1|
select * from t2|
drop function bug10015_4|
create function bug10015_5(i int) returns int   begin     if (i = 5) then       insert into t2 values (1, 0);     end if;     return i;   end|
insert into t1 values (bug10015_5(4)), (bug10015_5(5))|
select * from t1|
drop function bug10015_5|
create function bug10015_6(i int) returns int   begin     declare continue handler for sqlexception set @error_in_func:= 1;     if (i = 5) then       insert into t2 values (4, 0), (1, 0);     end if;     return i;   end|
set @error_in_func:= 0|
insert into t1 values (bug10015_6(5)), (bug10015_6(6))|
select @error_in_func|
select * from t1|
select * from t2|
drop function bug10015_6|
create function bug10015_7() returns int   begin     alter table t1 add k int;     return 1;   end|
create function bug10015_7() returns int   begin     start transaction;     return 1;   end|
create function bug10015_7() returns int   begin     drop table t1;     return 1;   end|
create function bug10015_7() returns int   begin     drop temporary table t1;     return 1;   end|
drop function bug10015_7|
create function bug10015_7() returns int   begin     commit;     return 1;   end|
create function bug10015_7() returns int   begin     call bug10015_8();     return 1;   end|
create procedure bug10015_8() alter table t1 add k int|
select *, bug10015_7() from t1|
drop procedure bug10015_8|
create procedure bug10015_8() start transaction|
select *, bug10015_7() from t1|
drop procedure bug10015_8|
create procedure bug10015_8() drop temporary table if exists t1_temp|
select *, bug10015_7() from t1|
drop procedure bug10015_8|
create procedure bug10015_8() commit|
select *, bug10015_7() from t1|
drop procedure bug10015_8|
drop function bug10015_7|
drop table t1, t2|
drop function if exists bug13825_0|
drop function if exists bug13825_1|
drop function if exists bug13825_2|
drop function if exists bug13825_3|
drop function if exists bug13825_4|
drop function if exists bug13825_5|
drop procedure if exists bug13825_0|
drop procedure if exists bug13825_1|
drop procedure if exists bug13825_2|
drop table if exists t1|
create table t1 (i int) engine=innodb|
create table t2 (i int) engine=innodb|
create function bug13825_0() returns int begin   rollback to savepoint x;   return 1; end|
create function bug13825_1() returns int begin   release savepoint x;   return 1; end|
create function bug13825_2() returns int begin   insert into t1 values (2);   savepoint x;   insert into t1 values (3);   rollback to savepoint x;   insert into t1 values (4);   return 1; end|
create procedure bug13825_0() begin   rollback to savepoint x; end|
create procedure bug13825_1() begin   release savepoint x; end|
create procedure bug13825_2() begin   savepoint x; end|
insert into t2 values (1)|
create trigger t2_bi before insert on t2 for each row   rollback to savepoint x|
create trigger t2_bu before update on t2 for each row   release savepoint x|
create trigger t2_bd before delete on t2 for each row begin   insert into t1 values (2);   savepoint x;   insert into t1 values (3);   rollback to savepoint x;   insert into t1 values (4); end|
create function bug13825_3(rb int) returns int begin   insert into t1 values(1);   savepoint x;   insert into t1 values(2);   if rb then     rollback to savepoint x;   end if;   insert into t1 values(3);   return rb; end|
create function bug13825_4() returns int begin   savepoint x;   insert into t1 values(2);   rollback to savepoint x;   return 0; end|
create function bug13825_5(p int) returns int begin   savepoint x;   insert into t2 values(p);   rollback to savepoint x;   insert into t2 values(p+1);   return p; end|
set autocommit= 0|
begin |
insert into t1 values (1)|
savepoint x|
set @a:= bug13825_0()|
insert into t2 values (2)|
set @a:= bug13825_1()|
update t2 set i = 2|
set @a:= bug13825_2()|
select * from t1|
rollback to savepoint x|
select * from t1|
delete from t2|
select * from t1|
rollback to savepoint x|
select * from t1|
release savepoint x|
set @a:= bug13825_2()|
select * from t1|
rollback to savepoint x|
delete from t1|
commit|
begin|
insert into t1 values (5)|
savepoint x|
insert into t1 values (6)|
call bug13825_0()|
select * from t1|
call bug13825_1()|
rollback to savepoint x|
savepoint x|
insert into t1 values (7)|
call bug13825_2()|
rollback to savepoint x|
select * from t1|
delete from t1|
commit|
set autocommit= 1|
select bug13825_3(0)|
select * from t1|
delete from t1|
select bug13825_3(1)|
select * from t1|
delete from t1|
set autocommit= 0|
begin|
insert into t1 values (1)|
set @a:= bug13825_4()|
select * from t1|
delete from t1|
commit|
set autocommit= 1|
drop table t2|
create table t2 (i int) engine=innodb|
insert into t1 values (1), (bug13825_5(2)), (3)|
select * from t1|
select * from t2|
drop function bug13825_0|
drop function bug13825_1|
drop function bug13825_2|
drop function bug13825_3|
drop function bug13825_4|
drop function bug13825_5|
drop procedure bug13825_0|
drop procedure bug13825_1|
drop procedure bug13825_2|
drop table t1, t2|
drop table if exists t3|
drop procedure if exists bug14840_1|
drop procedure if exists bug14840_2|
create table t3 (   x int,   y int,   primary key (x) ) engine=InnoDB|
create procedure bug14840_1() begin   declare err int default 0;   declare continue handler for sqlexception     set err = err + 1;   start transaction;   update t3 set x = 1, y = 42 where x = 2;   insert into t3 values (3, 4711);   if err > 0 then     rollback;   else     commit;   end if;   select * from t3; end|
create procedure bug14840_2() begin   declare err int default 0;   declare continue handler for sqlexception     begin       set err = err + 1;       select err as 'Ping';     end;   update t3 set x = 1, y = 42 where x = 2;   update t3 set x = 1, y = 42 where x = 2;   insert into t3 values (3, 4711);   select * from t3; end|
insert into t3 values (1, 3), (2, 5)|
call bug14840_1()|
delete from t3|
insert into t3 values (1, 3), (2, 5)|
call bug14840_2()|
drop procedure bug14840_1|
drop procedure bug14840_2|
drop table t3|
drop procedure if exists bug10656_create_index|
drop procedure if exists bug10656_myjoin|
drop procedure if exists bug10656_truncate_table|
CREATE TABLE t3 (   `ID` int(11) default NULL,   `txt` char(5) default NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1|
INSERT INTO t3 (`ID`,`txt`) VALUES  (1,'a'), (2,'b'), (3,'c'), (4,'d')|
CREATE TABLE t4 (   `ID` int(11) default NULL,   `txt` char(5) default NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1|
INSERT INTO t4 (`ID`,`txt`) VALUES  (1,'a'), (2,'b'), (3,'c'), (4,'d')|
create procedure bug10656_create_index() begin   create index bug10656_my_index on t3 (ID); end|
call bug10656_create_index()|
create procedure bug10656_myjoin() begin   update t3, t4 set t3.txt = t4.txt where t3.id = t4.id; end|
call bug10656_myjoin()|
create procedure bug10656_truncate_table() begin   truncate table t3; end|
call bug10656_truncate_table()|
drop procedure bug10656_create_index|
drop procedure bug10656_myjoin|
drop procedure bug10656_truncate_table|
drop table t3, t4|
create table t3 (   a int primary key,   ach char(1) ) engine = innodb|
create table t4 (   b int  primary key,   bch char(1) ) engine = innodb|
insert ignore into t3 values (1 , 'aCh1' ) , ('2' , 'aCh2')|
insert ignore into t4 values (1 , 'bCh1' )|
drop procedure if exists bug3448|
create procedure bug3448()   select * from t3 inner join t4 on t3.a = t4.b|
select * from t3 inner join t4 on t3.a = t4.b|
call bug3448()|
call bug3448()|
drop procedure bug3448|
drop table t3, t4|
drop procedure if exists bug14210|
set @@session.max_heap_table_size=16384|
select @@session.max_heap_table_size|
create table t3 (a char(255)) engine=InnoDB|
create procedure bug14210_fill_table() begin   declare table_size, max_table_size int default 0;   select @@session.max_heap_table_size into max_table_size;   delete from t3;   insert into t3 (a) values (repeat('a', 255));   repeat     insert into t3 select a from t3;     select count(*)*255 from t3 into table_size;   until table_size > max_table_size*2 end repeat; end|
call bug14210_fill_table()|
drop procedure bug14210_fill_table|
create table t4 like t3|
create procedure bug14210() begin   declare a char(255);   declare done int default 0;   declare c cursor for select * from t3;   declare continue handler for sqlstate '02000' set done = 1;   open c;   repeat     fetch c into a;     if not done then        insert into t4 values (upper(a));     end if;   until done end repeat;   close c; end|
call bug14210()|
select count(*) from t4|
drop table t3, t4|
drop procedure bug14210|
set @@session.max_heap_table_size=default|
CREATE DATABASE db_bug7787|
use db_bug7787|
CREATE PROCEDURE p1()   SHOW ENGINE INNODB STATUS; |
CREATE USER user_bug7787@localhost|
GRANT EXECUTE ON PROCEDURE p1 TO user_bug7787@localhost|
DROP DATABASE db_bug7787|
drop user user_bug7787@localhost|
use test|
create table t3 (f1 int, f2 varchar(3), primary key(f1)) engine=innodb|
insert into t3 values (1,'aaa'),(2,'bbb'),(3,'ccc')|
CREATE FUNCTION bug13575 ( p1 integer )  returns varchar(3)  BEGIN  DECLARE v1 VARCHAR(10) DEFAULT null; SELECT f2 INTO v1 FROM t3 WHERE f1 = p1;  RETURN v1; END|
select distinct f1, bug13575(f1) from t3 order by f1|
drop function bug13575|
drop table t3|
connect(caching_con1,localhost,caching_sha2,caching,wl11381,,,SSL);
INSERT INTO t1 VALUES(1,repeat('a',1000)),(2,repeat('def',600));
disconnect caching_con1;
connect(caching_con2,localhost,caching_sha2,caching1,wl11381,,,SSL);
connect(caching_con3,localhost,caching_sha2,caching,wl11381,,,SSL);
disconnect caching_con3;
connect(caching_con3,localhost,caching_sha2,caching,wl11381,,,SSL);
connect(caching_con3,localhost,caching_sha2,caching,wl11381,,,SSL);
disconnect caching_con3;
connect(caching_con4,localhost,caching_sha2,caching,wl11381,,,);
disconnect caching_con4;
connect(caching_con5,localhost,caching_sha2,,wl11381,,,);
disconnect caching_con5;
connect(sha256_con1,localhost,sha256,auth_string,,,,SSL,sha256_password);
disconnect sha256_con1;
connect(sha256_con2,localhost,sha256,,,,,SSL,sha256_password);
disconnect sha256_con2;
connect(sha256_con3,localhost,sha256,auth_string,,,,,sha256_password);
connect(native_con1,localhost,native_user,native,,,,,mysql_native_password);
disconnect native_con1;
connect(native_con2,localhost,native_user,,,,,,mysql_native_password);
disconnect native_con2;
while ($c) { dec $c;
explain select dt.a from t1, lateral (select t1.a from t2) dt;
explain select dt.a from t1 right join lateral (select t1.a from t2) dt on 1;
explain select dt.a from lateral (select t1.a from t2) dt left join t1 on 1;
explain SELECT * FROM t1 LEFT JOIN lateral (select t1.a) as dt ON t1.a=dt.a RIGHT JOIN lateral (select dt.a) as dt1 ON dt.a=dt1.a;
explain SELECT * FROM t1 JOIN lateral (select t1.a) as dt ON t1.a=dt.a JOIN lateral (select dt.a) as dt1 ON dt.a=dt1.a;
select t1.a, dt.a from t1, lateral (select t1.a+t2.a as a from t2) dt;
select t1.a, dt.a from t1, lateral (select t2.a as a from t2 having t1.a) dt;
create view v1 as  select t1.a as f1, dt.a as f2  from t1, lateral (select t1.a+t2.a as a from t2) dt;
SELECT COUNT(*) FROM t1 GROUP BY t1.a  HAVING t1.a IN (SELECT t3.a FROM t1 AS t3 WHERE t3.b IN (SELECT b FROM t2, lateral (select t1.a) dt));
select vq1.b,dt.b from v1 vq1, lateral (select vq1.b) dt;
select b from v1 vq1, lateral (select count(*) from v1 vq2 having vq1.b = 3) dt;
SELECT /*+ SET_VAR(optimizer_switch = 'materialization=off,semijoin=off') */ * FROM t1 AS ta, lateral (select 1 WHERE ta.a IN (SELECT b FROM t2 AS tb                WHERE tb.b >= SOME(SELECT SUM(tc.a) as sg FROM t1 as tc                                   GROUP BY tc.b                                   HAVING ta.a=tc.b))) dt;
select (select f from lateral (select max(t1.a) as f) as dt) as g from t1;
select t1.a, f from t1, lateral (select max(t1.a) as f) as dt;
select * from t1, lateral (with qn as (select t1.a) select (select max(a) from qn)) as dt;
select * from t1, lateral (select * from (select * from (select t1.a from t2) as dt limit 1) dt2) dt3;
select * from t1 as t0, lateral (select dt3.* from t1, lateral (select * from (select * from (select t0.a from t2) as dt limit 1) dt2) dt3) dt4;
select /*+ no_merge() */ * from t1 as t0, lateral (select dt3.* from t1, lateral (select * from (select * from (select t0.a from t2) as dt limit 1) dt2) dt3) dt4;
select * from t1, lateral (select * from (select 42) t1, (select t1.a) dt2) dt3;
select straight_join * from t1, t2, lateral (select t1.a) as dt;
select straight_join * from t1, lateral (select t1.a) as dt, t2;
select straight_join * from t2, t1, lateral (select t1.a) as dt;
select * from t1, t2, lateral (select t1.a) as dt;
select * from t1, lateral (select t1.a) as dt, t2;
select * from t2, t1, lateral (select t1.a) as dt;
select * from t1, lateral (select t1.a from t2 as t3, t2 as t4) as dt, t2;
select * from t3, lateral (select t3.a+1) as dt;
select * from t2, t1, lateral (select t1.a) as dt,                       lateral (select t2.a) as dt2;
select * from t2, t1, lateral (select t1.a) as dt,                       lateral (select t1.a+1) as dt2;
select * from t2, t1, lateral (select t1.a+t2.a) as dt;
SELECT * FROM t11 LEFT JOIN t12 force index (idx) ON t12.t12b = t11.t11b JOIN LATERAL (SELECT t12a) dt;
select * from t1, lateral (select t3.b from t3 where t3.a=t1.a) dt  where dt.b=t1.a+9;
} create table lateral(a int);
SELECT * FROM t1, LATERAL ( SELECT MAX(1) FROM t2 GROUP BY t1.f1 ) AS l1;
SELECT STD(0) FROM t2, LATERAL ( SELECT f1 FROM t1 GROUP BY f2,f1 ) AS d1;
SELECT /*+ no_merge() */  outr.pk AS x FROM ( SELECT * FROM  t1  ) AS  outr WHERE outr.col_int_key  IN ( SELECT /*+ no_merge() no_semijoin() */ id   FROM JSON_TABLE( IF(outr.col_date_key<>NOW(),                       '[{"a":"3"},{"a":2},{"b":1},{"a":0}]',                       '') ,                    '$[*]' columns (id for ordinality,                                    jpath varchar(100) path '$.a',                                    jexst int exists path '$.b')   ) AS                                    qn ) ORDER BY outr.col_datetime;
SELECT * FROM t1 JOIN LATERAL (   SELECT GROUP_CONCAT(t.id) AS c FROM t2 t WHERE (t.id = t1.id) ) d0 ON (1);
EXPLAIN SELECT * FROM t1 JOIN LATERAL (SELECT a+t1.a from t2 GROUP BY a) AS dt;
SELECT * FROM t1 JOIN LATERAL (SELECT a+t1.a from t2 GROUP BY a) AS dt;
SELECT 1 FROM v1 AS table1 RIGHT OUTER JOIN LATERAL       (SELECT 1 FROM v1 AS table2 RIGHT OUTER JOIN LATERAL                      ( SELECT 1 FROM v1 AS table3 ) AS table4                      ON table1.c1 = 1) AS table5       ON 1;
SELECT *   FROM t1   LEFT JOIN (     t3, LATERAL (       SELECT * FROM t2 WHERE table_id = t3.id     ) l1   ) ON TRUE;
SELECT *   FROM     t1     LEFT JOIN (       t1 AS t2       LEFT JOIN t1 AS t3 ON TRUE     ) ON TRUE,     LATERAL (       SELECT SUM(t1.a), t2.a FROM t1     ) AS d1;
SELECT * FROM t1 AS tbl1        LEFT JOIN t1 AS tbl3 ON FALSE WHERE tbl1.id NOT IN             (SELECT id FROM t1 AS tbl2 JOIN LATERAL                     (SELECT 1 FROM t2 WHERE id = tbl2.id LIMIT 10) AS d1);
SELECT /*+ JOIN_PREFIX(tbl1, tbl2) */ * FROM t1 AS tbl1        LEFT JOIN t1 AS tbl3 ON FALSE WHERE tbl1.id NOT IN             (SELECT id FROM t1 AS tbl2 JOIN LATERAL                     (SELECT 1 FROM t2 WHERE id = tbl2.id LIMIT 10) AS d1);
query_get_value(SELECT @@global.max_allowed_packet, @@global.max_allowed_packet, 1);
disconnect default;
connect (default, localhost,root,,);
c1 LONGTEXT   ) ENGINE=$engine_type DEFAULT CHARSET latin1;
INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 4194304));
INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 2097152));
INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 262144));
INSERT INTO t1 VALUES (REPEAT('ManyMegaByteBlck', 32768));
query_vertical SELECT LENGTH(c1) FROM t1;
query_vertical SELECT LENGTH(c1) FROM t1;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set optimizer_switch=default;
if ( !$LOCKING_SERVICE ) {   skip Locking service plugin requires the environment variable \$LOCKING_SERVICE to be set (normally done by mtr);
} CREATE FUNCTION service_get_read_locks  RETURNS INT SONAME "$LOCKING_SERVICE";
CREATE FUNCTION service_get_write_locks RETURNS INT SONAME "$LOCKING_SERVICE";
CREATE FUNCTION service_release_locks   RETURNS INT SONAME "$LOCKING_SERVICE";
SELECT COUNT(*) = 1 FROM information_schema.processlist WHERE state = 'Waiting for locking service lock' AND id = ;
KILL @aux;
if (0) { } SELECT service_release_locks('holder_name_space') AS col1;
file_exists $MYSQLTEST_VARDIR/tmp/master_log.err;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000002;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000003;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000003;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000002;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000002;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000002;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000002;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000002;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000002;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000001;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000006;
file_exists $MYSQLTEST_VARDIR/tmp/master_log.err;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000003;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000006;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000007;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000008;
file_exists $MYSQLTEST_VARDIR/tmp/master_log.err;
file_exists $MYSQLTEST_VARDIR/mysqld.1/data/master-bin.000003;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000007;
file_exists $MYSQLTEST_VARDIR/mysqld.2/data/slave-relay-bin.000008;
CREATE TABLE t1 (a INT NOT NULL,b INT NOT NULL, PRIMARY KEY USING BTREE (a)) ENGINE=MYISAM COMMENT="TESTING" PACK_KEYS=1 DELAY_KEY_WRITE=1 STATS_PERSISTENT=1 CHECKSUM=1 MIN_ROWS=1 MAX_ROWS=100;
CREATE TABLE t2 (a INT NOT NULL,b INT NOT NULL, PRIMARY KEY USING BTREE (a)) ENGINE=MYISAM COMMENT="TESTING" PACK_KEYS=0 DELAY_KEY_WRITE=1 STATS_PERSISTENT=1 CHECKSUM=1 MIN_ROWS=1 MAX_ROWS=100;
select hex(weight_string('a' as char(-1)));
create table t1 charset latin1 select weight_string(repeat('t',66000)) as w;
connect (con1,localhost,root,,);
DO ltrim(weight_string(1));
DO rtrim(weight_string(1));
create table t1 (a int not null,b int not null, primary key using BTREE (a)) engine=heap comment="testing heaps" avg_row_length=100 min_rows=1 max_rows=100;
alter table t1 add c int not null, add key using BTREE (c,a);
create table t1 (a int not null,b int not null, primary key using BTREE (a)) engine=heap comment="testing heaps";
CREATE TABLE t1 ( a int not null default 0, b int not null default 0,  key  using BTREE (a,b),  key  using BTREE (b)  ) ENGINE=HEAP;
create table t1 (id int unsigned not null, primary key  using BTREE (id)) engine=HEAP;
create table t1 (btn char(10) not null, key using BTREE (btn)) charset utf8mb4 engine=heap;
alter table t1 add column new_col char(1) not null, add key using BTREE (btn,new_col), drop key btn;
CREATE TABLE t1 (a int, b int, c int, key using BTREE (a, b, c)) engine=heap;
CREATE TABLE t1 (a int not null, primary key using BTREE (a)) engine=heap;
create table t1(a int not null, key using btree(a)) engine=heap;
CREATE TABLE t1 (   c1 CHAR(3),   c2 INTEGER,   KEY USING BTREE(c1),   KEY USING BTREE(c2) ) ENGINE= MEMORY;
CREATE TABLE t1 (   c1 ENUM('1', '2'),   UNIQUE USING BTREE(c1) ) ENGINE= MEMORY DEFAULT CHARSET= utf8;
CREATE TABLE t1 (   c1 SET('1', '2'),   UNIQUE USING BTREE(c1) ) ENGINE= MEMORY DEFAULT CHARSET= utf8;
CREATE TABLE t1 (a INT, KEY USING BTREE(a)) ENGINE=MEMORY;
CREATE TABLE t1(val INT, KEY USING BTREE(val)) ENGINE=memory;
CREATE TABLE t1 (a INT, UNIQUE USING BTREE(a)) ENGINE=MEMORY;
create table t1(a varchar(255), b varchar(255),                  key using btree (a,b)) engine=memory;  insert into t1 values (1, 1), (3, 3), (2, 2), (NULL, 1), (NULL, NULL), (0, 0);
CREATE TABLE t1(a INT, KEY USING BTREE (a)) ENGINE=MEMORY;
CREATE TABLE t1(   id INT AUTO_INCREMENT PRIMARY KEY,   c1 INT NOT NULL,   c2 INT NOT NULL,   UNIQUE KEY USING BTREE (c2,c1)) ENGINE = MEMORY;
if (`SELECT $PS_PROTOCOL = 1`) { } drop database if exists mysqltest1;
show create schema foo;
connect(con2, localhost, root);
WHERE state= $drop_schema_target_state                      AND info='DROP SCHEMA schema1';
disconnect con2;
connect (con2, localhost, root);
LOCK TABLE schema1.t1 WRITE;
WHERE state='Waiting for schema metadata lock' and info='DROP SCHEMA schema1';
UNLOCK TABLES;
disconnect con2;
connect (con1, localhost, root);
HANDLER db1.t1 OPEN;
connect (con2, localhost, root);
WHERE state='Waiting for table metadata lock' AND info='DROP DATABASE db1';
HANDLER t1 CLOSE;
disconnect con1;
disconnect con2;
connect (con2, localhost, root);
connect (con3, localhost, root);
WHERE state= $drop_schema_target_state;
disconnect con2;
disconnect con3;
CALL mtr.add_suppression("Failed to find tablespace");
CALL mtr.add_suppression("Ignoring tablespace");
CALL mtr.add_suppression("Cannot rename");
CALL mtr.add_suppression("Cannot calculate");
CALL mtr.add_suppression("Cannot open datafile");
CALL mtr.add_suppression("The error means the system cannot find");
CALL mtr.add_suppression("File ./s/t_innodb.ibd");
CALL mtr.add_suppression("Operating system error number");
SHOW CREATE SCHEMA s;
SHOW CREATE SCHEMA s;
CALL mtr.add_suppression("Problem while dropping database. Can't remove database directory .* Please remove it manually.");
connect (con1, localhost, root,,);
SELECT db1.f1();
WHERE state= 'Waiting for stored function metadata lock'                      AND info='DROP DATABASE db1';
disconnect con1;
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* Tablespace .*, name '.*', file '.*' is missing!");
SHOW CREATE SCHEMA s;
SHOW CREATE SCHEMA s;
HANDLER t1 OPEN;
SHOW CREATE DATABASE test1;
CREATE PROCEDURE my_proc() BEGIN   SET @@session.autocommit=OFF;
END;| DELIMITER ;| CALL my_proc;
call mtr.add_suppression("Dictionary file not specified");
PREPARE p1 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
PREPARE p1 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
PREPARE p1 FROM 'SELECT i FROM test.t';
PREPARE p2 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
DEALLOCATE PREPARE p2;
PREPARE p1 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
PREPARE p1 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
PREPARE p1 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
PREPARE p1 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
PREPARE p1 FROM 'SELECT i FROM test.t';
DEALLOCATE PREPARE p1;
PREPARE p1 FROM 'SELECT i FROM test.t';
EXECUTE p1;
DEALLOCATE PREPARE p1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
INSERT INTO t1 VALUES (REPEAT('1',200));
INSERT INTO t1 VALUES (REPEAT('2', 1800));
echo $str;
CALL mtr.add_suppression("Option --protocol-compression-algorithms is reset to default value.");
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disable_query_log;
while ($1) {  send replace into t1 select n from t2;
send flush tables;
reap;
reap;
dec $1;
} enable_query_log;
send drop table t2;
unlock tables;
reap;
send drop database mysqltest;
unlock tables;
reap;
dirty_close con1;
lock table t1 write;
lock table t1 read;
unlock tables;
lock table t1 write;
lock table t1 read;
lock table t1 write;
unlock tables;
lock table t1 read, t2 read, t3 write;
lock table t1 read, t2 read, t3 read;
unlock tables;
connect (con1,localhost,root,,);
connect (con3,localhost,root,,);
lock table t1 write;
send flush tables with read lock;
send insert into t2 values(1);
unlock tables;
disconnect con1;
reap;
disconnect con2;
reap;
disconnect con3;
lock tables t1 write;
unlock tables;
lock tables t1 read, t2 write;
unlock tables;
lock tables t1 read;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
lock table t2 read;
unlock tables;
flush tables with read lock, hosts;
flush privileges, tables;
flush privileges, tables with read lock;
flush privileges, tables;
flush tables with read lock, tables;
lock table t1 read, t2 read;
unlock tables;
lock table no_such_table read;
unlock tables;
flush table t1, t2 with read lock;
lock table no_such_table read;
connect (con1,localhost,root,,);
unlock tables;
flush table t1 with read lock;
unlock tables;
unlock tables;
flush table t1 with read lock;
flush table t2 with read lock;
unlock tables;
unlock tables;
flush table t1 with read lock;
unlock tables;
lock table t1 read, t2 read;
unlock tables;
unlock tables;
disconnect con1;
flush table v1, v2, v3 with read lock;
flush table v1 with read lock;
flush table v2 with read lock;
flush table v3 with read lock;
flush table v1 with read lock;
flush table v1 with read lock;
unlock tables;
handler t1 open;
handler t1 read a next;
handler t1 read a next;
handler t1 read a next;
unlock tables;
handler t1 read a next;
handler t1 close;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
lock table t1 read;
send flush table t1;
send select * from t1;
unlock tables;
reap;
reap;
lock table t1 read;
send flush tables;
send select * from t1;
unlock tables;
reap;
reap;
disconnect con1;
disconnect con2;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
handler t1 open;
unlock tables;
handler t1 close;
disconnect con1;
disconnect con2;
UNLOCK TABLES;
connect(con1, localhost, root);
UNLOCK TABLES;
disconnect con1;
LOCK TABLES t3 READ;
UNLOCK TABLES;
LOCK TABLES t4 WRITE;
UNLOCK TABLES;
CREATE TABLE m1(a INT) ENGINE=MERGE UNION=();
ALTER TABLE m1 UNION=();
LOCK TABLE t1 WRITE, t2 WRITE, t3 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE, t3 WRITE;
UNLOCK TABLES;
LOCK TABLE t4 WRITE;
UNLOCK TABLES;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
send REPAIR TABLE t1;
sleep 1; # let repair run into its sleep     INSERT INTO t2 VALUES (1);
reap;
LOCK TABLE t1 WRITE;
send INSERT INTO t2 VALUES (1);
sleep 1; # Let INSERT go into thr_multi_lock(). REPAIR TABLE t1;
sleep 2; # con1 performs busy waiting during this sleep. UNLOCK TABLES;
reap;
LOCK TABLE t1 WRITE;
send INSERT INTO t1 VALUES (1);
sleep 1; # Let INSERT go into thr_multi_lock(). FLUSH TABLES;
sleep 1; # Let INSERT go through wait_for_tables() where it sleeps. FLUSH TABLES;
UNLOCK TABLES;
reap;
disconnect con1;
disconnect con2;
LOCK TABLES t3 WRITE, t2 WRITE, t1 WRITE;
UNLOCK TABLES;
RENAME TABLE t4 TO t5;
RENAME TABLE t5 TO t4;
RENAME TABLE t2 TO t5;
RENAME TABLE t5 TO t2;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLE t2 TO t5;
RENAME TABLE t5 TO t2;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLE t3 TO t5;
RENAME TABLE t5 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t4 WRITE, t3 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t4 WRITE, t3 WRITE, t2 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t4 WRITE, t3 WRITE, t2 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t4 WRITE, t3 WRITE, t2 WRITE, t1 WRITE;
FLUSH TABLE t4;
FLUSH TABLE t2;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
FLUSH TABLE t4;
FLUSH TABLE t2;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
FLUSH TABLE t4;
FLUSH TABLE t2;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE, t2 WRITE, t4 WRITE, t1 WRITE;
UNLOCK TABLES;
while ($1) {   SET @rnd= RAND();
} set @@read_buffer_size=2*1024*1024;
connect (con1,localhost,root,,);
send SELECT COUNT(DISTINCT a1.id) FROM t3 AS a1, t3 AS a2       WHERE a1.id = a2.id GROUP BY a2.grp;
sleep 1;
reap;
disconnect con1;
LOCK TABLES t2 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, m1 WRITE;
FLUSH TABLE t1;
UNLOCK TABLES;
LOCK TABLES m1 WRITE, t1 WRITE;
FLUSH TABLE t1;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, m1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t3 WRITE;
UNLOCK TABLES;
HANDLER m1 OPEN;
LOCK TABLE m1 READ;
UNLOCK TABLES;
while ($1) {   dec $1;
} set @a=concat("create table t_parent (a int) union(", @a,               ") insert_method=first engine=mrg_myisam");
prepare stmt from @a;
execute stmt;
prepare stmt from "select * from t_parent";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
while ($1) {   dec $1;
} drop table t_parent;
DATA DIRECTORY='$MYSQLTEST_VARDIR/tmp'   INDEX DIRECTORY='$MYSQLTEST_VARDIR/tmp';
DATA DIRECTORY='$MYSQLTEST_VARDIR/tmp'   INDEX DIRECTORY='$MYSQLTEST_VARDIR/tmp';
CREATE FUNCTION f1() RETURNS INT BEGIN   CREATE TEMPORARY TABLE t1 (c1 INT) ENGINE=MyISAM;
RETURN (SELECT MAX(c1) FROM tm1);
END| DELIMITER ;| SELECT f1() FROM (SELECT 1 UNION SELECT 1) c1;
CREATE FUNCTION f1() RETURNS INT BEGIN   CREATE TEMPORARY TABLE t2 (c1 INT);
ALTER TEMPORARY TABLE tm1 UNION=(t1,t2);
RETURN (SELECT MAX(c1) FROM tm1);
END| DELIMITER ;| DROP TABLE tm1, t1;
CREATE FUNCTION f1() RETURNS INT BEGIN   INSERT INTO tm1 VALUES (1);
RETURN (SELECT MAX(c1) FROM tm1);
END| DELIMITER ;| CREATE TABLE t1 (c1 INT) ENGINE=MyISAM;
LOCK TABLE tm1 WRITE;
UNLOCK TABLES;
CREATE FUNCTION f1() RETURNS INT BEGIN   INSERT INTO tm1 VALUES (1);
RETURN (SELECT MAX(c1) FROM tm1);
END| DELIMITER ;| CREATE TABLE t1 (c1 INT) ENGINE=MyISAM;
LOCK TABLE tm1 WRITE;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
CREATE FUNCTION f1() RETURNS INT BEGIN   INSERT INTO tm1 VALUES (1);
RETURN (SELECT MAX(c1) FROM tm1);
END| DELIMITER ;| CREATE TEMPORARY TABLE t1 (c1 INT) ENGINE=MyISAM;
LOCK TABLE t9 WRITE;
UNLOCK TABLES;
CREATE FUNCTION f1() RETURNS INT BEGIN   INSERT INTO tm1 VALUES (1);
RETURN (SELECT MAX(c1) FROM tm1);
END| DELIMITER ;| CREATE TEMPORARY TABLE t1 (c1 INT) ENGINE=MyISAM;
LOCK TABLE t9 WRITE;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
LOCK TABLE tm1 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, tm1 WRITE;
UNLOCK TABLES;
LOCK TABLE tm1 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, tm1 WRITE;
UNLOCK TABLES;
LOCK TABLE tm1 WRITE, t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE, t5 WRITE;
connect (con1,localhost,root,,);
send UPDATE t2, tm1 SET t2.c1=f1();
UNLOCK TABLES;
reap;
disconnect con1;
LOCK TABLE m1 WRITE, m2 WRITE;
UNLOCK TABLES;
LOCK TABLE m1 WRITE, t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLE m1 WRITE;
LOCK TABLE m1 WRITE, m2 WRITE;
UNLOCK TABLES;
LOCK TABLE m1 WRITE;
LOCK TABLE m1 WRITE, m2 WRITE;
LOCK TABLE m1 WRITE, m2 WRITE;
UNLOCK TABLES;
connect (con1,localhost,root,,);
HANDLER t3 OPEN;
disconnect con1;
connect (con1,localhost,root,,);
HANDLER t3 OPEN;
disconnect con1;
prepare stmt from "select * from t4 where c1 < f1()";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
LOCK TABLE m1 WRITE;
UNLOCK TABLES;
LOCK TABLE m1 WRITE;
LOCK TABLE m1 WRITE, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ, m1 WRITE;
UNLOCK TABLES;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disconnect con1;
RENAME TABLE t1 TO t2;
disconnect con2;
if ( !$VERSION_TOKEN ) {   skip Locking service plugin requires the environment variable \$VERSION_TOKEN to be set (normally done by mtr);
} SELECT version_tokens_set(' * = a ; y = b ');
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disable_query_log;
while ($1) {  dec $1;
} enable_query_log;
send check table t1 extended;
reap;
disconnect con1;
disconnect con2;
LOCK TABLE t1 WRITE;
connect(con1, localhost, root);
UNLOCK TABLES;
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
SET TRANSACTION READ ONLY, READ WRITE;
RENAME TABLE t1 TO t2;
RENAME TABLE temp_t2 TO temp_t3;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 CLOSE;
HANDLER temp_t2 OPEN;
HANDLER temp_t2 READ FIRST;
HANDLER temp_t2 CLOSE;
PREPARE stmt FROM "DELETE FROM t1";
PREPARE stmt FROM "DELETE FROM temp_t2";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
CREATE FUNCTION f1() RETURNS INT BEGIN   DELETE FROM t1;   RETURN 1; END|
CREATE FUNCTION f2() RETURNS INT BEGIN   DELETE FROM temp_t2;   RETURN 1; END|
LOCK TABLE t1 WRITE;
LOCK TABLE t1 READ;
UNLOCK TABLES;
CREATE PROCEDURE p1() BEGIN   DECLARE only INT DEFAULT 1;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() SET SESSION TRANSACTION READ ONLY;
CREATE PROCEDURE p1() SET SESSION TRANSACTION READ ONLY,                                               ISOLATION LEVEL SERIALIZABLE;
CREATE FUNCTION f1() RETURNS INT BEGIN   SET SESSION TRANSACTION READ ONLY;   RETURN 1; END|
CREATE FUNCTION f1() RETURNS INT BEGIN   SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY;   RETURN 1; END|
CREATE UNDO TABLESPACE undo_003 ADD DATAFILE 'undo_003.ibu' ENGINE MyISAM;
ALTER UNDO TABLESPACE undo_003 SET ACTIVE ENGINE MyISAM;
ALTER UNDO TABLESPACE undo_003 SET INACTIVE ENGINE MyISAM;
source include/func_aes_block.inc;
source include/search_pattern.inc;
EXPLAIN WITH cte AS ( SELECT alias1 . col_time_key AS field1 FROM  cc AS alias1  LEFT OUTER JOIN view_c AS alias2 ON  alias1 . col_varchar_key =  alias2 . col_blob_key WHERE  alias2 . col_varchar_key >= 'n' ORDER BY field1 LIMIT 1000 OFFSET 9) DELETE  FROM outr1.*, outr2.* USING c AS outr1 RIGHT OUTER JOIN c AS outr2 ON ( outr1 . col_blob_key = outr2 . col_blob ) RIGHT JOIN cte AS outrcte ON outr2 . col_blob = outrcte.field1 WHERE outr1 . col_blob_key <> ( SELECT DISTINCT innr1 . col_blob AS y FROM bb AS innr1 LEFT JOIN cte AS innrcte ON innr1.pk <> innrcte.field1 );
WITH cte AS ( SELECT alias1 . col_int AS field1 FROM  dd AS alias1  LEFT  JOIN d AS alias2 ON  alias1 . col_blob =  alias2 . col_blob_key WHERE  alias2 . col_varchar_key  IN ('m') ORDER BY field1  LIMIT 10) DELETE IGNORE FROM outr2.* USING dd AS outr1 JOIN d AS outr2 ON ( outr1 . col_blob = outr2 . col_varchar ) JOIN d AS outr3 ON ( outr1 . pk = outr3 . col_int ) LEFT OUTER JOIN cte AS outrcte ON outr2 . pk = outrcte.field1 WHERE outrcte . field1 = ( SELECT  innr1 . col_int AS y FROM dd AS innr2 RIGHT OUTER JOIN dd AS innr1 ON ( innr2 . col_date > innr1 . col_date ) INNER JOIN cte AS innrcte ON innr2.col_int_key <= innrcte.field1 WHERE innr1 . col_varchar_key <= 'u' ORDER BY innr1 . col_int_key );
EXPLAIN WITH cte AS ( SELECT alias1 . col_date AS field1 , alias1 . col_blob AS field2 , alias1 . pk AS field3 , alias1 . pk AS field4 FROM  dd AS alias1  LEFT  JOIN d AS alias2 ON  alias1 . col_varchar_key =  alias2 . col_varchar_key WHERE  alias2 . pk != 0 OR  alias2 . col_varchar_key >= 'v' ORDER BY field4 ) DELETE /*+ NO_MERGE(outrcte) */  outr2.* FROM d AS outr1 JOIN d AS outr2 ON ( outr1 . col_datetime_key = outr2 . col_date ) JOIN cte AS outrcte ON outr1 . pk = outrcte.field1 WHERE outr1 . col_int_key = ( SELECT  innr1 . col_int AS y FROM dd AS innr1 INNER JOIN cte AS innrcte ON innr1.col_int_key = innrcte.field1 WHERE innr1 . col_blob_key = 'h' ORDER BY innr1 . col_varchar );
EXPLAIN WITH cte AS ( SELECT alias1 . col_date AS field1 , alias2 . col_blob AS field2 FROM  view_d AS alias1  LEFT  JOIN view_dd AS alias2 ON  alias1 . col_blob_key =  alias2 . col_blob_key WHERE  alias1 . col_varchar_key IS  NULL AND  alias2 . col_int_key > 6 AND alias2 . col_int_key <= ( 7 + 5 ) OR alias1 . col_blob_key >= 'a' ) DELETE /*+ MERGE(outrcte) */ FROM outr1.*, outr2.* USING d AS outr1 LEFT OUTER JOIN d AS outr2 ON ( outr1 . col_date = outr2 . col_date ) JOIN cte AS outrcte ON outr2 . col_blob_key = outrcte.field1 WHERE outr1 . col_blob  IN ( SELECT DISTINCT innr1 . col_blob_key AS y FROM dd AS innr1 RIGHT OUTER JOIN cte AS innrcte ON innr1.pk >= innrcte.field1 WHERE outr1 . col_int_key > 6  );
EXPLAIN WITH cte AS ( SELECT alias2 . col_datetime_key AS field1 , alias1 . col_varchar_key AS field2 , alias2 . col_int_key AS field3 FROM  view_b AS alias1  LEFT  JOIN  cc AS alias2  LEFT  JOIN view_d AS alias3 ON  alias2 . col_varchar_key =  alias3 . col_blob_key ON  alias1 . col_blob =  alias3 . col_blob_key WHERE  alias3 . col_varchar_key  LIKE ( 'w' ) OR  alias2 . pk <> 4  ) DELETE /*+ NO_MERGE(outrcte) */  QUICK outr1.*, outr2.* FROM d AS outr1 LEFT OUTER JOIN d AS outr2 ON ( outr1 . col_int = outr2 . col_int ) INNER JOIN cte AS outrcte ON outr1 . pk = outrcte.field1 WHERE (4, 7 )  IN ( SELECT DISTINCT innr1 . col_int_key AS x , innr1 . col_int AS y FROM cc AS innr1 JOIN cte AS innrcte ON innr1.pk = innrcte.field1 WHERE innr1 . col_int >= innr1 . pk );
WITH cte AS ( SELECT alias1 . col_int_key AS field1 FROM  a AS alias1  LEFT  JOIN c AS alias2 ON  alias1 . col_blob =  alias2 . col_blob_key WHERE  alias2 . pk > 3 AND alias2 . pk < ( 3 + 10 ) OR  alias1 . col_varchar_key >= 'z' AND alias1 . col_varchar_key <= 'k'  ) DELETE /*+ NO_MERGE(outrcte) */ LOW_PRIORITY QUICK  outr1.*, outr2.* FROM d AS outr1 LEFT JOIN c AS outr2 ON ( outr1 . col_int = outr2 . pk ) JOIN a AS outr3 ON ( outr1 . col_int_key = outr3 . pk ) RIGHT JOIN cte AS outrcte ON outr1 . col_int_key = outrcte.field1 WHERE outr1 . col_blob_key <> ( SELECT  innr1 . col_blob AS y FROM a AS innr2 INNER JOIN a AS innr1 ON ( innr2 . col_datetime >= innr1 . col_datetime ) RIGHT OUTER JOIN cte AS innrcte ON innr2.col_int_key < innrcte.field1 WHERE innr1 . col_datetime = '2006-02-24'  );
EXPLAIN WITH cte AS ( SELECT alias1 . pk AS field1 , alias2 . col_blob AS field2 FROM  bb AS alias1  LEFT  JOIN dd AS alias2 ON  alias1 . col_varchar_key =  alias2 . col_varchar_key WHERE  alias2 . pk > 3 AND alias2 . pk < ( 1 + 1 ) OR alias2 . pk  IN (7, 5) AND  alias2 . pk <> 3 AND  alias2 . pk IS NOT NULL  ) DELETE /*+ NO_MERGE(outrcte) */ LOW_PRIORITY outr2.* FROM d AS outr1 INNER JOIN a AS outr2 ON ( outr1 . col_int = outr2 . col_int_key ) LEFT OUTER JOIN cte AS outrcte ON outr2 . col_int_key = outrcte.field1 WHERE outr1 . col_int_key < ( SELECT DISTINCT innr1 . col_int AS y FROM cc AS innr1 LEFT OUTER JOIN cte AS innrcte ON innr1.col_int_key <= innrcte.field1 WHERE innr1 . col_int = 4  );
WITH cte AS ( SELECT alias1 . col_datetime_key AS field1 FROM  view_c AS alias1  RIGHT  JOIN view_bb AS alias2 ON  alias1 . col_blob_key =  alias2 . col_blob_key WHERE alias2 . col_varchar_key >= 'r' AND alias2 . col_varchar_key <= 'z' AND alias2 . col_varchar_key > 'x' AND alias2 . col_varchar_key <= 'z' AND  alias2 . pk > 3 AND alias2 . pk < ( 7 + 1 ) OR  alias2 . col_int_key  IN (5) ORDER BY field1  , field1 ) DELETE     outr1.* FROM b AS outr1 JOIN e AS outr2 ON ( outr1 . col_int_key = outr2 . col_int ) JOIN c AS outr3 ON ( outr1 . col_datetime_key = outr3 . col_date_key ) LEFT JOIN cte AS outrcte ON outr1 . col_blob = outrcte.field1 WHERE ( _utf8 'g' )  IN ( SELECT  innrcte . field1 AS x FROM aa AS innr1 JOIN cte AS innrcte ON innr1.pk = innrcte.field1 WHERE outr1 . col_int_key <> 0 ORDER BY innr1 . col_blob );
with t1 as (select * from t1 where a=3) delete from t1;
with t1 as (select * from t1 where a=3) delete t1.* from t1, t1 as t2;
perl;
$datadir= $ENV{'MYSQLD_DATADIR'};
$conn_id= $ENV{'CONN_ID'};
open(FILE, "$datadir/bug45387_general.log") or     die("Unable to read log file $datadir/bug45387_general.log: $!\n");
while(<FILE>) {     if (/\d{4}-\d+-\d+T\d+:\d+:\d+\.\d{6}Z[ \t]+(\d+)[ \t]+Query[ \t]+SELECT CONNECTION_ID/) {       $found= $1;
break;
}   }   if ($found == $conn_id) {     print "Bug#45387: ID match.\n";
} else {     print "Bug#45387: Expected ID '$conn_id', found '$found' in log file.\n";
print "Contents of log file:\n";
seek(FILE, 0, 0);
while($line= <FILE>) {       print $line;
}   }   close(FILE);
if(!$fixed_bug38124) { } TRUNCATE TABLE mysql.general_log;
CREATE ROLE of;
CREATE ROLE skip;
DROP ROLE skip, locked, nowait;
PREPARE p FROM "SELECT id, sex, NTH_VALUE(id, ?) OVER () FROM t1";
EXECUTE p USING @p1;
EXECUTE p USING @p1;
EXECUTE p USING @p1;
EXECUTE p USING @p1;
DROP PREPARE p;
begin work;
connect (ce, localhost, root,, mysqltest1);
connect (cq, localhost, root,, mysqltest1);
PREPARE stmt FROM 'EXPLAIN FOR CONNECTION 1';
PREPARE stmt FROM 'SELECT * FROM t1';
CREATE PROCEDURE proc6369()   EXPLAIN FOR CONNECTION 1;
GROUP BY f1 NOT IN  (SELECT f1+10 AS f2 FROM t1 AS t2   GROUP BY f2 NOT IN   (SELECT f1+100 AS f3 FROM t1 AS t3));
ORDER BY f1 NOT IN  (SELECT f1+10 AS f2 FROM t2   GROUP BY f2 NOT IN   (SELECT f1+100 AS f3 FROM t2 AS t3));
WHERE t1.f1>(SELECT t3.f1 FROM t1 AS t3 LIMIT 1);
WHERE t1.f1>(SELECT t3.f1 FROM t1 AS t3 LIMIT 1);
WHERE t1.f1>(SELECT t3.f1 FROM t1 AS t3 LIMIT 1);
ROW(f1,f1) >= ROW('1', (SELECT 1 FROM t1 WHERE f1 > 1234));
disconnect ce;
connect (ce, localhost, privtest,, mysqltest1);
disconnect cq;
connect (cq, localhost, privtest,, mysqltest1);
disconnect ce;
disconnect cq;
connect (ce, localhost, root,, mysqltest1);
connect (cq, localhost, root,, mysqltest1);
disconnect cq;
disconnect ce;
LOCK TABLE v1 READ;
connect (con1, localhost, root);
UNLOCK TABLES;
disconnect con1;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set @save_storage_engine= @@default_storage_engine;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @read_rnd_buffer_size_save= @@read_rnd_buffer_size;
load data infile '../../std_data/bad_gis_data.dat' into table t1;
create function fn3 () returns point deterministic return ST_GeomFromText("point(1 1)");  show create function fn3;
SELECT ST_AsText(ST_GeometryFromText(CONCAT(   'MULTIPOLYGON(((',   REPEAT ('-0.00000000001234567890123456789012 -0.123456789012345678,', 1000),   '-0.00000000001234567890123456789012 -0.123456789012345678',   ')))' ))) AS a;
CREATE TABLE t1(col1 MULTIPOLYGON NOT NULL,   SPATIAL INDEX USING BTREE (col1));
CREATE SPATIAL INDEX USING BTREE ON t2(col);
ALTER TABLE t2 ADD SPATIAL INDEX USING BTREE (col1);
CREATE TABLE lakes (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    shore POLYGON);  CREATE TABLE road_segments (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    aliases CHARACTER VARYING(64),    num_lanes INTEGER,    centerline LINESTRING);
CREATE TABLE divided_routes (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    num_lanes INTEGER,    centerlines MULTILINESTRING);  CREATE TABLE forests (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    boundary MULTIPOLYGON);  CREATE TABLE bridges (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    position POINT);  CREATE TABLE streams (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    centerline LINESTRING);  CREATE TABLE buildings (    fid INTEGER NOT NULL PRIMARY KEY,    address CHARACTER VARYING(64),    position POINT,    footprint POLYGON);  CREATE TABLE ponds (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    type CHARACTER VARYING(64),    shores MULTIPOLYGON);  CREATE TABLE named_places (    fid INTEGER NOT NULL PRIMARY KEY,    name CHARACTER VARYING(64),    boundary POLYGON);  CREATE TABLE map_neatlines (    fid INTEGER NOT NULL PRIMARY KEY,    neatline POLYGON);  INSERT INTO lakes VALUES (  101, 'BLUE LAKE',  ST_PolyFromText(  'POLYGON(  (52 18,66 23,73 9,48 6,52 18),  (59 18,67 18,67 13,59 13,59 18)  )',  0));  INSERT INTO road_segments VALUES(102, 'Route 5', NULL, 2,  ST_LineFromText(  'LINESTRING( 0 18, 10 21, 16 23, 28 26, 44 31 )' ,0));  INSERT INTO road_segments VALUES(103, 'Route 5', 'Main Street', 4,  ST_LineFromText(  'LINESTRING( 44 31, 56 34, 70 38 )' ,0));  INSERT INTO road_segments VALUES(104, 'Route 5', NULL, 2,  ST_LineFromText(  'LINESTRING( 70 38, 72 48 )' ,0));  INSERT INTO road_segments VALUES(105, 'Main Street', NULL, 4,  ST_LineFromText(  'LINESTRING( 70 38, 84 42 )' ,0));  INSERT INTO road_segments VALUES(106, 'Dirt Road by Green Forest', NULL,  1,  ST_LineFromText(  'LINESTRING( 28 26, 28 0 )',0));  INSERT INTO divided_routes VALUES(119, 'Route 75', 4,  ST_MLineFromText(  'MULTILINESTRING((10 48,10 21,10 0),  (16 0,16 23,16 48))', 0));  INSERT INTO forests VALUES(109, 'Green Forest',  ST_MPolyFromText(  'MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),  (52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))',  0));  INSERT INTO bridges VALUES(110, 'Cam Bridge', ST_PointFromText(  'POINT( 44 31 )', 0));  INSERT INTO streams VALUES(111, 'Cam Stream',  ST_LineFromText(  'LINESTRING( 38 48, 44 41, 41 36, 44 31, 52 18 )', 0));  INSERT INTO streams VALUES(112, NULL,  ST_LineFromText(  'LINESTRING( 76 0, 78 4, 73 9 )', 0));  INSERT INTO buildings VALUES(113, '123 Main Street',  ST_PointFromText(  'POINT( 52 30 )', 0),  ST_PolyFromText(  'POLYGON( ( 50 31, 54 31, 54 29, 50 29, 50 31) )', 0));  INSERT INTO buildings VALUES(114, '215 Main Street',  ST_PointFromText(  'POINT( 64 33 )', 0),  ST_PolyFromText(  'POLYGON( ( 66 34, 62 34, 62 32, 66 32, 66 34) )', 0));  INSERT INTO ponds VALUES(120, NULL, 'Stock Pond',  ST_MPolyFromText(  'MULTIPOLYGON( ( ( 24 44, 22 42, 24 40, 24 44) ),  ( ( 26 44, 26 40, 28 42, 26 44) ) )', 0));  INSERT INTO named_places VALUES(117, 'Ashton',  ST_PolyFromText(  'POLYGON( ( 62 48, 84 48, 84 30, 56 30, 56 34, 62 48) )', 0));  INSERT INTO named_places VALUES(118, 'Goose Island',  ST_PolyFromText(  'POLYGON( ( 67 13, 67 18, 59 18, 59 13, 67 13) )', 0));  INSERT INTO map_neatlines VALUES(115,  ST_PolyFromText(  'POLYGON( ( 0 0, 0 48, 84 48, 84 0, 0 0 ) )', 0));  SELECT ST_Dimension(shore)  FROM lakes  WHERE name = 'Blue Lake';  SELECT ST_GeometryType(centerlines)  FROM divided_routes WHERE name = 'Route 75';  SELECT ST_AsText(boundary)  FROM named_places  WHERE name = 'Goose Island';  SELECT ST_AsText(ST_PolyFromWKB(ST_AsBinary(boundary),0))  FROM named_places  WHERE name = 'Goose Island';  SELECT ST_SRID(boundary)  FROM named_places  WHERE name = 'Goose Island';  SELECT ST_IsEmpty(centerline)  FROM road_segments  WHERE name = 'Route 5'  AND aliases = 'Main Street';  SELECT ST_AsText(ST_Envelope(boundary))  FROM named_places  WHERE name = 'Goose Island';  SELECT ST_X(position)  FROM bridges  WHERE name = 'Cam Bridge';  SELECT ST_Y(position)  FROM bridges  WHERE name = 'Cam Bridge';  SELECT ST_AsText(ST_StartPoint(centerline))  FROM road_segments  WHERE fid = 102;  SELECT ST_AsText(ST_EndPoint(centerline))  FROM road_segments  WHERE fid = 102;  SELECT ST_Length(centerline)  FROM road_segments  WHERE fid = 106;  SELECT ST_NumPoints(centerline)  FROM road_segments  WHERE fid = 102;  SELECT ST_AsText(ST_PointN(centerline, 1))  FROM road_segments  WHERE fid = 102;  SELECT ST_AsText(ST_Centroid(boundary))  FROM named_places  WHERE name = 'Goose Island';  SELECT ST_Area(boundary)  FROM named_places  WHERE name = 'Goose Island';  SELECT ST_AsText(ST_ExteriorRing(shore))  FROM lakes  WHERE name = 'Blue Lake';  SELECT ST_NumInteriorRings(shore)  FROM lakes  WHERE name = 'Blue Lake';  SELECT ST_AsText(ST_InteriorRingN(shore, 1))  FROM lakes  WHERE name = 'Blue Lake';  SELECT ST_NumGeometries(centerlines)  FROM divided_routes  WHERE name = 'Route 75';  SELECT ST_AsText(ST_GeometryN(centerlines, 2))  FROM divided_routes  WHERE name = 'Route 75';  SELECT ST_IsClosed(centerlines)  FROM divided_routes  WHERE name = 'Route 75';  SELECT ST_Length(centerlines)  FROM divided_routes  WHERE name = 'Route 75';  SELECT ST_AsText(ST_Centroid(shores))  FROM ponds  WHERE fid = 120;  SELECT ST_Area(shores)  FROM ponds  WHERE fid = 120;  SELECT ST_Equals(boundary, ST_PolyFromText('POLYGON( ( 67 13, 67 18, 59 18, 59 13, 67 13) )',0)) FROM named_places WHERE name = 'Goose Island';
INSERT INTO t1 VALUES (   UNHEX('00000000010F0000000100000001030000000100000004000000000000000000000000'         '00000000000000000000000000F03F0000000000000000000000000000F03F00000000'         '0000F03F00000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001100000000100000001030000000100000004000000000000000000000000'         '00000000000000000000000000F03F0000000000000000000000000000F03F00000000'         '0000F03F00000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001110000000100000004000000000000000000000000000000000000000000'         '00000000F03F0000000000000000000000000000F03F000000000000F03F0000000000'         '0000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001EA0300000200000000000000000000000000000000000000000000000000'         '0000000000000000F03F000000000000F03F0000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001EB0300000100000004000000000000000000000000000000000000000000'         '000000000000000000000000F03F000000000000000000000000000000000000000000'         '00F03F000000000000F03F000000000000000000000000000000000000000000000000'         '0000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001EC0300000100000001E90300000000000000000000000000000000000000'         '00000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001ED030000010000000000000001EA03000002000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000F03F00000000'         '00000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001EE0300000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001EF0300000100000001E90300000000000000000000000000000000000000'         '00000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001F70300000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001F80300000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001F90300000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001D20700000200000000000000000000000000000000000000000000000000'         '0000000000000000F03F000000000000F03F0000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001D30700000100000004000000000000000000000000000000000000000000'         '000000000000000000000000F03F000000000000000000000000000000000000000000'         '00F03F000000000000F03F000000000000000000000000000000000000000000000000'         '0000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001D40700000100000001E90300000000000000000000000000000000000000'         '00000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001D5070000010000000000000001EA03000002000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000F03F00000000'         '00000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001D60700000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001D70700000100000001E90300000000000000000000000000000000000000'         '00000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001DF0700000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001E00700000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001E10700000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001B90B00000000000000000000000000000000000000000000000000000000'         '0000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001BA0B00000200000000000000000000000000000000000000000000000000'         '00000000000000000000000000000000F03F000000000000F03F000000000000000000'         '00000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001BB0B00000100000004000000000000000000000000000000000000000000'         '0000000000000000000000000000000000000000F03F00000000000000000000000000'         '0000000000000000000000000000000000F03F000000000000F03F0000000000000000'         '0000000000000000000000000000000000000000000000000000000000000000000000'         '0000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001BC0B00000100000001B90B00000000000000000000000000000000000000'         '0000000000000000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001BD0B00000100000001BA0B00000200000000000000000000000000000000'         '00000000000000000000000000000000000000000000000000F03F000000000000F03F'         '00000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001BE0B00000100000001BB0B00000100000004000000000000000000000000'         '0000000000000000000000000000000000000000000000000000000000F03F00000000'         '0000000000000000000000000000000000000000000000000000F03F000000000000F0'         '3F00000000000000000000000000000000000000000000000000000000000000000000'         '0000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001BF0B00000100000001B90B00000000000000000000000000000000000000'         '0000000000000000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001C70B00000100000001BB0B00000100000004000000000000000000000000'         '0000000000000000000000000000000000000000000000000000000000F03F00000000'         '0000000000000000000000000000000000000000000000000000F03F000000000000F0'         '3F00000000000000000000000000000000000000000000000000000000000000000000'         '0000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001C80B00000100000001BB0B00000100000004000000000000000000000000'         '0000000000000000000000000000000000000000000000000000000000F03F00000000'         '0000000000000000000000000000000000000000000000000000F03F000000000000F0'         '3F00000000000000000000000000000000000000000000000000000000000000000000'         '0000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001C90B00000100000001EB0300000100000004000000000000000000000000'         '000000000000000000000000000000000000000000F03F000000000000000000000000'         '00000000000000000000F03F000000000000F03F000000000000000000000000000000'         '0000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001030000000100000002000000000000000000000000000000000000000000'         '00000000F03F0000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001030000000100000003000000000000000000000000000000000000000000'         '00000000F03F000000000000000000000000000000000000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001040000000100000001020000000200000000000000000000000000000000'         '000000000000000000F03F000000000000F03F'));
INSERT INTO t1 VALUES (   UNHEX('0000000001070000000100000001040000000100000001020000000200000000000000'         '000000000000000000000000000000000000F03F000000000000F03F'));
INSERT INTO t1 VALUES (   UNHEX('0000000001070000000100000001050000000100000001010000000000000000000000'         '0000000000000000'));
INSERT INTO t1 VALUES (   UNHEX('0000000001070000000100000001060000000100000001010000000000000000000000'         '0000000000000000'));
SELECT ST_GeomFromText('POINT(0 0)') IN (SELECT b FROM t) AS result;
SELECT ST_AsWKB(ST_GeomFromText('POINT(0 0)')) IN (SELECT b FROM t) AS result;
SELECT ST_GeomFromText('POINT(0 0)') IN (SELECT b FROM t) AS result;
SELECT ST_AsWKB(ST_GeomFromText('POINT(0 0)')) IN (SELECT b FROM t) AS result;
SELECT ST_GeomFromText('POINT(0 0)') IN (SELECT b FROM t1) AS result;
SELECT ST_AsWKB(ST_GeomFromText('POINT(0 0)')) IN (SELECT b FROM t1) AS result;
SELECT ST_GeomFromText('POINT(0 0)') IN (SELECT b FROM t1) AS result;
SELECT ST_AsWKB(ST_GeomFromText('POINT(0 0)')) IN (SELECT b FROM t1) AS result;
SELECT point(1,1) IN ('1',1,'1') AS res;
SELECT st_centroid(point(1,1)) IN ('1',1,'1') AS res;
DO st_centroid(point(1,1)) IN ('1',1,'1');
DO (SELECT ST_ASBINARY(r.p) FROM d INNER JOIN dp ON d.id = dp.d_id INNER JOIN r ON d.r_id = r.id ORDER BY d.i);
DO ST_GEOMCOLLFROMTEXT(@wkt_pt);
DO ST_GEOMCOLLFROMTEXT(@wkt_ls);
DO ST_GEOMCOLLFROMTEXT(@wkt_py);
DO ST_GEOMCOLLFROMTEXT(@wkt_mpt);
DO ST_GEOMCOLLFROMTEXT(@wkt_mls);
DO ST_GEOMCOLLFROMTEXT(@wkt_mpy);
DO ST_GEOMCOLLFROMTEXT(@wkt_gc);
DO ST_GEOMCOLLFROMTXT(@wkt_pt);
DO ST_GEOMCOLLFROMTXT(@wkt_ls);
DO ST_GEOMCOLLFROMTXT(@wkt_py);
DO ST_GEOMCOLLFROMTXT(@wkt_mpt);
DO ST_GEOMCOLLFROMTXT(@wkt_mls);
DO ST_GEOMCOLLFROMTXT(@wkt_mpy);
DO ST_GEOMCOLLFROMTXT(@wkt_gc);
DO ST_GEOMETRYCOLLECTIONFROMTEXT(@wkt_pt);
DO ST_GEOMETRYCOLLECTIONFROMTEXT(@wkt_ls);
DO ST_GEOMETRYCOLLECTIONFROMTEXT(@wkt_py);
DO ST_GEOMETRYCOLLECTIONFROMTEXT(@wkt_mpt);
DO ST_GEOMETRYCOLLECTIONFROMTEXT(@wkt_mls);
DO ST_GEOMETRYCOLLECTIONFROMTEXT(@wkt_mpy);
DO ST_GEOMETRYCOLLECTIONFROMTEXT(@wkt_gc);
DO ST_GEOMETRYFROMTEXT(@wkt_pt);
DO ST_GEOMETRYFROMTEXT(@wkt_ls);
DO ST_GEOMETRYFROMTEXT(@wkt_py);
DO ST_GEOMETRYFROMTEXT(@wkt_mpt);
DO ST_GEOMETRYFROMTEXT(@wkt_mls);
DO ST_GEOMETRYFROMTEXT(@wkt_mpy);
DO ST_GEOMETRYFROMTEXT(@wkt_gc);
DO ST_GEOMFROMTEXT(@wkt_pt);
DO ST_GEOMFROMTEXT(@wkt_ls);
DO ST_GEOMFROMTEXT(@wkt_py);
DO ST_GEOMFROMTEXT(@wkt_mpt);
DO ST_GEOMFROMTEXT(@wkt_mls);
DO ST_GEOMFROMTEXT(@wkt_mpy);
DO ST_GEOMFROMTEXT(@wkt_gc);
DO ST_LINEFROMTEXT(@wkt_pt);
DO ST_LINEFROMTEXT(@wkt_ls);
DO ST_LINEFROMTEXT(@wkt_py);
DO ST_LINEFROMTEXT(@wkt_mpt);
DO ST_LINEFROMTEXT(@wkt_mls);
DO ST_LINEFROMTEXT(@wkt_mpy);
DO ST_LINEFROMTEXT(@wkt_gc);
DO ST_LINESTRINGFROMTEXT(@wkt_pt);
DO ST_LINESTRINGFROMTEXT(@wkt_ls);
DO ST_LINESTRINGFROMTEXT(@wkt_py);
DO ST_LINESTRINGFROMTEXT(@wkt_mpt);
DO ST_LINESTRINGFROMTEXT(@wkt_mls);
DO ST_LINESTRINGFROMTEXT(@wkt_mpy);
DO ST_LINESTRINGFROMTEXT(@wkt_gc);
DO ST_MLINEFROMTEXT(@wkt_pt);
DO ST_MLINEFROMTEXT(@wkt_ls);
DO ST_MLINEFROMTEXT(@wkt_py);
DO ST_MLINEFROMTEXT(@wkt_mpt);
DO ST_MLINEFROMTEXT(@wkt_mls);
DO ST_MLINEFROMTEXT(@wkt_mpy);
DO ST_MLINEFROMTEXT(@wkt_gc);
DO ST_MPOINTFROMTEXT(@wkt_pt);
DO ST_MPOINTFROMTEXT(@wkt_ls);
DO ST_MPOINTFROMTEXT(@wkt_py);
DO ST_MPOINTFROMTEXT(@wkt_mpt);
DO ST_MPOINTFROMTEXT(@wkt_mls);
DO ST_MPOINTFROMTEXT(@wkt_mpy);
DO ST_MPOINTFROMTEXT(@wkt_gc);
DO ST_MPOLYFROMTEXT(@wkt_pt);
DO ST_MPOLYFROMTEXT(@wkt_ls);
DO ST_MPOLYFROMTEXT(@wkt_py);
DO ST_MPOLYFROMTEXT(@wkt_mpt);
DO ST_MPOLYFROMTEXT(@wkt_mls);
DO ST_MPOLYFROMTEXT(@wkt_mpy);
DO ST_MPOLYFROMTEXT(@wkt_gc);
DO ST_MULTILINESTRINGFROMTEXT(@wkt_pt);
DO ST_MULTILINESTRINGFROMTEXT(@wkt_ls);
DO ST_MULTILINESTRINGFROMTEXT(@wkt_py);
DO ST_MULTILINESTRINGFROMTEXT(@wkt_mpt);
DO ST_MULTILINESTRINGFROMTEXT(@wkt_mls);
DO ST_MULTILINESTRINGFROMTEXT(@wkt_mpy);
DO ST_MULTILINESTRINGFROMTEXT(@wkt_gc);
DO ST_MULTIPOINTFROMTEXT(@wkt_pt);
DO ST_MULTIPOINTFROMTEXT(@wkt_ls);
DO ST_MULTIPOINTFROMTEXT(@wkt_py);
DO ST_MULTIPOINTFROMTEXT(@wkt_mpt);
DO ST_MULTIPOINTFROMTEXT(@wkt_mls);
DO ST_MULTIPOINTFROMTEXT(@wkt_mpy);
DO ST_MULTIPOINTFROMTEXT(@wkt_gc);
DO ST_MULTIPOLYGONFROMTEXT(@wkt_pt);
DO ST_MULTIPOLYGONFROMTEXT(@wkt_ls);
DO ST_MULTIPOLYGONFROMTEXT(@wkt_py);
DO ST_MULTIPOLYGONFROMTEXT(@wkt_mpt);
DO ST_MULTIPOLYGONFROMTEXT(@wkt_mls);
DO ST_MULTIPOLYGONFROMTEXT(@wkt_mpy);
DO ST_MULTIPOLYGONFROMTEXT(@wkt_gc);
DO ST_POINTFROMTEXT(@wkt_pt);
DO ST_POINTFROMTEXT(@wkt_ls);
DO ST_POINTFROMTEXT(@wkt_py);
DO ST_POINTFROMTEXT(@wkt_mpt);
DO ST_POINTFROMTEXT(@wkt_mls);
DO ST_POINTFROMTEXT(@wkt_mpy);
DO ST_POINTFROMTEXT(@wkt_gc);
DO ST_POLYFROMTEXT(@wkt_pt);
DO ST_POLYFROMTEXT(@wkt_ls);
DO ST_POLYFROMTEXT(@wkt_py);
DO ST_POLYFROMTEXT(@wkt_mpt);
DO ST_POLYFROMTEXT(@wkt_mls);
DO ST_POLYFROMTEXT(@wkt_mpy);
DO ST_POLYFROMTEXT(@wkt_gc);
DO ST_POLYGONFROMTEXT(@wkt_pt);
DO ST_POLYGONFROMTEXT(@wkt_ls);
DO ST_POLYGONFROMTEXT(@wkt_py);
DO ST_POLYGONFROMTEXT(@wkt_mpt);
DO ST_POLYGONFROMTEXT(@wkt_mls);
DO ST_POLYGONFROMTEXT(@wkt_mpy);
DO ST_POLYGONFROMTEXT(@wkt_gc);
DO ST_GEOMCOLLFROMWKB(@wkb_pt);
DO ST_GEOMCOLLFROMWKB(@wkb_ls);
DO ST_GEOMCOLLFROMWKB(@wkb_py);
DO ST_GEOMCOLLFROMWKB(@wkb_mpt);
DO ST_GEOMCOLLFROMWKB(@wkb_mls);
DO ST_GEOMCOLLFROMWKB(@wkb_mpy);
DO ST_GEOMCOLLFROMWKB(@wkb_gc);
DO ST_GEOMETRYCOLLECTIONFROMWKB(@wkb_pt);
DO ST_GEOMETRYCOLLECTIONFROMWKB(@wkb_ls);
DO ST_GEOMETRYCOLLECTIONFROMWKB(@wkb_py);
DO ST_GEOMETRYCOLLECTIONFROMWKB(@wkb_mpt);
DO ST_GEOMETRYCOLLECTIONFROMWKB(@wkb_mls);
DO ST_GEOMETRYCOLLECTIONFROMWKB(@wkb_mpy);
DO ST_GEOMETRYCOLLECTIONFROMWKB(@wkb_gc);
DO ST_GEOMETRYFROMWKB(@wkb_pt);
DO ST_GEOMETRYFROMWKB(@wkb_ls);
DO ST_GEOMETRYFROMWKB(@wkb_py);
DO ST_GEOMETRYFROMWKB(@wkb_mpt);
DO ST_GEOMETRYFROMWKB(@wkb_mls);
DO ST_GEOMETRYFROMWKB(@wkb_mpy);
DO ST_GEOMETRYFROMWKB(@wkb_gc);
DO ST_GEOMFROMWKB(@wkb_pt);
DO ST_GEOMFROMWKB(@wkb_ls);
DO ST_GEOMFROMWKB(@wkb_py);
DO ST_GEOMFROMWKB(@wkb_mpt);
DO ST_GEOMFROMWKB(@wkb_mls);
DO ST_GEOMFROMWKB(@wkb_mpy);
DO ST_GEOMFROMWKB(@wkb_gc);
DO ST_LINEFROMWKB(@wkb_pt);
DO ST_LINEFROMWKB(@wkb_ls);
DO ST_LINEFROMWKB(@wkb_py);
DO ST_LINEFROMWKB(@wkb_mpt);
DO ST_LINEFROMWKB(@wkb_mls);
DO ST_LINEFROMWKB(@wkb_mpy);
DO ST_LINEFROMWKB(@wkb_gc);
DO ST_LINESTRINGFROMWKB(@wkb_pt);
DO ST_LINESTRINGFROMWKB(@wkb_ls);
DO ST_LINESTRINGFROMWKB(@wkb_py);
DO ST_LINESTRINGFROMWKB(@wkb_mpt);
DO ST_LINESTRINGFROMWKB(@wkb_mls);
DO ST_LINESTRINGFROMWKB(@wkb_mpy);
DO ST_LINESTRINGFROMWKB(@wkb_gc);
DO ST_MLINEFROMWKB(@wkb_pt);
DO ST_MLINEFROMWKB(@wkb_ls);
DO ST_MLINEFROMWKB(@wkb_py);
DO ST_MLINEFROMWKB(@wkb_mpt);
DO ST_MLINEFROMWKB(@wkb_mls);
DO ST_MLINEFROMWKB(@wkb_mpy);
DO ST_MLINEFROMWKB(@wkb_gc);
DO ST_MPOINTFROMWKB(@wkb_pt);
DO ST_MPOINTFROMWKB(@wkb_ls);
DO ST_MPOINTFROMWKB(@wkb_py);
DO ST_MPOINTFROMWKB(@wkb_mpt);
DO ST_MPOINTFROMWKB(@wkb_mls);
DO ST_MPOINTFROMWKB(@wkb_mpy);
DO ST_MPOINTFROMWKB(@wkb_gc);
DO ST_MPOLYFROMWKB(@wkb_pt);
DO ST_MPOLYFROMWKB(@wkb_ls);
DO ST_MPOLYFROMWKB(@wkb_py);
DO ST_MPOLYFROMWKB(@wkb_mpt);
DO ST_MPOLYFROMWKB(@wkb_mls);
DO ST_MPOLYFROMWKB(@wkb_mpy);
DO ST_MPOLYFROMWKB(@wkb_gc);
DO ST_MULTILINESTRINGFROMWKB(@wkb_pt);
DO ST_MULTILINESTRINGFROMWKB(@wkb_ls);
DO ST_MULTILINESTRINGFROMWKB(@wkb_py);
DO ST_MULTILINESTRINGFROMWKB(@wkb_mpt);
DO ST_MULTILINESTRINGFROMWKB(@wkb_mls);
DO ST_MULTILINESTRINGFROMWKB(@wkb_mpy);
DO ST_MULTILINESTRINGFROMWKB(@wkb_gc);
DO ST_MULTIPOINTFROMWKB(@wkb_pt);
DO ST_MULTIPOINTFROMWKB(@wkb_ls);
DO ST_MULTIPOINTFROMWKB(@wkb_py);
DO ST_MULTIPOINTFROMWKB(@wkb_mpt);
DO ST_MULTIPOINTFROMWKB(@wkb_mls);
DO ST_MULTIPOINTFROMWKB(@wkb_mpy);
DO ST_MULTIPOINTFROMWKB(@wkb_gc);
DO ST_MULTIPOLYGONFROMWKB(@wkb_pt);
DO ST_MULTIPOLYGONFROMWKB(@wkb_ls);
DO ST_MULTIPOLYGONFROMWKB(@wkb_py);
DO ST_MULTIPOLYGONFROMWKB(@wkb_mpt);
DO ST_MULTIPOLYGONFROMWKB(@wkb_mls);
DO ST_MULTIPOLYGONFROMWKB(@wkb_mpy);
DO ST_MULTIPOLYGONFROMWKB(@wkb_gc);
DO ST_POINTFROMWKB(@wkb_pt);
DO ST_POINTFROMWKB(@wkb_ls);
DO ST_POINTFROMWKB(@wkb_py);
DO ST_POINTFROMWKB(@wkb_mpt);
DO ST_POINTFROMWKB(@wkb_mls);
DO ST_POINTFROMWKB(@wkb_mpy);
DO ST_POINTFROMWKB(@wkb_gc);
DO ST_POLYFROMWKB(@wkb_pt);
DO ST_POLYFROMWKB(@wkb_ls);
DO ST_POLYFROMWKB(@wkb_py);
DO ST_POLYFROMWKB(@wkb_mpt);
DO ST_POLYFROMWKB(@wkb_mls);
DO ST_POLYFROMWKB(@wkb_mpy);
DO ST_POLYFROMWKB(@wkb_gc);
DO ST_POLYGONFROMWKB(@wkb_pt);
DO ST_POLYGONFROMWKB(@wkb_ls);
DO ST_POLYGONFROMWKB(@wkb_py);
DO ST_POLYGONFROMWKB(@wkb_mpt);
DO ST_POLYGONFROMWKB(@wkb_mls);
DO ST_POLYGONFROMWKB(@wkb_mpy);
DO ST_POLYGONFROMWKB(@wkb_gc);
DO ST_GEOMCOLLFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_GEOMCOLLFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_GEOMCOLLFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_GEOMCOLLFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_GEOMCOLLFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_GEOMCOLLFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_GEOMCOLLFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_GEOMETRYCOLLECTIONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_GEOMETRYCOLLECTIONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_GEOMETRYCOLLECTIONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_GEOMETRYCOLLECTIONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_GEOMETRYCOLLECTIONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_GEOMETRYCOLLECTIONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_GEOMETRYCOLLECTIONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_GEOMETRYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_GEOMETRYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_GEOMETRYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_GEOMETRYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_GEOMETRYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_GEOMETRYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_GEOMETRYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_GEOMFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_GEOMFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_GEOMFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_GEOMFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_GEOMFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_GEOMFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_GEOMFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_LINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_LINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_LINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_LINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_LINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_LINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_LINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_LINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_LINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_LINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_LINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_LINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_LINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_LINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_MLINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_MLINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_MLINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_MLINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_MLINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_MLINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_MLINEFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_MPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_MPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_MPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_MPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_MPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_MPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_MPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_MPOLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_MPOLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_MPOLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_MPOLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_MPOLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_MPOLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_MPOLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_MULTILINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_MULTILINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_MULTILINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_MULTILINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_MULTILINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_MULTILINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_MULTILINESTRINGFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_MULTIPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_MULTIPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_MULTIPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_MULTIPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_MULTIPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_MULTIPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_MULTIPOINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_MULTIPOLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_MULTIPOLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_MULTIPOLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_MULTIPOLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_MULTIPOLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_MULTIPOLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_MULTIPOLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_POINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_POINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_POINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_POINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_POINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_POINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_POINTFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_POLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_POLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_POLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_POLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_POLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_POLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_POLYFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_POLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_pt)));
DO ST_POLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_ls)));
DO ST_POLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_py)));
DO ST_POLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpt)));
DO ST_POLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mls)));
DO ST_POLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_mpy)));
DO ST_POLYGONFROMWKB(St_AsWKB(ST_GEOMFROMTEXT(@wkt_gc)));
DO ST_EXTERIORRING(x'000000000107000000010000000101000000000000000000');
DO ST_EXTERIORRING(x'000000000107000000010000000102000000000000000000');
DO ST_EXTERIORRING(x'000000000107000000010000000103000000000000000000');
DO ST_EXTERIORRING(x'00000000010700000001000000010400000001000000');
DO ST_EXTERIORRING(x'00000000010700000001000000010500000001000000');
DO ST_EXTERIORRING(x'00000000010700000001000000010600000001000000');
DO (SELECT DISTINCT SQL_BIG_RESULT ST_SIMPLIFY(POINT(a,1),1) FROM t);
LOAD DATA INFILE 'bug26412713.csv' INTO TABLE t1 (x);
CREATE TABLE t1 (g GEOMCOLLECTION);
DO ST_GEOMFROMTEXT('GEOMCOLLECTION(POINT(0 0))');
DO ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(0 0))');
DO ST_ASWKB(JSON_UNQUOTE(JSON_SET('{"a":""}', '$', '')));
write_file $SHUTDOWN_SQL;
CALL mtr.add_suppression("Dictionary file not specified");
CALL mtr.add_suppression("Dictionary file open failed");
CALL mtr.add_suppression("Since the validate_password_policy is mentioned ");
CALL mtr.add_suppression("Dictionary file size exceeded");
CALL mtr.add_suppression("Effective value of validate_password.length is changed.");
PREPARE stmt1 FROM 'UPDATE mysql.user SET authentication_string=(?) where USER = ?';
SET @a = REPEAT('a',2147483647);
EXECUTE stmt1 USING @a,@b;
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM 'UPDATE mysql.user SET authentication_string=(?) where USER = ?';
SET @a = REPEAT('a',1048576);
EXECUTE stmt1 USING @a,@b;
DEALLOCATE PREPARE stmt1;
connect (plug_con,localhost,user1,pass);
disconnect plug_con;
password validate password validate monkey CREATE USER 'user1'@'localhost' IDENTIFIED BY 'passWORD123#';
remove_file $MYSQLTEST_VARDIR/tmp/dictionary.txt;
remove_file $MYSQLTEST_VARDIR/tmp/dictionary2.txt;
call mtr.add_suppression("Dictionary file not specified");
SELECT VALIDATE_PASSWORD_STRENGTH(REPEAT("aA1#", 26));
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.NUMBER_COUNT;
SELECT @@GLOBAL.VALIDATE_PASSWORD.MIXED_CASE_COUNT;
SELECT @@GLOBAL.VALIDATE_PASSWORD.SPECIAL_CHAR_COUNT;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH;
SELECT @@GLOBAL.VALIDATE_PASSWORD.NUMBER_COUNT;
SELECT @@GLOBAL.VALIDATE_PASSWORD.MIXED_CASE_COUNT;
SELECT @@GLOBAL.VALIDATE_PASSWORD.SPECIAL_CHAR_COUNT;
password validate SELECT VALIDATE_PASSWORD_STRENGTH( 0x6E616E646F73617135234552 );
remove_file $MYSQLTEST_VARDIR/tmp/dictionary.txt;
DO validate_password_strength(export_set('a','a','a','a','a'));
connect (con1,localhost,user,ABCabc1!,);
disconnect con1;
CREATE TABLE t1 (get INT);
CREATE PROCEDURE p1() BEGIN   DECLARE get INT DEFAULT 1;
END| DELIMITER ;| CREATE TABLE t1 (`get` INT);
CREATE PROCEDURE p1() BEGIN   DECLARE `get` INT DEFAULT 1;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() BEGIN   DECLARE current INT DEFAULT 1;
DECLARE diagnostics INT DEFAULT 2;
DECLARE number INT DEFAULT 3;
DECLARE returned_sqlstate INT DEFAULT 4;
END| DELIMITER ;| CALL p1();
GET;
GET CURRENT;
GET DIAGNOSTICS;
GET CURRENT DIAGNOSTICS;
GET DIAGNOSTICS @var;
GET DIAGNOSTICS var;
CREATE PROCEDURE p1() BEGIN   GET DIAGNOSTICS var;
END| DELIMITER ;| DELIMITER |;
CREATE PROCEDURE p1() BEGIN   DECLARE var INT;
GET DIAGNOSTICS var;
END| DELIMITER ;| GET DIAGNOSTICS @var =;
GET DIAGNOSTICS @var = INVALID;
GET DIAGNOSTICS @var = MORE;
GET DIAGNOSTICS @var = CLASS_ORIGIN;
GET DIAGNOSTICS @var = INVALID,;
GET DIAGNOSTICS @var1 = NUMBER, @var2;
GET DIAGNOSTICS @var1 = NUMBER, @var2 = INVALID;
GET DIAGNOSTICS @@var1 = NUMBER;
GET DIAGNOSTICS @var1 = NUMBER, @@var2 = NUMBER;
CREATE PROCEDURE p1() BEGIN   DECLARE var INT;
GET DIAGNOSTICS var = INVALID;
END| DELIMITER ;| DELIMITER |;
CREATE PROCEDURE p1() BEGIN   DECLARE var CONDITION FOR SQLSTATE '12345';
GET DIAGNOSTICS var = NUMBER;
END| DELIMITER ;| DELIMITER |;
CREATE PROCEDURE p1() BEGIN   DECLARE var INT;
GET DIAGNOSTICS var = NUMBER, var1 = ROW_COUNT;
END| DELIMITER ;| GET DIAGNOSTICS @var = NUMBER;
GET DIAGNOSTICS @var = ROW_COUNT;
GET DIAGNOSTICS @var1 = NUMBER, @var2 = ROW_COUNT;
GET DIAGNOSTICS @var1 = ROW_COUNT, @var2 = NUMBER;
CREATE PROCEDURE p1() BEGIN   DECLARE var  INT;
DECLARE var1 INT;
DECLARE var2 INT;
GET DIAGNOSTICS var = NUMBER;
GET DIAGNOSTICS var = ROW_COUNT;
GET DIAGNOSTICS var1 = NUMBER, var2 = ROW_COUNT;
GET DIAGNOSTICS var1 = ROW_COUNT, var2 = NUMBER;
END| DELIMITER ;| DROP PROCEDURE p1;
GET DIAGNOSTICS CONDITION;
GET DIAGNOSTICS CONDITION a;
GET DIAGNOSTICS CONDITION 1;
GET DIAGNOSTICS CONDITION 1 @var;
GET DIAGNOSTICS CONDITION 1 var;
CREATE PROCEDURE p1() BEGIN   GET DIAGNOSTICS CONDITION 1 var;
END| DELIMITER ;| DELIMITER |;
CREATE PROCEDURE p1() BEGIN   DECLARE var INT;
GET DIAGNOSTICS CONDITION 1 var;
END| DELIMITER ;| GET DIAGNOSTICS CONDITION 1 @var =;
GET DIAGNOSTICS CONDITION 1 @var = INVALID;
GET DIAGNOSTICS CONDITION 1 @var = NUMBER;
GET DIAGNOSTICS CONDITION 1 @var = INVALID,;
GET DIAGNOSTICS CONDITION 1 @var1 = CLASS_ORIGIN, @var2;
GET DIAGNOSTICS CONDITION 1 @var1 = CLASS_ORIGIN, @var2 = INVALID;
GET DIAGNOSTICS CONDITION 1 @@var1 = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 @var1 = CLASS_ORIGIN, @@var2 = CLASS_ORIGIN;
CREATE PROCEDURE p1() BEGIN   DECLARE var INT;
GET DIAGNOSTICS CONDITION 1 var = INVALID;
END| DELIMITER ;| DELIMITER |;
CREATE PROCEDURE p1() BEGIN   DECLARE var CONDITION FOR SQLSTATE '12345';
GET DIAGNOSTICS CONDITION 1 var = NUMBER;
END| DELIMITER ;| DELIMITER |;
CREATE PROCEDURE p1() BEGIN   DECLARE var INT;
GET DIAGNOSTICS CONDITION 1 var = CLASS_ORIGIN, var1 = SUBCLASS_ORIGIN;
END| DELIMITER ;| GET DIAGNOSTICS CONDITION 1 @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 @var = SUBCLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 @var1 = CLASS_ORIGIN, @var2 = SUBCLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 @var1 = SUBCLASS_ORIGIN, @var2 = CLASS_ORIGIN;
CREATE PROCEDURE p1() BEGIN   DECLARE var  INT;
DECLARE var1 INT;
DECLARE var2 INT;
GET DIAGNOSTICS CONDITION 1 var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 var = SUBCLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 var1 = CLASS_ORIGIN, var2 = SUBCLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1 var1 = SUBCLASS_ORIGIN, var2 = CLASS_ORIGIN;
END| DELIMITER ;| DROP PROCEDURE p1;
GET DIAGNOSTICS CONDITION -1 @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1+1 @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION ? @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION (1) @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION p1() @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION ABS(2) @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 1.1 @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION "1" @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION 9999 @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION NULL @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION a @var = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION @cond @var1 = CLASS_ORIGIN;
GET DIAGNOSTICS CONDITION @cond @var1 = CLASS_ORIGIN;
CREATE PROCEDURE p1() BEGIN   DECLARE cond INT DEFAULT 1;
DECLARE var INT;
GET DIAGNOSTICS CONDITION cond var = CLASS_ORIGIN;
END| DELIMITER ;| DROP PROCEDURE p1;
CREATE PROCEDURE p1() BEGIN   DECLARE cond TEXT;
DECLARE var INT;
GET DIAGNOSTICS CONDITION cond var = CLASS_ORIGIN;
END| DELIMITER ;| CALL p1();
PREPARE stmt FROM "GET DIAGNOSTICS CONDITION 1 @var = CLASS_ORIGIN";
PREPARE stmt FROM "GET DIAGNOSTICS @var = NUMBER";
GET DIAGNOSTICS @var = NUMBER;
GET DIAGNOSTICS CONDITION 99999 @var = CLASS_ORIGIN;
GET DIAGNOSTICS @var = NUMBER;
GET DIAGNOSTICS @var = NUMBER;
GET DIAGNOSTICS @var = ROW_COUNT;
GET DIAGNOSTICS @var = ROW_COUNT;
CREATE PROCEDURE p1() BEGIN   DECLARE number INT;
DECLARE row_count INT;
GET DIAGNOSTICS number = NUMBER;
GET DIAGNOSTICS row_count = ROW_COUNT;
END| DELIMITER ;| CALL p1();
GET DIAGNOSTICS CONDITION 1   @class_origin = CLASS_ORIGIN,   @subclass_origin = SUBCLASS_ORIGIN,   @constraint_catalog = CONSTRAINT_CATALOG,   @constraint_schema = CONSTRAINT_SCHEMA,   @constraint_name = CONSTRAINT_NAME,   @catalog_name = CATALOG_NAME,   @schema_name = SCHEMA_NAME,   @table_name = TABLE_NAME,   @column_name = COLUMN_NAME,   @cursor_name = CURSOR_NAME,   @message_text = MESSAGE_TEXT,   @mysql_errno = MYSQL_ERRNO,   @returned_sqlstate = RETURNED_SQLSTATE;
CREATE PROCEDURE p1() BEGIN     DECLARE class_origin TEXT DEFAULT "a";
DECLARE subclass_origin TEXT DEFAULT "a";
DECLARE constraint_catalog TEXT DEFAULT "a";
DECLARE constraint_schema TEXT DEFAULT "a";
DECLARE constraint_name TEXT DEFAULT "a";
DECLARE catalog_name TEXT DEFAULT "a";
DECLARE schema_name TEXT DEFAULT "a";
DECLARE table_name TEXT DEFAULT "a";
DECLARE column_name TEXT DEFAULT "a";
DECLARE cursor_name TEXT DEFAULT "a";
DECLARE message_text TEXT DEFAULT "a";
DECLARE mysql_errno INT DEFAULT 1;
DECLARE returned_sqlstate TEXT DEFAULT "a";
GET DIAGNOSTICS CONDITION 1     class_origin = CLASS_ORIGIN,     subclass_origin = SUBCLASS_ORIGIN,     constraint_catalog = CONSTRAINT_CATALOG,     constraint_schema = CONSTRAINT_SCHEMA,     constraint_name = CONSTRAINT_NAME,     catalog_name = CATALOG_NAME,     schema_name = SCHEMA_NAME,     table_name = TABLE_NAME,     column_name = COLUMN_NAME,     cursor_name = CURSOR_NAME,     message_text = MESSAGE_TEXT,     mysql_errno = MYSQL_ERRNO,     returned_sqlstate = RETURNED_SQLSTATE;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() BEGIN   DECLARE errno1 INT;
DECLARE errno2 INT;
DECLARE msg1 TEXT;
DECLARE msg2 TEXT;
GET DIAGNOSTICS CONDITION 99999 msg1 = MESSAGE_TEXT;
GET DIAGNOSTICS CONDITION 1 errno1 = MYSQL_ERRNO, msg1 = MESSAGE_TEXT;
GET DIAGNOSTICS CONDITION 2 errno2 = MYSQL_ERRNO, msg2 = MESSAGE_TEXT;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() BEGIN   DECLARE errno INT DEFAULT 0;
DECLARE msg TEXT DEFAULT "foo";
DECLARE cond CONDITION FOR SQLSTATE "01234";
DECLARE CONTINUE HANDLER for 1012   BEGIN     GET DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO, msg = MESSAGE_TEXT;
END;
SIGNAL cond SET MESSAGE_TEXT = "Signal message", MYSQL_ERRNO = 1012;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() BEGIN   SIGNAL SQLSTATE '77777' SET MYSQL_ERRNO = 1000, MESSAGE_TEXT='ÁÂÃÅÄ';
END| DELIMITER ;| CALL p1();
GET DIAGNOSTICS CONDITION 1   @mysql_errno = MYSQL_ERRNO, @message_text = MESSAGE_TEXT,   @returned_sqlstate = RETURNED_SQLSTATE, @class_origin = CLASS_ORIGIN;
CREATE PROCEDURE p1() BEGIN   DECLARE cond CONDITION FOR SQLSTATE '12345';
SIGNAL cond SET     CLASS_ORIGIN = 'CLASS_ORIGIN text',     SUBCLASS_ORIGIN = 'SUBCLASS_ORIGIN text',     CONSTRAINT_CATALOG = 'CONSTRAINT_CATALOG text',     CONSTRAINT_SCHEMA = 'CONSTRAINT_SCHEMA text',     CONSTRAINT_NAME = 'CONSTRAINT_NAME text',     CATALOG_NAME = 'CATALOG_NAME text',     SCHEMA_NAME = 'SCHEMA_NAME text',     TABLE_NAME = 'TABLE_NAME text',     COLUMN_NAME = 'COLUMN_NAME text',     CURSOR_NAME = 'CURSOR_NAME text',     MESSAGE_TEXT = 'MESSAGE_TEXT text',     MYSQL_ERRNO = 9999;
END| DELIMITER ;| CALL p1();
GET DIAGNOSTICS CONDITION 1   @class_origin = CLASS_ORIGIN,   @subclass_origin = SUBCLASS_ORIGIN,   @constraint_catalog = CONSTRAINT_CATALOG,   @constraint_schema = CONSTRAINT_SCHEMA,   @constraint_name = CONSTRAINT_NAME,   @catalog_name = CATALOG_NAME,   @schema_name = SCHEMA_NAME,   @table_name = TABLE_NAME,   @column_name = COLUMN_NAME,   @cursor_name = CURSOR_NAME,   @message_text = MESSAGE_TEXT,   @mysql_errno = MYSQL_ERRNO,   @returned_sqlstate = RETURNED_SQLSTATE;
CREATE PROCEDURE p1() BEGIN   DECLARE var INT;
GET DIAGNOSTICS var = NUMBER, @var = NUMBER;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() BEGIN   DECLARE v VARCHAR(64);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     GET DIAGNOSTICS CONDITION 1 v = TABLE_NAME;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() BEGIN   DECLARE v CHAR(1);
GET DIAGNOSTICS CONDITION 1 v = MESSAGE_TEXT;
END| DELIMITER ;| CREATE TABLE t1 (a INT);
CREATE PROCEDURE p1(IN param INT) LANGUAGE SQL BEGIN   DECLARE v INT DEFAULT 0;
DECLARE rcount_each INT;
DECLARE rcount_total INT DEFAULT 0;
WHILE v < 5 DO     UPDATE t1 SET a = a * 1.1  WHERE b = param;
GET DIAGNOSTICS rcount_each = ROW_COUNT;
END WHILE;
END| DELIMITER ;| CREATE TABLE t1 (a REAL, b INT);
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       GET CURRENT DIAGNOSTICS CONDITION 1 @x = RETURNED_SQLSTATE;
SIGNAL SQLSTATE '01002';
GET CURRENT DIAGNOSTICS CONDITION 1 @y = RETURNED_SQLSTATE;
END;
SIGNAL SQLSTATE '01001';
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1(OUT number INT, INOUT message TEXT) BEGIN   DECLARE warn CONDITION FOR SQLSTATE "01234";
DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       GET DIAGNOSTICS number = NUMBER;
GET DIAGNOSTICS CONDITION 1 message = MESSAGE_TEXT;
END;
SIGNAL warn SET MESSAGE_TEXT = "inout parameter";
END| DELIMITER ;| SET @var1 = 0;
CREATE PROCEDURE p1(IN number INT) BEGIN   SELECT number;
GET DIAGNOSTICS number = NUMBER;
END| DELIMITER ;| SET @var1 = 9999;
CREATE FUNCTION f1() RETURNS TEXT BEGIN   DECLARE message TEXT;
DECLARE warn CONDITION FOR SQLSTATE "01234";
DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       GET DIAGNOSTICS CONDITION 1 message = MESSAGE_TEXT;
END;
SIGNAL warn SET MESSAGE_TEXT = "message text";
return message;
END| DELIMITER ;| SELECT f1();
CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN   DECLARE var INT DEFAULT row_count();
GET DIAGNOSTICS @var1 = ROW_COUNT;
END| DELIMITER ;| SET @var1 = 9999, @var2 = 9999;
GET DIAGNOSTICS @var1 = ROW_COUNT;
GET DIAGNOSTICS @var2 = ROW_COUNT;
GET DIAGNOSTICS CONDITION 1 @var1 = MESSAGE_TEXT, @var2 = CLASS_ORIGIN;
GET DIAGNOSTICS @var1 = NUMBER;
CREATE PROCEDURE p1() BEGIN   DECLARE stacked INT DEFAULT 1;
END| DELIMITER ;| CALL p1();
GET STACKED;
GET STACKED DIAGNOSTICS;
GET STACKED DIAGNOSTICS @var1 = NUMBER;
CREATE FUNCTION f1() RETURNS INT BEGIN   GET STACKED DIAGNOSTICS @var1 = NUMBER;   RETURN 1; END|
CREATE PROCEDURE p1() BEGIN   DECLARE EXIT HANDLER FOR SQLEXCEPTION   BEGIN     GET CURRENT DIAGNOSTICS CONDITION 1 @msg1 = MESSAGE_TEXT, @errno1 = MYSQL_ERRNO;     GET STACKED DIAGNOSTICS CONDITION 1 @msg2 = MESSAGE_TEXT, @errno2 = MYSQL_ERRNO;     SELECT @msg1, @errno1;     SELECT @msg2, @errno2;     SELECT * FROM t1;   # Clear first diagnostics area     GET CURRENT DIAGNOSTICS @cno = NUMBER;     SELECT @cno;     GET STACKED DIAGNOSTICS CONDITION 1 @msg4 = MESSAGE_TEXT, @errno4 = MYSQL_ERRNO;     SELECT @msg4, @errno4;   END;   DROP TABLE non_existent; END|
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING   BEGIN     GET CURRENT DIAGNOSTICS CONDITION 1 @msg1 = MESSAGE_TEXT, @errno1 = MYSQL_ERRNO;     SELECT @msg1, @errno1;     GET STACKED DIAGNOSTICS CONDITION 1 @msg2 = MESSAGE_TEXT, @errno2 = MYSQL_ERRNO;     SELECT @msg2, @errno2;     RESIGNAL SET MYSQL_ERRNO= 9999, MESSAGE_TEXT= 'Changed by resignal';     GET CURRENT DIAGNOSTICS CONDITION 1 @msg3 = MESSAGE_TEXT, @errno3 = MYSQL_ERRNO;     SELECT @msg3, @errno3;     GET STACKED DIAGNOSTICS CONDITION 1 @msg4 = MESSAGE_TEXT, @errno4 = MYSQL_ERRNO;     SELECT @msg4, @errno4;     RESIGNAL SET MYSQL_ERRNO= 9999, MESSAGE_TEXT= 'Changed by resignal, for caller';   END;   SELECT 10 + 'a'; END|
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   SET @a = OLD.a;   SET @b = NEW.a;   SELECT OLD.a INTO @c;   SELECT NEW.a INTO @d;   SET NEW.a = NEW.a * 2; END|
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR 1146     SELECT 'Table t1 does not exist anymore' as msg;   SELECT * FROM t1;   INSERT INTO t2 VALUES (1);   SELECT GET_LOCK('m1', 10000);   SELECT * FROM t1; END|
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   SET @x = OLD.a;   SET @y = NEW.a; END|
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   SET @x = OLD.a;   SET @y = NEW.b; END|
CREATE PROCEDURE p1()   ALTER TABLE t1 ADD COLUMN c INT DEFAULT 3|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1()   ALTER TABLE t1 ADD COLUMN c INT DEFAULT 3|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1() BEGIN   DROP TABLE t1;   CREATE TABLE t1(a INT, b INT, c INT);   INSERT INTO t1 VALUES (1, 2, 3); END|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1() BEGIN   DROP TEMPORARY TABLE t1;   CREATE TEMPORARY TABLE t1(a INT, b INT, c INT);   INSERT INTO t1 VALUES (1, 2, 3); END|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1() BEGIN   DROP VIEW v1;   CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b, 3 AS c; END|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM v1;   CALL p1();   SELECT a, b FROM v1; END|
CREATE PROCEDURE p1()   ALTER TABLE t1 DROP COLUMN a|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1()   ALTER TABLE t1 DROP COLUMN a|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1() BEGIN   DROP TABLE t1;   CREATE TABLE t1(b INT, c INT);   INSERT INTO t1 VALUES (2, 3); END|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1() BEGIN   DROP TEMPORARY TABLE t1;   CREATE TEMPORARY TABLE t1(b INT, c INT);   INSERT INTO t1 VALUES (2, 3); END|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM t1;   CALL p1();   SELECT a, b FROM t1; END|
CREATE PROCEDURE p1() BEGIN   DROP VIEW v1;   CREATE VIEW v1 AS SELECT 2 AS b, 3 AS c; END|
CREATE PROCEDURE p2() BEGIN   SELECT a, b FROM v1;   CALL p1();   SELECT a, b FROM v1; END|
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION   BEGIN     SELECT 'SQLEXCEPTION caught' AS msg;     CREATE TABLE t1(a INT, b INT);     INSERT INTO t1 VALUES (1, 2);   END;   SELECT * FROM t1;   SELECT * FROM t1;   DROP TABLE t1; END|
CREATE PROCEDURE p2() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION   BEGIN     SELECT 'SQLEXCEPTION caught' AS msg;     CREATE TEMPORARY TABLE t1(a INT, b INT);     INSERT INTO t1 VALUES (1, 2);   END;   SELECT * FROM t1;   SELECT * FROM t1;   DROP TEMPORARY TABLE t1; END|
CREATE PROCEDURE p3() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION   BEGIN     SELECT 'SQLEXCEPTION caught' AS msg;     CREATE VIEW v1 AS SELECT 1 AS a, 2 AS b;   END;   SELECT * FROM v1;   SELECT * FROM v1;   DROP VIEW v1; END|
CREATE PROCEDURE p1() BEGIN   IF(SELECT * FROM t1)THEN     SELECT 1;   ELSE     SELECT 2;   END IF; END|
CREATE PROCEDURE p2() BEGIN   DECLARE v INT DEFAULT 1;   IF v * (SELECT * FROM t1) THEN     SELECT 1;   ELSE     SELECT 2;   END IF; END|
CREATE FUNCTION f1() RETURNS INT BEGIN   IF (SELECT * FROM t1) THEN     RETURN 1;   ELSE     RETURN 2;   END IF;   RETURN 3; END|
CREATE FUNCTION f2() RETURNS INT BEGIN   DECLARE v INT DEFAULT 1;   IF v * (SELECT * FROM t1) THEN     RETURN 1;   ELSE     RETURN 2;   END IF;   RETURN 3; END|
CREATE PROCEDURE p1(x INT) BEGIN   WHILE(SELECT * FROM t1)DO     SELECT x;     UPDATE t1 SET a = x;     SET x = x - 1;   END WHILE; END|
CREATE PROCEDURE p1(x INT) BEGIN   REPEAT     SELECT x;     UPDATE t1 SET a = x;     SET x = x - 1;   UNTIL(NOT (SELECT * FROM t1))END REPEAT; END|
CREATE PROCEDURE p1() BEGIN   CASE     WHEN (SELECT * FROM t1) = 1 THEN SELECT 'a1';     WHEN (SELECT * FROM t1) = 2 THEN SELECT 'a2';     WHEN (SELECT * FROM t1) = 3 THEN SELECT 'a3';     ELSE SELECT 'a4';   END CASE; END|
CREATE PROCEDURE p2() BEGIN   CASE (SELECT * FROM t1)     WHEN 1 THEN SELECT 'a1';     WHEN 2 THEN SELECT 'a2';     WHEN 3 THEN SELECT 'a3';     ELSE SELECT 'a4';   END CASE; END|
CREATE FUNCTION f1() RETURNS INT BEGIN   SET @x = @x + 1;   RETURN (SELECT a FROM t1); END|
CREATE PROCEDURE p1() BEGIN   CASE f1()     WHEN 1 THEN SELECT 'a1';     WHEN 2 THEN SELECT 'a2';     WHEN (SELECT * FROM t2) THEN SELECT 'subselect';     ELSE SELECT 'else';   END CASE; END|
CREATE PROCEDURE p1() BEGIN   DECLARE v INT DEFAULT (SELECT * FROM t1);   SELECT v; END|
CREATE PROCEDURE p1() BEGIN   DECLARE x INT;   SET x = (SELECT * FROM t1);   SELECT x; END|
CREATE PROCEDURE p2() BEGIN   SET @x = NULL;   SET @x = (SELECT * FROM t1);   SELECT @x; END|
CREATE TRIGGER t2_bu BEFORE UPDATE ON t2 FOR EACH ROW BEGIN   SET NEW.a = (SELECT * FROM t1) * 2; END|
CREATE PROCEDURE p1() BEGIN   DECLARE v INT;   DECLARE c CURSOR FOR SELECT * FROM t1;   ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2;   ALTER TABLE t1 DROP COLUMN a;   OPEN c;   FETCH c INTO v;   CLOSE c;   SELECT v; END|
CREATE PROCEDURE p1() BEGIN   DECLARE v INT;   DECLARE c CURSOR FOR SELECT * FROM t1;   ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2;   ALTER TABLE t1 DROP COLUMN a;   OPEN c;   FETCH c INTO v;   CLOSE c;   SELECT v; END|
CREATE PROCEDURE p1() BEGIN   DECLARE v INT;   DECLARE c CURSOR FOR SELECT * FROM t1;   OPEN c;   ALTER TABLE t1 ADD COLUMN b INT DEFAULT 2;   ALTER TABLE t1 DROP COLUMN a;   FETCH c INTO v;   CLOSE c;   SELECT v; END|
CREATE PROCEDURE p1() BEGIN   DECLARE f1 INT;   DECLARE f2 INT;   DECLARE f3 INT;   DECLARE x INT DEFAULT 1;   DECLARE y INT DEFAULT 2;   DECLARE c CURSOR FOR SELECT x, y, t1.a FROM t1;   ALTER TABLE t1 ADD COLUMN b INT;   BEGIN     DECLARE x INT DEFAULT 10;     DECLARE y INT DEFAULT 20;     OPEN c;     FETCH c INTO f1, f2, f3;     SELECT f1, f2, f3;     CLOSE c;   END; END|
CREATE FUNCTION f1() RETURNS INT BEGIN   CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM t1;   RETURN 0; END|
CREATE FUNCTION f1() RETURNS INT BEGIN   CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM t1;   RETURN 0; END|
CREATE FUNCTION f1() RETURNS INT BEGIN   CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM v1;   RETURN 0; END|
CREATE FUNCTION f1() RETURNS INT BEGIN   CREATE TEMPORARY TABLE t1_result_set AS SELECT * FROM t1;   RETURN 0; END|
CREATE PROCEDURE p1()   SELECT * FROM t1|
CREATE TRIGGER t2_bu BEFORE UPDATE ON t2 FOR EACH ROW BEGIN   INSERT INTO v1 VALUES (NEW.a);   SET @x = (SELECT CHARSET(a) FROM v1 LIMIT 1); END|
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
CALL mtr.add_suppression("Table 'mysql.component' doesn't exis");
CALL mtr.add_suppression("The mysql.component table is missing or has an incorrect definition.");
CALL mtr.add_suppression("Enabling keys got errno");
disable_query_log;
while ($1) {   dec $1;
} SET SQL_WARNINGS=1;
enable_query_log;
LOCK TABLES t1 WRITE;
update t1 set b=repeat('a',256);
explain select * from t1 use index() where c=1;
insert into t1 (b) values (repeat('a',100)),(repeat('b',100)),(repeat('c',100));
update t1 set b=repeat(left(b,1),200) where a=1;
update t1 set b=repeat('e',200) where a=1;
disable_query_log;
while ($1) {   dec $1;
} enable_query_log;
update t1 set b=repeat(left(b,1),255) where a between 1 and 5;
update t1 set b=repeat(left(b,1),10) where a between 32 and 43;
update t1 set b=repeat(left(b,1),2) where a between 64 and 66;
update t1 set b=repeat(left(b,1),65) where a between 67 and 70;
insert into t1 (b) values (repeat('z',100));
lock tables t1 read local, t2 read local;
select straight_join * from t1,t2 force index (primary) where t1.a=t2.a;
connect (root,localhost,root,,test,$MASTER_MYPORT,$MASTER_MYSOCK);
disconnect root;
select straight_join * from t1,t2 force index (primary) where t1.a=t2.a;
unlock tables;
LOCK TABLES t1 READ LOCAL, t2 READ LOCAL;
connect (con1,localhost,root,,);
disconnect con1;
UNLOCK TABLES;
while ($i) {   dec $i;
} insert t1 select * from t2;
SELECT _id FROM t1;
DELETE FROM t1 WHERE _id < 8;
SELECT _id FROM t1;
SELECT _id FROM t1;
DELETE FROM t1 WHERE _id < 8;
SELECT _id FROM t1;
source include/varchar.inc;
lock table t1 read local;
connect (con1,localhost,root,,);
unlock tables;
lock table t1 read local;
unlock tables;
disconnect con1;
lock table t1 read local;
connect (con1,localhost,root,,);
unlock tables;
lock table t1 read local;
unlock tables;
disconnect con1;
create table t1 (a int not null, key key_block_size=1024 (a));
create table t1 (a int not null, key `a` key_block_size=1024 (a));
INSERT INTO t1 VALUES (10, REPEAT('a', CEIL(RAND(10) * 300))),   (11, REPEAT('b', CEIL(RAND() * 300))),   (12, REPEAT('c', CEIL(RAND() * 300))),   (13, REPEAT('d', CEIL(RAND() * 300))),   (14, REPEAT('e', CEIL(RAND() * 300))),   (15, REPEAT('f', CEIL(RAND() * 300))),   (16, REPEAT('g', CEIL(RAND() * 300))),   (17, REPEAT('h', CEIL(RAND() * 300))),   (18, REPEAT('i', CEIL(RAND() * 300))),   (19, REPEAT('j', CEIL(RAND() * 300))),   (20, REPEAT('k', CEIL(RAND() * 300))),   (21, REPEAT('l', CEIL(RAND() * 300))),   (22, REPEAT('m', CEIL(RAND() * 300))),   (23, REPEAT('n', CEIL(RAND() * 300))),   (24, REPEAT('o', CEIL(RAND() * 300))),   (25, REPEAT('p', CEIL(RAND() * 300))),   (26, REPEAT('q', CEIL(RAND() * 300))),   (27, REPEAT('r', CEIL(RAND() * 300))),   (28, REPEAT('s', CEIL(RAND() * 300))),   (29, REPEAT('t', CEIL(RAND() * 300))),   (30, REPEAT('u', CEIL(RAND() * 300))),   (31, REPEAT('v', CEIL(RAND() * 300))),   (32, REPEAT('w', CEIL(RAND() * 300))),   (33, REPEAT('x', CEIL(RAND() * 300))),   (34, REPEAT('y', CEIL(RAND() * 300))),   (35, REPEAT('z', CEIL(RAND() * 300)));
INSERT INTO t1 VALUES(REPEAT("a",128), 'b');
INSERT INTO t1 VALUES(REPEAT("a",128), 'b');
INSERT INTO t1 VALUES(REPEAT("a",128), 'b');
while ($count) {   INSERT INTO t1 VALUES ('a', 'b');
dec $count;
} UPDATE t1 SET c1=REPEAT("a",128) LIMIT 90;
INSERT INTO t1 VALUES(REPEAT(_utf8 x'e0ae85',43), 'b');
INSERT INTO t1 VALUES(REPEAT(_utf8 x'e0ae85',43), 'b');
INSERT INTO t1 VALUES(REPEAT(_utf8 x'e0ae85',43), 'b');
while ($count) {   INSERT INTO t1 VALUES ('a', 'b');
dec $count;
} UPDATE t1 SET c1=REPEAT(_utf8 x'e0ae85',43) LIMIT 90;
REPLACE INTO t1 VALUES (1, REPEAT('a', 129015)),(1, NULL), (2, NULL),(3, NULL),(4, NULL),(5, NULL),(6, NULL),(7, NULL), (1, REPEAT('b', 129016)),(1, NULL), (1, REPEAT('c', 129015)),(1, REPEAT('d', 129015));
FLUSH TABLE t1;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
SET @before:= (SELECT MAX_DATA_LENGTH FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='t1' AND TABLE_SCHEMA='test');
SET @after:= (SELECT MAX_DATA_LENGTH FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='t1' AND TABLE_SCHEMA='test');
SELECT @before=@after;
call mtr.add_suppression("Got an error from thread_id=.*ha_myisam.cc:");
call mtr.add_suppression("MySQL thread id .*, query id .* localhost.*root Checking table");
call mtr.add_suppression(" '\..test.t1'");
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @save_storage_engine= @@default_storage_engine;
source 'include/function_defaults.inc';
while($1) {   dec $1;
} CREATE TABLE t2 (s VARCHAR(4), a VARCHAR(1) CHARACTER SET euckr);
connect(con1, localhost, root,,);
WHERE PLUGIN_NAME like 'pfs_example%' and                      PLUGIN_STATUS='INACTIVE';
WHERE PLUGIN_NAME like 'pfs_example%' and                      PLUGIN_STATUS='ACTIVE';
WHERE PLUGIN_NAME like 'pfs_example%' and                      PLUGIN_STATUS ='DELETING';
do str_to_date(1, "%#");
do timestamp(date_format('2011-11-11', right("12345" + 1, 3)));
SELECT * FROM t1 LEFT JOIN t2 IGNORE INDEX(PRIMARY)   ON t2.a = 'test1' AND t2.b = '20161213' WHERE t1.a = 'test1';
SELECT b, b IN ('20161213'), b in ('20161213', 0) FROM t2;
SELECT b, b in ('121314'), b in ('121314', 0) FROM t3;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
RENAME TABLE t TO tmp2, tmp TO t;
RENAME TABLE tmp2 TO t;
CREATE TABLE tp (a VARCHAR(24),  b DATETIME,  PRIMARY KEY (a,b)) PARTITION BY RANGE COLUMNS (a, b) (PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'),  PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
while ($count) { if ($t_lock) { } if ($tp_lock) {   if ($take_lock)   {   }   if (!$take_lock)   {   } } if ($t2_lock) {   if ($take_lock)   {   }   if (!$take_lock)   {   } } if ($take_lock) { } ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
UNLOCK TABLES;
dec $count;
} DROP TABLE t, t2, tp;
call mtr.add_suppression("row in wrong partition:");
call mtr.add_suppression("Cannot find index .PRIMARY. in InnoDB index translation table.");
ENGINE = InnoDB DATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
ENGINE = InnoDB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir',  PARTITION p2 VALUES IN (0,2,4,6,8) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
ENGINE = InnoDB DATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
ENGINE = InnoDB PARTITION BY range (a) (PARTITION p1 VALUES less than (10) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir',  PARTITION p2 VALUES less than (20) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
ENGINE = InnoDB DATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
PARTITION BY RANGE( YEAR(purchased) ) SUBPARTITION BY HASH( TO_DAYS(purchased) ) ( PARTITION p0 VALUES LESS THAN (1990) ( SUBPARTITION s0 data directory='$MYSQL_TMP_DIR/sp0_dir', SUBPARTITION s1), PARTITION p1 VALUES LESS THAN (2000) ( SUBPARTITION s2, SUBPARTITION s3 data directory='$MYSQL_TMP_DIR/sp3_dir' ));
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disconnect con1;
disconnect con2;
CALL mtr.add_suppression("World-writable config file .* is ignored");
CALL mtr.add_suppression("World-writable config file .* has been removed.");
INSERT INTO t1 VALUES(default(a), default(b));
UPDATE t1 SET b=default(b);
connect (conn1, localhost, mysqltest_u1, ,);
disconnect conn1;
ALTER TABLE t1 ALGORITHM = COPY, LOCK = NONE ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010));
ALTER TABLE t1 ALGORITHM = COPY, LOCK = NONE DROP PARTITION p0;
cat_file $MYSQLD_DATADIR/test_string_service_charset.log;
remove_file $MYSQLD_DATADIR/test_string_service_charset.log;
CALL mtr.add_suppression("Could not parse key-value pairs in property string.*");
PREPARE stmt FROM 'show events';
EXECUTE stmt;
LOCK TABLE t1 READ;
CONNECT (con1, localhost, root);
CONNECTION default;
UNLOCK TABLES;
DISCONNECT con1;
DROP PREPARE stmt;
CREATE TABLE t1(f1 INT, f2 VARCHAR(64) NOT NULL, PRIMARY KEY (f1)) PARTITION BY RANGE(f1) (   PARTITION p1 VALUES LESS THAN (3),   PARTITION p2 VALUES LESS THAN (maxvalue) );
if (!$ZLIB_DECOMPRESS) { } CREATE DATABASE bug21644479_zlib;
if ($ZLIB_DECOMPRESS) { } if (!$ZLIB_DECOMPRESS) { } DROP DATABASE bug21644479_zlib;
call mtr.add_suppression("Plugin \'InnoDB\'");
call mtr.add_suppression("Shift expected at '' for COLLATION : utf8_test");
CREATE TABLE t1 (     f1 CHAR(20) COLLATE utf8mb4_0900_ai_ci  # A NO PAD collation. );
ENGINE archive $data_directory $index_directory;
ENGINE archive $data_directory $index_directory;
ENGINE archive $data_directory;
ENGINE archive DATA DIRECTORY '$MYSQLD_DATADIR/test';
ENGINE archive INDEX DIRECTORY '$MYSQLD_DATADIR/test';
insert into t1 values (1, concat(repeat('1', 300), '2')),  (1, concat(repeat('1', 300), '2')), (1, concat(repeat('0', 300), '1')),  (2, concat(repeat('1', 300), '2')), (2, concat(repeat('1', 300), '2')),  (2, concat(repeat('0', 300), '1'));
insert into t1 values (1,repeat('a',255)),(2,repeat('b',255));
INSERT INTO t1 VALUES (1,REPEAT(CONCAT('A',CAST(CHAR(0) AS BINARY),'B'), 40000));
insert into t1 values (repeat('a', 1022), 0), (repeat(_utf8 0xc3b7, 4), 0);
while ($1) {   select @x:=group_concat(x) from t1 group by y;
dec $1;
} drop table t1;
insert into t1 values (1,repeat('a',255)),(2,repeat('b',255));
INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),                        ( repeat( 'b', 10 ), 2);
INSERT INTO t2 VALUES( REPEAT( 'a', 5000 ) );
INSERT INTO t2 VALUES( REPEAT( 'b', 5000 ) );
INSERT INTO t2 VALUES( REPEAT( 'a', 5000 ) );
INSERT INTO t3 VALUES( REPEAT( 'a', 65534 ), 1 );
INSERT INTO t3 VALUES( REPEAT( 'a', 65535 ), 2 );
INSERT IGNORE INTO t3 VALUES( REPEAT( 'a', 65536 ), 3 );
PREPARE stmt FROM "SELECT GROUP_CONCAT(t1.a ORDER BY t1.a) FROM t1 JOIN t1 t2 GROUP BY t1.a WITH ROLLUP";
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SELECT POLYGON((SELECT 1 FROM (SELECT 1 IN (GROUP_CONCAT(t1.f1)) FROM t1, t1 t GROUP BY t.f1 ) d));
INSERT INTO t1 VALUES (REPEAT('a', 500000), 0), (REPEAT('b', 500000), 1), (REPEAT('c', 500000), 2);
INSERT INTO t1 VALUES (REPEAT('a', 499999), 3), (REPEAT('b', 500000), 4);
prepare s from 'DO GROUP_CONCAT((SELECT COUNT(1)) ORDER BY 1)';
execute s;
execute s;
deallocate prepare s;
prepare s from ' SELECT GROUP_CONCAT(a2.name ORDER BY a2.name) AS mbrcontains FROM v a1 JOIN v a2 ON MBRContains(a1.square, a2.square) WHERE a1.name = "center" GROUP BY a1.name';
execute s;
execute s;
deallocate prepare s;
PREPARE ps FROM "SELECT GROUP_CONCAT(o_id) FROM t1;";
EXECUTE ps;
PREPARE ps FROM "SELECT GROUP_CONCAT(o_id) FROM t1;";
EXECUTE ps;
PREPARE ps FROM "SELECT GROUP_CONCAT(o_id) FROM t1;";
EXECUTE ps;
PREPARE ps FROM "SELECT GROUP_CONCAT(o_id) FROM t1;";
EXECUTE ps;
RENAME TABLE non_atomic_t1 TO non_atomic_t2, child TO siebling;
RENAME TABLE child TO siebling,  non_atomic_t1 TO non_atomic_t3,  non_atomic_t3 TO non_atomic_t2;
connect (con1, localhost, root,,);
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
disconnect con1;
source include/show_binlog_events.inc;
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] Unsafe statement written .* = STATEMENT.");
send INSERT INTO t1 VALUES (3), (NULL), (4);
connect (con1, localhost, root,,);
reap;
send INSERT INTO t1 VALUES (3), (NULL), (4);
reap;
send INSERT INTO t1 SELECT * FROM t2;
reap;
send INSERT INTO t1 SELECT * FROM t2;
reap;
disconnect con1;
CREATE TABLESPACE `ts6` ADD DATAFILE 'ts6.ibd' ENGINE=INNODB;
CREATE TABLESPACE ts ADD DATAFILE 'ts.ibd' ENGINE=InnoDB;
CREATE TABLESPACE innodb_system ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE innodb_file_per_table ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE innodb_temporary ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE mysql ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE `innodb_file_per_table.2` ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE innodb_file_per_table_whatever ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE innodb_file_per_table ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
ALTER TABLESPACE ts RENAME TO innodb_system;
ALTER TABLESPACE ts RENAME TO innodb_file_per_table;
ALTER TABLESPACE ts RENAME TO innodb_temporary;
ALTER TABLESPACE ts RENAME TO mysql;
ALTER TABLESPACE innodb_system RENAME TO ts3;
ALTER TABLESPACE innodb_temporary RENAME TO ts3;
ALTER TABLESPACE mysql RENAME TO ts3;
ALTER TABLESPACE ts RENAME TO `innodb_file_per_table.2`;
ALTER TABLESPACE ts RENAME TO innodb_file_per_table_whatever;
ALTER TABLESPACE ts RENAME TO innodb_file_per_table;
CREATE TABLESPACE altering ADD DATAFILE 'altering.ibd' ENGINE InnoDB;
ALTER TABLESPACE ts RENAME TO ts2;
connect (con_no_tblspc,localhost,noprivs,,);
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
ALTER TABLESPACE ts1 RENAME TO ts2;
disconnect con_no_tblspc;
BEGIN WORK;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
BEGIN WORK;
ALTER TABLESPACE ts1 RENAME TO ts2;
BEGIN WORK;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd' Engine=InnoDB;
ALTER TABLESPACE ts1 RENAME TO ts11;
CREATE TABLESPACE ts Engine=InnoDB;
CREATE TABLESPACE ts1 Engine=InnoDB;
CREATE PROCEDURE cr(IN start BIGINT) BEGIN SET @idx =start;
WHILE (@idx > 0) DO CREATE TABLESPACE x;
END WHILE;
END | DELIMITER ;| CALL cr(3);
CREATE TABLESPACE ts1 Engine=InnoDB;
CREATE TABLESPACE ts2 ADD DATAFILE 'ts2.ibd' Engine=InnoDB;
ALTER TABLESPACE ts2 RENAME TO ts3;
connect (con1, localhost, user1,,);
CREATE TABLESPACE ts2 Engine=InnoDB;
disconnect con1;
connect (con1, localhost, user1,,);
CREATE TABLESPACE ts2 Engine=InnoDB;
disconnect con1;
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
LOCK TABLE t1 read;
connect (con1, localhost, root);
KILL QUERY @id;
UNLOCK TABLES;
disconnect con1;
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
LOCK TABLE t1 READ, performance_schema.threads READ;
connect (con1, localhost, root);
UNLOCK TABLES;
disconnect con1;
CREATE TABLESPACE ts1;
CREATE TABLESPACE ts1;
ALTER TABLESPACE ts1 RENAME TO ts11;
ALTER TABLESPACE ts1 RENAME TO ts11;
CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE='';
CREATE TABLESPACE ts2 ENGINE_ATTRIBUTE='{"c": "v"}';
CREATE TABLESPACE ts3 ENGINE_ATTRIBUTE='{"c": v}';
ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{"foo": "bar}';
ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{"foo": "bar"}';
ALTER TABLESPACE ts1 RENAME TO ts11;
prepare s from "select 1 limit ?";
execute s using @a;
execute s using @a;
prepare s from "select 1 limit 1, ?";
execute s using @a;
prepare s from "select 1 limit ?, ?";
execute s using @a, @a;
execute s using @a, @a;
execute s using @a, @a;
PREPARE stmt FROM "SELECT * FROM t1 WHERE id > ?";
EXECUTE stmt using @a;
EXECUTE stmt using @a;
EXECUTE stmt USING @a;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "(SELECT * FROM t1 LIMIT 2) UNION ALL (SELECT * FROM t1 ORDER BY 1)";
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SELECT INSERT('𝌆テÀa', 2, 2, 'テb');
INSERT INTO t1 VALUES(_utf16 0x1EC2), (_utf16 0x1EC3), (_utf16 0x1EC5), (_utf16 0x1EC0), (_utf16 0x1EC7), (_Utf16 0x1EBF);
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* Tablespace .*, name '.*', file '.*' is missing");
connect (con_mysqldump,localhost,root,,);
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
WHERE USER != 'event_scheduler'`;
while ($nbconn) {   dec $nbconn;
} while ($nbsu) {   dec $nbsu;
} while ($nbconn) {   dec $nbconn;
} SELECT COUNT(USER) FROM INFORMATION_SCHEMA.PROCESSLIST;
while ($nbconn) {   dec $nbconn;
} SELECT COUNT(USER) FROM INFORMATION_SCHEMA.PROCESSLIST;
while ($nbconn) {   dec $nbconn;
} while ($nbsu) {   dec $nbsu;
} while ($nbconn) {   dec $nbconn;
} SET @@global.offline_mode = @global_saved_tmp;
LOCK TABLE t1 READ;
PREPARE st2 FROM   "SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE FROM    information_schema.tables WHERE table_name='t1'";
EXECUTE st2;
DEALLOCATE PREPARE st2;
UNLOCK TABLES;
connect (con1, localhost, root,,);
send SELECT TABLE_NAME, ENGINE, TABLE_ROWS        INTO @v1, @v2, @v3        FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';
disconnect con1;
connect (con1, localhost, root,,);
send SELECT TABLE_NAME, ENGINE, TABLE_ROWS        INTO @v1, @v2, @v3        FROM INFORMATION_SCHEMA.TABLES WHERE table_name='t0';
disconnect con1;
connect (con1, localhost, root,,);
send ANALYZE TABLE t0;
disconnect con1;
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] You need to use --log-bin to make --binlog-format work.");
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] You need to use --log-bin to make --binlog-expire-logs-seconds work.");
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET @saved_binlog_format= @@SESSION.binlog_format;
} set optimizer_switch='semijoin=on,materialization=on,firstmatch=on,loosescan=on,index_condition_pushdown=on,mrr=on,mrr_cost_based=off';
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET SESSION binlog_format= @saved_binlog_format;
CREATE TABLE t3 (a INT PRIMARY KEY, d INT DEFAULT (-a + 1), c INT DEFAULT (DEFAULT(d)) );
SELECT DEFAULT(d) from t3;
SELECT DEFAULT(c) from t3;
CREATE TABLE t(i INT, b TINYBLOB  DEFAULT (repeat('b', i)));
ALTER TABLE t ADD COLUMN b TINYBLOB DEFAULT (repeat('b', i));
ALTER TABLE t ALTER COLUMN b SET DEFAULT (repeat('b', i));
CREATE TABLE t(i BIGINT, b MEDIUMBLOB  DEFAULT (repeat('b', i)));
ALTER TABLE t ADD COLUMN b MEDIUMBLOB DEFAULT (repeat('b', i));
ALTER TABLE t ALTER COLUMN b SET DEFAULT (repeat('b', i));
CREATE TABLE t(i INT, b BLOB DEFAULT (repeat('b', i)));
ALTER TABLE t ADD COLUMN b BLOB DEFAULT (repeat('b', i));
ALTER TABLE t ALTER COLUMN b SET DEFAULT (repeat('b', i));
CREATE TABLE t(i BIGINT, b LONGBLOB  DEFAULT (repeat('b', i)));
CREATE TABLE t(i INT, b BLOB DEFAULT (repeat('b', i)));
ALTER TABLE t ADD COLUMN b BLOB DEFAULT (repeat('b', i));
ALTER TABLE t ALTER COLUMN b SET DEFAULT (repeat('b', i));
CREATE TABLE t(i INT, b VARCHAR(20) DEFAULT (repeat('b', i)));
CREATE TABLE t1 (a INT, b TIMESTAMP DEFAULT (TIMESTAMPADD(MINUTE, 1,'2003-01-02'))                  ON UPDATE NOW());
CREATE TABLE t1 (a datetime, b datetime DEFAULT (utc_date()));
CREATE TABLE t1 (a datetime, b datetime DEFAULT (utc_time()));
CREATE FUNCTION CURRENT_TIMESTAMPfoo() RETURNS INT BEGIN RETURN 1; END| DELIMITER ;| CREATE TABLE t1 (a INT DEFAULT (CURRENT_TIMESTAMPfoo()));
CREATE PROCEDURE p1() BEGIN   SELECT 42;
END // CREATE FUNCTION f1() RETURNS INT BEGIN  RETURN 42;
END // DELIMITER ;// CREATE TABLE t1 (a INT DEFAULT (p1()));
CREATE TABLE t2 (a INT, b INT DEFAULT (select count(*) from t1));
CREATE TABLE t2 (a INT, b INT DEFAULT (select * from t1));
CREATE TABLE t2 (a INT, b INT DEFAULT (select 1));
CREATE TABLE t2 (i INT, j DOUBLE DEFAULT (SQRT(i)),                  k DOUBLE DEFAULT (DEFAULT(j)));
ALTER TABLE t1 MODIFY COLUMN i INT AUTO_INCREMENT PRIMARY KEY DEFAULT(GROUPING(r));
ALTER TABLE t1 ALTER COLUMN i SET DEFAULT(GROUPING(r));
CREATE TABLE t1 (created DATETIME NOT NULL DEFAULT (UTC_DATE()));
CREATE TABLE t1 (created DATETIME NOT NULL DEFAULT (UTC_TIME()));
create procedure p1() begin   declare counter integer default 0;   declare continue handler for sqlexception begin set counter = counter + 10;end;   repeat     if rand()>0.5 then start transaction; end if;     if rand()>0.5 then        select var_samp(1), exists(select 1 from t1 lock in share mode)        from t1 into @a,@b;      end if;     if rand()>0.5 then        select var_samp(1), exists(select 1 from t1 for update)       from t1 into @a,@b;      end if;     if rand()>0.5 then insert ignore into t1 values (); end if;     if rand()>0.5 then insert ignore into t2 values (); end if;     if rand()>0.5 then delete from t1; end if;     if rand()>0.5 then delete from t2; end if;     if rand()>0.5 then commit; end if;     set counter = counter + 1;   until counter >= 100 end repeat; end $
create temporary table tg (i int not null) engine=merge union=();
if (!$MYSQL_FIX_PRIVILEGE_TABLES) {   skip Test need MYSQL_FIX_PRIVILEGE_TABLES;
} drop table if exists t1,t1aa,t2aa;
echo;
SHOW GRANTS FOR 'select_only_c1'@'localhost';
echo;
echo "after fix privs";
SHOW GRANTS FOR 'show_view_tbl'@'localhost';
echo;
SHOW GRANTS FOR 'select_only_c1'@'localhost';
echo;
ALTER TABLE t1 ORDER BY t1.id, t1.status, t1.type_id, t1.user_id, t1.body;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
while ($1)  {  dec $1;
} alter table t1 enable keys;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
CHECK TABLES t1;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
CHECK TABLES t1;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
while ($count) {   EVAL insert into t1 values (1,1),(1,1),(1,1),(1,1),(1,1);
EVAL insert into t1 values (2,2),(2,2),(2,2),(2,2),(2,2);
dec $count ;
} select index_length into @unpaked_keys_size from information_schema.tables where table_name='t1';
connect (con1, localhost, root);
disconnect con1;
RIGHT JOIN (SELECT 1 FROM g9) AS d1 ON 1 LEFT JOIN (SELECT 1 FROM g9) AS d2 ON 1;
connect (con1, localhost, root,,);
disconnect con1;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
SELECT GROUPING(alias2.pk) AS field2 FROM t2 AS alias1 LEFT JOIN t1 AS alias2   ON 0 GROUP BY alias2.pk WITH ROLLUP ORDER BY GROUPING(alias2.pk);
SELECT ((table1.col_int) * (table1.col_int)) AS field2 FROM (t1 AS table1)   WHERE (table1.col_int != 1 OR table1.pk) GROUP BY field2 WITH ROLLUP   HAVING (field2 <> 239 ) ORDER BY GROUPING(field2);
connect(con1,localhost,no_pwd_history,hihi,test);
disconnect con1;
ALTER USER method_alter@localhost IDENTIFIED WITH 'sha256_password';
RENAME TABLE mysql.password_history TO mysql.password_history_backup;
ALTER USER no_pwd_history@localhost IDENTIFIED WITH 'sha256_password';
RENAME TABLE mysql.password_history_backup TO mysql.password_history;
CREATE TABLE t1(f1 INT INVISIBLE, f2 INT);
CREATE TABLE t1 (f1 INT, f2 INT PRIMARY KEY INVISIBLE);
CREATE TABLE t1 (f1 INT, f2 INT PRIMARY KEY INVISIBLE);
CREATE TABLE t2 (f1 INT PRIMARY KEY INVISIBLE, f2 INT,                  CONSTRAINT FOREIGN KEY (f1) REFERENCES t1(f2));
CREATE TABLE t1 (f1 INT, f2 INT PRIMARY KEY INVISIBLE);
ALTER TABLE t1 ALTER COLUMN f1 SET INVISIBLE, ALGORITHM = INPLACE;
ALTER TABLE t1 CHANGE f1 f1 INT VISIBLE, ALGORITHM = INPLACE;
ALTER TABLE t1 MODIFY f1 INT INVISIBLE, ALGORITHM = INPLACE;
ALTER TABLE t1 ALTER COLUMN f1 SET INVISIBLE, ALGORITHM = INPLACE;
ALTER TABLE t1 ALTER COLUMN f1 SET INVISIBLE, ALGORITHM = INSTANT;
ALTER TABLE t1 CHANGE f1 f1 INT VISIBLE, ALGORITHM = INSTANT;
ALTER TABLE t1 MODIFY f1 INT INVISIBLE, ALGORITHM = INSTANT;
ALTER TABLE t1 ALTER COLUMN f1 SET INVISIBLE, ALGORITHM = INSTANT;
CREATE TABLE t1(a INT, b DATE NOT NULL INVISIBLE)         PARTITION BY RANGE( YEAR(b) ) (         PARTITION p0 VALUES LESS THAN (1960),         PARTITION p1 VALUES LESS THAN (1970),         PARTITION p2 VALUES LESS THAN (1980),         PARTITION p3 VALUES LESS THAN (1990));
CREATE TABLE t1(id INT NOT NULL INVISIBLE, name VARCHAR(10))         PARTITION BY LIST(id) (         PARTITION p0 VALUES IN (10,19),         PARTITION p1 VALUES IN (20,29),         PARTITION p2 VALUES IN (30,39),         PARTITION p3 VALUES IN (40,49));
CREATE TABLE t1(id INT NOT NULL INVISIBLE, name VARCHAR(40))         PARTITION BY HASH(id)         PARTITIONS 4;
CREATE TABLE t1(id INT PRIMARY KEY NOT NULL INVISIBLE, name VARCHAR(40))         PARTITION BY KEY()         PARTITIONS 4;
COUNT(*),   SUM(LENGTH(t1.text_col)),   SUM(t2.bigint_col) FROM   t1,   t1 AS t2 WHERE   t1.int_col = t2.int_col ORDER BY   t1.int_col;
while ($count) {   dec $count;
} ANALYZE TABLE t1, t2;
t1.col1,   t2.col1 FROM   t1,   t2 WHERE   t1.col1 = t2.col1   AND t1.col1 = FLOOR(RAND() / 2 + 2);
FROM   (SELECT * FROM c) AS table1   JOIN (SELECT * FROM c) AS table2   ON table2.col1 = table1.col1;
JOIN t2 ON t1.col1 + 10 = t2.col1   JOIN t3 ON t2.col1 = t3.col1;
t1.col_varchar_key AS field1 FROM   (t1, t1 as alias1) WHERE   NOT     EXISTS(       SELECT         alias2.col_varchar_key       FROM         t1 AS alias2       WHERE         alias2.col_varchar_key >= t1.col_varchar     ) GROUP BY   field1;
CREATE TABLE t1 (   col_int_key INTEGER,   col_json JSON,   KEY mv_idx ((CAST(col_json->'$[*]' AS CHAR(40) ARRAY))) );
JOIN t1 ON 1 WHERE (CAST("1" AS JSON) MEMBER OF( t1.col_json->'$[*]'));
INNER JOIN a AS table2 ON table2.pk = table1.pk OR table1.col_varchar < 'D')   WHERE (NOT EXISTS     (SELECT 1 FROM (b AS alias3 STRAIGHT_JOIN a AS alias4       ON alias4.col_varchar = alias3.col_varchar_key)       WHERE alias3.pk >= table1.pk));
INSERT INTO t1 VALUES (REPEAT('A', 50000)), (REPEAT('A', 50000));
while ($count) {   dec $count;
} INSERT INTO t2 SELECT REPEAT("a", 255) FROM t1;
FROM   cc AS alias1   LEFT JOIN (       (         bb AS alias2         INNER JOIN (SELECT DISTINCT sq1_alias1.* FROM bb AS sq1_alias1)             AS alias3 ON alias3.col_int_key = alias2.col_int_key       )     ) ON alias3.col_varchar_key = alias2.col_varchar_key WHERE   alias1.col_varchar_key   IN (       SELECT         sq2_alias1.col_varchar AS sq2_field1       FROM         c AS sq2_alias1       WHERE         sq2_alias1.col_varchar_key != alias2.col_varchar         AND sq2_alias1.col_int > alias2.pk     );
alias1.pk AS field1 FROM   (     SELECT       sq1_alias2.*     FROM       cc AS sq1_alias1       RIGHT JOIN cc AS sq1_alias2 ON           sq1_alias2.col_varchar_key = sq1_alias1.col_varchar_key     LIMIT       100   )     AS alias1 WHERE   alias1.col_varchar_key   IN (       SELECT         sq2_alias1.col_varchar_key AS sq2_field1       FROM         (cc AS sq2_alias1, c AS sq2_alias2)       WHERE         sq2_alias1.col_varchar_key != alias1.col_varchar     ) GROUP BY   field1 HAVING   field1 != 'pg' ORDER BY   alias1.col_int_key DESC, field1 LIMIT 2 OFFSET 2;
table1.col_varchar FROM   (     SELECT       subquery1_t1.*     FROM       b AS subquery1_t1       INNER JOIN cc AS subquery1_t2 ON           subquery1_t1.col_varchar = subquery1_t2.col_varchar   )     AS table1   LEFT JOIN (       SELECT         col_varchar       FROM         cc AS subquery2_t1       GROUP BY         subquery2_t1.col_varchar     )       AS table2 ON       table2.col_varchar = table1.col_varchar       AND table1.col_varchar         IN (             SELECT               lower(subquery3_t1.pk) AS subquery3_field1             FROM               b AS subquery3_t1           );
FROM t1   JOIN t2 ON t1.col1 = t2.col1   WHERE t2.col2 > 0 OR t2.col3 > 0 LIMIT 10;
* FROM   (     SELECT       DISTINCT t1.*     FROM       t1   ) AS table1 JOIN t2   WHERE table1.col1 = 1 LIMIT 50;
INSERT INTO t1 SELECT ST_GeomFromText(CONCAT('GEOMETRYCOLLECTION(POINT(1 1)',                                       REPEAT(',POINT(1 1)', 100), ')'));
INSERT INTO t1 SELECT ST_GeomFromText(CONCAT('GEOMETRYCOLLECTION(POINT(1 1)',                                       REPEAT(',POINT(1 1)', 100), ')')) FROM t1;
INSERT INTO t1 SELECT ST_GeomFromText(CONCAT('GEOMETRYCOLLECTION(POINT(1 1)',                                       REPEAT(',POINT(1 1)', 100), ')')) FROM t1;
RIGHT OUTER JOIN (VALUES ROW(4), ROW(5)) AS const_table ON TRUE   WHERE NOT EXISTS (     SELECT t1.col1 FROM t1     INNER JOIN t1 AS t1_2 ON t1_2.col1 = t1.col1     WHERE t1.col1 <> t2.col1   ) AND t2.col1 < 49;
WHERE (t1.a,t2.a) IN (SELECT a, a FROM t3);
while ($count < 10) {          SELECT col1 + POW(2, $count), col2 + POW(2, $count) FROM t1;
inc $count;
} CREATE TABLE t2 AS SELECT * FROM t1;
WHERE t1.aid NOT IN (SELECT aid FROM t2 WHERE bid = t1.bid);
WHERE 1 IN (SELECT 1 FROM t2 WHERE t1.col1 = t2.col1) IS FALSE;
while ($count < 10) {          SELECT col1 + POW(2, $count), col2 + POW(2, $count) FROM t1;
inc $count;
} CREATE TABLE t2 AS SELECT * FROM t1;
LEFT JOIN (     t2 LEFT JOIN t3 ON t2.col1 = t3.col1)   ON t2.col1 = t1.col1   ORDER BY t1.col1, t2.col1, t3.col1;
t1 LEFT JOIN  ( t2 LEFT JOIN    ( t3 LEFT JOIN      t4      ON t4.i = t3.i    )    ON t3.i = t2.i  )  ON t2.i = t1.i;
ON t1.col1 = t2.col1;
tt.t FROM   (SELECT 'crash1' AS t, f2 FROM t1) AS tt   LEFT JOIN t1 ON tt.t = 'crash2' AND tt.f2 = t1.f2 WHERE   tt.t = 'crash1';
while ($count < 10) {          SELECT col1 + POW(2, $count), col2 + POW(2, $count) FROM t1;
inc $count;
} CREATE TABLE t2 AS SELECT * FROM t1;
WHERE (SELECT a, b FROM t1 WHERE table1.a <> 6) IN (SELECT a, b FROM t1);
WHERE (SELECT a FROM t1 WHERE table1.a <> 6) IN (SELECT a FROM t1);
INSERT INTO t VALUES(1, REPEAT('abs',1000));
INSERT INTO t VALUES(2, REPEAT('ajs',1000));
INSERT INTO t VALUES(3, REPEAT('ajj',1000));
INSERT INTO t VALUES(4, REPEAT('jjs',1000));
WHERE USER != 'event_scheduler'`;
do concat('111','11111111111111111111111111',           substring_index(uuid(),0,1.111111e+308));
do concat_ws(',','111','11111111111111111111111111',              substring_index(uuid(),0,1.111111e+308));
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set optimizer_switch=default;
LOCK TABLE t1 WRITE;
LOCK TABLE t1 READ;
unlock tables;
LOCK TABLE t1 WRITE,t2 write;
lock tables t1 write, t2 read;
unlock tables;
lock tables t1 write;
unlock tables;
lock tables t1 write, t1 as t1_alias read;
unlock tables;
lock table t1 write, t2 write;
unlock tables;
LOCK TABLES m1 WRITE;
FLUSH TABLE m1;
UNLOCK TABLES;
while ($colnum) {   dec $colnum;
} ALTER TABLE t1 ADD COLUMN too_much int;
while ($colnum) {   dec $colnum;
} ALTER TABLE t1 ADD COLUMN too_much ENUM('a9999');
while ($colnum) {   dec $colnum;
} ALTER TABLE t1 ADD COLUMN too_much SET('a9999');
sum(distinct(if('a',                 (select adddate(elt(convert($nines,decimal(64,0)),count(*)),                                 interval 1 day))                 , .1))) as foo;
SELECT g.calc_var, g.if_var, g.case_var FROM   (   SELECT unq_id,     IF ( var_fld  > 5000, (     1 / var_fld ) , 5000 ) calc_var,     IF ( var_fld  > 5000, ( 00001 / var_fld ) , 5000 ) if_var,     CASE  var_fld  > 5000 WHEN TRUE THEN ( 1 / var_fld ) ELSE 5000 END case_var   FROM     test_grids_1   ) g   JOIN     test_grid_dtl_1 d USING (unq_id) ORDER BY 1 ;
DO NULLIF(CAST(DATABASE() AS TIME), 1);
DO NULLIF(CAST(DATABASE() AS DATE), 1);
DO NULLIF(CAST(DATABASE() AS DATETIME), 1);
DO GROUP_CONCAT(NULLIF(ELT(1, @e), POINT(250,41)) ORDER BY 1);
PREPARE ps FROM 'INSERT INTO t SET t_date = NULLIF(?, '''')';
EXECUTE ps USING @t_date;
DEALLOCATE PREPARE ps;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set @read_rnd_buffer_size_save= @@read_rnd_buffer_size;
while ($counter < 10) {   UNINSTALL PLUGIN daemon_example;
inc $counter;
if (!$crllen) {   skip Needs OpenSSL;
CALL mtr.add_suppression('Found \\d+ sys .*, but expected \\d+. Re-installing the sys schema.');
CALL mtr.add_suppression("'NO_ZERO_DATE', 'NO_ZERO_IN_DATE' and 'ERROR_FOR_DIVISION_BY_ZERO' sql modes should be used with strict mode. They will be merged with strict mode in a future release.");
CALL mtr.add_suppression("Cannot load from .* The table is probably corrupted");
connect (user1, localhost, user1, ,);
disconnect user1;
connect (locker,localhost,root,,);
connect (writer,localhost,root,,);
while ($i) {   send UPDATE t1, (SELECT DISTINCT b FROM t1 t1i) d SET a = 0 WHERE 1=0;
} PREPARE stmt FROM 'UPDATE t1, (SELECT DISTINCT b FROM t1 t1i) d SET a = 0 WHERE 1=0';
while ($i) {   ALTER TABLE t1 ADD COLUMN (c INT);
} while ($i) {   dec $i;
} while ($i) {   dec $i;
PREPARE stmt FROM 'UPDATE t1, (SELECT DISTINCT b FROM t1 t1i) d SET a = 0 WHERE 1=0';
} ALTER TABLE t1 ADD COLUMN a INT;
while ($i) {   send UPDATE t1, ((SELECT 1 FROM t1 t1i) UNION (SELECT 2 FROM t1 t1ii)) e SET a = 0 WHERE 1=0;
} PREPARE stmt FROM 'UPDATE t1, ((SELECT 1 FROM t1 t1i) UNION (SELECT 2 FROM t1 t1ii)) e SET a = 0 WHERE 1=0';
while ($i) {   ALTER TABLE t1 ADD COLUMN (c INT);
} while ($i) {   dec $i;
} while ($i) {   dec $i;
PREPARE stmt FROM 'UPDATE t1, ((SELECT 1 FROM t1 t1i) UNION (SELECT 2 FROM t1 t1ii)) e SET a = 0 WHERE 1=0';
} DROP TABLE t1;
SELECT @@GLOBAL.default_storage_engine INTO @old_engine|
SET @@GLOBAL.default_storage_engine=InnoDB|
SET @@SESSION.default_storage_engine=InnoDB|
SHOW GLOBAL VARIABLES LIKE 'default_storage_engine'|
SHOW SESSION VARIABLES LIKE 'default_storage_engine'|
CREATE PROCEDURE bug11758414() BEGIN  SET @@GLOBAL.default_storage_engine="MyISAM";  SET @@SESSION.default_storage_engine="MyISAM";  SHOW GLOBAL VARIABLES LIKE 'default_storage_engine';  SHOW SESSION VARIABLES LIKE 'default_storage_engine';  CREATE TABLE t1 (id int);  CREATE TABLE t2 (id int) ENGINE=InnoDB;  SHOW CREATE TABLE t1;  SHOW CREATE TABLE t2; END; |
CALL bug11758414|
SHOW GLOBAL VARIABLES LIKE 'default_storage_engine'|
SHOW SESSION VARIABLES LIKE 'default_storage_engine'|
DROP PROCEDURE bug11758414|
DROP TABLE t1, t2|
SET @@GLOBAL.default_storage_engine=@old_engine|
CREATE TABLE t1_not_null (f1 BIGINT, f2 BIGINT NOT NULL)|
CREATE TABLE t1_aux (f1 BIGINT, f2 BIGINT)|
INSERT INTO t1_aux VALUES (1,1)|
CREATE FUNCTION f1_two_inserts() returns INTEGER BEGIN    INSERT INTO t1_not_null SET f1 = 10, f2 = NULL;    RETURN 1; END|
UPDATE t1_aux SET f2 = 2 WHERE f1 = f1_two_inserts()|
ALTER TABLE t1_not_null ENGINE = InnoDB|
ALTER TABLE t1_aux ENGINE = InnoDB|
UPDATE t1_aux SET f2 = 2 WHERE f1 = f1_two_inserts()|
DROP TABLE t1_aux, t1_not_null|
DROP FUNCTION f1_two_inserts|
DROP PROCEDURE IF EXISTS p1|
DROP TABLE IF EXISTS t1|
CREATE TABLE t1 (a INT) ENGINE=INNODB|
CREATE PROCEDURE p1() BEGIN   TRUNCATE TABLE t1; END|
LOCK TABLES t1 WRITE|
CALL p1()|
CALL p1()|
DROP PROCEDURE p1|
DROP TABLE t1|
if (`SELECT @@have_dynamic_loading != 'YES'`) { } create procedure proc_1() install plugin my_plug soname '/root/some_plugin.so';
prepare abc from "install plugin my_plug soname '/root/some_plugin.so'";
execute abc;
execute abc;
deallocate prepare abc;
connect(con1,localhost,root,,test,,);
call mtr.add_suppression("Got an error from thread_id=.*ha_myisam.cc:");
call mtr.add_suppression("MySQL thread id .*, query id .* localhost.*root Checking table");
call mtr.add_suppression(" '\..test.t1'");
create procedure p_create() begin   declare i int default 1;   set @lock_table_stmt="lock table ";   set @drop_table_stmt="drop table ";   while i < @@global.table_definition_cache + 1 do     set @table_name=concat("t_", i);     set @opt_comma=if(i=1, "", ", ");     set @lock_table_stmt=concat(@lock_table_stmt, @opt_comma,                                 @table_name, " read");     set @drop_table_stmt=concat(@drop_table_stmt, @opt_comma, @table_name);     set @create_table_stmt=concat("create table if not exists ",                                   @table_name, " (a int)");     prepare stmt from @create_table_stmt;     execute stmt;     deallocate prepare stmt;     set i= i+1;   end while; end|
flush table t1;
flush table t1;
unlock tables;
prepare stmt from @drop_table_stmt;
execute stmt;
deallocate prepare stmt;
disconnect con1;
flush table t1;
flush table t1;
connect(con2, localhost, root);
disconnect con2;
SELECT attrs.* FROM t_json, JSON_TABLE(json_col, '$[*]' COLUMNS (nickname JSON PATH '$.nickname')) as attrs;
connect (conn1, localhost, root,,);
disconnect conn1;
call mtr.add_suppression(" In RENAME TABLE table `test`.`parent` is referenced in foreign key constraints which are not compatible with the new table definition.");
create table t_34455 (   a int not null,   foreign key (a) references t3 (a) match full match partial);
create table t_34455 (   a int not null,   foreign key (a) references t3 (a) on delete set default match full);
create table t_34455 (   a int not null,   foreign key (a) references t3 (a) on update set default match full);
create table t_34455 (   a int not null,   foreign key (a) references t3 (a)   on delete set default on delete set default);
create table t_34455 (   a int not null,   foreign key (a) references t3 (a)   on update set default on update set default);
alter table t_34455   add foreign key (a) references t3 (a) match full match partial);
alter table t_34455   add foreign key (a) references t3 (a) on delete set default match full);
alter table t_34455   add foreign key (a) references t3 (a) on update set default match full);
alter table t_34455   add foreign key (a) references t3 (a)   on delete set default on delete set default);
alter table t_34455   add foreign key (a) references t3 (a)   on update set default on update set default);
RENAME TABLE t5 to t6;
RENAME TABLE t5 TO t6;
RENAME TABLE t6 TO t2;
RENAME TABLE t2 TO t3;
RENAME TABLE t3 TO t4;
RENAME TABLE t2 TO t123456789012345678901234567890123456789012345678901234567;
RENAME TABLE t2 TO t12345678901234567890123456789012345678901234567890123456;
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=0;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLES parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent2 WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
RENAME TABLES child1 TO child;
RENAME TABLES child TO child1;
RENAME TABLES parent1 TO parent;
RENAME TABLES parent TO parent1;
RENAME TABLES parent1 TO parent;
RENAME TABLES parent TO parent1;
RENAME TABLES child TO child1;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
RENAME TABLES child1 TO child;
RENAME TABLES parent1 TO parent;
RENAME TABLES parent1 TO parent;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
RENAME TABLES child1 TO child;
RENAME TABLES parent1 TO parent;
RENAME TABLES parent1 TO parent;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
RENAME TABLES child1 TO child;
RENAME TABLES parent1 TO parent;
RENAME TABLES parent1 TO parent;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
disconnect con1;
disconnect con2;
LOCK TABLE parent WRITE;
UNLOCK TABLE;
LOCK TABLE parent WRITE;
UNLOCK TABLE;
LOCK TABLES child WRITE, parent WRITE;
UNLOCK TABLES;
LOCK TABLES child WRITE;
UNLOCK TABLES;
LOCK TABLES child WRITE, parent READ;
UNLOCK TABLES;
LOCK TABLES child WRITE;
UNLOCK TABLES;
LOCK TABLES parent WRITE;
UNLOCK TABLES;
LOCK TABLES child1 WRITE, parent1 WRITE;
UNLOCK TABLES;
LOCK TABLES child WRITE, parent1 WRITE;
UNLOCK TABLES;
LOCK TABLES child WRITE, parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE;
UNLOCK TABLES;
LOCK TABLE parent WRITE, child READ;
UNLOCK TABLES;
LOCK TABLE parent WRITE, child WRITE;
UNLOCK TABLES;
HANDLER t1 OPEN;
HANDLER t1 CLOSE;
HANDLER t1 OPEN AS a;
HANDLER t1 OPEN AS b;
HANDLER a CLOSE;
HANDLER b CLOSE;
HANDLER t2 OPEN;
HANDLER t3 OPEN AS a;
HANDLER t3 OPEN AS b;
HANDLER t2 CLOSE;
HANDLER a CLOSE;
HANDLER b CLOSE;
HANDLER t2 OPEN;
HANDLER t3 OPEN AS a;
HANDLER t3 OPEN AS b;
HANDLER t2 CLOSE;
HANDLER a CLOSE;
HANDLER b CLOSE;
HANDLER t2 OPEN;
HANDLER t3 OPEN AS a;
HANDLER t3 OPEN AS b;
CREATE TRIGGER bi_t3 BEFORE INSERT ON t3 FOR EACH ROW BEGIN IF @a = 1234567890 THEN   DELETE FROM t1;
END IF;
END| DELIMITER ;| PREPARE stmt FROM 'INSERT INTO t3 VALUES (1)';
EXECUTE stmt;
EXECUTE stmt;
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
LOCK TABLE t1 READ;
UNLOCK TABLES;
LOCK TABLES t0 WRITE;
UNLOCK TABLES;
RENAME TABLE t2 TO t3;
RENAME TABLE t3 TO mysqltest.t3;
RENAME TABLE mysqltest.t3 TO t4;
RENAME TABLE T2 TO T3;
RENAME TABLE parent1 TO parent;
RENAME TABLE parent1 TO parent;
RENAME TABLE parent0 TO parent;
RENAME TABLE parent0 TO parent;
RENAME TABLE parent0 TO parent;
RENAME TABLE parent0 TO parent;
CREATE FUNCTION f1() RETURNS INT SQL SECURITY INVOKER BEGIN   INSERT INTO t2 (fld1, fld2) VALUES (1, 2);
RETURN 0;
END| CREATE FUNCTION f2() RETURNS INT SQL SECURITY DEFINER BEGIN   INSERT INTO t2 (fld1, fld2) VALUES (1, 2);
RETURN 0;
END| DELIMITER ;| CREATE SQL SECURITY INVOKER VIEW v1 AS SELECT * FROM t2;
connect (con1, localhost, user1,,wl8910db);
connect (con2, localhost, user2,,wl8910db);
CREATE DEFINER=root@localhost FUNCTION f3() RETURNS INT SQL SECURITY DEFINER BEGIN   INSERT INTO t2 (fld1, fld2) VALUES (1, 2);
RETURN 0;
END| DELIMITER ;| CREATE DEFINER=root@localhost SQL SECURITY DEFINER VIEW v3 AS SELECT * FROM t2;
connect (con3, localhost, user3,,wl8910db);
disconnect con1;
disconnect con2;
disconnect con3;
PREPARE stmt1 FROM 'ALTER TABLE child ADD FOREIGN KEY (fk) REFERENCES parent (pk)';
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
ALTER TABLE child ADD CONSTRAINT c2 FOREIGN KEY (fk) REFERENCES parent /*! (id) */ /*!40008 ON DELETE SET NULL */;
/*!50101 CREATE TABLE child (fk INT, FOREIGN KEY (fk) REFERENCES parent(pk)) */;
/*! ALTER TABLE child ADD FOREIGN KEY (fk) REFERENCES parent(pk) */;
CALL mtr.add_suppression("Master's UUID has changed, its old UUID is");
CREATE TABLESPACE ts ADD DATAFILE 'f.ibd' ENGINE InnoDB;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd' ENGINE=InnoDB;
SET @start_value= @@global.syseventlog.facility;
SELECT @@global.syseventlog.facility, @start_value;
SELECT @@global.syseventlog.facility;
SELECT @@global.syseventlog.facility;
SELECT @@global.syseventlog.facility;
SELECT @@global.syseventlog.facility;
SELECT @@global.syseventlog.facility;
SET @start_value= @@global.syseventlog.include_pid;
SELECT @@global.syseventlog.include_pid;
SELECT @@global.syseventlog.include_pid;
SELECT @@global.syseventlog.include_pid;
SELECT @@global.syseventlog.include_pid;
SELECT @@global.syseventlog.include_pid;
SELECT @@global.syseventlog.include_pid;
SET @start_value= @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
use mysqltest//
create procedure sp1 ()  begin   drop table if exists t1;   select 1 as "my-col"; end; //
call mysqltest.sp1();
create procedure sp1()  begin    create table t1 (a int);    insert into t1 values (10);  end//
create procedure sp2() begin   create table t2(a int);   insert into t2 values(1);   call sp1(); end//
create function f1() returns int begin    return (select max(a) from t1); end//
create procedure sp3() begin    call sp1();   select 'func', f1(); end//
create procedure sp1() begin   create temporary table t2(a int);   insert into t2 select * from t1; end//
create procedure sp2() begin   create temporary table t1 (a int);   insert into t1 values(1);   call sp1();   select 't1', a from t1;   select 't2', a from t2;   drop table t1;   drop table t2; end//
create procedure sp1(a int) begin   select a; end //
create function f1() returns int begin   return (select max(a) from t1); end //
create procedure sp2(a int) begin   select * from t3;   select a; end //
create procedure sp3() begin    select * from t1;   call sp2(5); end //
create procedure sp4() begin    select * from t2;   call sp3(); end //
create function f1(ab int) returns int begin   declare i int;   set i= (select max(a) from t1 where a < ab) ;   return i; end //
create function f2(ab int) returns int begin   declare i int;   set i= (select max(a) from t2 where a < ab) ;   return i; end //
create view v1 as    select t3.a as x, t4.a as y, f2(3) as z   from t3, t4 where t3.a = t4.a //
create procedure sp1() begin   declare a int;   set a= (select f1(4) + count(*) A from t1, v1); end //
create function f3() returns int begin   call sp1();   return 1; end //
call sp1() //
select f3() //
select f3() //
call sp1() //
drop procedure sp1//
drop function f3//
create procedure sp1()  begin    declare x int;   declare c cursor for select f1(3) + count(*) from v1;   open c;   fetch c into x; end;//
create function f3() returns int begin   call sp1();   return 1; end //
call sp1() //
call sp1() //
select f3() //
call sp1() //
create function bug15683() returns bigint begin return (select count(*) from v3); end|
prepare stmt from "select bug15683()";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "delete t1 from t1, t2 where t1.id = t2.id and bug19634()";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "delete t1 from t1, t2 where t1.id = t2.id";
execute stmt;
execute stmt;
deallocate prepare stmt;
create trigger bug_27907_t1_ai after insert on bug_27907_t1 for each row begin   insert into bug_27907_logs (a) values (1); end|
CREATE TRIGGER t1_ai AFTER INSERT ON t1 FOR EACH ROW BEGIN UPDATE t2 SET c2= c2 + 1;
END// DELIMITER ;// LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 READ;
UNLOCK TABLES;
CREATE FUNCTION f1() RETURNS INT BEGIN  UPDATE v1 SET fld2='B' WHERE fld1=1;
RETURN row_count();
END ! DELIMITER ;! SELECT f1();
PREPARE stmt1 FROM "CREATE TEMPORARY TABLE tmp2 AS SELECT b FROM (SELECT f1() AS b FROM tmp1) AS t";
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
connect (ssl_con,localhost,root,,,,,SSL);
disconnect ssl_con;
connect (ssl_con,localhost,root,,,,,SSL);
LET $ID= `SELECT connection_id()`;
disconnect ssl_con;
enable_connect_log;
connect(FLUSH_OPTIMIZER_COSTS_con,localhost,wl14303,,);
disconnect FLUSH_OPTIMIZER_COSTS_con;
connect(FLUSH_STATUS_con,localhost,wl14303,,);
disconnect FLUSH_STATUS_con;
connect(FLUSH_USER_RESOURCES_con,localhost,wl14303,,);
disconnect FLUSH_USER_RESOURCES_con;
connect(FLUSH_TABLES_con,localhost,wl14303,,);
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
disconnect FLUSH_TABLES_con;
connect(RELOAD_con,localhost,wl14303,,);
disconnect RELOAD_con;
connect(COMBO_con,localhost,wl14303,,);
disconnect COMBO_con;
query_vertical SELECT command_type, argument FROM mysql.general_log WHERE command_type='Query';
disable_connect_log;
do nullif( ( rtrim( make_set((cast(('%S') as unsigned)),                           (point((0xaf),(''))))                )         ), ('')) ;
do dayofmonth( ( not( trim( trailing( convert((''), binary(4)))                    from( make_set( ('>>'), ('`'))))                  ))) ;
do quote(make_set((''), (cast(('-2147483649.1') as binary(513)))));
do trim( both(-8388607)       from( make_set( ( extract( minute_second from                                  ( str_to_date((rpad(1.0,4,1)), ('')))                                )                        ),                        ( char((connection_id()) using macce)))           )     ) ;
SELECT 1 IN (SELECT MAKE_SET(-1, 1, (SELECT 1 FROM t)) FROM t);
write_file $BOOTSTRAP_SQL;
perl;
my $log= $ENV{'ENV_MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_w= grep(/No data dictionary version number found./gi,<FILE>);
print "#     Data Dictionary initialization error found $c_w times.\n";
close(FILE);
remove_file $BOOTSTRAP_SQL;
write_file $BOOTSTRAP_SQL;
perl;
my $log= $ENV{'ENV_MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_w= grep(/The used command is not allowed with this MySQL version/gi,<FILE>);
print "#     Data Dictionary initialization error found $c_w times.\n";
close(FILE);
remove_file $BOOTSTRAP_SQL;
write_file $BOOTSTRAP_SQL;
perl;
my $log= $ENV{'ENV_MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_w= grep(/The used command is not allowed with this MySQL version/gi,<FILE>);
print "#     Data Dictionary initialization error found $c_w times.\n";
close(FILE);
remove_file $BOOTSTRAP_SQL;
write_file $BOOTSTRAP_SQL;
connect(root_con,localhost,root,,mysql);
disconnect root_con;
remove_file $BOOTSTRAP_SQL;
write_file $BOOTSTRAP_SQL;
perl;
my $log= $ENV{'ENV_MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_w= grep(/Access to data dictionary table \'mysql.st_spatial_reference_systems\' is rejected/gi,<FILE>);
print "#     Data Dictionary table access error found $c_w times.\n";
close(FILE);
remove_file $BOOTSTRAP_SQL;
write_file $BOOTSTRAP_SQL;
perl;
my $log= $ENV{'ENV_MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_w= grep(/Access to data dictionary table \'mysql.tables\' is rejected/gi,<FILE>);
print "#     Data Dictionary initialization error found $c_w times.\n";
close(FILE);
remove_file $BOOTSTRAP_SQL;
write_file $BOOTSTRAP_SQL;
connect(root_con,localhost,root,,mysql);
disconnect root_con;
remove_file $BOOTSTRAP_SQL;
remove_file $MYSQLD_LOG;
connect(root_con,localhost,root,,mysql);
disconnect root_con;
remove_file $MYSQLD_LOG;
if (`select locate('mrr_cost_based', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr_cost_based=off';
} set optimizer_switch = default;
abcd CREATE TABLE t1 (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,  name TINYBLOB NOT NULL,  modified TIMESTAMP DEFAULT '0000-00-00 00:00:00',  INDEX namelocs (name(255))) ENGINE = InnoDB PARTITION BY HASH(id) PARTITIONS 2;
INTO TABLE t1 (name);
select insert(_utf16 0x006100620063,10,2,_utf16 0x006400650066);
select insert(_utf16 0x006100620063,1,2,_utf16 0x006400650066);
prepare stmt1 from @str2;
execute stmt1 using @ivar;
prepare stmt from 'select utext from t1 where utext like ?';
execute stmt using @param1;
execute stmt using @param1;
deallocate prepare stmt;
prepare stmt from 'select utext from t1 where utext like ?';
execute stmt using @param1;
execute stmt using @param1;
deallocate prepare stmt;
CREATE TABLE t1 AS SELECT repeat('a',2) as s1 LIMIT 0;
SELECT id, CHAR_LENGTH(GROUP_CONCAT(body)) AS l FROM (SELECT 'a' AS id, REPEAT('foo bar', 100) AS body UNION ALL SELECT 'a' AS id, REPEAT('bla bla', 100) AS body) t1 GROUP BY id ORDER BY l DESC;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set @save_storage_engine= @@default_storage_engine;
PREPARE s1 FROM "SELECT HEX(b & c), HEX(b & 0x31393838), b & NULL, HEX(b & 0b00000000000000000000000000001011), HEX(0x31393838 & b), NULL & b, HEX(0b00000000000000000000000000001011 & b), HEX(b | c), HEX(b | 0x31393838), b | NULL, HEX(b | 0b00000000000000000000000000001011), HEX(0x31393838 | b), NULL | b, HEX(0b00000000000000000000000000001011 | b), HEX(b ^ c), HEX(b ^ 0x31393838), b ^ NULL, HEX(b ^ 0b00000000000000000000000000001011), HEX(0x31393838 ^ b), NULL ^ b, HEX(0b00000000000000000000000000001011 ^ b), BIT_COUNT(b), HEX( ~b), HEX(b << 1), HEX(b >> 1) FROM t1;";
EXECUTE s1;
EXECUTE s1;
PREPARE s2 from "SELECT HEX(BIT_AND(b)), HEX(BIT_OR(b)), HEX(BIT_XOR(b)) FROM t1 GROUP BY a";
EXECUTE s2;
EXECUTE s2;
PREPARE s2 from "SELECT HEX(BIT_AND(b)), HEX(BIT_OR(b)), HEX(BIT_XOR(b)) FROM t1";
EXECUTE s2;
EXECUTE s2;
SELECT _binary '12' | '12';
SELECT _binary '12' | _binary '12';
SELECT _binary '12' | 0x0001;
SELECT _binary '12' | 1;
SELECT _binary '12' << 1;
PREPARE ps FROM 'SELECT (~?)';
SET @a:=0;
EXECUTE ps USING @a;
SET @a:='abcd';
EXECUTE ps USING @a;
SET @a:=_binary 'abcd';
EXECUTE ps USING @a;
SET @a:=34;
EXECUTE ps USING @a;
SELECT (_binary x'31' | x'31');
SELECT _binary '1' + 0;
SELECT (_binary x'31' | x'31') + 0;
SELECT 1.0 * (_binary x'312E35' | x'312E35');
SELECT HEX(_binary 0x0003 << (_binary 0x38 | NULL));
SELECT (_binary x'31' | NULL) + 0;
SELECT DATEDIFF((_binary '2012-05-19 09:06:07' | _binary '2012-05-19 09:06:07'), '2012-05-21 09:06:07');
SELECT SUBTIME((_binary '2012-05-19 09:06:07' | _binary '2012-05-19 09:06:07'),'1 1:1:1.000002');
SELECT DATEDIFF((_binary '12012-05-19 09:06:07' | _binary '12012-05-19 09:06:07'), '2012-05-21 09:06:07');
SELECT SUBTIME((_binary '12007-12-31 23:59:59.999999' | _binary '12007-12-31 23:59:59.999999'),'1 1:1:1.000002');
SELECT * FROM (VALUES ROW(1),ROW(1)) AS dt(a) WHERE EXISTS(   WITH RECURSIVE qn AS (SELECT a*0 AS b UNION ALL SELECT b+1 FROM qn WHERE b=0)   SELECT * FROM qn WHERE b=a   );
SELECT * FROM (VALUES ROW(1),ROW(1)) AS dt(a) WHERE NOT EXISTS(   WITH RECURSIVE qn AS (SELECT a*0 AS b UNION ALL SELECT b+1 FROM qn WHERE b=0)   SELECT * FROM qn WHERE b=a   );
create function f2_temp() returns int begin   insert into t1_temp values (1);   return 0; end|
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disconnect con1;
disconnect con2;
select 1ea10.1a20,1e+ 1e+10 from 1ea10;
create table `` (a int);
drop table if exists ``;
create table t1 (`` int);
create table t1 (i int, index `` (i));  create table t1 (i int);
lock tables t1 read;
unlock tables;
create table t1 (a int,);
create table t1 (a int,,b int);
create table t1 (,b int);
lock tables t1 read;
unlock tables;
create table t2 select default(str) as str, default(strnull) as strnull, default(intg) as intg, default(rel) as rel from t1;
connect (user1,localhost,mysqltest_1,,*NO-ONE*);
disconnect user1;
unlock tables;
create table t1(column.name int);
create table t1(test.column.name int);
create table t1(xyz.t1.name int);
create table t1(t1.name int);
create table t2(test.t2.name int);
show create database mysqltest;
lock tables t1 read;
unlock tables;
lock tables t1 read;
unlock tables;
lock table t1 read, t2 read;
unlock tables;
lock table t1 read, t2 write;
unlock tables;
lock tables t1 read;
unlock tables;
CREATE TABLE t1(c1 VARCHAR(33), KEY USING BTREE (c1));
CREATE TABLE t1(c1 VARCHAR(33), KEY USING BTREE (c1) USING HASH) ENGINE=MEMORY;
CREATE TABLE t1(c1 VARCHAR(33), KEY USING HASH (c1) USING BTREE) ENGINE=MEMORY;
SHOW CREATE DATABASE aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;
create database имя_базы_в_кодировке_утф8_длиной_больше_чем_45;
use имя_базы_в_кодировке_утф8_длиной_больше_чем_45;
drop database имя_базы_в_кодировке_утф8_длиной_больше_чем_45;
create table имя_таблицы_в_кодировке_утф8_длиной_больше_чем_48 (   имя_поля_в_кодировке_утф8_длиной_больше_чем_45 int,   index имя_индекса_в_кодировке_утф8_длиной_больше_чем_48 (имя_поля_в_кодировке_утф8_длиной_больше_чем_45) );
create view имя_вью_кодировке_утф8_длиной_больше_чем_42 as select имя_поля_в_кодировке_утф8_длиной_больше_чем_45 from имя_таблицы_в_кодировке_утф8_длиной_больше_чем_48;
select * from имя_таблицы_в_кодировке_утф8_длиной_больше_чем_48;
show create table имя_таблицы_в_кодировке_утф8_длиной_больше_чем_48;
show create view имя_вью_кодировке_утф8_длиной_больше_чем_42;
create trigger имя_триггера_в_кодировке_утф8_длиной_больше_чем_49 before insert on имя_таблицы_в_кодировке_утф8_длиной_больше_чем_48 for each row set @a:=1;
drop trigger имя_триггера_в_кодировке_утф8_длиной_больше_чем_49;
create trigger очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_66 before insert on имя_таблицы_в_кодировке_утф8_длиной_больше_чем_48 for each row set @a:=1;
drop trigger очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_66;
create procedure имя_процедуры_в_кодировке_утф8_длиной_больше_чем_50() begin end;
drop procedure имя_процедуры_в_кодировке_утф8_длиной_больше_чем_50;
create procedure очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_66() begin end;
create function имя_функции_в_кодировке_утф8_длиной_больше_чем_49()    returns int return 0;
drop function имя_функции_в_кодировке_утф8_длиной_больше_чем_49;
create function очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_66()    returns int return 0;
drop view имя_вью_кодировке_утф8_длиной_больше_чем_42;
drop table имя_таблицы_в_кодировке_утф8_длиной_больше_чем_48;
create function f1() returns int begin   declare res int;
set res:= (select count(*) from t1);
return res;
end| create table t1 as select 1;
create table t1 (a int) transactional=0;
create table t2 (a int) page_checksum=1;
create table t3 (a int) row_format=page;
CREATE TRIGGER f BEFORE INSERT ON t1 FOR EACH ROW  BEGIN    INSERT INTO t1 ( `int` ) VALUES (4 ),( 8 ),( 2 ) ;  END ; | INSERT INTO t1 (pk, int_key) SELECT `pk` , `int_key` FROM B ;
CREATE TRIGGER f BEFORE INSERT ON t1 FOR EACH ROW  BEGIN    UPDATE A SET `pk`=1 WHERE `pk`=0 ;  END ;| DROP TABLE t1;
HANDLER t1 OPEN AS A;
HANDLER t1 OPEN AS A;
HANDLER t1 OPEN AS A;
create function f() returns int begin insert into t2 values(1); return 1; end|
connect(con1, localhost, root);
disconnect con1;
connect (con_sub,localhost,subuser,,);
disconnect con_sub;
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   CREATE TEMPORARY TABLE t2 AS SELECT NEW.fld1, NEW.fld2;
END | DELIMITER ;| INSERT INTO t1 VALUES (1, '1111:11:11');
while ($i < $count) { CREATE TABLE t2 LIKE t1;
BEGIN   DECLARE x $type ZEROFILL DEFAULT 1;
RETURN x;
END// DELIMITER ;// DROP FUNCTION f1;
} DROP TABLE types;
CREATE TABLE t1(i INT PRIMARY KEY) KEY_BLOCK_SIZE = -2147483647;
CREATE TABLE t1(i INT PRIMARY KEY) KEY_BLOCK_SIZE = -2147483648;
if (!$crllen) {   skip Needs OpenSSL;
source include/have_log_bin.inc;
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT.");
CALL mtr.add_suppression("REVOKE/GRANT failed while storing table level "                          "and column level grants in the privilege "                          "tables. An incident event has been written to "                          "the binary log which will stop the slaves.");
CALL mtr.add_suppression("REVOKE/GRANT failed while granting/revoking "                          "privileges in databases. An incident event "                          "has been written to the binary log which "                          "will stop the slaves.");
delete from mysql.user where user=_binary'mysqltest_1';
disable_query_log;
while ($1)  {   while ($2)    {      while ($3)      {        dec $3;
}      dec $2;
}   dec $1;
} enable_query_log;
disable_query_log;
while ($1)  {   while ($2)    {      dec $2;
}   dec $1;
} enable_query_log;
LOCK TABLES t1 write, t2 read;
unlock tables;
LOCK TABLES t1 write, t2 write;
unlock tables;
UPDATE t1,t2 SET 1=2 WHERE t1.n=t2.n;
connect (root,localhost,root,,test,$MASTER_MYPORT,$MASTER_MYSOCK);
connect (user1,localhost,mysqltest_1,,mysqltest,$MASTER_MYPORT,$MASTER_MYSOCK);
delete from mysql.user where user=_binary'mysqltest_1';
disconnect user1;
disconnect root;
connect (locker,localhost,root,,test);
lock table t1 write;
connect (changer,localhost,root,,test);
send alter table t1 add column c int default 100 after a;
connect (updater,localhost,root,,test);
where state= 'Waiting for table metadata lock';
send update t1, v1 set t1.b=t1.a+t1.b+v1.b where t1.a=v1.a;
where state= 'Waiting for table metadata lock';
unlock tables;
reap;
reap;
disconnect locker;
disconnect changer;
disconnect updater;
WHERE t1.c1=t2.c2 AND t2.c1=t3.c2;
UPDATE (VALUES ROW(1),ROW(2)) AS dt(a)     LEFT JOIN performance_schema.setup_instruments ON dt.a=enabled     SET enabled = 'YES' WHERE name = 'wait/lock/metadata/sql/mdl';
PREPARE s FROM 'UPDATE t1, (SELECT 1 FROM DUAL) AS dt SET a=a+1';
EXECUTE s;
EXECUTE s;
DEALLOCATE PREPARE s;
INSERT INTO t1 VALUES(default(a),default(b), default(c), default(d),                       default(e), default(f));
CREATE PROCEDURE t_cache() BEGIN   SET @A= 20;
PREPARE x FROM 'SELECT 1';
END ;| DELIMITER ;| DELIMITER |;
CREATE FUNCTION f1 () RETURNS int BEGIN SET NAMES 'big5';
RETURN (SELECT COUNT(*) FROM t1);
END ;| DELIMITER ;| SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES        WHERE TABLE_SCHEMA='db1_basic' AND TABLE_TYPE= 'BASE TABLE'        ORDER BY TABLE_NAME;
CREATE TRIGGER testref BEFORE INSERT ON test1 FOR EACH ROW BEGIN  INSERT INTO test2 SET a2 = NEW.a1;
END ;| DELIMITER ;| SHOW TRIGGERS;
CREATE PROCEDURE db23721446.sp(out p1 int) BEGIN     select count(*) from db23721446.t;
END ;| DELIMITER ;| GRANT ALL PRIVILEGES ON db23721446.* TO 'bug23721446_u1'@'%' ;
SHOW GRANTS FOR bug23721446_u1@'%';
SHOW GRANTS FOR bug23721446_u2@'%';
SHOW GRANTS FOR bug23721446_u1@'%';
SHOW GRANTS FOR bug23721446_u2@'%';
CREATE TABLESPACE `mytbsp` ADD DATAFILE 'mytbsp.ibd' ENGINE INNODB;
CREATE VIEW V_T1_C AS SELECT DB29023216.TESTFUNC();
CREATE TABLE t1(f1 INT INVISIBLE, f2 INT,                 f3 INT AS (f1 + 10), f4 INT AS (f2 + 10) INVISIBLE);
remove_file $MYSQLTEST_VARDIR/tmp/test1.sql;
if (!$require_case_insensitive_file_system) { } CREATE TABLE t1 ( a INT, KEY (a) INVISIBLE );
CREATE FUNCTION test_fn() RETURNS INTEGER BEGIN DECLARE rId bigint;
RETURN rId;
END // CREATE FUNCTION test_fn2() RETURNS INTEGER BEGIN DECLARE rId bigint;
RETURN rId;
END // DELIMITER ;// DROP FUNCTION `TESTDB`.`test_fn`;
create procedure proc_1() install plugin my_plug soname '\\root\\some_plugin.dll';
prepare abc from "install plugin my_plug soname '\\\\root\\\\some_plugin.dll'";
execute abc;
execute abc;
deallocate prepare abc;
CALL mtr.add_suppression("innodb_open_files should not be greater than the open_files_limit.");
CALL mtr.add_suppression("You must raise the value of innodb_open_files in my.cnf! Remember that InnoDB keeps all");
CALL mtr.add_suppression("log files and all system tablespace files open for the whole time mysqld is running, and");CALL mtr.add_suppression("needs to open also some .ibd files if the file-per-table storage model is used. Current open files .*, max allowed open files 1.");
CALL mtr.add_suppression("Too many (.*) files stay open while the maximum allowed value would be 1. You may need to raise the value of innodb_open_files in my.cnf.");
CALL mtr.add_suppression("Open files 7 exceeds the limit 1");
echo '#________________________VAR_05_table_open_cache__________________#' echo '##' SELECT COUNT(@@GLOBAL.table_open_cache);
connect (con1,localhost,root,,);
disconnect con1;
CREATE PROCEDURE t1_sel() BEGIN SET @var1=20;
END | DELIMITER ;| CALL t1_sel();
CREATE PROCEDURE t1_inssel() BEGIN SET @a=1;
END | DELIMITER ;| CALL t1_inssel();
CREATE PROCEDURE t1_selins() BEGIN SELECT * FROM t1 ORDER BY 1;
END | DELIMITER ;| CALL t1_selins();
CREATE PROCEDURE t2t1_sel() BEGIN SET @a=20;
END | DELIMITER ;| CALL t2t1_sel();
CREATE PROCEDURE t1_call() BEGIN SET @a=20;
END | DELIMITER ;| CALL t1_call();
CREATE PROCEDURE t1_inout(   IN v0 INT,   OUT v_str_1 CHAR(32),   OUT v_dbl_1 DOUBLE(4, 2),   OUT v_dec_1 DECIMAL(6, 3),   OUT v_int_1 INT,   IN v1 INT,   INOUT v_str_2 CHAR(64),   INOUT v_dbl_2 DOUBLE(5, 3),   INOUT v_dec_2 DECIMAL(7, 4),   INOUT v_int_2 INT)  BEGIN   SET v0 = -1;
END | DELIMITER ;| CALL t1_inout(@a,@b,@c,@d,@e,@f,@g,@h,@i,@j);
CREATE FUNCTION f1 () RETURNS int BEGIN SET NAMES 'big5';
RETURN (SELECT COUNT(*) FROM t1);
END | DELIMITER ;| SELECT f1();
CREATE PROCEDURE sp1(OUT x INT) BEGIN SELECT MIN(a) INTO x FROM t1;
END | CREATE FUNCTION f2() RETURNS int BEGIN DECLARE a int;
RETURN a;
END | DELIMITER ;| SELECT f2();
CREATE FUNCTION f3() RETURNS int  BEGIN    DECLARE a, b int;
SET a:= (SELECT COUNT(*) FROM t3);
SET b:= (SELECT COUNT(*) FROM t3 t3_alias);
RETURN a + b;
END | DELIMITER ;| SELECT f3();
CREATE FUNCTION f4() RETURNS int  BEGIN    DECLARE x int;
DECLARE c CURSOR FOR SELECT * FROM t1 limit 1;
OPEN c;
FETCH c INTO x;
CLOSE c;
RETURN x;
END | DELIMITER ;| SELECT f4();
CREATE PROCEDURE cursor1() BEGIN   DECLARE v1 int;
DECLARE done INT DEFAULT FALSE;
DECLARE cur1 CURSOR FOR SELECT * FROM t1;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
OPEN cur1;
read_loop: LOOP     FETCH cur1 INTO v1;
IF done THEN       LEAVE read_loop;
END IF;
END LOOP;
CLOSE cur1;
END | DELIMITER ;| CALL cursor1();
CREATE PROCEDURE cursor2() BEGIN   DECLARE x int;
DECLARE y int;
DECLARE c1 CURSOR FOR SELECT * FROM t1 limit 1;
DECLARE c2 CURSOR FOR SELECT * FROM t2 limit 1;
OPEN c1;
OPEN c2;
FETCH c1 INTO x;
FETCH c2 INTO y;
CLOSE c1;
CLOSE c2;
END | DELIMITER ;| CALL cursor2();
CREATE PROCEDURE t_cache() BEGIN   SET @A= 20;
PREPARE x FROM 'SELECT 1';
END | DELIMITER ;| CALL t_cache();
CREATE PROCEDURE sel_with_session() BEGIN SET @var1=20;
END | CREATE PROCEDURE sel_with_no_session() BEGIN SELECT * FROM t1 ORDER BY 1;
END | DELIMITER ;| DROP DATABASE bug19550875;
if (!` SELECT (@sleep_time_per_result_row * @row_count - @max_acceptable_delay >               @sleep_time_per_result_row) AND (@row_count - 1 >= 3)`) {    SELECT @sleep_time_per_result_row * @row_count - @max_acceptable_delay >                @sleep_time_per_result_row AS must_be_1,                @row_count - 1 >= 3 AS must_be_also_1,                @sleep_time_per_result_row, @row_count, @max_acceptable_delay;
exit;
} DROP TEMPORARY TABLE IF EXISTS t_history;
while ($num) {    INSERT INTO t1 VALUES (1);
dec $num;
} WHERE TIMEDIFF(end_ts,start_ts) - @sleep_time_per_result_row * @row_count       BETWEEN 0 AND @max_acceptable_delay;
if (`SELECT @aux1 <> 1`) {    SELECT * FROM t_history;
} DROP TABLE t1;
create function func_26093_a(x int) returns int begin   set @invoked := @invoked + 1;   return x; end//
create function func_26093_b(x int, y int) returns int begin   set @invoked := @invoked + 1;   return x; end//
set @invoked := 0;
set @invoked := 0;
SELECT * FROM t1 WHERE a = NAME_CONST('reportDate',   _binary'2009-01-09' COLLATE 'binary');
SELECT '1' IN ('1', INET_NTOA(0));
SELECT '1' IN ('1', INET_NTOA(0));
DO DATEDIFF(UUID_TO_BIN(UUID()), 0x32df2ce8);
DO (!(SECOND(0xb16beeb7)));
PREPARE st FROM "SELECT * FROM t1  WHERE pk = 5 AND (col_time, col_varchar) IN ((23, 'Y'), (92, 'W'))";
EXECUTE st;
EXECUTE st;
DEALLOCATE PREPARE st;
do (is_ipv4_mapped(bin_to_uuid(@a:=34))) <=>    (json_objectagg('key2',42 ) and rtrim(""));
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
connect (con1,localhost,root,,);
WHERE info LIKE 'select%' AND state='User lock';
source include/wait_condition.inc;
KILL QUERY @aux;
reap;
WHERE info LIKE 'select%' AND state='User sleep';
source include/wait_condition.inc;
reap;
WHERE id = $con1_id;
source include/wait_condition.inc;
disconnect con1;
connect (con1,localhost,root,,);
WHERE info LIKE 'select%' AND state='User lock';
source include/wait_condition.inc;
reap;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
WHERE info LIKE 'select%' AND state = 'User lock';
source include/wait_condition.inc;
reap;
WHERE info LIKE 'rename%' AND state = 'Waiting for table metadata lock';
source include/wait_condition.inc;
reap;
RENAME TABLE t2 TO t1;
LOCK TABLE t1 WRITE;
WHERE info LIKE 'select%' AND state = 'User lock';
source include/wait_condition.inc;
reap;
UNLOCK TABLES;
WHERE info LIKE 'SET @aux%' AND state = 'User lock';
source include/wait_condition.inc;
RENAME TABLE t1 TO t1x;
RENAME TABLE t1x TO t1;
reap;
CREATE TRIGGER trig_t1_ins BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SET @aux = GET_LOCK(2,1);
IF @aux <> 1 THEN       SIGNAL SQLSTATE '45000'       SET MESSAGE_TEXT = 'LOCK 2 not got. Abort.', MYSQL_ERRNO = 9999;
END IF;
END;| SELECT GET_LOCK(CAST(2 AS CHAR),0);
WHERE info LIKE 'select%' AND state = 'User lock';
source include/wait_condition.inc;
SELECT GET_LOCK(REPEAT('a', 64), 0) = 1 AS expect_1;
SELECT IS_USED_LOCK(REPEAT('a', 64)) = CONNECTION_ID() AS expect_1;
SELECT IS_FREE_LOCK(REPEAT('a', 64)) = 0 AS expect_1;
SELECT RELEASE_LOCK(REPEAT('a', 64)) = 1 AS expect_1;
SELECT GET_LOCK(REPEAT('a', 65), 0);
SELECT IS_USED_LOCK(REPEAT('a', 65));
SELECT IS_FREE_LOCK(REPEAT('a', 65));
SELECT RELEASE_LOCK(REPEAT('a', 65));
WHERE info LIKE 'select%' AND state = 'User lock';
source include/wait_condition.inc;
reap;
disconnect con1;
connect (con1,localhost,root,,);
reap;
disconnect con1;
create procedure fib(n int unsigned) begin   if n > 1 then     begin       declare x, y bigint unsigned;       declare c cursor for select f from t3 order by f desc limit 2;       open c;       fetch c into y;       fetch c into x;       insert into t3 values (x+y);       call fib(n-1);       close c;     end;   end if; end|
set @@max_sp_recursion_depth= 20|
insert into t3 values (0), (1)|
call fib(4)|
select * from t3 order by f asc|
drop table t3|
drop procedure fib|
set @@max_sp_recursion_depth= 0|
create procedure p1() begin   declare counter integer default 0;   declare continue handler for sqlexception begin set counter = counter + 1;end;   repeat    if rand()>0.5 then start transaction; end if;    if rand()>0.5 then select count(*) from t1 for update; end if;    update t1 set a = 1 where a >= 0;    set counter = counter + 1;   until counter >= 50 end repeat; end $
(   a int, b varchar(30),   primary key(a) ) engine = $type ;
(   c1  tinyint, c2  smallint, c3  mediumint, c4  int,   c5  integer, c6  bigint, c7  float, c8  double,   c9  double precision, c10 real, c11 decimal(7, 4), c12 numeric(8, 4),   c13 date, c14 datetime, c15 timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP    ON UPDATE CURRENT_TIMESTAMP, c16 time,   c17 year, c18 tinyint, c19 bool, c20 char,   c21 char(10), c22 varchar(30), c23 varchar(100), c24 varchar(100),   c25 varchar(100), c26 varchar(100), c27 varchar(100), c28 varchar(100),   c29 varchar(100), c30 varchar(100), c31 enum('one', 'two', 'three'),   c32 set('monday', 'tuesday', 'wednesday'),   primary key(c1) ) engine = $type ;
call mtr.add_suppression("Got an error from thread_id=.*ha_myisam.cc:");
call mtr.add_suppression("MySQL thread id .*, query id .* localhost.*root Checking table");
FLUSH TABLE t1;
select a, not(not(a)) from t1;
explain select a, not(not(a)), not(a <= 2 and not(a)), not(a not like "1"), not (a not in (1,2)), not(a != 2) from t1 where not(not(a)) having not(not(a));
while ($c) { if ($c == 2) { set optimizer_switch="firstmatch=on,materialization=off";
} if ($c == 1) { set optimizer_switch="firstmatch=off,materialization=on";
} select @@optimizer_switch;
dec $c;
} DROP TABLE t1,t2;
while($c) { if ($c==2) {   SET OPTIMIZER_SWITCH="materialization=off";
} if ($c==1) {   SET OPTIMIZER_SWITCH="materialization=on,subquery_materialization_cost_based=off";
} dec $c;
} SET OPTIMIZER_SWITCH=DEFAULT;
BEGIN WORK;
BEGIN WORK;
CREATE FUNCTION func1()   RETURNS INTEGER BEGIN   SET @dummy = 0;
IF (SELECT * FROM t1) THEN     SET @dummy = 1;
END IF;
RETURN @dummy;
END| DELIMITER ;| BEGIN;
disconnect newconn;
RENAME TABLE t1 TO t1_new;
RENAME TABLE t1_new TO t1;
CREATE TABLE t1 ENGINE=MYISAM AS SELECT repeat('a', 5) AS s1 LIMIT 0;
echo =============Test of '127.0.0.1' (IPv4) ===========================;
echo =============Test of '0:0:0:0:0:FFFF:127.0.0.1' ===================;
echo =============Test of '0000:0000:0000:0000:0000:FFFF:127.0.0.1' ====;
echo =============Test of '0:0000:0000:0:0000:FFFF:127.0.0.1' ====;
echo =============Test of '0::0000:FFFF:127.0.0.1' ====;
echo =============Test of '0:0:0:0:0:FFFF:127.0.0.1/96' ================;
echo =============Test of '::FFFF:127.0.0.1' ===========================;
echo =============Test of '::FFFF:127.0.0.1/96' ========================;
echo =============Test of '::1' ========================;
connect (con1, $IPv6, root, , test, $MASTER_MYPORT,);
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET @saved_binlog_format= @@SESSION.binlog_format;
} SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
disable_query_log;
while ($1)  {   while ($2)    {      while ($3)      {        dec $3;
}      dec $2;     }   dec $1;
} enable_query_log;
prepare stmt1 from ' replace into t1 (a,a) select 100, ''hundred'' ';
execute stmt;
execute stmt;
execute stmt;
PREPARE st1 FROM 'INSERT INTO v2 (pk) VALUES ( 1 )';
EXECUTE st1;
PREPARE st1 FROM "INSERT INTO v1 (pk) VALUES (2)";
EXECUTE st1;
connect (root,localhost,root,,meow);
connect (user20989,localhost,user20989,,meow);
disconnect user20989;
connect (user20989,localhost,user20989,,meow);
disconnect user20989;
disconnect root;
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET SESSION binlog_format= @saved_binlog_format;
} CREATE TABLE t1(a INT, b INT);
PREPARE stmt FROM "INSERT INTO v1 (col_blob, pk, col_varchar)  SELECT col_blob, col_int, col_blob  FROM t2  WHERE pk BETWEEN 7 AND 8  LIMIT 1";
EXECUTE stmt;
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
CREATE TABLE t1 (   Ñ INTEGER,   N INTEGER,   a INTEGER,   b INTEGER,   c INTEGER,   d INTEGER,   e INTEGER,   f INTEGER,   g INTEGER,   h INTEGER,   i INTEGER,   j INTEGER,   k INTEGER,   l INTEGER,   m INTEGER,   na INTEGER,   o INTEGER,   p INTEGER,   q INTEGER,   r INTEGER,   s INTEGER,   t INTEGER,   u INTEGER,   v INTEGER,   w INTEGER,   x INTEGER,   y INTEGER,   z INTEGER,   aa INTEGER,   ab INTEGER,   ac INTEGER,   ad INTEGER );
INSERT INTO t1 (Ñ, N) VALUES (1, 2);
connect (con1, localhost, root,,);
disconnect con1;
WHERE USER != 'event_scheduler'`;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
where STATE = "User lock" and                            INFO = "update t1 set n = get_lock('mysqltest_lock', 100)";
where ID = (select connection_id()) and STATE = "Waiting for table level lock";
reap;
disconnect con2;
disconnect con1;
while ($wait_more) {   sleep 1;
} SHOW STATUS LIKE 'max_used_connections';
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disconnect con2;
while ($wait_more) {   sleep 1;
} SHOW STATUS LIKE 'max_used_connections';
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
disconnect con3;
disconnect con2;
disconnect con1;
SELECT a IN (SELECT a FROM t1) FROM t1 LIMIT 1;
create function f1 (x INTEGER) returns integer   begin     declare ret integer;
return ret;
end // DELIMITER ;// drop function f1;
connect (root, localhost, root,,test);
create procedure proc37908() begin select 1; end |
create function func37908() returns int sql security invoker   return (select * from db37908.t1 limit 1)|
connect (user1,localhost,mysqltest_1,,test);
disconnect user1;
disconnect root;
connect (con1,localhost,root,,);
CREATE FUNCTION f1() RETURNS INTEGER BEGIN   DECLARE foo INTEGER;
DECLARE bar INTEGER;
RETURN foo;
END $$ CREATE PROCEDURE p1()   BEGIN   SELECT 1;
END $$ DELIMITER ;$$ SELECT f1();
disconnect con1;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
disconnect con2;
connect (con4,localhost,root,,);
disconnect con1;
disconnect con3;
disconnect con4;
CREATE PROCEDURE proc_19194_codegen(   IN proc_name VARCHAR(50),   IN count INTEGER,   IN simple INTEGER,   OUT body MEDIUMTEXT) BEGIN   DECLARE code MEDIUMTEXT;   DECLARE i INT DEFAULT 1;   SET code = concat("CREATE PROCEDURE ", proc_name, "(i INT)\n");   SET code = concat(code, "BEGIN\n");   SET code = concat(code, "  DECLARE str CHAR(10);\n");   IF (simple)   THEN     SET code = concat(code, "  CASE i\n");   ELSE     SET code = concat(code, "  CASE\n");   END IF;   WHILE (i <= count)   DO     IF (simple)     THEN       SET code = concat(code, "    WHEN ", i, " THEN SET str=\"", i, "\";\n");     ELSE       SET code = concat(code, "    WHEN i=", i, " THEN SET str=\"", i, "\";\n");     END IF;     SET i = i + 1;   END WHILE;   SET code = concat(code, "    ELSE SET str=\"unknown\";\n");   SET code = concat(code, "  END CASE;\n");   SET code = concat(code, "  SELECT str;\n");   SET code = concat(code, "END\n");   SET body = code; END|
begin work;
begin work;
begin work;
begin work;
begin work;
begin work;
begin work;
begin work;
begin work;
begin work;
connect (conn1,localhost,mysqltest_user1,,mysqltest_db2);
begin work;
begin work;
begin work;
disconnect conn1;
PREPARE stmt1 FROM "SELECT /*+ BKA(t2) */ t2.f1, t2.f2, t2.f3 FROM t1,t2 WHERE t1.f1=t2.f1 AND t2.f2 BETWEEN t1.f1 and t1.f2 and t2.f2 + 1 >= t1.f1 + 1";
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM "SELECT /*+ BKA(@qb1 t2) */ * FROM (SELECT /*+ QB_NAME(QB1) */ t2.f1, t2.f2, t2.f3 FROM t1,t2 WHERE t1.f1=t2.f1 AND t2.f2 BETWEEN t1.f1 and t1.f2 and t2.f2 + 1 >= t1.f1 + 1) AS s1";
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
call mtr.add_suppression('Can not read and process value of User_attributes column from mysql.user table for user');
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcont,localhost,foo,foo,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,bar,,test);
enable_query_log;
remove_file $file;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
connect(con1,localhost,foo,foo,test);
disconnect con1;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,foo,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,foo,,test);
enable_query_log;
GRANT PROXY ON proxied_to_user@localhost TO proxy_user@localhost;
connect(con1,localhost,proxy_user,,test);
disconnect con1;
disable_query_log;
connect(errcon,localhost,proxy_user,proxy_user,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,proxy_user,proxy_user,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,proxied_to_user,proxied_to_user,test);
enable_query_log;
disable_query_log;
change_user foo,,test;
enable_query_log;
disable_query_log;
change_user foo,,test;
enable_query_log;
disable_query_log;
change_user foo,,test;
enable_query_log;
CREATE USER foo@localhost FAILED_LOGIN_ATTEMPTS -1;
CREATE USER foo@localhost PASSWORD_LOCK_TIME -1;
disable_query_log;
connect(errcon,localhost,non-existent,,test);
enable_query_log;
disable_query_log;
connect(errcon,localhost,non-existent2,,test);
enable_query_log;
ALTER USER foo@localhost ATTRIBUTE "{ \"test\": \"account locking\" }";
ALTER USER foo@localhost COMMENT "This is a test account for verifying that password locking and user attributes won't interfer with one and another.";
disable_query_log;
change_user foo,,test;
enable_query_log;
disable_query_log;
change_user foo,,test;
enable_query_log;
disable_query_log;
change_user foo,,test;
enable_query_log;
CREATE PROCEDURE p1() BEGIN   SET @@SESSION.GTID_NEXT = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2';   START TRANSACTION;   COMMIT;   SET @@SESSION.GTID_NEXT = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3';   START TRANSACTION;   COMMIT; END|
source include/func_aes_block.inc;
UPDATE t1 set data=repeat('a',18*1024*1024);
INSERT INTO t1 (data) VALUES (repeat('a',1*1024*1024));
INSERT INTO t1 (data) VALUES (repeat('b',16*1024*1024-1024));
UPDATE t1 set data=repeat('c',17*1024*1024);
INSERT INTO t1 set data=repeat('a',18*1024*1024);
UPDATE IGNORE t1 set data=repeat('a',18*1024*1024);
where event_name='event_2' and status='DISABLED';
where event_name='event_3';
where event_name='event_4' and status='DISABLED';
RENAME TABLE child TO siebling;
LOCK TABLES parent WRITE;
UNLOCK TABLES;
PREPARE stmt FROM 'DELETE FROM parent WHERE pk = ?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @a;
EXECUTE stmt USING @a;
RENAME TABLE parent TO mother, mother TO father;
RENAME TABLE child TO sister, sister TO brother;
RENAME TABLE father TO mother, brother TO sister, mother TO parent, sister TO child;
RENAME TABLE parent TO mother, mother TO father;
RENAME TABLE parent TO mother;
connect (con1, localhost, root,,);
disconnect con1;
connect (con,localhost,root,,);
disconnect con;
SELECT CURRENT_TIME(6) RLIKE '^[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{6}$';
SELECT CURRENT_TIMESTAMP(6) RLIKE '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{6}$';
SELECT MICROSECOND(CURRENT_TIME(6))=MICROSECOND(UTC_TIME(6));
CREATE TABLE t1 AS SELECT  CONCAT(CURRENT_TIME()), CONCAT(CURRENT_TIME(6)),  CONCAT(UTC_TIME()), CONCAT(UTC_TIME(6)),  CONCAT(CURRENT_TIMESTAMP()), CONCAT(CURRENT_TIMESTAMP(6)),  CONCAT(UTC_TIMESTAMP()), CONCAT(UTC_TIMESTAMP(6)),  CONCAT(LOCALTIME()), CONCAT(LOCALTIME(6)),  CONCAT(LOCALTIMESTAMP()), CONCAT(LOCALTIMESTAMP(6)),  CONCAT(SYSDATE()), CONCAT(SYSDATE(6));
CREATE TABLE t1 (a TIME(-1));
SELECT CAST(1 AS TIME(-1));
PREPARE stmt FROM 'INSERT INTO t1 VALUES (?)';
EXECUTE stmt USING @a;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM 'SELECT * FROM t1 WHERE a=?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @b;
EXECUTE stmt USING @c;
DEALLOCATE PREPARE stmt;
if (`SELECT @@default_storage_engine != 'MEMORY'`) {   CREATE TABLE t1 AS SELECT @a AS a;
} DELIMITER //;
CREATE PROCEDURE p1 () BEGIN   DECLARE a TIME(6);
END// SHOW CREATE PROCEDURE p1// CALL p1// DROP PROCEDURE p1// CREATE PROCEDURE p1 (a TIME(6)) BEGIN   SELECT a;
END// SHOW CREATE PROCEDURE p1// CALL p1(112233)// CALL p1(112233.123)// CALL p1(112233.123e0)// CALL p1('11:22:33.123')// DROP PROCEDURE p1// CREATE PROCEDURE p1() BEGIN   DECLARE a TIME(6);
END// SHOW CREATE PROCEDURE p1// CALL p1// DROP PROCEDURE p1// CREATE FUNCTION p1 (a TIME(6)) RETURNS TIME(6) BEGIN   RETURN a;
END// SHOW CREATE FUNCTION p1// SELECT p1(112233.123)// DROP FUNCTION p1// DELIMITER ;// CREATE TABLE t1 (a TIME(6));
query_vertical SELECT   CAST('10:10:10.9999994' AS TIME),   CAST('10:10:10.9999995' AS TIME),   CAST('10:10:10.9999994' AS TIME(6)),   CAST('10:10:10.9999995' AS TIME(6)),   CAST(101010.9999994 AS TIME),   CAST(101010.9999995 AS TIME),   CAST(101010.9999994 AS TIME(6)),   CAST(101010.9999995 AS TIME(6));
query_vertical SELECT   EXTRACT(MICROSECOND FROM '00:00:00.9999994'),   EXTRACT(MICROSECOND FROM '00:00:00.9999995'),   EXTRACT(MICROSECOND FROM 0.9999994),   EXTRACT(MICROSECOND FROM 0.9999995);
CREATE TABLE t1 (a DATETIME(-1));
SELECT CAST(1 AS DATETIME(-1));
query_vertical SELECT   CAST(bi AS DATETIME(1)),   CAST(d AS DATETIME(1)),   CAST(dc AS DATETIME(1)),   CAST(10101101112 AS DATETIME(1)),   CAST(10101101112.1 AS DATETIME(1)),   CAST(20010101101112 AS DATETIME(1)),   CAST(20010101101112.1 AS DATETIME(1)) FROM t1;
PREPARE stmt FROM 'INSERT INTO t1 VALUES (?)';
EXECUTE stmt USING @a;
EXECUTE stmt USING @c;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM 'SELECT * FROM t1 WHERE a=?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @b;
EXECUTE stmt USING @c;
DEALLOCATE PREPARE stmt;
if (`SELECT @@default_storage_engine != 'MEMORY'`) {   CREATE TABLE t1 AS SELECT @a AS a;
} DELIMITER //;
CREATE PROCEDURE p1 () BEGIN   DECLARE a DATETIME(6);
END// SHOW CREATE PROCEDURE p1// CALL p1// DROP PROCEDURE p1// CREATE PROCEDURE p1 (a DATETIME(6)) BEGIN   SELECT a;
END// SHOW CREATE PROCEDURE p1// CALL p1(20010101112233)// CALL p1(20010101112233.123)// CALL p1(0.123e0)// CALL p1('2001-01-01 11:22:33.123')// DROP PROCEDURE p1// CREATE PROCEDURE p1() BEGIN   DECLARE a DATETIME(6);
END// SHOW CREATE PROCEDURE p1// CALL p1// DROP PROCEDURE p1// CREATE FUNCTION p1 (a DATETIME(6)) RETURNS DATETIME(6) BEGIN   RETURN a;
END// SHOW CREATE FUNCTION p1// SELECT p1(20010101112233)// SELECT p1(20010101112233.123)// DROP FUNCTION p1// DELIMITER ;// CREATE TABLE t1 (a DATETIME(6));
query_vertical SELECT   CAST('2001-01-01 10:10:10.9999994' AS DATETIME),   CAST('2001-01-01 10:10:10.9999995' AS DATETIME),   CAST('2001-01-01 10:10:10.9999994' AS DATETIME(6)),   CAST('2001-01-01 10:10:10.9999995' AS DATETIME(6)),   CAST(20010101101010.9999994 AS DATETIME),   CAST(20010101101010.9999995 AS DATETIME),   CAST(20010101101010.9999994 AS DATETIME(6)),   CAST(20010101101010.9999995 AS DATETIME(6));
query_vertical SELECT   EXTRACT(MICROSECOND FROM '2001-01-01 00:00:00.9999994'),   EXTRACT(MICROSECOND FROM '2001-01-01 00:00:00.9999995'),   EXTRACT(MICROSECOND FROM 20010101000000.9999994),   EXTRACT(MICROSECOND FROM 20010101000000.9999995);
CREATE TABLE t1 (a TIMESTAMP(-1));
PREPARE stmt FROM 'INSERT INTO t1 VALUES (?)';
EXECUTE stmt USING @a;
EXECUTE stmt USING @c;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM 'SELECT * FROM t1 WHERE a=?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @b;
EXECUTE stmt USING @c;
DEALLOCATE PREPARE stmt;
if (`SELECT @@default_storage_engine != 'MEMORY'`) {   CREATE TABLE t1 AS SELECT @a AS a;
} DELIMITER //;
CREATE PROCEDURE p1 () BEGIN   DECLARE a TIMESTAMP(6);
END// SHOW CREATE PROCEDURE p1// CALL p1// DROP PROCEDURE p1// CREATE PROCEDURE p1 (a TIMESTAMP(6)) BEGIN   SELECT a;
END// SHOW CREATE PROCEDURE p1// CALL p1(20010101112233)// CALL p1(20010101112233.123)// CALL p1(0.123e0)// CALL p1('2001-01-01 11:22:33.123')// DROP PROCEDURE p1// CREATE PROCEDURE p1() BEGIN   DECLARE a TIMESTAMP(6);
END// SHOW CREATE PROCEDURE p1// CALL p1// DROP PROCEDURE p1// CREATE FUNCTION p1 (a TIMESTAMP(6)) RETURNS TIMESTAMP(6) BEGIN   RETURN a;
END// SHOW CREATE FUNCTION p1// SELECT p1(20010101112233)// SELECT p1(20010101112233.123)// DROP FUNCTION p1// DELIMITER ;// CREATE TABLE t1 (a TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6));
SELECT 3 IN (SELECT MAX(a) FROM t1);
SELECT ADDTIME(UTC_DATE, '23:28:14.014837') FROM dual;
SELECT SUBTIME(UTC_DATE, '04:44:03.014042') FROM dual ;
SELECT TIMEDIFF('0000-00-00 00:00:00.00000', UTC_DATE) FROM dual;
SELECT EXTRACT(HOUR_SECOND FROM CURRENT_DATE) FROM t1;
SELECT col_datetime_3_key , COUNT( col_timestamp_5_key ) FROM t1 FORCE KEY   (PRIMARY, col_datetime_5_not_null_key, col_datetime_6_key, col_time_5_key, col_time_2_key)  WHERE   (col_time_4_not_null_key NOT     BETWEEN '2002-01-01 21:50:38.023562' AND '20090504151448.022774'     AND col_time_1_not_null_key IN     ('2000-07-13 21:35:51.034786',      '2004-10-13 19:51:18.029716',      '2001-11-23 10:22:42.001689',      '2001-12-07 06:56:47.034426',      '20081109153313.042580'     )   ) AND   (col_timestamp_4_key BETWEEN '0000-00-00 00:00:00' AND '2008-06-16 10:42:11.032174'    OR    col_time_not_null_key BETWEEN '2007-02-13 14:29:42.008072' AND '2009-05-18 17:06:18.036503'   ) AND (   (col_datetime_key <> '2004-09-06 19:57:07.024714')    AND col_datetime_5_not_null_key NOT IN      ('20061212182915.005997',      '0000-00-00 00:00:00',      '20000920051358.001283',      '2000-09-03 00:07:36.061713'     ) ) AND (col_datetime_4_not_null_key IS NULL OR col_time_5_key BETWEEN '20051201163954.001782' AND '0000-00-00 00:00:00') GROUP BY col_datetime_6_not_null_key;
SELECT col_time_5_key AS c1, col_time_key AS c2, col_timestamp AS c3  FROM t1  WHERE col_time_not_null   NOT BETWEEN EXTRACT(YEAR_MONTH FROM '0000-00-00 00:00:00')   AND COALESCE (col_time_6_not_null_key, col_datetime_key) ORDER BY 1, 2;
SELECT col_timestamp_3 AS c1, col_date AS c2, CURTIME() AS c3 FROM t1 WHERE col_time_3_not_null NOT IN   (col_time_not_null,    CAST(col_time_5 AS DATETIME(3)),    MAKEDATE(DAYOFMONTH('2002-09-13'), DATEDIFF('2009-12-15', col_timestamp_6)),    CURRENT_DATE()) AND   col_time_3_key NOT   BETWEEN LEAST(CURRENT_TIME(), TIMESTAMPADD(HOUR, 187, MAKETIME(209, 60, 1)))   AND CURTIME() AND col_datetime_2_not_null NOT IN   (DATE('2009-03-28'), col_timestamp_2_not_null_key,    ADDDATE(col_timestamp_2_key, 28),    col_datetime_3,    UTC_DATE()) OR col_time_6_key IS NOT NULL AND col_timestamp_3_not_null IN   (col_timestamp_1, col_datetime_3_key, col_time_4_key) OR col_time_6_not_null_key   BETWEEN TIMESTAMP('0000-00-00', '16:50:23.062015')   AND col_datetime_5 AND col_datetime_4 >= col_time_2_key AND col_time_5_not_null   BETWEEN col_timestamp_3_not_null   AND col_datetime_1_not_null_key ORDER BY col_time_4_key, col_datetime_3_key;
SELECT col_timestamp_not_null AS c1, col_datetime_6_not_null_key AS c2  FROM t1  WHERE col_timestamp IS NOT NULL AND col_timestamp_2 <> col_time_1_not_null AND col_timestamp_key BETWEEN col_datetime_3_not_null AND CURRENT_TIME() OR col_time_6_not_null != LEAST(col_time_6, UTC_TIME());
SELECT col_datetime_5_not_null AS c1, col_time_1_not_null_key AS c2  FROM t1  WHERE   col_time_4_not_null = MAKETIME(24, 60, 3 ) AND   col_time_3 NOT IN (     col_datetime_5,     UTC_DATE(),     col_timestamp_5_key,      ADDDATE('0000-00-00 00:00:00',             DATEDIFF('2001-09-21',FROM_UNIXTIME(1018888192,                                                 CONCAT_WS('-','%s','%V','%u')))),     col_timestamp_4) AND   col_timestamp_2 NOT BETWEEN col_datetime AND '2005-09-12'  ORDER BY 1;
SELECT col_datetime_5_not_null AS c1, col_time_1_not_null_key AS c2  FROM t1  WHERE col_time_4_not_null=MAKETIME(24,60, 3) AND col_time_3 NOT IN   (col_datetime_5, UTC_DATE(), col_timestamp_5_key,  col_timestamp_4) AND   col_timestamp_2 NOT BETWEEN col_datetime AND '2005-09-12'  ORDER BY 1;
SELECT UNIX_TIMESTAMP(col_datetime_4_not_null) AS c1 FROM t1 WHERE col_time_4_key NOT   BETWEEN '2001-07-06'   AND LEAST(FROM_DAYS(col_timestamp_key), col_timestamp_5) OR CONVERT_TZ(MAKETIME(24, 5, 7), 'Japan', 'Japan') IS NULL OR CURRENT_TIMESTAMP() IS NOT NULL OR col_datetime_not_null_key >= UTC_TIME() ORDER BY 1 ;
SELECT SUBTIME(col_timestamp_3_not_null_key , SYSDATE()) AS c1 FROM t1  WHERE col_timestamp_1_not_null_key NOT IN  (col_datetime_4_key , GREATEST(DATE('2006-04-26'), UTC_DATE())) ORDER BY col_datetime_6 , col_time_2_not_null_key , col_time_5_not_null_key;
SELECT   col_timestamp_6_not_null_key AS c1,   col_datetime_key AS c2,   UTC_DATE() AS c3  FROM t1 WHERE col_time_1_key BETWEEN   TIMESTAMPADD(MONTH, 38 ,CONVERT_TZ( DATE(MAKEDATE(207, 38 )), '+00:00','+04:00'))   AND LOCALTIMESTAMP() ORDER BY col_datetime_4_not_null_key , col_time_5 , col_time_3_not_null;
SELECT EXTRACT(MINUTE_MICROSECOND FROM a) FROM t1;
SELECT EXTRACT(MINUTE_MICROSECOND FROM '0000-00-00 00:00:00.000000');
SELECT   EXTRACT(DAY FROM (-0.1111111111)),   EXTRACT(YEAR FROM (-0.1111111)),   EXTRACT(YEAR_MONTH FROM (-0.1111111111)),   EXTRACT(DAY FROM (-0.1111111)),   EXTRACT(QUARTER FROM (-0.1111111111)),   EXTRACT(MONTH FROM (-0.1111111)),   EXTRACT(WEEK FROM (-0.1111111)),   DATE(-0.1111111),   QUARTER(-0.1111111111),   TIMESTAMP(-0.1111111111),   LAST_DAY(-0.1111111111),   DAY(-0.1111111111),   MONTH(-0.1111111111),   YEAR(-0.1111111),   DAYOFMONTH(-0.1111111111),   TIMESTAMP((-0.1111111111),'{$x'),   DATE_FORMAT(-0.1111111111,'+'),   CONVERT(-0.1111111,DATE),   CAST(-0.1111111111 AS DATE);
do date_add(utc_time(), interval(oct(-11779)) microsecond);
SELECT current_date IN ( MAX(NULL), 1 );
SELECT current_time IN ( MAX(NULL), 1 );
backup table t1 to 'data.txt';
restore table t1 from 'data.txt';
show plugin;
load table t1 from master;
load data from master;
SHOW INNODB STATUS;
create table t1 (t6 timestamp) type=myisam;
show table types;
show mutex status;
show create database mysqltest2 ;
show create database mysqltest2 ;
show create database mysqltest2 ;
load data infile 'tmp1.txt' into table t1 character set binary;
remove_file $MYSQLD_DATADIR/test/tmp1.txt;
RENAME TABLE testdb.t1 TO testdb.t1_renamed;
CREATE USER u1@120.0.0.1;
GRANT INSERT,UPDATE,DELETE ON mysql.* to u1@120.0.0.1;
CREATE USER u3@120.0.0.1;
GRANT SELECT ON mysql.user to u3@120.0.0.1;
DROP USER u1@localhost,u3@120.0.0.1,u1@120.0.0.1,u2;
DROP USER u1@120.0.0.1,u2;
CREATE USER u1@120.0.0.1;
GRANT INSERT,UPDATE,DELETE ON mysql.* to u1@120.0.0.1;
CREATE USER u3@120.0.0.1;
GRANT SELECT ON mysql.user to u3@120.0.0.1;
DROP USER u1@localhost,u3@120.0.0.1,u1@120.0.0.1,u2;
DROP USER u1@localhost,u3@120.0.0.1;
CREATE DEFINER = u1@localhost PROCEDURE p1() BEGIN   SET @A= 20;
RETURN (SELECT COUNT(*) FROM t1);
END ;| CREATE DEFINER = u1@localhost FUNCTION f2() RETURNS int BEGIN   DECLARE n int;
DECLARE m int;
SET n:= (SELECT min(a) FROM t1);
SET m:= (SELECT max(a) FROM t1);
RETURN n < m;
END ;| CREATE DEFINER = u1@localhost PROCEDURE p2(x int)   INSERT INTO t1 VALUES (x) ;| DELIMITER ;| DROP DATABASE db1_extended;
create procedure select_general_log() begin   select user_host, argument from mysql.general_log   where argument like '%events_logs_test%'; end|
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disconnect con1;
disconnect con2;
cat_file $MYSQLD_DATADIR/test_string_service_long.log;
remove_file $MYSQLD_DATADIR/test_string_service_long.log;
select 1.1 IN (1.0, 1.2);
select 1.1 IN (1.0, 1.2, 1.1, 1.4, 0.5);
select 1.1 IN (1.0, 1.2, NULL, 1.4, 0.5);
select 0.5 IN (1.0, 1.2, NULL, 1.4, 0.5);
select 1 IN (1.11, 1.2, 1.1, 1.4, 1, 0.5);
select 1 IN (1.11, 1.2, 1.1, 1.4, NULL, 0.5);
select 0.1 in (1.0, 1.2, 1.1, a, 1.4, 0.5) from t1;
create procedure wg2() begin   declare v int default 1;   declare tdec decimal(5) default 0;   while v <= 9 do set tdec =tdec * 10;     select v, tdec;     set v = v + 1;   end while; end//
call wg2()//
while ($max_power) {                            my_double = 1.175494345e-$max_power,                            my_varchar = '1.175494345e-$max_power';
dec $max_power;
} SELECT my_float, my_double, my_varchar FROM t1;
999999999999999999999999999999999999999999999999999999999999999999999999999999999;
interval ((SELECT date_add((0x77500000),                                                  interval ('Oml') second)))                      day_minute) AS foo;
CREATE TABLE t1 SELECT   /* 81 */ 100000000000000000000000000000000000000000000000000000000000000000000000000000001.   AS c1;
SET @decimal= 1.1;
CREATE TABLE t1 SELECT @decimal AS c1;
CREATE PROCEDURE test_proc() BEGIN   DECLARE mycursor CURSOR FOR  SELECT 1 %  .123456789123456789123456789123456789123456789123456789123456789123456789123456789    AS my_col;   OPEN mycursor;   CLOSE mycursor; END|
PREPARE stmt FROM 'SELECT * FROM t1 WHERE value = ?';
EXECUTE stmt using @a;
EXECUTE stmt using @a;
DEALLOCATE PREPARE stmt;
do 1 div nullif(min(from_days(1)),_utf8mb4'2000-01-01');
SET @d:=' ';
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @save_storage_engine= @@session.default_storage_engine;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
query_vertical SELECT   CAST('2001-01-01 10:10:10.9999994' AS DATETIME) AS c1,   CAST('2001-01-01 10:10:10.9999995' AS DATETIME) AS c2,   CAST('2001-01-01 10:10:10.9999994' AS DATETIME(6)) AS c3,   CAST('2001-01-01 10:10:10.9999995' AS DATETIME(6)) AS c4,   CAST(20010101101010.9999994 AS DATETIME) AS c5,   CAST(20010101101010.9999995 AS DATETIME) AS c6,   CAST(20010101101010.9999994 AS DATETIME(6)) AS c7,   CAST(20010101101010.9999995 AS DATETIME(6)) AS c8;
query_vertical SELECT   EXTRACT(MICROSECOND FROM '2001-01-01 00:00:00.9999994') AS c1,   EXTRACT(MICROSECOND FROM '2001-01-01 00:00:00.9999995') AS c2,   EXTRACT(MICROSECOND FROM 20010101000000.9999994) AS c3,   EXTRACT(MICROSECOND FROM 20010101000000.9999995) AS c4;
CREATE  VIEW v1 AS SELECT   GROUPING(`߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789`.a),   GROUPING(`߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789`.a),   GROUPING(`߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789`.a) FROM t1 AS `߸߸߸߸߸߸߸߸߸߸0123456789012345678901234567890123456789` GROUP BY a WITH ROLLUP;
CREATE VIEW v1 AS SELECT   GROUPING(a2345678901234567890123456789012345678901234.a),   GROUPING(a2345678901234567890123456789012345678901234.a),   GROUPING(a2345678901234567890123456789012345678901234.a) FROM t1 AS a2345678901234567890123456789012345678901234 GROUP BY a WITH ROLLUP;
CREATE VIEW v2 AS SELECT   GROUPING(a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx.a),   GROUPING(a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx.a),   GROUPING(a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx.a) FROM t1 AS a2345678901234567890123456789012345678901234xxxxxxxxxxxxxxxx GROUP BY a WITH ROLLUP;
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
load data infile '../../std_data/words.dat' into table t1;
load data infile '../../std_data/words.dat' into table t1;
load data infile '../../std_data/words.dat' into table t1;
load data infile '../../std_data/words.dat' into table t1;
load data infile '../../std_data/words.dat' into table t1;
insert into t5 select * from `äöüÄÖÜ` flush logs;
create procedure p1() begin select 1; end; //
load data infile '../../std_data/loaddata6.dat' into table t1 CHARACTER SET latin1;
load data infile '../../std_data/loaddata6.dat' into table t1;
load data infile '../../std_data/loaddata6.dat' into table t1;
load data infile '../../std_data/loaddata6.dat' into table t1;
load data infile '../../std_data/loaddata6.dat' into table t1;
load data infile '../../std_data/loaddata6.dat' into table t1;
load data infile '../../std_data/loaddata6.dat' into table t1 character set koi8r;
INTO TABLE patch FIELDS TERMINATED BY '' LINES STARTING BY '#';
connect (con1, localhost, root, , test);
disconnect con1;
echo shell> mysqlbinlog std_data/corrupt-relay-bin.000624 > var/tmp/bug31793.sql;
error 1;
exec $MYSQL_BINLOG $MYSQL_TEST_DIR/std_data/corrupt-relay-bin.000624 > $MYSQLTEST_VARDIR/tmp/bug31793.sql;
SHOW GRANTS FOR untrusted@localhost;
echo mysqlbinlog var/log/master_binlog_file > var/tmp/bug31611.sql;
exec $MYSQL_BINLOG $MYSQLD_DATADIR/$master_binlog_file > $MYSQLTEST_VARDIR/tmp/bug31611.sql;
connect (unsecure,localhost,untrusted,,mysqltest1);
echo mysql mysqltest1 -uuntrusted < var/tmp/bug31611.sql;
error 1;
exec $MYSQL mysqltest1 -uuntrusted < $MYSQLTEST_VARDIR/tmp/bug31611.sql;
error ER_TABLEACCESS_DENIED_ERROR;
query_vertical SELECT * FROM t1;
echo >> mysqlbinlog var/log/master_binlog_file > var/tmp/bug32580.sql;
exec $MYSQL_BINLOG $MYSQLD_DATADIR/$master_binlog_file > $MYSQLTEST_VARDIR/tmp/bug32580.sql;
echo >> mysql test < var/tmp/bug32580.sql;
exec $MYSQL test < $MYSQLTEST_VARDIR/tmp/bug32580.sql;
remove_file $MYSQLTEST_VARDIR/tmp/bug32580.sql;
query_vertical SELECT * FROM t1;
(@a:=LOAD_FILE("$binlog_file")) IS NOT NULL AS Loaded;
echo *** Unsigned server_id $s_id_max is found: $s_id_unsigned ***;
disable_query_log;
enable_query_log;
write_file $MYSQLTEST_VARDIR/tmp/mysqlbinlog.warn.empty;
diff_files $MYSQLTEST_VARDIR/tmp/mysqlbinlog.warn $MYSQLTEST_VARDIR/tmp/mysqlbinlog.warn.empty;
remove_file $MYSQLTEST_VARDIR/tmp/mysqlbinlog.warn.empty;
remove_file $MYSQLTEST_VARDIR/tmp/mysqlbinlog.warn;
exec $MYSQL_BINLOG $MYSQLD_DATADIR/$master_binlog | $MYSQL test 2>&1;
source include/show_binlog_events.inc;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
drop procedure if exists p1|
drop procedure if exists p2|
create procedure p1() begin   prepare stmt from "select 1";   execute stmt;   execute stmt;   execute stmt;   deallocate prepare stmt; end|
call p1()|
call p1()|
call p1()|
drop procedure p1|
create procedure p1() begin   execute stmt; end|
prepare stmt from "call p1()"|
set @SAVE_SP_RECURSION_LEVELS=@@max_sp_recursion_depth|
set @@max_sp_recursion_depth=100|
execute stmt|
execute stmt|
execute stmt|
call p1()|
call p1()|
call p1()|
set @@max_sp_recursion_depth=@SAVE_SP_RECURSION_LEVELS|
call p1()|
call p1()|
call p1()|
drop procedure p1|
create procedure p1() begin   prepare stmt from "create procedure p2() begin select 1; end";   execute stmt;   deallocate prepare stmt; end|
call p1()|
call p1()|
drop procedure p1|
create procedure p1() begin   prepare stmt from "drop procedure p2";   execute stmt;   deallocate prepare stmt; end|
call p1()|
call p1()|
drop procedure p1|
create procedure p1() begin   prepare stmt_drop from "drop table if exists t1";   execute stmt_drop;   prepare stmt from "create table t1 (a int)";   execute stmt;   insert into t1 (a) values (1);   select * from t1;   prepare stmt_alter from "alter table t1 add (b int)";   execute stmt_alter;   insert into t1 (a,b) values (2,1);   deallocate prepare stmt_alter;   deallocate prepare stmt;   deallocate prepare stmt_drop; end|
call p1()|
call p1()|
drop procedure p1|
create procedure p1() begin   set @tab_name=concat("tab_", replace(curdate(), '-', '_'));   set @drop_sql=concat("drop table if exists ", @tab_name);   set @create_sql=concat("create table ", @tab_name, " (a int)");   set @insert_sql=concat("insert into ", @tab_name, " values (1), (2), (3)");   set @select_sql=concat("select * from ", @tab_name);    select @tab_name;   select @drop_sql;   select @create_sql;   select @insert_sql;   select @select_sql;   prepare stmt_drop from @drop_sql;   execute stmt_drop;   prepare stmt from @create_sql;   execute stmt;   prepare stmt from @insert_sql;   execute stmt;   prepare stmt from @select_sql;   execute stmt;   execute stmt_drop;   deallocate prepare stmt;   deallocate prepare stmt_drop; end|
call p1()|
call p1()|
drop procedure p1|
create procedure p1() begin   prepare stmt_drop from "drop table if exists t1";   execute stmt_drop;   prepare stmt from "create table t1 (a int)";   execute stmt;   deallocate prepare stmt;   deallocate prepare stmt_drop; end|
drop function if exists f1|
create function f1(a int) returns int begin   call p1();   return 1; end|
select f1(0)|
select f1(f1(0))|
select f1(f1(f1(0)))|
drop function f1|
drop procedure p1|
create procedure p1() begin   drop table if exists t1;   create table t1 (id integer not null primary key,                    name varchar(20) not null);   insert into t1 (id, name) values (1, 'aaa'), (2, 'bbb'), (3, 'ccc');   prepare stmt from "select name from t1";   execute stmt;   select name from t1;   execute stmt;   prepare stmt from     "select name from t1 where name=(select name from t1 where id=2)";   execute stmt;   select name from t1 where name=(select name from t1 where id=2);   execute stmt; end|
call p1()|
call p1()|
drop procedure p1|
prepare stmt from "select * from t1"|
create procedure p1() begin   execute stmt;   deallocate prepare stmt; end|
call p1()|
call p1()|
drop procedure p1|
SET sql_mode = 'NO_ENGINE_SUBSTITUTION'|
create procedure p1() begin   declare a char(10);   set a="sp-variable";   set @a="mysql-variable";   prepare stmt from "select 'dynamic sql:', @a, a";   execute stmt; end|
call p1()|
call p1()|
drop procedure p1|
SET sql_mode = default|
create procedure p1() begin   prepare stmt from 'select ? as a';   execute stmt using @a; end|
set @a=1|
call p1()|
call p1()|
drop procedure p1|
drop table if exists t1|
drop table if exists t2|
create table t1 (id integer primary key auto_increment,                  stmt_text char(35), status varchar(20))|
insert into t1 (stmt_text) values   ("select 1"), ("flush tables"), ("handler t1 open as ha"),    ("analyze table t1"), ("check table t1"), ("checksum table t1"),   ("check table t1"), ("optimize table t1"), ("repair table t1"),   ("describe extended select * from t1"),   ("help help"), ("show databases"), ("show tables"),   ("show table status"), ("show open tables"), ("show storage engines"),   ("insert into t1 (id) values (1)"), ("update t1 set status=''"),   ("delete from t1"), ("truncate t1"), ("call p1()"), ("foo bar"),   ("create view v1 as select 1"), ("alter view v1 as select 2"),   ("drop view v1"),("create table t2 (a int)"),("alter table t2 add (b int)"),   ("drop table t2")|
create procedure p1() begin   declare v_stmt_text varchar(255);   declare v_id integer;   declare done int default 0;   declare c cursor for select id, stmt_text from t1;   declare continue handler for 1295 -- ER_UNSUPPORTED_PS     set @status='not supported';   declare continue handler for 1064 -- ER_SYNTAX_ERROR     set @status='syntax error';   declare continue handler for sqlstate '02000' set done = 1;   prepare update_stmt from "update t1 set status=? where id=?";   open c;   repeat     if not done then       fetch c into v_id, v_stmt_text;       set @id=v_id, @stmt_text=v_stmt_text;       set @status="supported";       prepare stmt from @stmt_text;       execute update_stmt using @status, @id;     end if;   until done end repeat;   deallocate prepare update_stmt; end|
call p1()|
select * from t1|
drop procedure p1|
drop table t1|
prepare stmt from 'select 1'|  create procedure p1() execute stmt|
call p1()|
call p1()|
drop procedure p1|
create function f1() returns int begin   deallocate prepare stmt;   return 1; end|
create procedure p1() begin   prepare stmt from 'select 1 A';   execute stmt; end|
prepare stmt from 'call p1()'|
execute stmt|
execute stmt|
drop procedure p1|
drop table if exists t1, t2|
create procedure p1 (a int) language sql deterministic begin   declare rsql varchar(100);   drop table if exists t1, t2;   set @rsql= "create table t1 (a int)";   select @rsql;   prepare pst from @rsql;   execute pst;   set @rsql= null;   set @rsql= "create table t2 (a int)";   select @rsql;   prepare pst from @rsql;   execute pst;   drop table if exists t1, t2; end|
set @a:=0|
call p1(@a)|
select @a|
call p1(@a)|
select @a|
drop procedure if exists p1|
INFORMATION_SCHEMA.TABLES WHERE table_schema = \'test\', COUNT, 1] = 1;
INFORMATION_SCHEMA.TABLES WHERE table_schema = \'test\', COUNT, 1] = 1;
CREATE TABLE t1 (f1 INT) START TRANSACTION;
CREATE TABLE t1 (f1 INT) START TRANSACTION;
CREATE PROCEDURE proc1() BEGIN   CREATE TABLE t1 (f1 INT) START TRANSACTION;
CREATE TABLE t1 (f1 INT) START TRANSACTION;
END| DELIMITER ;| CALL proc1();
PREPARE stmt FROM "CREATE TABLE t1 (f1 INT) START TRANSACTION";
CREATE TABLE t1 (f1 INT) ENGINE=MyiSAM START TRANSACTION;
CREATE TABLE t1 (f1 INT) START TRANSACTION;
ALTER TABLE t2 ADD f2 INT, START TRANSACTION;
CREATE TEMPORARY TABLE t1 (f1 INT) START TRANSACTION;
CREATE TABLE t1 START TRANSACTION as SELECT * FROM t0;
create table t1 (a int not null,b int not null, primary key using HASH (a)) engine=heap comment="testing heaps" avg_row_length=100 min_rows=1 max_rows=100;
alter table t1 add c int not null, add key using HASH (c,a);
create table t1 (a int not null,b int not null, primary key using HASH (a)) engine=heap comment="testing heaps";
CREATE TABLE t1 ( a int not null default 0, b int not null default 0,  key  using HASH (a),  key  using HASH (b)  ) ENGINE=HEAP;
create table t1 (id int unsigned not null, primary key  using HASH (id)) engine=HEAP;
create table t1 (btn char(10) not null, key using HASH (btn)) charset utf8mb4 engine=heap;
alter table t1 add column new_col char(1) not null, add key using HASH (btn,new_col), drop key btn;
CREATE TABLE t1 (a int not null, primary key using HASH (a)) engine=heap;
CREATE TABLE t1 (    pk INT PRIMARY KEY,    val INT,    UNIQUE KEY USING HASH(val) ) ENGINE=MEMORY;
CREATE TABLE t1(   id INT AUTO_INCREMENT PRIMARY KEY,   c1 INT NOT NULL,   c2 INT NOT NULL,   UNIQUE KEY USING HASH (c2,c1)) ENGINE = MEMORY;
create procedure syntaxerror(t int)|
create procedure syntaxerror(t int)|
create procedure syntaxerror(t int)|
create table t3 ( x int )|
insert into t3 values (2), (3)|
create procedure bad_into(out param int)   select x from t3 into param|
call bad_into(@x)|
drop procedure bad_into|
drop table t3|
create procedure proc1()   set @x = 42|
create function func1() returns int   return 42|
create procedure foo()   create procedure bar() set @x=3|
create procedure foo()   create function bar() returns double return 2.3|
create procedure proc1()   set @x = 42|
create function func1() returns int   return 42|
drop procedure proc1|
drop function func1|
alter procedure foo|
alter function foo|
drop procedure foo|
drop function foo|
call foo()|
drop procedure if exists foo|
show create procedure foo|
show create function foo|
create procedure foo() foo: loop   leave bar; end loop|
create procedure foo() foo: loop   iterate bar; end loop|
create procedure foo() foo: begin   iterate foo; end|
create procedure foo() foo: loop   foo: loop     set @x=2;   end loop foo; end loop foo|
create procedure foo() foo: loop   set @x=2; end loop bar|
create procedure foo()   return 42|
create procedure p(x int)   set @x = x|
create function f(x int) returns int   return x+42|
call p()|
call p(1, 2)|
select f()|
select f(1, 2)|
drop procedure p|
drop function f|
create procedure p(val int, out res int) begin   declare x int default 0;   declare continue handler for foo set x = 1;   insert into test.t1 values (val);   if (x) then     set res = 0;   else     set res = 1;   end if; end|
create procedure p(val int, out res int) begin   declare x int default 0;   declare foo condition for 1146;   declare continue handler for bar set x = 1;   insert into test.t1 values (val);   if (x) then     set res = 0;   else     set res = 1;   end if; end|
create function f(val int) returns int begin   declare x int;   set x = val+3; end|
create function f(val int) returns int begin   declare x int;   set x = val+3;   if x < 4 then     return x;   end if; end|
select f(10)|
drop function f|
create procedure p() begin   declare c cursor for insert into test.t1 values ("foo", 42);   open c;   close c; end|
create procedure p() begin   declare x int;   declare c cursor for select * into x from test.t limit 1;   open c;   close c; end|
create procedure p() begin   declare c cursor for select * from test.t;   open cc;   close c; end|
create table t1 (val int)|
create procedure p() begin   declare c cursor for select * from test.t1;   open c;   open c;   close c; end|
call p()|
drop procedure p|
create procedure p() begin   declare c cursor for select * from test.t1;   open c;   close c;   close c; end|
call p()|
drop procedure p|
alter procedure bar3 sql security invoker|
drop table t1|
create table t1 (val int, x float)|
insert into t1 values (42, 3.1), (19, 1.2)|
create procedure p() begin   declare x int;   declare c cursor for select * from t1;   open c;   fetch c into x, y;   close c; end|
create procedure p() begin   declare x int;   declare c cursor for select * from t1;   open c;   fetch c into x;   close c; end|
call p()|
drop procedure p|
create procedure p() begin   declare x int;   declare y float;   declare z int;   declare c cursor for select * from t1;   open c;   fetch c into x, y, z;   close c; end|
call p()|
drop procedure p|
create procedure p(in x int, x char(10)) begin end|
create function p(x int, x char(10)) begin end|
create procedure p() begin   declare x float;   declare x int; end|
create procedure p() begin   declare c condition for 1064;   declare c condition for 1065; end|
create procedure p() begin   declare c cursor for select * from t1;   declare c cursor for select field from t1; end|
create procedure u()   use sptmp|
create procedure p() begin   declare c cursor for select * from t1;   declare x int; end|
create procedure p() begin   declare x int;   declare continue handler for sqlstate '42S99' set x = 1;   declare foo condition for sqlstate '42S99'; end|
create procedure p() begin   declare x int;   declare continue handler for sqlstate '42S99' set x = 1;   declare c cursor for select * from t1; end|
create procedure p(in x int, inout y int, out z int) begin   set y = x+y;   set z = x+y; end|
set @tmp_x = 42|
set @tmp_y = 3|
set @tmp_z = 0|
call p(@tmp_x, @tmp_y, @tmp_z)|
select @tmp_x, @tmp_y, @tmp_z|
call p(42, 43, @tmp_z)|
call p(42, @tmp_y, 43)|
drop procedure p|
create procedure p() begin end|
lock table t1 read|
call p()|
unlock tables|
drop procedure p|
create function f1(i int) returns int begin   insert into t1 (val) values (i);   return 0; end|
select val, f1(val) from t1|
select val, f1(val) from t1 as tab|
select * from t1|
update t1 set val= f1(val)|
select * from t1|
select f1(17)|
select * from t1|
delete from t1 where val= 17|
drop function f1|
create procedure bug1965() begin   declare c cursor for select val from t1 order by valname;   open c;   close c; end|
call bug1965()|
drop procedure bug1965|
select 1 into a|
create table t3 (column_1_0 int)|
create procedure bug1653()   update t3 set column_1 = 0|
call bug1653()|
drop table t3|
create table t3 (column_1 int)|
call bug1653()|
drop procedure bug1653|
drop table t3|
create procedure bug2259() begin   declare v1 int;   declare c1 cursor for select s1 from t1;   fetch c1 into v1; end|
call bug2259()|
drop procedure bug2259|
create procedure bug2272() begin   declare v int;   update t1 set v = 42; end|
insert into t1 values (666, 51.3)|
call bug2272()|
truncate table t1|
drop procedure bug2272|
create procedure bug2329_1() begin   declare v int;   insert into t1 (v) values (5); end|
create procedure bug2329_2() begin   declare v int;   replace t1 set v = 5; end|
call bug2329_1()|
call bug2329_2()|
drop procedure bug2329_1|
drop procedure bug2329_2|
create function bug3287() returns int begin   declare v int default null;   case     when v is not null then return 1;   end case;   return 2; end|
select bug3287()|
drop function bug3287|
create procedure bug3287(x int) case x when 0 then   insert into test.t1 values (x, 0.1); when 1 then   insert into test.t1 values (x, 1.1); end case|
call bug3287(2)|
drop procedure bug3287|
create table t3 (s1 int, primary key (s1))|
insert into t3 values (5),(6)|
create procedure bug3279(out y int)  begin   declare x int default 0;   begin     declare exit handler for sqlexception set x = x+1;     insert into t3 values (5);   end;   if x < 2 then     set x = x+1;     insert into t3 values (6);   end if;   set y = x; end|
set @x = 0|
call bug3279(@x)|
select @x|
drop procedure bug3279|
drop table t3|
create procedure nodb.bug3339() begin end|
create procedure bug2653_1(a int, out b int)   set b = aa|
create procedure bug2653_2(a int, out b int) begin   if aa < 0 then     set b = - a;   else     set b = a;   end if; end|
call bug2653_1(1, @b)|
call bug2653_2(2, @b)|
drop procedure bug2653_1|
drop procedure bug2653_2|
create procedure bug4344() drop procedure bug4344|
create procedure bug4344() drop function bug4344|
create procedure bug3294() begin   declare continue handler for sqlexception drop table t5;   drop table t5;   drop table t5; end|
create table t5 (x int)|
call bug3294()|
drop procedure bug3294|
drop procedure if exists bug8776_1|
drop procedure if exists bug8776_2|
drop procedure if exists bug8776_3|
drop procedure if exists bug8776_4|
create procedure bug8776_1() begin   declare continue handler for sqlstate '42S0200test' begin end;   begin end; end|
create procedure bug8776_2() begin   declare continue handler for sqlstate '4200' begin end;   begin end; end|
create procedure bug8776_3() begin   declare continue handler for sqlstate '420000' begin end;   begin end; end|
create procedure bug8776_4() begin   declare continue handler for sqlstate '42x00' begin end;   begin end; end|
create procedure bug6600()   check table t1|
create procedure bug6600()   lock table t1 read|
create procedure bug6600()   unlock table t1|
create procedure bug7299() begin   declare v int;   declare c cursor for select val from t1;   declare exit handler for sqlexception select 'Error!';    open c;   fetch c into v; end|
truncate table t1|
call bug7299()|
drop procedure bug7299|
create procedure bug9073() begin   declare continue handler for sqlexception select 1;   declare continue handler for sqlexception select 2; end|
create procedure bug9073() begin   declare condname1 condition for 1234;   declare continue handler for condname1 select 1;   declare exit handler for condname1 select 2; end|
create procedure bug9073() begin   declare condname1 condition for sqlstate '42000';   declare condname2 condition for sqlstate '42000';   declare exit handler for condname1 select 1;   declare continue handler for condname2 select 2; end|
create procedure bug9073() begin   declare condname1 condition for sqlstate '42000';   declare exit handler for condname1 select 1;   declare exit handler for sqlstate '42000' select 2; end|
create procedure bug9073() begin   declare condname1 condition for sqlstate '42000';   declare continue handler for condname1 select 1;   begin     declare exit handler for sqlstate '42000' select 2;     begin       declare continue handler for sqlstate '42000' select 3;     end;   end; end|
drop procedure bug9073|
create procedure bug7047()   alter procedure bug7047|
create function bug7047() returns int begin   alter function bug7047;   return 0; end|
create function bug8408() returns int begin   select * from t1;   return 0; end|
create function bug8408() returns int begin   show warnings;   return 0; end|
create function bug8408(a int) returns int begin   declare b int;   select b;   return b; end|
drop function if exists bug8408_f|
drop procedure if exists bug8408_p|
create function bug8408_f() returns int begin   call bug8408_p();   return 0; end|
create procedure bug8408_p()   select * from t1|
call bug8408_p()|
select bug8408_f()|
drop procedure bug8408_p|
drop function bug8408_f|
create function bug8408() returns int begin   declare n int default 0;   select count(*) into n from t1;   return n; end|
insert into t1 value (2, 2.7), (3, 3.14), (7, 7.0)|
select *,bug8408() from t1|
drop function bug8408|
truncate table t1|
create procedure bug10537()   load data local infile '/tmp/somefile' into table t1|
create function bug8409()   returns int begin   flush tables;   return 5; end|
create function bug8409() returns int begin reset master; return 1; end|
create function bug8409() returns int begin reset slave; return 1; end|
create function bug8409() returns int begin flush hosts; return 1; end|
create function bug8409() returns int begin flush privileges; return 1; end|
create function bug8409() returns int begin flush tables with read lock; return 1; end|
create function bug8409() returns int begin flush tables; return 1; end|
create function bug8409() returns int begin flush logs; return 1; end|
create function bug8409() returns int begin flush status; return 1; end|
create function bug8409() returns int begin flush user_resources; return 1; end|
create procedure bug9529_901234567890123456789012345678901234567890123456789012345() begin end|
create procedure bug17015_0123456789012345678901234567890123456789012345678901234() begin end|
show procedure status like 'bug17015%'|
drop procedure bug17015_0123456789012345678901234567890123456789012345678901234|
create procedure bug10969() begin   declare s1 int default 0;   select default(s1) from t30; end|
create procedure bug10969() begin   declare s1 int default 0;   select default(t30.s1) from t30; end|
drop procedure bug10969|
drop table t1|
CREATE PROCEDURE SP001() P1: BEGIN   DECLARE ENDTABLE INT DEFAULT 0;   DECLARE TEMP_NUM INT;   DECLARE TEMP_SUM INT;   DECLARE C1 CURSOR FOR SELECT F1 FROM t1;   DECLARE C2 CURSOR FOR SELECT F1 FROM t2;   DECLARE CONTINUE HANDLER FOR NOT FOUND SET ENDTABLE = 1;   SET ENDTABLE=0;   SET TEMP_SUM=0;   SET TEMP_NUM=0;   OPEN C1;   FETCH C1 INTO TEMP_NUM;   WHILE ENDTABLE = 0 DO           SET TEMP_SUM=TEMP_NUM+TEMP_SUM;           FETCH C1 INTO TEMP_NUM;   END WHILE;   SELECT TEMP_SUM;   CLOSE C1;   CLOSE C1;   SELECT 'end of proc'; END P1|
drop function if exists bug11394|
drop function if exists bug11394_1|
drop function if exists bug11394_2|
drop procedure if exists bug11394|
create function bug11394(i int) returns int begin   if i <= 0 then     return 0;   else     return (i in (100, 200, bug11394(i-1), 400));   end if; end|
select bug11394(2)|
drop function bug11394|
create function bug11394_1(i int) returns int begin   if i <= 0 then     return 0;   else     return (select bug11394_1(i-1));   end if; end|
select bug11394_1(2)|
drop function bug11394_1|
create function bug11394_2(i int) returns int return i|
select bug11394_2(bug11394_2(10))|
drop function bug11394_2|
create procedure bug11394(i int, j int) begin   if i > 0 then     call bug11394(i - 1,(select 1));   end if; end|
call bug11394(2, 1)|
set @@max_sp_recursion_depth=10|
call bug11394(2, 1)|
set @@max_sp_recursion_depth=default|
drop procedure bug11394|
CREATE PROCEDURE BUG_12490() HELP CONTENTS;
CREATE FUNCTION BUG_12490() RETURNS INT HELP CONTENTS;
CREATE TRIGGER BUG_12490 BEFORE UPDATE ON t_bug_12490 FOR EACH ROW HELP CONTENTS;
prepare stmt from "select bug11834_2()";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
CREATE FUNCTION bug12953() RETURNS INT BEGIN   OPTIMIZE TABLE t1;   RETURN 1; END|
CREATE FUNCTION bug12995() RETURNS INT BEGIN   HANDLER t1 OPEN;   RETURN 1; END|
CREATE FUNCTION bug12995() RETURNS INT BEGIN   HANDLER t1 READ FIRST;   RETURN 1; END|
CREATE FUNCTION bug12995() RETURNS INT BEGIN   HANDLER t1 CLOSE;   RETURN 1; END|
SELECT bug12995()|
create function bug12712()   returns int begin   call bug12712();   return 0; end|
set @x = bug12712()|
drop procedure bug12712|
drop function bug12712|
create function bug12712()     returns int begin   set session autocommit = 0;   return 0; end|
create function bug12712()     returns int begin   set @@autocommit = 0;   return 0; end|
create function bug12712()     returns int begin   set local autocommit = 0;   return 0; end|
create procedure bug9367() begin   declare v int;   declare c cursor for select s1 from t1;   open c;   show warnings;   fetch c into v;   select v; end|
drop procedure if exists bug13510_1|
drop procedure if exists bug13510_2|
drop procedure if exists bug13510_3|
drop procedure if exists bug13510_4|
create procedure bug13510_1() begin   declare password varchar(10);   set password = 'foo1';   select password; end|
set names='foo2'|
create procedure bug13510_2() begin   declare names varchar(10);   set names = 'foo2';   select names; end|
create procedure bug13510_3() begin   declare password varchar(10);   set `password` = 'foo3';   select password; end|
create procedure bug13510_4() begin   declare names varchar(10);   set `names` = 'foo4';   select names; end|
call bug13510_3()|
call bug13510_4()|
drop procedure bug13510_3|
drop procedure bug13510_4|
CREATE TABLE t1 (a int)|
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN DROP TRIGGER test1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN DROP TRIGGER test1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create table t2 (a int); END |
CREATE FUNCTION bug_13627_f() returns int BEGIN create table t2 (a int); return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create index t1_i on t1 (a); END |
CREATE FUNCTION bug_13627_f() returns int BEGIN create index t1_i on t1 (a); return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN alter table t1 add column  b int; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN alter table t1 add column  b int; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN rename table t1 to t2; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN rename table t1 to t2; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN truncate table t1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN truncate table t1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop table t1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN drop table t1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop index t1_i on t1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN drop index t1_i on t1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN unlock tables; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN unlock tables; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN LOCK TABLE t1 READ; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN LOCK TABLE t1 READ; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create database mysqltest; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN create database mysqltest; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop database mysqltest; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN drop database mysqltest; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create user 'mysqltest_1'; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN create user 'mysqltest_1'; return 1; END |
CREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN grant select on t1 to 'mysqltest_1'; END |
CREATE FUNCTION bug21975() returns int BEGIN grant select on t1 to 'mysqltest_1'; return 1; END |
CREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN revoke select on t1 from 'mysqltest_1'; END |
CREATE FUNCTION bug21975() returns int BEGIN revoke select on t1 from 'mysqltest_1'; return 1; END |
CREATE TRIGGER bug21975 BEFORE INSERT ON t1 FOR EACH ROW BEGIN revoke all privileges on *.* from 'mysqltest_1'; END |
CREATE FUNCTION bug21975() returns int BEGIN revoke all privileges on *.* from 'mysqltest_1'; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop user 'mysqltest_1'; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN drop user 'mysqltest_1'; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN rename user 'mysqltest_2' to 'mysqltest_1'; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN rename user 'mysqltest_2' to 'mysqltest_1'; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create view v1 as select 1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN create view v1 as select 1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN alter view v1 as select 1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN alter view v1 as select 1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop view v1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN drop view v1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create trigger tr2 before insert on t1 for each row do select 1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN create trigger tr2 before insert on t1 for each row do select 1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN drop function bug_13627_f; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN drop function bug_13627_f; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN create function f2 () returns int return 1; END |
CREATE FUNCTION bug_13627_f() returns int BEGIN create function f2 () returns int return 1; return 1; END |
CREATE TRIGGER tr1 BEFORE INSERT ON t1 FOR EACH ROW   BEGIN     CREATE TEMPORARY TABLE t2 (a int);     DROP TEMPORARY TABLE t2;   END |
CREATE FUNCTION bug_13627_f() returns int   BEGIN     CREATE TEMPORARY TABLE t2 (a int);     DROP TEMPORARY TABLE t2;     return 1;   END |
drop table t1|
drop function bug_13627_f|
prepare stmt1 from 'select bug12329()';
execute stmt1;
execute stmt1;
deallocate prepare stmt1;
create procedure p1(out param1 int) begin   select count(*) into param1 from t3; end|
CREATE PROCEDURE bug13037_p1() BEGIN   IF bug13037_foo THEN     SELECT 1;   END IF; END|
CREATE PROCEDURE bug13037_p2() BEGIN   SET @bug13037_foo = bug13037_bar; END|
CREATE PROCEDURE bug13037_p3() BEGIN   SELECT bug13037_foo; END|
CREATE FUNCTION bug13012() RETURNS INT BEGIN   REPAIR TABLE t1;   RETURN 1; END|
create table t1 (a int)|
CREATE PROCEDURE bug13012_1() REPAIR TABLE t1|
CREATE FUNCTION bug13012_2() RETURNS INT BEGIN   CALL bug13012_1();   RETURN 1; END|
SELECT bug13012_2()|
drop table t1|
drop procedure bug13012_1|
drop function bug13012_2|
create trigger t1_ai after insert on t1 for each row set @a:=bug11555_1();
create procedure ``() select 1;
create procedure ``.bug15658() select 1;
create function bug14270() returns int begin   load index into cache t1;   return 1; end|
create function bug14270() returns int begin   cache index t1 key (`primary`) in keycache1;   return 1; end|
create procedure bug15091() begin   declare selectstr varchar(6000) default ' ';   declare conditionstr varchar(5000)  default '';   set selectstr = concat(selectstr,                          ' and ',                          c.operatorid,                          'in (',conditionstr, ')'); end|
create aggregate function bug16896() returns int return 1;
CREATE IF NOT EXISTS PROCEDURE bug14702() BEGIN END;
CREATE PROCEDURE IF NOT EXISTS bug14702() BEGIN END;
CREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 INTO @a;
CREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 INTO DUMPFILE "file";
CREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 INTO OUTFILE "file";
CREATE PROCEDURE bug20953() CREATE VIEW v AS SELECT 1 FROM (SELECT 1) AS d1;
CREATE PROCEDURE bug20953(i INT) CREATE VIEW v AS SELECT i;
CREATE PROCEDURE bug20953() BEGIN   DECLARE i INT;   CREATE VIEW v AS SELECT i; END |
PREPARE stmt FROM "CREATE VIEW v AS SELECT ?";
CREATE FUNCTION bug18914_f1() RETURNS INT BEGIN   CALL bug18914_p1();   RETURN 1; END |
CREATE FUNCTION bug18914_f2() RETURNS INT BEGIN   CALL bug18914_p2();   RETURN 1; END |
create function func_20713_a() returns int(11) begin   declare id int;   declare continue handler for sqlexception set id=null;   set @in_func := 1;   set id = (select id from bogus_table_20713 where id = 3);   set @in_func := 2;   return id; end//
create function func_20713_b() returns int(11) begin   declare id int;   declare continue handler for sqlstate value '42S02' set id=null;   set @in_func := 1;   set id = (select id from bogus_table_20713 where id = 3);   set @in_func := 2;   return id; end//
set @in_func := 0;
set @in_func := 0;
set @in_func := 0;
set @in_func := 0;
create procedure proc_25345() begin   declare c1 cursor for select a from table_25345_a;   declare c2 cursor for select b from table_25345_b;   select 1 as result; end ||
create function func_25345() returns int(11) begin   call proc_25345();   return 1; end ||
create function func_25345_b() returns int(11) begin   declare c1 cursor for select a from table_25345_a;   declare c2 cursor for select b from table_25345_b;   return 1; end ||
create procedure proc_26503_error_1() begin retry:   repeat     begin       declare continue handler for sqlexception       begin         iterate retry;       end       select "do something";     end   until true end repeat retry; end//
create procedure proc_26503_error_2() begin retry:   repeat     begin       declare continue handler for sqlexception         iterate retry;       select "do something";     end   until true end repeat retry; end//
create procedure proc_26503_error_3() begin retry:   repeat     begin       declare continue handler for sqlexception       begin         leave retry;       end       select "do something";     end   until true end repeat retry; end//
create procedure proc_26503_error_4() begin retry:   repeat     begin       declare continue handler for sqlexception         leave retry;       select "do something";     end   until true end repeat retry; end//
CREATE PROCEDURE p1() BEGIN   DECLARE c char(100);
DECLARE cur1 CURSOR FOR SHOW TABLES;
OPEN cur1;
FETCH cur1 INTO c;
CLOSE cur1;
END| CREATE DATABASE mysqltest;
SELECT inexistent(), 1 + ,;
SELECT .inexistent();
SELECT ..inexistent();
create function f1() returns int begin  set password = 'foo';   return 1; end|
create trigger t1   before insert on t2 for each row set password = 'foo';|
create function f1() returns int begin  drop temporary table t1;  return 1; end|
create function f2() returns int begin  create temporary table t2 as select f1();  return 1; end|
create function f1() returns int begin  drop temporary table t2,t1;  return 1; end|
create function f2() returns int begin  create temporary table t2 as select f1();  return 1; end|
create function f2() returns int begin  drop temporary table t2;  return 1; end|
create procedure proc_33983_a() begin   label1:     begin       label2:       begin         select 1;       end label1;     end; end|
create procedure proc_33983_b() begin   label1:     repeat       label2:       repeat         select 1;       until FALSE end repeat label1;     until FALSE end repeat; end|
create procedure proc_33983_c() begin   label1:     while TRUE do       label2:       while TRUE do         select 1;       end while label1;     end while; end|
create procedure proc_33983_d() begin   label1:     loop       label2:       loop         select 1;       end loop label1;     end loop; end|
CREATE TABLE t1 (a INT)|
INSERT INTO t1 VALUES (1),(2)|
CREATE PROCEDURE p1(a INT) BEGIN END|
CALL p1((SELECT * FROM t1))|
DROP PROCEDURE IF EXISTS p1|
DROP TABLE t1|
create procedure p1() begin   create table t1 (a int);   drop table t1; end|
create procedure proc_8759() begin   declare should_be_illegal condition for sqlstate '00000';   declare continue handler for should_be_illegal set @x=0; end$$
create procedure proc_8759() begin   declare continue handler for sqlstate '00000' set @x=0; end$$
create procedure proc_36510() begin   declare should_be_illegal condition for sqlstate '00123';   declare continue handler for should_be_illegal set @x=0; end$$
create procedure proc_36510() begin   declare continue handler for sqlstate '00123' set @x=0; end$$
create procedure proc_36510() begin   declare should_be_illegal condition for 0;   declare continue handler for should_be_illegal set @x=0; end$$
create procedure proc_36510() begin   declare continue handler for 0 set @x=0; end$$
create procedure p1(a int) begin   declare continue handler for 1436 -- ER_STACK_OVERRUN_NEED_MORE     select 'exception';   call p1(a+1); end|
CREATE FUNCTION func_1 () RETURNS INTEGER BEGIN   INSERT INTO t1 SELECT * FROM t1 ;   RETURN 1 ; END|
SELECT very_long_db_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999.simple_func();
CALL very_long_db_name_1111111111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222225555555555555555555555555577777777777777777777777777777777777777777777777777777777777777777777777788888888999999999999999999999.simple_proc();
SELECT db_name.very_long_fn_name_111111111111111111111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999999999999999999();
CALL db_name.very_long_pr_name_111111111111111111111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999999999999999999();
CREATE PROCEDURE p1()   BEGIN     SELECT CAST('10x' as unsigned integer);     SELECT 1;     CALL p2();   END|
CREATE PROCEDURE p2()   BEGIN     SELECT CAST('10x' as unsigned integer);   END|
CREATE PROCEDURE p1()   BEGIN     DECLARE c INT DEFAULT 0;     DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       SET c = c + 1;       SELECT 'Warning caught!' AS Msg;     END;     CALL p2(); # 1 warning     CALL p3(); # 1 warning     CALL p4(); # No warnings     CALL p5(); # 1 warning     SELECT c;     SELECT @@warning_count;     SHOW WARNINGS;   END|
CREATE PROCEDURE p2()   BEGIN     SELECT CAST('2x' as unsigned integer);   END| # 1 warning is passed to the caller CREATE PROCEDURE p3()   BEGIN     SELECT CAST('3x' as unsigned integer);     GET DIAGNOSTICS @n = NUMBER; # does not clear the warning   END| # 1 warning is passed to the caller CREATE PROCEDURE p4()   BEGIN     SELECT CAST('4x' as unsigned integer);     INSERT INTO t1 VALUES(1); # Clears the warning   END| # No warnings to pass CREATE PROCEDURE p5()   BEGIN     SELECT CAST('5x' as unsigned integer);     CALL p2();   END|
CREATE PROCEDURE p6()   BEGIN     SELECT CAST('6x' as unsigned integer);     SHOW WARNINGS;   END|
CREATE PROCEDURE p7()   BEGIN     DECLARE c INT DEFAULT 0;     DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       SET c = c + 1;       SELECT 'Warning caught!' AS Msg;     END;     CALL p6();     SELECT c;   END|
CREATE PROCEDURE p1() BEGIN   DECLARE c CURSOR FOR SELECT a FROM t1;   OPEN c;   BEGIN     DECLARE v1 INT;     DECLARE v2 INT;     DECLARE EXIT HANDLER FOR SQLEXCEPTION       SELECT "Error caught (expected)";     DECLARE EXIT HANDLER FOR NOT FOUND       SELECT "End of Result Set found!";     WHILE TRUE DO       FETCH c INTO v1, v2;     END WHILE;   END;   CLOSE c;   SELECT a INTO @foo FROM t1 LIMIT 1; # Clear warning stack END|
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'warning';   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'exception';   INSERT INTO t1 VALUES (CAST('10 ' AS SIGNED), NULL); END|
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   DECLARE EXIT HANDLER FOR SQLWARNING     SET NEW.a = 10;   SET NEW.a = 99999999999; END|
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'warning caught (expected)';   INSERT IGNORE INTO t1 VALUES (1); END|
CREATE PROCEDURE p2() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT 'error caught (unexpected)';   INSERT IGNORE INTO t1 VALUES (1); END|
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   INSERT INTO t2 VALUES(     CAST('111111X' AS SIGNED),     CAST('222222X' AS SIGNED),     NULL); END|
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'H2' AS HandlerId;   SIGNAL SQLSTATE '01000'; # Should be handled by H2. END|
CALL p1()|
CREATE PROCEDURE p2() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'H2' AS HandlerId;   BEGIN     SELECT 'B1' AS BlockId;     BEGIN       SELECT 'B2' AS BlockId;       BEGIN         SELECT 'B3' AS BlockId;         SIGNAL SQLSTATE '01000'; # Should be handled by H2.       END;     END;   END; END|
CALL p2()|
CREATE PROCEDURE p3() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'H2' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'     SELECT 'H3' AS HandlerId;   SIGNAL SQLSTATE '01000'; # Should be handled by H3. END|
CALL p3()|
CREATE PROCEDURE p4() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'     SELECT 'H2' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'H3' AS HandlerId;   SIGNAL SQLSTATE '01000'; # Should be handled by H2. END|
CALL p4()|
CREATE PROCEDURE p5() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'     SELECT 'H2' AS HandlerId;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLWARNING       SELECT 'H3' AS HandlerId;     SIGNAL SQLSTATE '01000'; # Should be handled by H3.   END; END|
CALL p5()|
CREATE PROCEDURE p6() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION   BEGIN     SELECT 'H1' AS HandlerId;     SIGNAL SQLSTATE 'HY000'; # Should *not* be handled by H1.   END;   SELECT 'S1' AS SignalId;   SIGNAL SQLSTATE 'HY000'; # Should be handled by H1. END|
CALL p6()|
CREATE PROCEDURE p7() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING   BEGIN     SELECT 'H1' AS HandlerId;     SIGNAL SQLSTATE '01000'; # Should *not* be handled by H1.   END;   SELECT 'S1' AS SignalId;   SIGNAL SQLSTATE '01000'; # Should be handled by H1. END|
CALL p7()|
CREATE PROCEDURE p8() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION   BEGIN     SELECT 'H2' AS HandlerId;     SIGNAL SQLSTATE '01000'; # Should *not* be handled by H1.   END;   SELECT 'S1' AS SignalId;   SIGNAL SQLSTATE 'HY000'; # Should be handled by H2. END|
CALL p8()|
CREATE PROCEDURE p9() BEGIN   DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'     SELECT 'Wrong:H1:1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'Wrong:H1:2' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION   BEGIN     DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'       SELECT 'Wrong:H2:1' AS HandlerId;     DECLARE CONTINUE HANDLER FOR SQLWARNING       SELECT 'Wrong:H2:2' AS HandlerId;     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     BEGIN       DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'         SELECT 'Wrong:H3:1' AS HandlerId;       DECLARE CONTINUE HANDLER FOR SQLWARNING         SELECT 'Wrong:H3:2' AS HandlerId;       DECLARE CONTINUE HANDLER FOR SQLEXCEPTION       BEGIN         DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'           SELECT 'Wrong:H4:1' AS HandlerId;         DECLARE CONTINUE HANDLER FOR SQLWARNING           SELECT 'Wrong:H4:2' AS HandlerId;         DECLARE CONTINUE HANDLER FOR SQLEXCEPTION         BEGIN           DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'             SELECT 'Wrong:H5:1' AS HandlerId;           DECLARE CONTINUE HANDLER FOR SQLWARNING             SELECT 'Wrong:H5:2' AS HandlerId;           DECLARE CONTINUE HANDLER FOR SQLEXCEPTION           BEGIN             DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'               SELECT 'Wrong:H6:1' AS HandlerId;             DECLARE CONTINUE HANDLER FOR SQLWARNING               SELECT 'Wrong:H6:2' AS HandlerId;             DECLARE CONTINUE HANDLER FOR SQLEXCEPTION             BEGIN               SELECT 'H2' AS HandlerId;               SIGNAL SQLSTATE '01000'; # Should *not* be handled by H1.             END;             SELECT 'S6' AS SignalId;             SIGNAL SQLSTATE 'HY000';           END;           SELECT 'S5' AS SignalId;           SIGNAL SQLSTATE 'HY000';         END;         SELECT 'S4' AS SignalId;         SIGNAL SQLSTATE 'HY000';       END;       SELECT 'S3' AS SignalId;       SIGNAL SQLSTATE 'HY000';     END;     SELECT 'S2' AS SignalId;     SIGNAL SQLSTATE 'HY000';   END;   SELECT 'S1' AS SignalId;   SIGNAL SQLSTATE 'HY000'; # Should be handled by H2. END|
CALL p9()|
CREATE PROCEDURE p10() BEGIN   DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'H2' AS HandlerId;   BEGIN     BEGIN       BEGIN         DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'           SELECT 'Wrong:H1:1' AS HandlerId;         DECLARE CONTINUE HANDLER FOR SQLWARNING           SELECT 'Wrong:H1:2' AS HandlerId;         DECLARE CONTINUE HANDLER FOR SQLEXCEPTION         BEGIN           DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'             SELECT 'Wrong:H2:1' AS HandlerId;           DECLARE CONTINUE HANDLER FOR SQLWARNING             SELECT 'Wrong:H2:2' AS HandlerId;           DECLARE CONTINUE HANDLER FOR SQLEXCEPTION           BEGIN             DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'               SELECT 'Wrong:H3:1' AS HandlerId;             DECLARE CONTINUE HANDLER FOR SQLWARNING               SELECT 'Wrong:H3:2' AS HandlerId;             DECLARE CONTINUE HANDLER FOR SQLEXCEPTION             BEGIN               DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'                 SELECT 'Wrong:H4:1' AS HandlerId;               DECLARE CONTINUE HANDLER FOR SQLWARNING                 SELECT 'Wrong:H4:2' AS HandlerId;               DECLARE CONTINUE HANDLER FOR SQLEXCEPTION               BEGIN                 DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'                   SELECT 'Wrong:H5:1' AS HandlerId;                 DECLARE CONTINUE HANDLER FOR SQLWARNING                   SELECT 'Wrong:H5:2' AS HandlerId;                 DECLARE CONTINUE HANDLER FOR SQLEXCEPTION                 BEGIN                   DECLARE CONTINUE HANDLER FOR SQLSTATE '01000'                     SELECT 'Wrong:H6:1' AS HandlerId;                   DECLARE CONTINUE HANDLER FOR SQLWARNING                     SELECT 'Wrong:H6:2' AS HandlerId;                   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION                   BEGIN                     SELECT 'H2' AS HandlerId;                     SIGNAL SQLSTATE '01000'; # Should be handled by H1.                   END;                   SELECT 'S6' AS SignalId;                   SIGNAL SQLSTATE 'HY000';                 END;                 SELECT 'S5' AS SignalId;                 SIGNAL SQLSTATE 'HY000';               END;               SELECT 'S4' AS SignalId;               SIGNAL SQLSTATE 'HY000';             END;             SELECT 'S3' AS SignalId;             SIGNAL SQLSTATE 'HY000';           END;           SELECT 'S2' AS SignalId;           SIGNAL SQLSTATE 'HY000';         END;         SELECT 'S1' AS SignalId;         SIGNAL SQLSTATE 'HY000'; # Should be handled by H2.       END;     END;   END; END|
CALL p10()|
CREATE PROCEDURE p11() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT 'H1' AS HandlerId;   DECLARE CONTINUE HANDLER FOR SQLWARNING     SELECT 'H2' AS HandlerId;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLSTATE '01000', 1249     BEGIN       DECLARE CONTINUE HANDLER FOR SQLEXCEPTION         SELECT 'H3' AS HandlerId;       DECLARE CONTINUE HANDLER FOR SQLWARNING         SELECT 'H4' AS HandlerId;       BEGIN         SELECT 'H5' AS HandlerId;         SELECT 'S3' AS SignalId;         SIGNAL SQLSTATE 'HY000'; # H3         SELECT 'S4' AS SignalId;         SIGNAL SQLSTATE '22003'; # H3         SELECT 'S5' AS SignalId;         SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1249; # H4       END;     END;     SELECT 'S6' AS SignalId;     SIGNAL SQLSTATE 'HY000'; # H1     SELECT 'S7' AS SignalId;     SIGNAL SQLSTATE '22003'; # H1     SELECT 'S8' AS SignalId;     SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1249; # H5   END;   SELECT 'S1' AS SignalId;   SIGNAL SQLSTATE 'HY000'; # H1   SELECT 'S2' AS SignalId;   SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1249; # H2 END|
CALL p11()|
CREATE PROCEDURE p12() BEGIN   DECLARE CONTINUE HANDLER FOR SQLSTATE '01001'   BEGIN     DECLARE CONTINUE HANDLER FOR SQLSTATE '01001'     BEGIN       DECLARE CONTINUE HANDLER FOR SQLSTATE '01001'       BEGIN         DECLARE CONTINUE HANDLER FOR SQLSTATE '01001'         BEGIN           DECLARE CONTINUE HANDLER FOR SQLSTATE '01001'           BEGIN             SELECT 'H1:5' AS HandlerId;             SIGNAL SQLSTATE '01002';           END;           SELECT 'H1:4' AS HandlerId;           SIGNAL SQLSTATE '01001';         END;         SELECT 'H1:3' AS HandlerId;         SIGNAL SQLSTATE '01001';       END;       SELECT 'H1:2' AS HandlerId;       SIGNAL SQLSTATE '01001';     END;     SELECT 'H1:1' AS HandlerId;     SIGNAL SQLSTATE '01001';   END;   DECLARE CONTINUE HANDLER FOR SQLSTATE '01002'     SELECT 'OK' AS Msg;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       DECLARE CONTINUE HANDLER FOR SQLWARNING       BEGIN         DECLARE CONTINUE HANDLER FOR SQLWARNING         BEGIN           DECLARE CONTINUE HANDLER FOR SQLWARNING           BEGIN             DECLARE CONTINUE HANDLER FOR SQLWARNING             BEGIN               SELECT 'H2:5' AS HandlerId;               SIGNAL SQLSTATE '01001';             END;             SELECT 'H2:4' AS HandlerId;             SIGNAL SQLSTATE '01000';           END;           SELECT 'H2:3' AS HandlerId;           SIGNAL SQLSTATE '01000';         END;         SELECT 'H2:2' AS HandlerId;         SIGNAL SQLSTATE '01000';       END;       SELECT 'H2:1' AS HandlerId;       SIGNAL SQLSTATE '01000';     END;     SELECT 'Throw 01000' AS Msg;     SIGNAL SQLSTATE '01000';   END; END|
CALL p12()|
CREATE PROCEDURE p13() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING   BEGIN     DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       DECLARE EXIT HANDLER FOR SQLWARNING       BEGIN         SELECT 'EXIT handler 3' AS Msg;       END;       SELECT 'CONTINUE handler 2: 1' AS Msg;       SIGNAL SQLSTATE '01000';       SELECT 'CONTINUE handler 2: 2' AS Msg;     END;     SELECT 'CONTINUE handler 1: 1' AS Msg;     SIGNAL SQLSTATE '01000';     SELECT 'CONTINUE handler 1: 2' AS Msg;   END;   SELECT 'Throw 01000' AS Msg;   SIGNAL SQLSTATE '01000'; END|
CALL p13()|
CREATE FUNCTION f1() RETURNS INT BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION               # handler 1   BEGIN     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION             # handler 2     BEGIN       INSERT INTO t1 VALUE('WRONG: Inside H2');       RETURN 2;     END;     INSERT INTO t1 VALUE('CORRECT: Inside H1');     RETURN 1;   END;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLWARNING               # handler 3     BEGIN       INSERT INTO t1 VALUE('WRONG: Inside H3');       RETURN 3;     END;     INSERT INTO t1 VALUE('CORRECT: Calling f1()');     RETURN f1(); # -- exception here   END;   INSERT INTO t1 VALUE('WRONG: Returning 10');   RETURN 10; END|
CREATE PROCEDURE p1() BEGIN   DECLARE EXIT HANDLER FOR SQLWARNING     SELECT 'Warning caught' AS msg;   INSERT INTO t1 VALUES('qqqq', 'ww', 'eee');   INSERT INTO t1 VALUES('zzz', 'xx', 'yyyy'); END|
CALL p1()|
SELECT * FROM t1|
CREATE PROCEDURE p2() BEGIN   DECLARE CONTINUE HANDLER FOR 1292     SELECT 'Warning 1292 caught' AS msg;   INSERT INTO t2   SELECT     CAST(CONCAT(CAST('1X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('2X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('3X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER); END|
CALL p2()|
CREATE PROCEDURE p3() BEGIN   DECLARE CONTINUE HANDLER FOR 1292     SELECT 'Warning 1292 caught' AS msg;   DECLARE CONTINUE HANDLER FOR 1264     SELECT 'Warning 1264 caught' AS msg;   INSERT INTO t2   SELECT     CAST(CONCAT(CAST('1X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('2X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('3X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER); END|
CALL p3()|
CREATE PROCEDURE p4() BEGIN   DECLARE CONTINUE HANDLER FOR 1292     SELECT 'Warning 1292 caught' AS msg;   DECLARE CONTINUE HANDLER FOR 1264     SELECT 'Warning 1264 caught' AS msg;   INSERT INTO t2   SELECT     CAST(999999 AS SIGNED INTEGER),     CAST(CONCAT(CAST('2X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('3X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER); END|
CALL p4()|
CREATE PROCEDURE p5() BEGIN   DECLARE EXIT HANDLER FOR 1292   BEGIN     SELECT 'Handler for 1292' AS Msg;     SIGNAL SQLSTATE '01000' SET MYSQL_ERRNO = 1234;     SHOW WARNINGS;   END;   INSERT INTO t2   SELECT     CAST(999999 AS SIGNED INTEGER),     CAST(CONCAT(CAST('2X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('3X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER); END|
CALL p5()|
CREATE PROCEDURE p6() BEGIN   DECLARE CONTINUE HANDLER FOR 1292   BEGIN     SHOW WARNINGS;     SELECT 'Handler for 1292' Msg;   END;   INSERT INTO t2   SELECT     CAST(CONCAT(CAST('1X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('2X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER),     CAST(CONCAT(CAST('3X' AS UNSIGNED INTEGER), '999999XX') AS SIGNED INTEGER); END|
CALL p6()|
CREATE PROCEDURE p1() BEGIN   DECLARE var1 INTEGER DEFAULT 'string';   DECLARE EXIT HANDLER FOR SQLWARNING SELECT 'H1'; END|
CALL p1()|
CREATE PROCEDURE p2() BEGIN   DECLARE EXIT HANDLER FOR SQLWARNING SELECT 'H2';   CALL p1(); END|
CALL p2()|
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'triggered p1';   SIGNAL SQLSTATE 'HY000'; END|
CREATE PROCEDURE p2() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'triggered p2';   SIGNAL SQLSTATE '01000'; END|
CREATE FUNCTION f1() RETURNS INTEGER BEGIN   DECLARE v VARCHAR(5) DEFAULT -1;   SELECT b FROM t1 WHERE a = 2 INTO v;   RETURN v; END|
CREATE FUNCTION f2() RETURNS INTEGER BEGIN   DECLARE v INTEGER;   DECLARE CONTINUE HANDLER FOR NOT FOUND     SET @msg = 'Handler activated.';   SELECT f1() INTO v;   RETURN v; END|
PREPARE s FROM 'SELECT a FROM t1 WHERE a=(SELECT MAX(a) FROM t1) AND (a="20060606155555")';
EXECUTE s;
DROP PREPARE s;
if (`SELECT CURTIME() > SEC_TO_TIME(24 * 3600 - 5)`) { } create table t1 (f1 date, f2 datetime, f3 timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
CREATE PROCEDURE test27759() BEGIN declare v_a date default '2007-4-10';
declare v_b date default '2007-4-11';
declare v_c datetime default '2004-4-9 0:0:0';
END;| DELIMITER ;| call test27759();
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} explain select * from t1 where id in (select id from t1 as x1 where (t1.cur_date is null));
PREPARE stmt1 FROM    'SELECT *    FROM t1 LEFT JOIN t1 AS t1_2 ON 1    WHERE t1_2.a IS NULL AND t1_2.b < 2';
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
do is_ipv4_mapped(bin(maketime(11111,exp(repeat('1',32)),'')));
do ifnull((bin_to_uuid(uuid_to_bin(date_format('7088-02-14'    ,0xabbd95)))),(maketime('4678-07-20 03:51:44.174847',1,'b')));
do ucase(insert(maketime(9.565398e+307 ,'',                          st_longfromgeohash(('4358-04-12 03:45:08.727399'))), 			 0xdc0823,6756,release_all_locks()));
do soundex(maketime(cast((2530967061762658367) as decimal),    exp(repeat('1',32)),((period_add(579349005,27636))xor (sha(current_user)))));
do st_mlinefromtext(  maketime(   now(),   instr(1,pow(15270551309908264860,100)),   31  ) );
connect (mqph, localhost, mysqltest_1,,);
connect (mqph2, localhost, mysqltest_1,,);
disconnect mqph;
disconnect mqph2;
connect (muph, localhost, mysqltest_1,,);
connect (muph2, localhost, mysqltest_1,,);
disconnect muph;
disconnect muph2;
connect (mcph1, localhost, mysqltest_1,,);
connect (mcph2, localhost, mysqltest_1,,);
connect (mcph3, localhost, mysqltest_1,,);
disconnect mcph1;
disconnect mcph2;
connect (mcph3, localhost, mysqltest_1,,);
connect (muc1, localhost, mysqltest_1,,);
connect (muc2, localhost, mysqltest_1,,);
connect (muc3, localhost, mysqltest_1,,);
disconnect muc1;
connect (muc3, localhost, mysqltest_1,,);
connect (muc4, localhost, mysqltest_1,,);
connect (muc5, localhost, mysqltest_1,,);
disconnect muc2;
disconnect muc3;
disconnect muc4;
connect (muca1, localhost, mysqltest_1,,);
connect (muca2, localhost, mysqltest_1,,);
connect (muca3, localhost, mysqltest_1,,);
connect (muca3, localhost, mysqltest_1,,);
connect (muca4, localhost, mysqltest_1,,);
disconnect muca1;
disconnect muca2;
disconnect muca3;
disable_query_log//
disable_result_log//
while ($i) {   error 0,ER_STACK_OVERRUN_NEED_MORE //
if ($mysql_errno)   {     if ($mysql_errname != ER_STACK_OVERRUN_NEED_MORE)     {       die Wrong error triggered, expected ER_STACK_OVERRUN_NEED_MORE but got $mysql_errname//
}   }   dec $i//
} enable_result_log//
enable_query_log//
echo Assertion: mysql_errname ER_STACK_OVERRUN_NEED_MORE == $mysql_errname//
select a,b from t1 into outfile 'skr' union select a,b from t2;
select a,b from t1 order by a union select a,b from t2;
insert into t3 select a from t1 order by a union select a from t2;
INSERT INTO t3 SELECT a FROM t1 LIMIT 1 UNION SELECT a FROM t2;
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1 UNION all SELECT * FROM t2 LIMIT 2;
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 100 UNION SELECT * FROM t2;
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1 UNION SELECT * FROM t2;
SELECT SQL_CALC_FOUND_ROWS * FROM t1 LIMIT 1 UNION SELECT * FROM t2 LIMIT 2;
SELECT SQL_CALC_FOUND_ROWS * FROM t1 limit 2,2 UNION SELECT * FROM t2;
insert into t1 values (repeat("1",200));
call mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* Changing innodb_extend_and_initialize not supported on this platform.");
call mtr.add_suppression("Failed to initialize TLS for channel: mysql_main");
while($var_id <= $count_vars) { } CREATE TABLE all_vars (id INT PRIMARY KEY AUTO_INCREMENT, var_name VARCHAR(64), var_value VARCHAR(1024));
while($var_id <= $count_vars) { } SET PERSIST innodb_monitor_enable="latch";
while ( $var_id <= $count_vars ) { } DROP TABLE all_vars;
send INSERT into my_db.t1 values(8) on duplicate key UPDATE id = values(id) + 80;
reap;
send INSERT into my_db.t1 values(6) on duplicate key UPDATE id = values(id) + 60;
reap;
disconnect foo_con;
disconnect bar_con;
lock tables t1 read,t2 write;
unlock tables;
select S.ID as xID, S.ID1 as xID1, repeat('*',count(distinct yS.ID)) as Level from t1 as S left join t1 as yS  on S.ID1 between yS.ID1 and yS.ID2 group by xID order by xID1;
insert into t2 select     x3.a,  -- 3    concat('val-', x3.a + 3*x4.a), -- 12    concat('val-', @a:=x3.a + 3*x4.a + 12*C.a), -- 120    concat('val-', @a + 120*D.a) from t1 x3, t1 x4, t1 C, t1 D where x3.a < 3 and x4.a < 4 and D.a < 4 order by x3.a, x4.a, C.a, D.a;
create table t1 (b int4 unsigned not null);
EXPLAIN SELECT a FROM t1 IGNORE INDEX (PRIMARY,i2);
EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR JOIN (PRIMARY,i2);
SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY,i2) ORDER BY a;
EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY)   IGNORE INDEX FOR GROUP BY (i2) GROUP BY a;
EXPLAIN SELECT a FROM t1 IGNORE INDEX (PRIMARY) IGNORE INDEX FOR ORDER BY (i2);
EXPLAIN SELECT a FROM t1 USE INDEX ();
EXPLAIN SELECT a FROM t1 USE INDEX () USE INDEX (i2);
EXPLAIN SELECT a FROM t1    FORCE INDEX (PRIMARY)    IGNORE INDEX FOR GROUP BY (i2)   IGNORE INDEX FOR ORDER BY (i2)   USE INDEX (i2);
EXPLAIN SELECT a FROM t1 USE INDEX (i2) USE INDEX ();
EXPLAIN SELECT a FROM t1 FORCE INDEX ();
EXPLAIN SELECT a FROM t1 IGNORE INDEX ();
EXPLAIN SELECT a FROM t1 USE INDEX FOR JOIN (i2)    USE INDEX FOR GROUP BY (i2) GROUP BY a;
EXPLAIN SELECT a FROM t1 FORCE INDEX FOR JOIN (i2)    FORCE INDEX FOR GROUP BY (i2) GROUP BY a;
EXPLAIN SELECT a FROM t1 USE INDEX () IGNORE INDEX (i2);
EXPLAIN SELECT a FROM t1 IGNORE INDEX (i2) USE INDEX ();
EXPLAIN SELECT a FROM t1    USE INDEX FOR GROUP BY (i2)    USE INDEX FOR ORDER BY (i2)   USE INDEX FOR JOIN (i2);
EXPLAIN SELECT a FROM t1    USE INDEX FOR JOIN (i2)    USE INDEX FOR JOIN (i2)    USE INDEX FOR JOIN (i2,i2);
EXPLAIN SELECT 1 FROM t1 WHERE a IN   (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2));
EXPLAIN SELECT 1 FROM t2 WHERE a IN   (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2));
INSERT INTO t1 VALUES (repeat('1', 1300),'one'), (repeat('1', 1300),'two');
query_vertical EXPLAIN  SELECT SUBSTRING(a,1,10), LENGTH(a), GROUP_CONCAT(b) FROM t1 GROUP BY a;
query_vertical EXPLAIN  SELECT SUBSTRING(a,1,10), LENGTH(a) FROM t1 GROUP BY a;
SELECT 1 FROM t1 GROUP BY TRIM(LEADING RAND() FROM '');
SELECT 1 FROM t1 GROUP BY SUBSTRING(SYSDATE() FROM 'K' FOR 'jxW<');
PREPARE stmt FROM ' SELECT 1 FROM t2 LEFT JOIN t1 ON NULL GROUP BY t2.b, t1.a HAVING a <> 2';
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
FLUSH TABLE t1;
FROM t1 GROUP BY field1, field2;
INSERT INTO B VALUES  ('at', repeat('a',1000), 'the', -1622540288, 'as', repeat('a',1000), 'want', 1810890752, NULL, 'v', 'just');
while ($i < 2) { INSERT INTO t VALUES ('1', 10), ('1', 11), ('2', 20), ('2', 20), ('3', 30);
} CREATE TABLE t1 (i INTEGER NOT NULL, j INTEGER NOT NULL, key(i,j));
CREATE FUNCTION f1(vlt_code_id CHAR(11)) RETURNS tinyint DETERMINISTIC BEGIN   DECLARE not_installed TINYINT DEFAULT 0;
select count(distinct x.id_aams)   into not_installed   from (select *         from (select t1.id_aams, t2.*               from t1 left join t2                    on t2.code_id = vlt_code_id and                       t1.id_aams = t2.id_game               where t1.id_aams = 1715000360               order by t2.id desc              ) as g         group by g.id_aams         having g.id is null        ) as x;
RETURN TRUE;
END // DELIMITER ;// SELECT f1('G0000000012');
PREPARE stmt from " select count(distinct x.id_aams) from (select g.id_aams, g.id       from (select t1.id_aams, t2.*             from t1 left join t2                  on t2.code_id='G0000000012' and                     t1.id_aams=t2.id_game             where t1.id_aams=1715000360             order by t2.id desc            ) as g       group by g.id_aams       having g.id is null      ) as x";
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SELECT COUNT(*) FROM   t1   LEFT JOIN json_table(     '{}','$[0][1]'     COLUMNS(a FOR ORDINALITY)   ) AS t2 ON TRUE GROUP BY e*from_unixtime(0);
PREPARE stmt from 'SELECT COUNT(*), SUM(c1), AVG(c1), MIN(c1), MAX(c1) FROM t1 WHERE c1 > ?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @a;
PREPARE stmt from 'SELECT BIT_AND(c1), BIT_OR(c1), BIT_XOR(c1) FROM t1 WHERE c1 > ?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @a;
PREPARE stmt from "SELECT GROUP_CONCAT(c1), JSON_ARRAYAGG(c1), JSON_OBJECTAGG('key', c1)  FROM t1  WHERE c1 > ?";
EXECUTE stmt USING @a;
EXECUTE stmt USING @a;
PREPARE stmt from 'SELECT STDDEV_POP(c1), STDDEV_SAMP(c1), VAR_POP(c1), VAR_SAMP(c1)  FROM t1  WHERE c1 > ?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @a;
CALL mtr.add_suppression("Enabling keys got errno");
CONNECT (insertConn, localhost, root,,);
while ($i) {   INSERT INTO t2 (id) SELECT id  FROM t2;    dec $i;  } CONNECTION insertConn;
SEND INSERT INTO t1(id) SELECT id  FROM t2;  CONNECTION default;
KILL QUERY @thread_id;
CONNECTION insertConn;
REAP;
DISCONNECT insertConn;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @save_storage_engine= @@session.default_storage_engine;
call mtr.add_suppression("Server SSL certificate doesn't verify");
CALL mtr.add_suppression("Column count of");
CALL mtr.add_suppression("Incorrect definition of table");
CALL mtr.add_suppression("Cannot load from");
CALL mtr.add_suppression("Storage engine 'MyISAM' does not");
RENAME TABLE mysql.func TO mysql.func_bkp;
RENAME TABLE mysql.func_bkp TO mysql.func;
RENAME TABLE mysql.plugin TO mysql.plugin_bkp;
RENAME TABLE mysql.plugin_bkp TO mysql.plugin;
RENAME TABLE mysql.servers TO mysql.servers_bkp;
RENAME TABLE mysql.servers_bkp TO mysql.servers;
RENAME TABLE mysql.user TO mysql.user_bkp;
RENAME TABLE mysql.user_bkp TO mysql.user;
RENAME TABLE mysql.columns_priv TO mysql.columns_priv_bkp;
RENAME TABLE mysql.columns_priv_bkp TO mysql.columns_priv;
RENAME TABLE mysql.tables_priv TO mysql.tables_priv_bkp;
RENAME TABLE mysql.tables_priv_bkp TO mysql.tables_priv;
RENAME TABLE mysql.procs_priv TO mysql.procs_priv_bkp;
RENAME TABLE mysql.procs_priv_bkp TO mysql.procs_priv;
RENAME TABLE mysql.proxies_priv TO mysql.proxies_priv_bkp;
GRANT PROXY ON 'user1'@'%' TO 'user2'@'%';
GRANT PROXY ON 'user1'@'%' TO 'user2'@'%';
RENAME TABLE mysql.proxies_priv_bkp TO mysql.proxies_priv;
RENAME TABLE mysql.component TO mysql.component_bkp;
RENAME TABLE mysql.component_bkp TO mysql.component;
RENAME TABLE mysql.db TO mysql.db_bkp;
RENAME TABLE mysql.db_bkp TO mysql.db;
RENAME TABLE mysql.default_roles TO mysql.default_roles_bkp;
RENAME TABLE mysql.default_roles_bkp TO mysql.default_roles;
RENAME TABLE mysql.global_grants TO mysql.global_grants_bkp;
RENAME TABLE mysql.global_grants_bkp TO mysql.global_grants;
RENAME TABLE mysql.role_edges TO mysql.role_edges_bkp;
RENAME TABLE mysql.role_edges_bkp TO mysql.role_edges;
RENAME TABLE mysql.password_history TO mysql.password_history_bkp;
RENAME TABLE mysql.password_history_bkp TO mysql.password_history;
connect(con2,localhost,bernt,secret,,);
disconnect con2;
CALL mtr.add_suppression("==[0-9]*== Warning: set address range perms: large range");
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set optimizer_switch=default;
SELECT ADDDATE('8112-06-20', REPEAT('1', 32));
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set @read_rnd_buffer_size_save= @@read_rnd_buffer_size;
if (!$LZ4_DECOMPRESS) {   if ($LZ4_STATUS) {   } } CREATE DATABASE bug21644479_lz4;
if ($LZ4_DECOMPRESS) { } if (!$LZ4_DECOMPRESS) { } DROP DATABASE bug21644479_lz4;
connect(con1,localhost,unknown_user,,*NO-ONE*);
connect(con2,localhost,unknown_user,,*NO-ONE*);
connect(con3,localhost,unknown_user,,*NO-ONE*);
connect(con4,localhost,unknown_user,,*NO-ONE*);
connect(con4,localhost,unknown_user,,*NO-ONE*);
connect(con5,localhost,unknown_user,,*NO-ONE*);
connect(con6,localhost,unknown_user,,*NO-ONE*);
connect(con6,localhost,unknown_user,,*NO-ONE*);
connect(con6,localhost,unknown_user,,*NO-ONE*);
connect(con6,localhost,unknown_user,,*NO-ONE*);
connect(con6,localhost,unknown_user,,*NO-ONE*);
SELECT @@global.dragnet.log_error_filter_rules;
SELECT @@global.dragnet.log_error_filter_rules;
connect(con6,localhost,unknown_user_filtered,,*NO-ONE*);
connect(con6,localhost,unknown_user_unfiltered,,*NO-ONE*);
create table t1 ( min_num   dec(6,6)     default .000001);
create table t1 ( min_num   dec(6,6)     default 0.000001);
create table t1 ( min_num   dec(6,6)     default .000001);
show local variables like 'SQL_MODE';
show local variables like 'SQL_MODE';
connect (user_32753,localhost,mysqltest_32753,,test,$MASTER_MYPORT,$MASTER_MYSOCK);
PREPARE insert_stmt FROM 'INSERT INTO test_table VALUES (?)';
PREPARE update_stmt FROM 'UPDATE test_table SET c1= ? WHERE c1= ?';
CREATE FUNCTION test_function(var CHAR(50)) RETURNS CHAR(50) BEGIN   DECLARE char_val CHAR(50);
SELECT c1 INTO char_val FROM test_table WHERE c1=var;
RETURN char_val;
END $ DELIMITER ;$ SET @var1='abcd\'ef';
EXECUTE insert_stmt USING @var1;
EXECUTE insert_stmt USING @var2;
EXECUTE insert_stmt USING @var3;
EXECUTE insert_stmt USING @var4;
EXECUTE insert_stmt USING @var5;
EXECUTE insert_stmt USING @var6;
EXECUTE insert_stmt USING @var7;
EXECUTE insert_stmt USING @var8;
EXECUTE insert_stmt USING @var9;
EXECUTE update_stmt USING @to_var1, @var1;
EXECUTE update_stmt USING @to_var2, @var2;
EXECUTE update_stmt USING @to_var3, @var3;
EXECUTE update_stmt USING @to_var4, @var4;
EXECUTE update_stmt USING @to_var5, @var5;
EXECUTE update_stmt USING @to_var6, @var6;
EXECUTE update_stmt USING @to_var7, @var7;
EXECUTE update_stmt USING @to_var8, @var8;
EXECUTE update_stmt USING @to_var9, @var9;
CREATE FUNCTION test_function(var CHAR(50)) RETURNS CHAR(50) BEGIN   DECLARE char_val CHAR(50);
SELECT c1 INTO char_val FROM test_table WHERE c1=var;
RETURN char_val;
END $ DELIMITER ;$ EXECUTE insert_stmt USING @var1;
EXECUTE insert_stmt USING @var2;
EXECUTE insert_stmt USING @var3;
EXECUTE insert_stmt USING @var4;
EXECUTE insert_stmt USING @var5;
EXECUTE insert_stmt USING @var6;
EXECUTE insert_stmt USING @var7;
EXECUTE insert_stmt USING @var8;
EXECUTE insert_stmt USING @var9;
EXECUTE update_stmt USING @to_var1, @var1;
EXECUTE update_stmt USING @to_var2, @var2;
EXECUTE update_stmt USING @to_var3, @var3;
EXECUTE update_stmt USING @to_var4, @var4;
EXECUTE update_stmt USING @to_var5, @var5;
EXECUTE update_stmt USING @to_var6, @var6;
EXECUTE update_stmt USING @to_var7, @var7;
EXECUTE update_stmt USING @to_var8, @var8;
EXECUTE update_stmt USING @to_var9, @var9;
PREPARE stmt FROM 'UPDATE test SET count = count + 1 WHERE id = ?';
EXECUTE stmt USING @a;
EXECUTE stmt USING @a;
connect(con1, localhost, root,,);
connect(con2, localhost, root,,);
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set @save_storage_engine= @@default_storage_engine;
INSERT INTO t1 VALUES   (REPEAT(0x1125,200000), REPEAT(0x1125,200000)), ('', ''), ('', '');
LOAD DATA INFILE '../../std_data/bug21542698.dat' INTO TABLE t1 CHARACTER SET gb18030;  DROP TABLE t1;
INSERT INTO dd_check_table(t)   SELECT CONCAT(id, '-', name, '-',     IFNULL(options, 'NULL'), '-',     IFNULL(INSERT(se_private_data,               INSTR(se_private_data, 'server_version'),              20, 'server_version=x'),       'NULL'),     '-', comment, '-', engine)   FROM mysql.tablespaces   WHERE name = 'mysql';
< @@group_concat_max_len;
FROM dd_published_schema, whole_schema                        WHERE dd_published_schema.checksum =                              whole_schema.checksum                        AND lctn = @@global.lower_case_file_system]" = 1;
$dd_table_names, $ddse_table_names;
create table t1 (s1 int)   partition by list (s1)     (partition c values in (1),      partition Ç values in (3));
LET $MYSQLD_DATADIR = `SELECT @@datadir`;
FLUSH TABLE t1;
SELECT mysqltest.f1();
SELECT mysqltest.f1();
SELECT mysqltest.f1();
SELECT mysqltest.f1();
if (`SELECT @@global.log_bin`) {   DROP TABLE t;
} SET debug = '-d,simulate_failure_in_before_commit_hook';
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
SHOW GRANTS FOR mysqltest_1@'127.0.0.1/255.255.255.255';
connect (con1, localhost, root, , test, $MASTER_MYPORT, );
disconnect con1;
source include/search_pattern.inc;
source include/search_pattern.inc;
GRANT r2 TO u1@localhost WITH ADMIN OPTION;
SHOW GRANTS FOR u1@localhost USING r1;
connect(con1, localhost, u2, foo, test);
SHOW GRANTS FOR u2@localhost USING r1;
disconnect con1;
connect(con1,localhost, u1,,);
disconnect con1;
connect(con1,localhost, u2,,);
disconnect con1;
if ( !$VERSION_TOKEN ) {   skip Locking service plugin requires the environment variable \$VERSION_TOKEN to be set (normally done by mtr);
} SELECT version_tokens_show();
do version_tokens_set("token1    =     def;;;;      ;invalid_token; token2= abc;;");
do version_tokens_set("token1    =     def;; token111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111=123;;      ;invalid_token; token2= abc;;");
do version_tokens_set("token1    =     none;;;;      ;invalid_token; token2= 123;;");
do version_tokens_set("token1=def;token2= abc;          ;token3=ghi");
do version_tokens_set("token1=def;token2= abc;token3=111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111112");
connect (con1,localhost,vbhagi,,test);
disconnect con1;
connect (con1,localhost,vbhagi,,test);
disconnect con1;
connect (con1,localhost,vbhagi,,test);
disconnect con1;
connect (con1,localhost,vbhagi,,test);
disconnect con1;
connect (con1,localhost,vbhagi,,test);
disconnect con1;
connect (con1,localhost,vbhagi,,test);
disconnect con1;
CONNECT (vtcon1, localhost, u1, foo,);
CONNECT (vtcon2, localhost, root,,);
CONNECT (vtcon3, localhost, root,,);
CONNECTION vtcon1;
CONNECTION vtcon2;
if ($t3_vtcon2 >= "03") { } CONNECTION vtcon3;
WHERE info like '%select sleep%' AND state='User sleep';
source include/wait_condition.inc;
if ($t3_vtcon3 < "05") { } SELECT version_tokens_unlock();
CONNECTION vtcon1;
disconnect vtcon1;
disconnect vtcon2;
disconnect vtcon3;
while ($mysql_errno != 1123) {   SELECT version_tokens_set("token1=abc;token2=def");
}  select version_tokens_set("token1    =     abc;token2=       def");
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
LOCK TABLES t1 WRITE;
disconnect con1;
disconnect con2;
echo "WL6369 Explain for Connection";
CALL mtr.add_suppression("You need to use --log-bin to make --log-replica-updates work.");
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set optimizer_switch=default;
show function code signal_func;
connect (con1root,localhost,root,,);
create function db() returns varchar(64) begin   declare v varchar(64);   select u into v from t1 limit 1;   return v; end|
connect (con2user1,localhost,user1,,);
connect (con3anon,localhost,anon,,);
call db1_secret.stamp(2);
select db1_secret.db();
call db1_secret.stamp(3);
select db1_secret.db();
call db1_secret.stamp(5);
select db1_secret.db();
call db1_secret.stamp(6);
select db1_secret.db();
connect (con4user2,localhost,user2,,);
disconnect con2user1;
disconnect con3anon;
disconnect con4user2;
show grants for usera@localhost;
show grants for userc@localhost;
connect (con2usera,localhost,usera,,);
connect (con3userb,localhost,userb,,);
connect (con4userc,localhost,userc,,);
call sptest.p1(1);
call sptest.p1(2);
call sptest.p1(3);
call sptest.p1(4);
show grants for userc@localhost;
show grants for userb@localhost;
show grants for userb@localhost;
disconnect con4userc;
disconnect con3userb;
disconnect con2usera;
connect (root,localhost,root,,test);
create database mysqltest//
use mysqltest//
create table t1 (s1 int)//
grant select on t1 to user1@localhost//
create function bug_9503 () returns int sql security invoker begin declare v int; select min(s1) into v from t1; return v; end//
connect (user1,localhost,user1,,test);
do 1;
disconnect user1;
disconnect root;
connect (user1,localhost,user1,,);
disconnect user1;
create procedure mysqltest_1.p1() begin    select 1 from dual; end//
connect (n1,localhost,mysqltest_1,,information_schema,$MASTER_MYPORT,$MASTER_MYSOCK);
call mysqltest_1.p1();
disconnect n1;
connect (n2,localhost,mysqltest_1,,*NO-ONE*,$MASTER_MYPORT,$MASTER_MYSOCK);
call mysqltest_1.p1();
disconnect n2;
drop function if exists bug12812|
connect (test_user_12812,localhost,user_bug12812,ABC,test)|
SELECT test.bug12812()|
CREATE VIEW v1 AS SELECT test.bug12812()|
disconnect test_user_12812|
DROP USER user_bug12812@localhost|
drop function bug12812|
connect (user1_bug14834,localhost,user1_bug14834,,db_bug14834);
connect (user2_bug14834,localhost,user2_bug14834,,db_bug14834);
connect (user3_bug14834,localhost,user3_bug14834,,db_bug14834);
disconnect user1_bug14834;
disconnect user2_bug14834;
disconnect user3_bug14834;
create procedure bug14533_1()     sql security definer   desc db_bug14533.t1;
connect (user_bug14533,localhost,user_bug14533,,test);
call db_bug14533.bug14533_1();
call db_bug14533.bug14533_2();
disconnect user_bug14533;
CREATE PROCEDURE sp19857() DETERMINISTIC   BEGIN     DECLARE a INT;
END // DELIMITER ;// SHOW CREATE PROCEDURE test.sp19857;
CREATE PROCEDURE p_suid(IN i INT) SQL SECURITY DEFINER SET @c:= 0;
CREATE DEFINER=mysqltest_u1@localhost FUNCTION f_evil () RETURNS INT   SQL SECURITY INVOKER BEGIN   SET @a:= CURRENT_USER();   SET @b:= (SELECT COUNT(*) FROM t1);   RETURN @b; END|
connect (conn1, localhost, mysqltest_u1,,);
disconnect conn1;
CONNECT (con_tester,localhost,tester,,B48872);
CONNECT (con_tester_denied,localhost,Tester,,B48872);
CONNECTION con_tester;
CONNECTION con_tester_denied;
CONNECTION default;
DISCONNECT con_tester;
DISCONNECT con_tester_denied;
connect (conn1, localhost, bug57061_user,,);
disconnect conn1;
connect (conn1, localhost, bug12602983_user,,);
select mysqltest_db.f_does_not_exist();
call mysqltest_db.p_does_not_exist();
select mysqltest_db.f1();
call mysqltest_db.p1();
create view bug12602983_v1 as select mysqltest_db.f_does_not_exist();
create view bug12602983_v1 as select mysqltest_db.f1();
disconnect conn1;
CONNECTION default;
disconnect con1;
lock tables t1 READ;
lock tables t1 WRITE;
unlock tables;
charset(load_file('../../std_data/words.dat')),   collation(load_file('../../std_data/words.dat')),   coercibility(load_file('../../std_data/words.dat'));
charset(load_file('$MYSQLTEST_VARDIR/std_data/words.dat')),   collation(load_file('$MYSQLTEST_VARDIR/std_data/words.dat')),   coercibility(load_file('$MYSQLTEST_VARDIR/std_data/words.dat'));
INSERT INTO t (c) VALUES (REPEAT('1',65537));
INSERT INTO t (c) VALUES (REPEAT('2',65536));
INSERT INTO t (c) VALUES (REPEAT('3',65535));
create table b15776 (data blob(-1));
create table b15776 (data blob(2147483648));
create table b15776 (data blob(4294967294));
create table b15776 (data blob(4294967295));
create table b15776 (data blob(4294967296));
CREATE TABLE b15776 (a blob(2147483647), b blob(2147483648), c blob(4294967295), a1 text(2147483647), b1 text(2147483648), c1 text(4294967295) );
CREATE TABLE b15776 (a blob(4294967296));
CREATE TABLE b15776 (a text(4294967296));
CREATE TABLE b15776 (a blob(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999));
CREATE TABLE b15776 (a text(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999));
CREATE TABLE b15776 (a int(-1));
CREATE TABLE b15776 (data blob(-1));
CREATE TABLE b15776 (a char(2147483648));
CREATE TABLE b15776 (a char(4294967295));
CREATE TABLE b15776 (a char(4294967296));
CREATE TABLE b15776 (a year(4294967295));
CREATE TABLE b15776 (a year(4294967296));
CREATE TABLE b15776 (a year(-2));
CREATE TABLE b15776 (a int(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999));
CREATE TABLE b15776 (a char(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999));
CREATE TABLE b15776 (a year(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999));
explain select cast(1 as char(4294967295));
explain select cast(1 as nchar(4294967295));
explain select cast(1 as binary(4294967295));
explain select cast(1 as char(4294967296));
explain select cast(1 as nchar(4294967296));
explain select cast(1 as binary(4294967296));
explain select cast(1 as decimal(-1));
explain select cast(1 as decimal(64, 999999999999999999999999999999));
explain select cast(1 as decimal(4294967296));
explain select cast(1 as decimal(999999999999999999999999999999999999));
UPDATE t2 SET c = REPEAT('1', 70000);
UPDATE t1 LEFT JOIN t2 USING(id) SET t2.c = REPEAT('1', 70000) WHERE t1.id = 1;
select @g1 between @g1 and ST_GeomFromText('POLYGON((30 30,40 40,50 50,30 50,30 40,30 30))');
connect (con1, localhost, root,,);
LOCK TABLES t1 WRITE, t2 WRITE, t0 WRITE;
RENAME TABLES t0 TO t00, t1 TO t01;
UNLOCK TABLES;
LOCK TABLES t0 WRITE, t1 WRITE;
RENAME TABLES t0 TO mysqltest.t0, t1 TO t01;
UNLOCK TABLES;
select extract(DAY_MICROSECOND FROM "1999-01-02 10:11:12.000123");
select extract(HOUR_MICROSECOND FROM "1999-01-02 10:11:12.000123");
select extract(MINUTE_MICROSECOND FROM "1999-01-02 10:11:12.000123");
select extract(SECOND_MICROSECOND FROM "1999-01-02 10:11:12.000123");
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
create procedure p1() begin    declare n int default 2;    authors: while n > 0 do      set n = n -1;    end while authors; end|
create procedure p2() begin    declare n int default 2;    contributors: while n > 0 do      set n = n -1;    end while contributors; end|
create procedure p1() begin   declare connection int;   select max(t1.connection) into connection from t1;   select concat("max=",connection) 'p1'; end|
CREATE PROCEDURE p1() BEGIN   DECLARE slow INT;
DECLARE general INT;
DECLARE ignore_server_ids INT;
DECLARE master_heartbeat_period INT;
SELECT max(t1.slow) INTO slow FROM t1;
SELECT max(t1.general) INTO general FROM t1;
SELECT max(t1.ignore_server_ids) INTO ignore_server_ids FROM t1;
SELECT max(t1.master_heartbeat_period) INTO master_heartbeat_period FROM t1;
END| CREATE PROCEDURE p2() BEGIN    DECLARE n INT DEFAULT 2;
general: WHILE n > 0 DO       SET n = n -1;
END WHILE general;
slow: WHILE n > 0 DO       SET n = n -1;
END WHILE slow;
ignore_server_ids: WHILE n > 0 DO       SET n = n -1;
END WHILE ignore_server_ids;
master_heartbeat_period: WHILE n > 0 DO       SET n = n -1;
END WHILE master_heartbeat_period;
END| DELIMITER ;| CALL p1();
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set optimizer_switch=default;
create table t (i);
load data infile '../../std_data/warnings_loaddata.dat' into table t1 fields terminated by ',';
disable_query_log;
while ($1) {   dec $1;
} enable_query_log;
CREATE PROCEDURE sp1() BEGIN    DECLARE x NUMERIC ZEROFILL;    SELECT f1 INTO x FROM t1 LIMIT 1; END//
CREATE PROCEDURE sp2() BEGIN    DECLARE x NUMERIC ZEROFILL;    SELECT f1 INTO x FROM t2 LIMIT 1; END//
CREATE PROCEDURE sp3() BEGIN    DECLARE x NUMERIC ZEROFILL;    SELECT f1 INTO x FROM t3 LIMIT 1; END//
CREATE PROCEDURE sp1() BEGIN declare x numeric unsigned zerofill; SELECT f1 into x from t2 limit 1; END//
set @q = repeat('q', 256);
CREATE FUNCTION f1(x INT) RETURNS INT BEGIN   INSERT INTO t1 VALUES(x);   INSERT INTO t1 VALUES(x);   RETURN x; END|
load xml infile '../../std_data/loadxml.dat' into table t1 rows identified by '<row>';
load xml infile '../../std_data/loadxml.dat' into table t1 rows identified by '<row>' ignore 4 rows;
connect (addconroot, localhost, root,,);
sleep 3;
disconnect addconroot;
remove_file $MYSQLTEST_VARDIR/tmp/loadxml-dump.xml;
load xml infile '../../std_data/loadxml2.dat' into table t1;
LOAD XML INFILE '../../std_data/loadxml.dat' INTO TABLE t1 ROWS IDENTIFIED BY '<row>' (a,@b) SET b=concat('!',@b);
LOAD XML INFILE '../../std_data/bug16171518_1.dat' INTO TABLE t1;
LOAD XML INFILE '../../std_data/bug16171518_2.dat' INTO TABLE t1;
LOAD XML INFILE '../../std_data/bug16171518_2.dat' INTO TABLE t1;
LOAD XML INFILE '../../std_data/bug16171518_2.dat' INTO TABLE v3;
LOAD XML INFILE '../../std_data/bug16171518_2.dat' INTO TABLE t4 (col1, col2, col3) SET col4 = NULL;
LOAD XML INFILE '../../std_data/bug30753708.dat' INTO TABLE t1 ROWS IDENTIFIED BY '<address>';
LOAD XML INFILE '../../std_data/bug30753708.dat' INTO TABLE t1 ROWS IDENTIFIED BY '<address>';
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
connect (con1root,localhost,root,,);
connect (con2root,localhost,root,,);
connect (con3root,localhost,root,,);
create procedure bug4934() begin    insert into t1 values (1,0,1); end//
create procedure bug4934() begin end//
lock tables t2 write;
send call bug9486();
unlock tables;
reap;
lock tables t2 read;
unlock tables;
create table t1 (s1 int)|
create procedure p1() select * from t1|
create procedure p2() begin   insert into t1 values (1);   call p1();   select * from t1; end|
lock table t1 write;
send call p2();
unlock tables;
reap;
disconnect con1root;
disconnect con2root;
disconnect con3root;
CREATE VIEW v1 AS   SELECT id, 'a' AS name, a AS val FROM t1 UNION   SELECT id, 'mn', HEX(LIKE_RANGE_MIN(a, 16)) AS min FROM t1 UNION   SELECT id, 'mx', HEX(LIKE_RANGE_MAX(a, 16)) AS max FROM t1 UNION   SELECT id, 'sp', REPEAT('-', 32) AS sep FROM t1 ORDER BY id, name;
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
prepare s from "select ?+11.1";
prepare s from "select ?+11";
prepare s from "select ?+?";
execute s using @a,@a;
execute s using @a,@a;
prepare s from "select ?+?";
execute s using @a,@a;
prepare s from "select ?+?";
execute s using @a,@a;
prepare s from "select ?+?";
execute s using @a,@a;
prepare s from "select ?+?";
execute s using @a,@a;
execute s using @a,@a;
execute s using @a,@a;
prepare s from "select 1.0+?";
execute s using @a;
prepare s from "select 1e0+?";
execute s using @a;
prepare s from "select date(?)";
execute s using @a;
prepare s from "select 11.1*(?+?)";
prepare s from 'select -(?)';
execute s using @a;
execute s using @a;
prepare s from 'select cast(? as time), ?+1';
execute s using @a,@b;
execute s using @a,@b;
prepare s from 'select ABS(?)';
execute s using @a;
prepare s from 'select ?';
prepare s from 'select sum(1) over (order by ?)';
prepare s from 'select sum(1) over (order by ? range 2 preceding)';
prepare s from 'select sum(1) over (order by 1.1 range ? preceding)';
prepare s from 'select 1 where ? group by ? having ? order by ?';
prepare s from 'select 1 from t1 left join t2 on ?';
prepare s from 'select ?';
execute s using @a;
execute s using @a;
execute s using @a;
prepare s from 'select 1 where ?';
execute s using @a;
prepare s from 'select cast(? as unsigned)';
execute s using @y;
execute s using @a;
prepare s from 'select cast(? as char(10))';
execute s using @s;
prepare s from 'select cast(? as binary(3))';
execute s using @s;
prepare s from 'select cast(? as date)';
execute s using @d;
prepare s from 'select cast(? as time(6))';
execute s using @t;
prepare s from 'select cast(? as datetime(6))';
execute s using @dt;
prepare s from 'select cast(? as year)';
execute s using @y;
prepare s from 'select cast(? as float)';
execute s using @y;
prepare s from 'select cast(? as double)';
execute s using @y;
prepare s from 'select cast(? as decimal(10))';
execute s using @y;
prepare s from 'select cast(? as json)';
execute s using @j;
prepare s from 'select convert(?, decimal(10))';
prepare s from 'select 1 where ? and ?';
execute s using @a,@a;
prepare s from 'select ?=12, ?=?,   1 BETWEEN ? AND 4.3, ? BETWEEN 1 AND 4.3, ? BETWEEN ? AND ?,   ? >= 3, ? >= ?';
prepare s from 'select ifnull(?,?),ifnull(?,cast("2000" as date))';
prepare s from 'select if(?,?,?),if(?,cast("2000" as date),?)';
prepare s from 'select coalesce(?,?,?),coalesce(?,cast("2000" as date),?)';
prepare s from 'select ? in (?,?), ? in (2,?)';
prepare s from 'select ? not in (?,?), ? not in (2,?)';
prepare s from ' select case ? when 3 then 1e0 else 2e0 end, case 3 when ? then 6 else 12 end, case ? when ? then 6 else 12 end';
prepare s from ' select case 3 when 3 then ? else 2e0 end, case 3 when 3 then 1e0 else ? end, case 3 when 3 then ? else ? end, case ? when ? then ? else ? end';
prepare s from ' select case ? when ? then ? else ? end';
prepare s from ' select case when 3=2 then ? else 2e0 end, case when ? then 6 else 12 end, case when ? then ? else ? end';
prepare s from ' select ? in (select a from t1),        3 in (select ? from t1)';
prepare s from ' select ? >= ALL(select a from t1),        ? = ALL (select a from t1),        ? >= ANY (select a from t1),        ? NOT IN (select a from t1)';
set @a=repeat("x",1000000);
set @b=repeat("y",1000000);
prepare s from 'select length(?), md5(?)';
execute s using @a,@a;
prepare s from 'insert into t3 values(?)';
execute s using @a;
prepare s from 'update t3 set a=?';
execute s using @b;
prepare s from 'delete from t3 where a=?';
execute s using @b;
prepare s from 'insert into t3 select ?';
execute s using @a;
prepare s from 'insert into t3 select ? union select ?';
execute s using @a, @b;
prepare s from 'insert into t3 select ? union all select ?';
execute s using @a, @b;
prepare s from 'create table t4 as select ? as a from t3 limit 1';
execute s using @b;
prepare s from  'create table t4 as select cast(? as binary(1000000)) as a from t3   limit 1';
execute s using @b;
prepare s from 'select ~ ?';
prepare s from 'select ? IS TRUE';
prepare s from 'select ? IS FALSE';
prepare s from 'select ? IS NOT TRUE';
prepare s from 'select ? IS NOT FALSE';
prepare s from 'select ? IS NULL';
prepare s from 'select ? IS NOT NULL';
prepare s from 'select - ?';
prepare s from 'select ? - ?';
prepare s from 'select ! ?';
prepare s from 'select NOT ?';
prepare s from 'select NOT(?)';
prepare s from 'select ? DIV ?';
prepare s from 'select ? AND ?';
prepare s from 'select ? OR ?';
prepare s from 'select ? XOR ?';
prepare s from 'select ? % ?';
prepare s from 'select ? MOD ?';
prepare s from 'select + ?';
prepare s from 'select ? + ?';
prepare s from 'select - ?';
prepare s from 'select ? - ?';
prepare s from 'select ? * ?';
prepare s from 'select ? / ?';
prepare s from 'select ? = ?';
prepare s from 'select hex(? & ?)';
execute s using @a,@a;
prepare s from 'select ? & 2';
execute s using @a;
prepare s from 'select ? | ?';
prepare s from 'select ? ^ ?';
prepare s from 'select ? / ?';
prepare s from 'select ? = ?';
prepare s from 'select ? <=> ?';
prepare s from 'select ? > ?';
prepare s from 'select ? >= ?';
prepare s from 'select ? < ?';
prepare s from 'select ? <= ?';
prepare s from 'select ? <> ?';
prepare s from 'select ? != ?';
prepare s from 'select ? << ?';
prepare s from 'select ? >> ?';
prepare s from 'select ? LIKE ?';
prepare s from 'select ? NOT LIKE ?';
prepare s from 'select ? REGEXP ?';
prepare s from 'select ? RLIKE ?';
prepare s from 'select ? NOT REGEXP ?';
prepare s from 'select 1 from articles where MATCH (title,body) AGAINST (?)';
prepare s from 'select ? SOUNDS LIKE ?';
prepare s from 'select ABS(?)';
prepare s from 'select ACOS(?)';
prepare s from 'select ADDDATE(?,?)';
prepare s from 'select ADDDATE(?, INTERVAL ? MONTH)';
prepare s from 'select ADDDATE(?, INTERVAL ? SECOND)';
prepare s from "SELECT ADDDATE('2008-01-02', interval ? second)";
execute s using @a;
prepare s from 'select ADDDATE(?, INTERVAL ? DAY_SECOND)';
prepare s from 'select ADDTIME(?,?)';
prepare s from 'select AES_DECRYPT(?,?)';
prepare s from 'select AES_DECRYPT(?,?,?)';
prepare s from 'select AES_ENCRYPT(?,?)';
prepare s from 'select AES_ENCRYPT(?,?,?)';
prepare s from 'select ANY_VALUE(?)';
prepare s from 'select ASCII(?)';
prepare s from 'select ASIN(?)';
prepare s from 'select ATAN(?)';
prepare s from 'select ATAN(?,?)';
prepare s from 'select ATAN2(?)';
prepare s from 'select ATAN2(?,?)';
prepare s from 'select AVG(?)';
prepare s from 'select BENCHMARK(?,?)';
prepare s from 'select BIN(?)';
prepare s from 'select BIN_TO_UUID(?)';
prepare s from 'select BIN_TO_UUID(?,?)';
prepare s from 'select BINARY(?)';
prepare s from 'select BIT_AND(?)';
prepare s from 'select BIT_COUNT(?)';
prepare s from 'select bit_count(?),bit_count(?)';
execute s using @a,@b;
execute s using @a,@b;
execute s using @a,@b;
execute s using @a,@b;
prepare s from 'select BIT_LENGTH(?)';
prepare s from 'select BIT_OR(?)';
prepare s from 'select BIT_XOR(?)';
prepare s from 'select CEIL(?)';
prepare s from 'select CEILING(?)';
prepare s from 'select CHAR(?)';
prepare s from 'select CHAR(?,?)';
prepare s from 'select CHAR(?,?,?)';
prepare s from 'select CHAR(?,?,?,?)';
prepare s from 'select CHAR(?,?,?,?,?)';
prepare s from 'select CHAR_LENGTH(?)';
prepare s from 'select CHARACTER_LENGTH(?)';
prepare s from 'select CHARSET(?)';
prepare s from 'select COALESCE(?)';
prepare s from 'select COALESCE(?,?)';
prepare s from 'select COALESCE(?,?,?)';
prepare s from 'select COALESCE(?,?,?,?)';
prepare s from 'select COALESCE(?,?,?,?,?)';
prepare s from 'select COERCIBILITY(?)';
prepare s from 'select COLLATION(?)';
prepare s from 'select COMPRESS(?)';
prepare s from 'select CONCAT(?)';
prepare s from 'select CONCAT(?,?)';
prepare s from 'select CONCAT(?,?,?)';
prepare s from 'select CONCAT(?,?,?,?)';
prepare s from 'select CONCAT(?,?,?,?,?)';
prepare s from 'select CONCAT_WS(?,?)';
prepare s from 'select CONCAT_WS(?,?,?)';
prepare s from 'select CONCAT_WS(?,?,?,?)';
prepare s from 'select CONCAT_WS(?,?,?,?,?)';
prepare s from 'select CONNECTION_ID()';
prepare s from 'select CONV(?,?,?)';
prepare s from 'select CONVERT_TZ(?,?,?)';
prepare s from 'select COS(?)';
prepare s from 'select COT(?)';
prepare s from 'select COUNT(?)';
prepare s from 'select COUNT(DISTINCT ?,?,?,?,?)';
prepare s from 'select CRC32(?)';
prepare s from 'select CURDATE()';
prepare s from 'select CURRENT_DATE()';
prepare s from 'select CURRENT_ROLE()';
prepare s from 'select CURRENT_TIME()';
prepare s from 'select CURRENT_TIMESTAMP()';
prepare s from 'select CURRENT_USER()';
prepare s from 'select CURTIME()';
prepare s from 'select DATABASE()';
prepare s from 'select DATE(?)';
set @a= timestamp "2001-01-02 10:11:12.345";
execute s using @a;
set @a=date "2001-01-02";
execute s using @a;
prepare s from 'select DATE_FORMAT(?,?)';
prepare s from 'select DATEDIFF(?,?)';
prepare s from 'select DAY(?)';
prepare s from 'select DAYNAME(?)';
prepare s from 'select DAYOFMONTH(?)';
prepare s from 'select DAYOFWEEK(?)';
prepare s from 'select DAYOFYEAR(?)';
prepare s from 'select DEGREES(?)';
prepare s from 'select ELT(?,?)';
prepare s from 'select ELT(?,?,?)';
prepare s from 'select ELT(?,?,?,?)';
prepare s from 'select ELT(?,?,?,?,?)';
prepare s from 'select EXP(?)';
prepare s from 'select EXPORT_SET(?,?,?)';
prepare s from 'select EXPORT_SET(?,?,?,?)';
prepare s from 'select EXPORT_SET(?,?,?,?,?)';
prepare s from 'select EXTRACT(YEAR FROM ?)';
prepare s from 'select ExtractValue(?,?)';
prepare s from 'select FIELD(?,?)';
prepare s from 'select FIELD(?,?,?)';
prepare s from 'select FIELD(?,?,?,?)';
prepare s from 'select FIELD(?,?,?,?,?)';
prepare s from 'select FIND_IN_SET(?,?)';
prepare s from 'select FIRST_VALUE(?) over () from t1';
prepare s from 'select FLOOR(?)';
prepare s from 'select FORMAT(?,?)';
prepare s from 'select FORMAT(?,?,?)';
prepare s from 'select FOUND_ROWS()';
prepare s from 'select FROM_BASE64(?)';
prepare s from 'select FROM_DAYS(?)';
prepare s from 'select FROM_UNIXTIME(?)';
prepare s from 'select FROM_UNIXTIME(?,?)';
prepare s from 'select GeomCollection(?, ?, ?, ?, ?)';
prepare s from 'select GET_LOCK(?,?)';
prepare s from 'select GREATEST(?,?,?,?,?)';
prepare s from 'select GROUP_CONCAT(?)';
prepare s from 'select GROUP_CONCAT(?,?)';
prepare s from 'select GROUP_CONCAT(?,?,?)';
prepare s from 'select GROUP_CONCAT(?,?,?,?)';
prepare s from 'select GROUP_CONCAT(?,?,?,?,?)';
prepare s from 'select GROUP_CONCAT(DISTINCT ?,? ORDER BY ? SEPARATOR ?)';
prepare s from 'select GROUP_CONCAT(DISTINCT ?,? ORDER BY ? SEPARATOR ",")';
prepare s from 'select GTID_SUBSET(?,?)';
prepare s from 'select GTID_SUBTRACT(?,?)';
prepare s from 'select HEX(?)';
prepare s from 'select HOUR(?)';
set @a= time "10:11:12.345";
execute s using @a;
set @a= timestamp "2001-01-02 10:11:12.345";
execute s using @a;
prepare s from 'select ICU_VERSION()';
prepare s from 'select IF(?,?,?)';
prepare s from 'select IFNULL(?,?)';
prepare s from 'select INET_ATON(?)';
prepare s from 'select INET_NTOA(?)';
prepare s from 'select INET6_ATON(?)';
prepare s from 'select INET6_NTOA(?)';
set @a= _binary 0xFDFE0000000000005A55CAFFFEFA9089;
execute s using @a;
execute s using @a;
prepare s from 'select INSERT(?,?,?,?)';
prepare s from 'select INSTR(?,?)';
prepare s from 'select INTERVAL(?,?)';
prepare s from 'select INTERVAL(?,?,?)';
prepare s from 'select INTERVAL(?,?,?,?)';
prepare s from 'select INTERVAL(?,?,?,?,?)';
prepare s from 'select IS_FREE_LOCK(?)';
prepare s from 'select IS_IPV4(?)';
prepare s from 'select IS_IPV4_COMPAT(?)';
prepare s from 'select IS_IPV4_MAPPED(?)';
prepare s from 'select IS_IPV6(?)';
prepare s from 'select IS_USED_LOCK(?)';
prepare s from 'select IS_UUID(?)';
prepare s from 'select ISNULL(?)';
prepare s from 'select JSON_ARRAY()';
prepare s from 'select JSON_ARRAY(?)';
prepare s from 'select JSON_ARRAY(?,?)';
prepare s from 'select JSON_ARRAY(?,?,?)';
prepare s from 'select JSON_ARRAY(?,?,?,?)';
prepare s from 'select JSON_ARRAY(?,?,?,?,?)';
prepare s from 'select JSON_ARRAY_APPEND(?,?,?)';
prepare s from 'select JSON_ARRAY_APPEND(?,?,?,?,?)';
prepare s from 'select JSON_ARRAY_INSERT(?,?,?)';
prepare s from 'select JSON_ARRAY_INSERT(?,?,?,?,?)';
prepare s from 'select JSON_ARRAYAGG(?)';
prepare s from 'select JSON_CONTAINS(?,?)';
prepare s from 'select JSON_CONTAINS(?,?,?)';
prepare s from 'select JSON_CONTAINS_PATH(?,?,?)';
prepare s from 'select JSON_CONTAINS_PATH(?,?,?,?)';
prepare s from 'select JSON_CONTAINS_PATH(?,?,?,?,?)';
prepare s from 'select JSON_DEPTH(?)';
prepare s from 'select JSON_EXTRACT(?,?)';
prepare s from 'select JSON_EXTRACT(?,?,?)';
prepare s from 'select JSON_EXTRACT(?,?,?,?)';
prepare s from 'select JSON_EXTRACT(?,?,?,?,?)';
prepare s from 'select JSON_INSERT(?,?,?)';
prepare s from 'select JSON_INSERT(?,?,?,?,?)';
prepare s from 'select JSON_KEYS(?)';
prepare s from 'select JSON_KEYS(?,?)';
prepare s from 'select JSON_LENGTH(?)';
prepare s from 'select JSON_LENGTH(?,?)';
prepare s from 'select JSON_MERGE_PATCH(?,?)';
prepare s from 'select JSON_MERGE_PATCH(?,?,?)';
prepare s from 'select JSON_MERGE_PATCH(?,?,?,?)';
prepare s from 'select JSON_MERGE_PATCH(?,?,?,?,?)';
prepare s from 'select JSON_MERGE_PRESERVE(?,?)';
prepare s from 'select JSON_MERGE_PRESERVE(?,?,?)';
prepare s from 'select JSON_MERGE_PRESERVE(?,?,?,?)';
prepare s from 'select JSON_MERGE_PRESERVE(?,?,?,?,?)';
prepare s from 'select JSON_OBJECT()';
prepare s from 'select JSON_OBJECT(?,?)';
prepare s from 'select JSON_OBJECT(?,?,?,?)';
prepare s from 'select JSON_OBJECTAGG(?,?)';
prepare s from 'select JSON_PRETTY(?)';
prepare s from 'select JSON_QUOTE(?)';
prepare s from 'select JSON_REMOVE(?,?)';
prepare s from 'select JSON_REMOVE(?,?,?)';
prepare s from 'select JSON_REMOVE(?,?,?,?)';
prepare s from 'select JSON_REMOVE(?,?,?,?,?)';
prepare s from 'select JSON_REPLACE(?,?,?)';
prepare s from 'select JSON_REPLACE(?,?,?,?,?)';
prepare s from 'select JSON_SEARCH(?,?,?)';
prepare s from 'select JSON_SEARCH(?,?,?,?)';
prepare s from 'select JSON_SEARCH(?,?,?,"x",?)';
prepare s from 'select JSON_SET(?,?,?)';
prepare s from 'select JSON_SET(?,?,?,?,?)';
prepare s from 'select JSON_STORAGE_FREE(?)';
prepare s from 'select JSON_STORAGE_SIZE(?)';
prepare s from 'SELECT *      FROM        JSON_TABLE(          ?,          "$[*]"          COLUMNS(            rowid FOR ORDINALITY,            ac VARCHAR(100) PATH "$.a" DEFAULT ''111'' ON EMPTY DEFAULT ''999'' ON ERROR,            aj JSON PATH "$.a" DEFAULT ''{"x": 333}'' ON EMPTY,            bx INT EXISTS PATH "$.b"          )        ) AS tt';
execute s using @a;
execute s using @a;
prepare s from 'SELECT *      FROM        JSON_TABLE(          ?,          ?          COLUMNS(            rowid FOR ORDINALITY,            ac VARCHAR(100) PATH "$.a" DEFAULT ''999'' ON ERROR DEFAULT ''111'' ON EMPTY,            aj JSON PATH "$.a" DEFAULT ''{"x": 333}'' ON EMPTY,            bx INT EXISTS PATH "$.b"          )        ) AS tt';
prepare s from 'select JSON_TYPE(?)';
prepare s from 'select JSON_UNQUOTE(?)';
prepare s from 'select JSON_VALID(?)';
prepare s from 'select LAG(?,?,?) over () from t1';
prepare s from 'select LAG(?,?,2.1) over () from t1';
prepare s from 'select LAST_DAY(?)';
prepare s from 'select LAST_INSERT_ID()';
prepare s from 'select LAST_INSERT_ID(?)';
prepare s from 'select LAST_VALUE(?) over () from t1';
prepare s from 'select LCASE(?)';
prepare s from 'select LEAD(?,?,?) over () from t1';
prepare s from 'select LEAD(?,?,2.1) over () from t1';
prepare s from 'select LEAST(?,?,?,?,?)';
prepare s from 'select LEFT(?,?)';
prepare s from 'select LENGTH(?)';
prepare s from 'select LineString(?, ?, ?, ?, ?)';
prepare s from 'select LN(?)';
prepare s from 'select LOAD_FILE(?)';
prepare s from 'select LOCALTIME()';
prepare s from 'select LOCALTIMESTAMP()';
prepare s from 'select LOCATE(?,?)';
prepare s from 'select LOCATE(?,?,?)';
prepare s from 'select LOG(?)';
prepare s from 'select LOG(?,?)';
prepare s from 'select LOG10(?)';
prepare s from 'select LOG2(?)';
prepare s from 'select LOWER(?)';
prepare s from 'select LPAD(?,?,?)';
prepare s from 'select LTRIM(?)';
prepare s from 'select MAKE_SET(?,?)';
prepare s from 'select MAKE_SET(?,?,?)';
prepare s from 'select MAKE_SET(?,?,?,?)';
prepare s from 'select MAKE_SET(?,?,?,?,?)';
prepare s from 'select MAKEDATE(?,?)';
prepare s from 'select MAKETIME(?,?,?)';
prepare s from 'select SOURCE_POS_WAIT(?,?)';
prepare s from 'select SOURCE_POS_WAIT(?,?,?)';
prepare s from 'select SOURCE_POS_WAIT(?,?,?,?)';
prepare s from 'select MAX(?)';
prepare s from 'select MBRContains(?,?)';
prepare s from 'select MBRCoveredBy(?,?)';
prepare s from 'select MBRCovers(?,?)';
prepare s from 'select MBRDisjoint(?,?)';
prepare s from 'select MBREquals(?,?)';
prepare s from 'select MBRIntersects(?,?)';
prepare s from 'select MBROverlaps(?,?)';
prepare s from 'select MBRTouches(?,?)';
prepare s from 'select MBRWithin(?,?)';
prepare s from 'select MD5(?)';
prepare s from 'select MICROSECOND(?)';
prepare s from 'select MID(?,?)';
prepare s from 'select MID(?,?,?)';
prepare s from 'select MIN(?)';
prepare s from 'select MINUTE(?)';
prepare s from 'select MOD(?,?)';
prepare s from 'select MONTH(?)';
prepare s from 'select MONTHNAME(?)';
prepare s from 'select MultiLineString(?, ?, ?, ?, ?)';
prepare s from 'select MultiPoint(?, ?, ?, ?, ?)';
prepare s from 'select MultiPolygon(?, ?, ?, ?, ?)';
prepare s from 'select NOW()';
prepare s from 'select NTH_VALUE(?,?) over () from t1';
prepare s from 'select NTILE(?) over () from t1';
prepare s from 'select NULLIF(?,?)';
prepare s from 'select NULLIF(100,?)';
prepare s from 'select NULLIF(?,100)';
prepare s from 'select 200 + NULLIF(?,?)';
prepare s from 'select 200 + NULLIF("100",?)';
prepare s from 'select 200 + NULLIF(?,"100")';
prepare s from 'select OCT(?)';
prepare s from 'select OCTET_LENGTH(?)';
prepare s from 'select ORD(?)';
prepare s from 'select PERIOD_ADD(?,?)';
prepare s from 'select PERIOD_DIFF(?,?)';
prepare s from 'select PI()';
prepare s from 'select Point(?,?)';
prepare s from 'select Polygon(?, ?, ?, ?, ?)';
prepare s from 'select POW(?,?)';
prepare s from 'select POWER(?,?)';
prepare s from 'select QUARTER(?)';
prepare s from 'select QUOTE(?)';
prepare s from 'select RADIANS(?)';
prepare s from 'select RAND()';
prepare s from 'select RAND(?)';
prepare s from 'select RANDOM_BYTES(?)';
prepare s from 'select REGEXP_INSTR(?,?)';
prepare s from 'select REGEXP_INSTR(?,?,?)';
prepare s from 'select REGEXP_INSTR(?,?,?,?)';
prepare s from 'select REGEXP_INSTR(?,?,?,?,?)';
prepare s from 'select REGEXP_LIKE(?,?)';
prepare s from 'select REGEXP_LIKE(?,?,?)';
prepare s from 'select REGEXP_REPLACE(?,?,?)';
prepare s from 'select REGEXP_REPLACE(?,?,?,?)';
prepare s from 'select REGEXP_REPLACE(?,?,?,?,?)';
prepare s from 'select REGEXP_SUBSTR(?,?)';
prepare s from 'select REGEXP_SUBSTR(?,?,?)';
prepare s from 'select REGEXP_SUBSTR(?,?,?,?)';
prepare s from 'select REGEXP_SUBSTR(?,?,?,?,?)';
prepare s from 'select RELEASE_ALL_LOCKS()';
prepare s from 'select RELEASE_LOCK(?)';
prepare s from 'select REPEAT(?,?)';
prepare s from 'select REPLACE(?,?,?)';
prepare s from 'select REVERSE(?)';
prepare s from 'select RIGHT(?,?)';
prepare s from 'select ROLES_GRAPHML()';
prepare s from 'select ROUND(?)';
prepare s from 'select ROUND(?,?)';
prepare s from 'select ROW_COUNT()';
prepare s from 'select RPAD(?,?,?)';
prepare s from 'select RTRIM(?)';
prepare s from 'select SCHEMA()';
prepare s from 'select SEC_TO_TIME(?)';
prepare s from 'select SECOND(?)';
prepare s from 'select SESSION_USER()';
prepare s from 'select SHA1(?)';
prepare s from 'select SHA2(?,?)';
prepare s from 'select SIGN(?)';
prepare s from 'select SIN(?)';
prepare s from 'select SLEEP(?)';
prepare s from 'select SOUNDEX(?)';
prepare s from 'select SPACE(?)';
prepare s from 'select SQRT(?)';
prepare s from 'select ST_Area(?)';
prepare s from 'select ST_AsBinary(?)';
prepare s from 'select ST_AsBinary(?,?)';
prepare s from 'select ST_AsGeoJSON(?)';
prepare s from 'select ST_AsGeoJSON(?,?)';
prepare s from 'select ST_AsGeoJSON(?,?,?)';
prepare s from 'select ST_AsText(?)';
prepare s from 'select ST_AsText(?,?)';
prepare s from 'select ST_Buffer(?,?)';
prepare s from 'select ST_Buffer(?,?,?)';
prepare s from 'select ST_Buffer(?,?,?,?)';
prepare s from 'select ST_Buffer(?,?,?,?,?)';
prepare s from 'select ST_Buffer_Strategy(?)';
prepare s from 'select ST_Buffer_Strategy(?,?)';
prepare s from 'select ST_Centroid(?)';
prepare s from 'select ST_Contains(?,?)';
prepare s from 'select ST_ConvexHull(?)';
prepare s from 'select ST_Crosses(?,?)';
prepare s from 'select ST_Difference(?,?)';
prepare s from 'select ST_Dimension(?)';
prepare s from 'select ST_Disjoint(?,?)';
prepare s from 'select ST_Distance(?,?)';
prepare s from 'select ST_Distance_Sphere(?,?)';
prepare s from 'select ST_Distance_Sphere(?,?,?)';
prepare s from 'select ST_EndPoint(?)';
prepare s from 'select ST_Envelope(?)';
prepare s from 'select ST_Equals(?,?)';
prepare s from 'select ST_ExteriorRing(?)';
prepare s from 'select ST_GeoHash(?,?)';
prepare s from 'select ST_GeoHash(?,?,?)';
prepare s from 'select ST_GeomCollFromText(?)';
prepare s from 'select ST_GeomCollFromText(?,?)';
prepare s from 'select ST_GeomCollFromText(?,?,?)';
prepare s from 'select ST_GeomCollFromWKB(?)';
prepare s from 'select ST_GeomCollFromWKB(?,?)';
prepare s from 'select ST_GeomCollFromWKB(?,?,?)';
prepare s from 'select ST_GeometryN(?,?)';
prepare s from 'select ST_GeometryType(?)';
prepare s from 'select ST_GeomFromGeoJSON(?)';
prepare s from 'select ST_GeomFromGeoJSON(?,?)';
prepare s from 'select ST_GeomFromGeoJSON(?,?,?)';
prepare s from 'select ST_GeomFromText(?)';
prepare s from 'select ST_GeomFromText(?,?)';
prepare s from 'select ST_GeomFromText(?,?,?)';
prepare s from 'select ST_GeomFromWKB(?)';
prepare s from 'select ST_GeomFromWKB(?,?)';
prepare s from 'select ST_GeomFromWKB(?,?,?)';
prepare s from 'select ST_InteriorRingN(?,?)';
prepare s from 'select ST_Intersection(?,?)';
prepare s from 'select ST_Intersects(?,?)';
prepare s from 'select ST_IsClosed(?)';
prepare s from 'select ST_IsEmpty(?)';
prepare s from 'select ST_IsSimple(?)';
prepare s from 'select ST_IsValid(?)';
prepare s from 'select ST_LatFromGeoHash(?)';
prepare s from 'select ST_Latitude(?)';
prepare s from 'select ST_Latitude(?,?)';
prepare s from 'select ST_Length(?)';
prepare s from 'select ST_LineFromText(?)';
prepare s from 'select ST_LineFromText(?,?)';
prepare s from 'select ST_LineFromText(?,?,?)';
prepare s from 'select ST_LineFromWKB(?)';
prepare s from 'select ST_LineFromWKB(?,?)';
prepare s from 'select ST_LineFromWKB(?,?,?)';
prepare s from 'select ST_LongFromGeoHash(?)';
prepare s from 'select ST_Longitude(?)';
prepare s from 'select ST_Longitude(?,?)';
prepare s from 'select ST_MakeEnvelope(?,?)';
prepare s from 'select ST_MLineFromText(?)';
prepare s from 'select ST_MLineFromText(?,?)';
prepare s from 'select ST_MLineFromText(?,?,?)';
prepare s from 'select ST_MLineFromWKB(?)';
prepare s from 'select ST_MLineFromWKB(?,?)';
prepare s from 'select ST_MLineFromWKB(?,?,?)';
prepare s from 'select ST_MPointFromText(?)';
prepare s from 'select ST_MPointFromText(?,?)';
prepare s from 'select ST_MPointFromText(?,?,?)';
prepare s from 'select ST_MPointFromWKB(?)';
prepare s from 'select ST_MPointFromWKB(?,?)';
prepare s from 'select ST_MPointFromWKB(?,?,?)';
prepare s from 'select ST_MPolyFromText(?)';
prepare s from 'select ST_MPolyFromText(?,?)';
prepare s from 'select ST_MPolyFromText(?,?,?)';
prepare s from 'select ST_MPolyFromWKB(?)';
prepare s from 'select ST_MPolyFromWKB(?,?)';
prepare s from 'select ST_MPolyFromWKB(?,?,?)';
prepare s from 'select ST_NumGeometries(?)';
prepare s from 'select ST_NumInteriorRing(?)';
prepare s from 'select ST_NumPoints(?)';
prepare s from 'select ST_Overlaps(?,?)';
prepare s from 'select ST_PointFromGeoHash(?,?)';
prepare s from 'select ST_PointFromText(?)';
prepare s from 'select ST_PointFromText(?,?)';
prepare s from 'select ST_PointFromText(?,?,?)';
prepare s from 'select ST_PointFromWKB(?)';
prepare s from 'select ST_PointFromWKB(?,?)';
prepare s from 'select ST_PointFromWKB(?,?,?)';
prepare s from 'select ST_PointN(?,?)';
prepare s from 'select ST_PolyFromText(?)';
prepare s from 'select ST_PolyFromText(?,?)';
prepare s from 'select ST_PolyFromText(?,?,?)';
prepare s from 'select ST_PolyFromWKB(?)';
prepare s from 'select ST_PolyFromWKB(?,?)';
prepare s from 'select ST_PolyFromWKB(?,?,?)';
prepare s from 'select ST_Simplify(?,?)';
prepare s from 'select ST_SRID(?)';
prepare s from 'select ST_SRID(?,?)';
prepare s from 'select ST_StartPoint(?)';
prepare s from 'select ST_SwapXY(?)';
prepare s from 'select ST_SymDifference(?,?)';
prepare s from 'select ST_Touches(?,?)';
prepare s from 'select ST_Union(?,?)';
prepare s from 'select ST_Validate(?)';
prepare s from 'select ST_Within(?,?)';
prepare s from 'select ST_X(?)';
prepare s from 'select ST_X(?,?)';
prepare s from 'select ST_Y(?)';
prepare s from 'select ST_Y(?,?)';
prepare s from 'select STATEMENT_DIGEST(?)';
prepare s from 'select STATEMENT_DIGEST_TEXT(?)';
prepare s from 'select STD(?)';
prepare s from 'select STDDEV(?)';
prepare s from 'select STDDEV_POP(?)';
prepare s from 'select STDDEV_SAMP(?)';
prepare s from 'select STR_TO_DATE(?,?)';
prepare s from 'select STRCMP(?,?)';
prepare s from 'select SUBDATE(?,?)';
prepare s from 'select SUBSTR(?,?)';
prepare s from 'select SUBSTR(?,?,?)';
prepare s from 'select SUBSTRING(?,?)';
prepare s from 'select SUBSTRING(?,?,?)';
prepare s from 'select SUBSTRING_INDEX(?,?,?)';
prepare s from 'select SUBTIME(?,?)';
prepare s from 'select SUM(?)';
prepare s from 'select SYSDATE()';
prepare s from 'select SYSTEM_USER()';
prepare s from 'select TAN(?)';
prepare s from 'select TIME(?)';
prepare s from 'select TIME_FORMAT(?,?)';
prepare s from 'select TIME_TO_SEC(?)';
prepare s from 'select TIMEDIFF(?,?)';
prepare s from 'select TIMEDIFF(?,"01:02:03")';
set @a= time "01:02:00";
execute s using @a;
prepare s from 'select TIMEDIFF(?,"2001-01-01 01:02:03")';
set @a= timestamp "2001-01-02 01:02:00";
execute s using @a;
prepare s from 'select TIMESTAMP(?)';
prepare s from 'select TIMESTAMP(?,?)';
prepare s from 'select TIMESTAMPADD(HOUR,?,?)';
prepare s from 'select TIMESTAMPDIFF(HOUR,?,?)';
prepare s from 'select TO_BASE64(?)';
prepare s from 'select TO_DAYS(?)';
set @a= date "2001-01-02";
execute s using @a;
set @a= timestamp "2001-01-02 10:11:12.345";
execute s using @a;
prepare s from 'select TO_SECONDS(?)';
prepare s from 'select TRIM(?)';
prepare s from 'select TRUNCATE(?,?)';
prepare s from 'select UCASE(?)';
prepare s from 'select UNCOMPRESS(?)';
prepare s from 'select UNCOMPRESSED_LENGTH(?)';
prepare s from 'select UNHEX(?)';
prepare s from 'select UNIX_TIMESTAMP()';
prepare s from 'select UNIX_TIMESTAMP(?)';
prepare s from 'select UpdateXML(?,?,?)';
prepare s from 'select UPPER(?)';
prepare s from 'select USER()';
prepare s from 'select UTC_DATE()';
prepare s from 'select UTC_TIME()';
prepare s from 'select UTC_TIMESTAMP()';
prepare s from 'select UUID()';
prepare s from 'select UUID_SHORT()';
prepare s from 'select UUID_TO_BIN(?)';
prepare s from 'select UUID_TO_BIN(?,?)';
prepare s from 'select VALIDATE_PASSWORD_STRENGTH(?)';
prepare s from 'INSERT INTO t3 VALUES(?,2.0+?)';
prepare s from 'select VAR_POP(?)';
prepare s from 'select VAR_SAMP(?)';
prepare s from 'select VARIANCE(?)';
prepare s from 'select VERSION()';
prepare s from 'select WAIT_FOR_EXECUTED_GTID_SET(?)';
prepare s from 'select WAIT_FOR_EXECUTED_GTID_SET(?,?)';
prepare s from 'select WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(?)';
prepare s from 'select WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(?,?)';
prepare s from 'select WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(?,?,?)';
prepare s from 'select WEEK(?)';
prepare s from 'select WEEK(?,?)';
prepare s from 'select WEEKDAY(?)';
prepare s from 'select WEEKOFYEAR(?)';
prepare s from 'select WEIGHT_STRING(?)';
prepare s from 'select YEAR(?)';
prepare s from 'select YEARWEEK(?)';
prepare s from 'select YEARWEEK(?,?)';
PREPARE s1 FROM "SELECT i1+? FROM t1";
PREPARE s2 FROM "SELECT i2+? FROM t1";
PREPARE s3 FROM "SELECT i3+? FROM t1";
PREPARE s4 FROM "SELECT i4+? FROM t1";
PREPARE s5 FROM "SELECT i8+? FROM t1";
PREPARE s6 FROM "SELECT dc1+? FROM t1";
PREPARE s7 FROM "SELECT dc2+? FROM t1";
EXECUTE s1 USING @i1_max;
EXECUTE s2 USING @i2_max;
EXECUTE s3 USING @i3_max;
EXECUTE s4 USING @i4_max;
EXECUTE s5 USING @i8_max;
EXECUTE s6 USING @dc1_max;
EXECUTE s7 USING @dc2_max;
EXECUTE s6 USING @dc1_ext;
EXECUTE s7 USING @dc2_ext;
DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
DEALLOCATE PREPARE s7;
PREPARE si FROM "INSERT INTO t1 VALUES(1,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
PREPARE su FROM "UPDATE t1  SET i1=?, i2=?, i3=?, i4=?, i8=?, i1u=?, i2u=?, i3u=?, i4u=?, i8u=?,      dc=?, f4=?, f8=?, vc=?, fc=?, vb=?, fb=?, d=?, t=?, dt=?, ts=?  WHERE pk=1";
PREPARE siu FROM "INSERT INTO t1 VALUES(1,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  ON DUPLICATE KEY  UPDATE i1=?, i2=?, i3=?, i4=?, i8=?, i1u=?, i2u=?, i3u=?, i4u=?, i8u=?,      dc=?, f4=?, f8=?, vc=?, fc=?, vb=?, fb=?, d=?, t=?, dt=?, ts=?";
EXECUTE si USING @i8, @i8, @i8, @i8, @i8, @i8u, @i8u, @i8u, @i8u, @i8u,                  @dc, @f8, @f8, @vc, @vc, @vb, @vb, @d, @t, @dt, @dt;
EXECUTE su USING @i8, @i8, @i8, @i8, @i8, @i8u, @i8u, @i8u, @i8u, @i8u,                  @dc, @f8, @f8, @vc, @vc, @vb, @vb, @d, @t, @dt, @dt;
EXECUTE siu USING @i8, @i8, @i8, @i8, @i8, @i8u, @i8u, @i8u, @i8u, @i8u,                   @dc, @f8, @f8, @vc, @vc, @vb, @vb, @d, @t, @dt, @dt,                   @i8, @i8, @i8, @i8, @i8, @i8u, @i8u, @i8u, @i8u, @i8u,                   @dc, @f8, @f8, @vc, @vc, @vb, @vb, @d, @t, @dt, @dt;
DEALLOCATE PREPARE si;
DEALLOCATE PREPARE su;
DEALLOCATE PREPARE siu;
PREPARE s1 FROM "SELECT ? + ?";
EXECUTE s1 USING @r8, @r8;
EXECUTE s1 USING @i8, @i8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + (? + ?)";
EXECUTE s1 USING @i8, @i8;
EXECUTE s1 USING @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT -(?)";
EXECUTE s1 USING @r8;
EXECUTE s1 USING @i8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + -(?)";
EXECUTE s1 USING @i8;
EXECUTE s1 USING @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT GREATEST(?, ?), LEAST(?, ?)";
EXECUTE s1 USING @vc1, @vc2, @vc1, @vc2;
EXECUTE s1 USING @i8, @i8, @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + GREATEST(?, ?), 3.14e0 + LEAST(?, ?)";
EXECUTE s1 USING @i8, @i8, @r8, @r8;
EXECUTE s1 USING @r8, @r8, @i8, @i8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT COALESCE(?, ?)";
EXECUTE s1 USING @vc1, @vc2;
EXECUTE s1 USING @i8, @i8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + COALESCE(?, ?)";
EXECUTE s1 USING @i8, @i8;
EXECUTE s1 USING @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT CASE ? WHEN 1 THEN ? ELSE ? END";
EXECUTE s1 USING @i8, @vc1, @vc2;
EXECUTE s1 USING @i8, @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + CASE ? WHEN 1 THEN ? ELSE ? END";
EXECUTE s1 USING @i8, @i8, @i8;
EXECUTE s1 USING @i8, @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT IFNULL(?, ?)";
EXECUTE s1 USING @vc1, @vc2;
EXECUTE s1 USING @i8, @i8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + IFNULL(?, ?)";
EXECUTE s1 USING @i8, @i8;
EXECUTE s1 USING @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT NULLIF(?, ?)";
EXECUTE s1 USING @vc1, @vc2;
EXECUTE s1 USING @i8, @i8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + NULLIF(?, ?)";
EXECUTE s1 USING @i8, @i8;
EXECUTE s1 USING @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT IF(?, ?, ?)";
EXECUTE s1 USING @i8, @vc1, @vc2;
EXECUTE s1 USING @i8, @i8, @i8;
DEALLOCATE PREPARE s1;
PREPARE s1 FROM "SELECT 666 + IF(?, ?, ?)";
EXECUTE s1 USING @i8, @i8, @i8;
EXECUTE s1 USING @i8, @r8, @r8;
DEALLOCATE PREPARE s1;
PREPARE s FROM "DELETE FROM t1 WHERE (?, ?) NOT IN (SELECT 'a', 'b' FROM t2)";
EXECUTE s USING @var1, @var2;
DEALLOCATE PREPARE s;
PREPARE s FROM "SELECT * FROM t1 WHERE (?, ?) NOT IN (SELECT 'a', 'b' FROM t2)";
EXECUTE s USING @var1, @var2;
DEALLOCATE PREPARE s;
PREPARE s FROM "SELECT NULL";
EXECUTE s;
PREPARE s FROM "SELECT NULL + ? ";
EXECUTE s USING @iv;
EXECUTE s USING @ic;
DEALLOCATE PREPARE s;
PREPARE s FROM 'DO ST_ENVELOPE(CEILING(?))';
PREPARE stmt1 FROM 'SELECT * FROM t1 WHERE col1 LIKE ? OR col2 LIKE ?';
DEALLOCATE PREPARE stmt1;
create tablespace ndb_ts1 add datafile 'ndb_ts1.dat' use logfile group ndb_lg1 engine=myisam initial_size=32M;
create tablespace ndb_ts1 add datafile 'ndb_ts1.dat' use logfile group ndb_lg1 engine=myisam;
create tablespace ndb_ts1 add datafile 'ndb_ts1.dat' use logfile group ndb_lg1 engine=myisam;
connect (con1, localhost, root, , );
disconnect con1;
PREPARE ps FROM   'INSERT INTO t SELECT id+1, x FROM t a ON DUPLICATE KEY UPDATE x = a.x';
EXECUTE ps;
EXECUTE ps;
DEALLOCATE PREPARE ps;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
RENAME TABLE t1 TO t2, t3 TO t4;
CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS ;
CREATE USER plug IDENTIFIED WITH test_plugin_server AS plug_dest;
CREATE USER plug IDENTIFIED WITH AS plug_dest;
CREATE USER plug IDENTIFIED WITH;
CREATE USER plug IDENTIFIED AS '';
CREATE USER plug IDENTIFIED WITH 'test_plugin_server' IDENTIFIED WITH 'test_plugin_server';
CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS '' AS 'plug_dest';
CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS ''                   IDENTIFIED WITH test_plugin_server   AS 'plug_dest';
CREATE USER plug_dest IDENTIFIED BY 'plug_dest_passwd'                        IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest';  CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest'         USER plug_dest IDENTIFIED by 'plug_dest_pwd';
CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest'         plug_dest IDENTIFIED by 'plug_dest_pwd';
CREATE USER plug IDENTIFIED WITH 'test_plugin_server' AS 'plug_dest'         IDENTIFIED by 'plug_dest_pwd';
CREATE USER plüg IDENTIFIED WITH 'test_plugin_server' AS 'plüg_dest';
DROP USER plüg;
CREATE USER plüg_dest IDENTIFIED BY 'plug_dest_passwd';
DROP USER plüg_dest;
CREATE USER plüg IDENTIFIED WITH 'test_pluggggin_server' AS 'plüg_dest';
CREATE USER plüg IDENTIFIED WITH test_plugin_server AS 'plüg_dest';
DROP USER plüg;
CREATE USER plüg_dest IDENTIFIED BY 'plug_dest_passwd';
DROP USER plüg_dest;
CREATE USER plug IDENTIFIED WITH @auth_name AS 'plug_dest';
CREATE USER plug IDENTIFIED WITH test_plugin_server AS @auth_string;
CREATE USER plug IDENTIFIED WITH hh''s_test_plugin_server AS 'plug_dest';
connect (addconroot, localhost, root,,);
connect (addconroot2, localhost, root,,);
rename table t1 to t3;
disconnect addconroot;
disconnect addconroot2;
source include/show_binlog_events.inc;
connect (con1, localhost, root,,);
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ, t3 WRITE, t3 AS a WRITE, t3 AS b READ;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ, t3 WRITE, t3 AS a WRITE, t3 AS b READ;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 READ, t3 WRITE, t3 AS a WRITE, t3 AS b READ;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
select case 1/0 when "a" then "true" else "false" END;
select case 1/0 when "a" then "true" END;
select (case 1/0 when "a" then "true" END) | 0;
select (case 1/0 when "a" then "true" END) + 0.0;
INSERT INTO t1 VALUES (REPEAT("a",100));
SELECT (t1.a,t1.a) IN (('a','c'),('a','b')) END FROM t1;
DO GROUP_CONCAT(DISTINCT NULLIF(1, PERIOD_ADD(0x6f09c5f8 ,'7451-01-27')));
if (!`select count(*) FROM INFORMATION_SCHEMA.PLUGINS       WHERE PLUGIN_NAME='qa_auth_server'       and PLUGIN_LIBRARY LIKE 'qa_auth_server%'`) { } SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS   WHERE PLUGIN_NAME IN ('test_plugin_server', 'qa_auth_server')   ORDER BY 1;
select a.id, b.category as catid, b.state as stateid, b.county as countyid from t1 a, t2 b ignore index (primary) where (a.token ='a71250b7ed780f6ef3185bfffe027983') and (a.count = b.id);
prepare stmt1 from "select * from ((t3 natural join (t1 natural join t2)) natural join t4) natural join t5";
execute stmt1;
PREPARE stmt FROM 'UPDATE t2 AS A NATURAL JOIN v1 B SET B.f1 = 1';
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "SELECT t2.c AS f1 FROM t1 LEFT JOIN                                         t1 t2 ON t1.c=t2.c RIGHT JOIN                                         t1 t3 ON t1.c=t3.c                     GROUP BY f1;";
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
t1.c1 join t2 on t2.ref_t1 = t1.c1) on t4.ref_t1 = t1.c1;
PREPARE st1 FROM " UPDATE v1 AS a NATURAL JOIN v1 AS b SET a.dummy = '', b.col_check = NULL ";
EXECUTE st1;
EXECUTE st1;
DEALLOCATE PREPARE st1;
select t1.*, dt.c  from t t1,  lateral  (select count(*) as c   from t t2   left join t t3 on t3.a>t2.a-t1.a) as dt;
select t1.*, dt.c  from t t1 cross join  lateral  (select count(*) as c   from t t2   left join t t3 on t3.a>t2.a-t1.a) as dt;
select t1.*, dt.c  from t t1 join  lateral  (select count(*) as c   from t t2   left join t t3 on t3.a>t2.a-t1.a) as dt  on true;
EXPLAIN SELECT * FROM t1 AS x3 WHERE EXISTS   (SELECT * FROM t1 AS x1 JOIN t1 AS x2 ON x1.b=x2.b     JOIN LATERAL (SELECT COUNT(a) AS c FROM t1     WHERE t1.b=x1.b) AS d3 ON x1.b=c);
SELECT * FROM t1, t2, LATERAL (   SELECT pk, blobfield   GROUP BY pk, blobfield WITH ROLLUP ) AS d1 ORDER BY t1.f1, t2.pk;
while ($1) {   dec $1;
} while ($1) {   dec $1;
} while ($1) {   dec $1;
} repair table t1 quick;
while ($1) {   dec $1;
} while ($1) {   dec $1;
} while ($1) {   dec $1;
} select count(*) from t1 where match a against ('aaaxxx');
perl;
my $dir = $ENV{'MYSQLTEST_VARDIR'};
open ( OUTPUT, ">$dir/tmp/mysqld_path_file.inc") ;
my $path = $ENV{MYSQLD};
$path =~ /^(.*)\/([^\/]*)$/;
print OUTPUT "let \$mysqld_path = $1;\n";
print OUTPUT "let \$mysqld_bin = $2;\n";
close (OUTPUT);
write_file $BOOTSTRAP_SQL;
write_file $MYSQLTEST_VARDIR/tmp/defaultsfile.cnf;
while ($i) {                              primary key(a, b), unique(b)) ENGINE=InnoDB;
dec $i;
}                            ADD CONSTRAINT C1 FOREIGN KEY (c, b) REFERENCES XY.T_1 (a, b);
ADD CONSTRAINT C2 FOREIGN KEY (b) REFERENCES XY.T_1(a);
while ($i) {   dec $i;
} DROP DATABASE XY;
PRIMARY KEY(a, b), UNIQUE(b)) ENGINE=InnoDB;
query_vertical SHOW CREATE TABLE `Table2`;
query_vertical SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_SCHEMA != 'PERFORMANCE_SCHEMA';
query_vertical SHOW CREATE TABLE Product_Order;
query_vertical SHOW CREATE TABLE Product;
query_vertical SHOW CREATE TABLE Customer;
query_vertical SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_SCHEMA != 'PERFORMANCE_SCHEMA';
disable_query_log;
while ($1) {  dec $1;
} enable_query_log;
connect(con_b30896461_test1,localhost,b30896461_test1,,test);
SELECT `B30896461`.`testFn`();
SELECT `B30896461`.`testfn`();
disable_query_log;
disable_result_log;
if ($lctn != 0) {   echo # testing database casemode;
SELECT `b30896461`.`testfn`();
} if ($lctn == 0) {   echo # testing database casemode;
SELECT `b30896461`.`testfn`();
} enable_query_log;
enable_result_log;
connect(con_b30896461_test2,localhost,b30896461_test2,,test);
SELECT `B30896461`.`testFn`();
SELECT `B30896461`.`testfn`();
disable_query_log;
disable_result_log;
if ($lctn != 0) {   echo # testing database casemode;
SELECT `b30896461`.`testfn`();
} if ($lctn == 0) {   echo # testing database casemode;
SELECT `b30896461`.`testfn`();
} enable_query_log;
enable_result_log;
disconnect con_b30896461_test1;
disconnect con_b30896461_test2;
create function f1() returns int begin   insert into mysqltest_A.t1 values (1);   insert into mysqltest_a.t2 values (1);   return 0; end|
connect (priv_conn,localhost,pauline,,db_x);
CREATE EVENT e_x1 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE db_x;
disconnect priv_conn;
alter event event2 on schedule every 1 year on completion preserve rename to event3 comment "new comment" do begin select 1; end__
alter event e_43 do alter event e_43 do set @a = 4;
alter event e_43 do begin   alter event e_43 on schedule every 5 minute;   insert into test_nested values(1); end|
echo '#________________________VAR_05_table_definition_cache__________________#' echo '##' SELECT COUNT(@@GLOBAL.table_definition_cache);
while($n) {   dec $n;
echo # $hex;
} DROP TABLE t1;
SELECT (184467440737095 BETWEEN 0 AND 18446744073709551500);
SELECT CAST(100 AS UNSIGNED) BETWEEN 1 AND -1;
SELECT CAST(100 AS UNSIGNED) NOT BETWEEN 1 AND -1;
SELECT CAST(0 AS UNSIGNED) BETWEEN 0 AND -1;
SELECT CAST(0 AS UNSIGNED) NOT BETWEEN 0 AND -1;
DO TRIM(-9223372036854775808) XOR '.D-';
DO OCT(-9223372036854775808);
SELECT ( 9223372036854775808 BETWEEN 9223372036854775808 AND 9223372036854775808 );
SELECT ( 9223372036854775807 BETWEEN 9223372036854775808 AND 1 );
SELECT ( -1 BETWEEN 9223372036854775808 AND 1 );
SELECT ( 0 BETWEEN 9223372036854775808 AND 1 );
SELECT ( 1 BETWEEN 9223372036854775808 AND 1 );
INSERT INTO t1 VALUES (repeat('1', 1300),'one'), (repeat('1', 1300),'two');
EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN t2 USING ( a ), 	LATERAL ( SELECT * FROM t3 WHERE t3.a = t2.a LIMIT 1 ) t3d, 	LATERAL ( SELECT * FROM t3 WHERE t3.a > t1.a LIMIT 1 ) t4d;
EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN (   t2 LEFT JOIN t3 USING ( a ) CROSS JOIN     LATERAL ( SELECT * FROM t4 WHERE t4.a = t3.a LIMIT 1 ) t4d ) ON t1.a = t4d.a;
CREATE TABLE t1 (   col_int_key INTEGER,   col_json JSON,   KEY mv_idx ((CAST(col_json->'$[*]' AS CHAR(40) ARRAY))) );
EXPLAIN FORMAT=tree SELECT /*+ NO_BNL(t1, t2) */ * FROM t2   JOIN t1 ON 1 WHERE (CAST("1" AS JSON) MEMBER OF( t1.col_json->'$[*]'));
EXPLAIN ANALYZE FOR CONNECTION 1;
EXPLAIN ANALYZE FORMAT=TRADITIONAL SELECT 1;
EXPLAIN ANALYZE FORMAT=JSON SELECT 1;
EXPLAIN ANALYZE FORMAT=TREE SELECT 1;
EXPLAIN FORMAT=tree SELECT (1 IN (SELECT 1 FROM t1)) WHERE FALSE;
EXPLAIN FORMAT=tree SELECT a IN (SELECT a FROM (table t1) AS d) FROM t1 GROUP BY (@b:=5);
EXPLAIN FORMAT=tree   (SELECT 1 FROM t1)   UNION ALL   SELECT 1 IN (SELECT 1 FROM t1) FROM t1 WHERE 1=2;
create table t1 (                 dummyKey INTEGER NOT NULL AUTO_INCREMENT,                 a001 TINYINT,                 a010 TINYINT,                 a012 TINYINT,                 a015 TINYINT,                 a016 TINYINT,                 a017 TINYINT,                 a019 TINYINT,                 a029 TINYINT,                 a030 TINYINT,                 a031 TINYINT,                 a032 TINYINT,                 a042 TINYINT,                 a043 TINYINT,                 a044 TINYINT,                 a3001 TINYINT,                 a3002 TINYINT,                 a3003 TINYINT,                 a3004 TINYINT,                 a3005 TINYINT,                 a3021 TINYINT,                 a3022 TINYINT,                 a BIT(6),                 b BIT(6),                 c BIT(6),                 d TINYINT,                 e TINYINT,                 f TINYINT,                 g TINYINT,                 h TINYINT,                 i TINYINT,                 j TINYINT,                 k TINYINT,                 l TINYINT,                 m TINYINT,                 n TINYINT,                 o TINYINT,                 a034 TINYINT, PRIMARY KEY USING HASH (dummyKey) ) engine=archive;
PREPARE stmt FROM    "SELECT CAST(RAND(2) * 1000 AS UNSIGNED), CAST(RAND(?) * 1000 AS UNSIGNED)     FROM t1 WHERE a = 1";
EXECUTE stmt USING @var;
SET @a:=999999999999999999999999999999999999999999999999999999999999999999999999999999999;
999999999999999999999999999999999999999999999999999999999999999999999999999999999;
do sqrt(weight_string(_eucjpms "0E+"));
CREATE PROCEDURE test_round_fn() BEGIN   DECLARE num_digits int;
SET num_digits := 3;
END| DELIMITER ;| CALL test_round_fn();
DO ROUND(0xe9b1, NULL);
DO COUNT(DISTINCT ROUND(CAST(SLEEP(0) AS DECIMAL), NULL));
SELECT CRC32(INSERT('foodyear', 1, 4, 'good'));
CREATE PROCEDURE crc32_proc (IN a CHAR, OUT b BIGINT)   SELECT CRC32(a) INTO b;
CREATE FUNCTION crc32_func(inputvar CHAR) RETURNS BIGINT BEGIN   DECLARE crcval BIGINT;
SELECT CRC32(inputvar) INTO crcval;
RETURN crcval;
END| DELIMITER ;| SELECT crc32_func('a');
PREPARE stmt1 FROM 'SELECT CRC32(?)';
EXECUTE stmt1 USING @val;
DEALLOCATE PREPARE stmt;
LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1 CHARACTER SET utf8;
do ((3273059463432352943 )* (-9223372036854775808 )) ;
do ((-9223372036854775808)* ( 3273059463432352943)) ;
CREATE PROCEDURE test_round(in arg bigint) BEGIN   DECLARE i int;   SET i = 0;   WHILE (i >= -20) DO     BEGIN       DECLARE CONTINUE HANDLER FOR SQLSTATE '22003' SHOW ERRORS;       SELECT arg, i, round(arg, i);     END;     SET i = i - 1;   END WHILE; END//
CREATE PROCEDURE test_round_unsigned(in arg bigint unsigned) BEGIN   DECLARE i int;   SET i = 0;   WHILE (i >= -20) DO     BEGIN       DECLARE CONTINUE HANDLER FOR SQLSTATE '22003' SHOW ERRORS;       SELECT arg, i, round(arg, i);     END;     SET i = i - 1;   END WHILE; END//
PREPARE st1 FROM "INSERT INTO t VALUES (? + ?)";
EXECUTE st1 USING @a,@b;
CREATE TABLE t1 SELECT   5.0 + 96 DIV 1,                     # Dividend is integer   5.0 + 96.1234 DIV 1,                # Dividend is decimal   5.0 + '96' DIV 1,                   # Dividend is string   5.0 + CAST('96' AS SIGNED) DIV 1,   # Dividend is function   5.0 + CAST('96' AS UNSIGNED) DIV 1;
rename database testdb1 to testdb2;
CREATE FUNCTION f1_simple_insert(my_f1 INTEGER) RETURNS INTEGER BEGIN    INSERT INTO t1_not_null SET f1 = 10, f2 = my_f1;    RETURN 1; END//
WHERE 1 = f1_simple_insert(f2) AND 1 = f1_simple_insert(f1);
CREATE FUNCTION f1_insert_select(my_f1 INTEGER) RETURNS INTEGER BEGIN    INSERT INTO t1_not_null SELECT * FROM t1_select WHERE f1 = my_f1;    RETURN 1; END//
CREATE FUNCTION f1_two_inserts() RETURNS INTEGER BEGIN    INSERT INTO t1_not_null SET f1 = 10, f2 = NULL;    INSERT INTO t1_not_null SET f1 = 10, f2 = 10;    RETURN 1; END//
CREATE FUNCTION f1_two_inserts() RETURNS INTEGER BEGIN    INSERT INTO t1_not_null SET f1 = 10, f2 = 10;    INSERT INTO t1_not_null SET f1 = 10, f2 = NULL;    RETURN 1; END//
CREATE FUNCTION f1_insert_with_two_rows() RETURNS INTEGER BEGIN    INSERT INTO t1_not_null(f1,f2) VALUES (10,10),(10,NULL);    RETURN 1; END//
if ($fixed_bug_35877) { UPDATE t1_aux SET f2 = 2 WHERE f1 = f1_two_inserts();
} CREATE VIEW v1_func AS SELECT f1_two_inserts() FROM t1_select;
CREATE FUNCTION f1_two_inserts_v1() RETURNS INTEGER BEGIN    INSERT INTO v1_not_null SET f1 = 10, f2 = 10;    INSERT INTO v1_not_null SET f1 = 10, f2 = NULL;    RETURN 1; END//
CREATE FUNCTION f1_two_inserts() RETURNS INTEGER BEGIN    INSERT INTO t1_child SET f1 = 1, f2 = 1;    INSERT INTO t1_child SET f1 = 2, f2 = 2;    RETURN 1; END//
EXPLAIN SELECT (SELECT dt.a         FROM   (SELECT 1 AS a, t2.a AS b                 FROM t2                 HAVING t1.a) dt     # <----- outer reference inside derived table.         WHERE dt.b=t1.a) AS subq    # <----- normal outer reference FROM t1;
(SELECT COUNT(dt1.f2) FROM (t1 AS dt1) WHERE dt1.f3 = v1.f1 )  FROM ( v1 RIGHT OUTER JOIN( t1 AS t2 STRAIGHT_JOIN t1 AS t3 ON 1) ON 1);
(SELECT SUM(dt2.f2) FROM (t1 AS dt1 STRAIGHT_JOIN t1  AS dt2 ON 1)  WHERE dt1.f3 = table1.f3) AS field1,  MAX(table2.f2) AS field4  FROM (view_t1 AS table1 RIGHT JOIN  ((t1 AS table2 JOIN t1 AS table3 ON (table3 .f1 = table2.f2))) ON 1)  WHERE table1 . f3 != 'x' ;
WHERE t2.f2 = ISNULL(dt.f1)) AS field1 FROM t1 AS dt GROUP BY field1;
CREATE USER IF NOT EXISTS view_u2@my.oracle.com;
CREATE USER IF NOT EXISTS event_u2@192.1.1.140;
CREATE USER IF NOT EXISTS trig_u2@xyz.com;
CREATE DEFINER=view_u2@my.oracle.com VIEW v3 AS SELECT * FROM t1;
CREATE DEFINER=view_u2@my.oracle.com VIEW v4 AS SELECT * FROM t1;
CREATE DEFINER=event_u2@192.1.1.140 EVENT e3 ON SCHEDULE AT '2037-01-01 00:00:00' DISABLE DO SET @a = 5;
CREATE DEFINER=event_u2@192.1.1.140 EVENT e4 ON SCHEDULE AT '2037-01-01 00:00:00' DISABLE DO SET @a = 5;
CREATE DEFINER=trig_u2@xyz.com TRIGGER trig3 BEFORE INSERT ON t1 FOR EACH ROW SET @sum = 1;
CREATE DEFINER=trig_u2@xyz.com TRIGGER trig4 BEFORE INSERT ON t1 FOR EACH ROW SET @sum = 1;
DROP USER view_u1, view_u2@my.oracle.com, event_u1, event_u2@192.1.1.140, trig_u1, trig_u2@xyz.com,           proc_u1, proc_u2@localhost, func_u1, func_u2, user_not_referenced_as_definer;
connect(con1,localhost,root);
disconnect con1;
connect(con2,localhost,root);
connect(con3,localhost,root);
LOCK TABLE tbl_with_partitions READ;
UNLOCK TABLES;
disconnect con2;
disconnect con3;
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SET NEW.b = NEW.a;   SET NEW.a = 1; END|
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SET NEW.a = 99;   SET NEW.b = NEW.a; END|
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SET NEW.a = NULL;   SET NEW.b = NEW.a;   SET NEW.a = 99; END|
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   SET NEW.a = NULL;   SET NEW.b = NEW.a;   SET NEW.a = 199; END|
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SET NEW.a_new_is_null = NEW.a IS NULL;   SET NEW.a = 99; END|
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   SET NEW.a_new_is_null = NEW.a IS NULL;   SET NEW.a_old_is_null = OLD.a IS NULL;   SET NEW.b_new_is_null = NEW.b IS NULL;   SET NEW.b_old_is_null = OLD.b IS NULL;   SET NEW.a = 99; END|
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SET NEW.b = NEW.a;   IF NEW.b IS NULL THEN     SET NEW.b = 1;   END IF; END|
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   IF (MOD(NEW.a, 2) = 0) THEN     SET NEW.b = NEW.a - 1;   END IF; END|
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   IF NEW.b IS NULL THEN     SET NEW.b = '123';   END IF; END |
LOAD DATA INFILE '../../std_data/wl6030.dat' INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '"';
LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE t2 FIELDS TERMINATED BY ',' ENCLOSED BY '"';
LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE v2 FIELDS TERMINATED BY ',' ENCLOSED BY '"';
LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE t2 FIELDS TERMINATED BY ',' ENCLOSED BY '"';
LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE v2 FIELDS TERMINATED BY ',' ENCLOSED BY '"';
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   SET NEW.a1 = IFNULL(NEW.a1, 10);   SET NEW.a2 = IFNULL(NEW.a2, 20); END; |
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN  SET NEW.a1 = COALESCE(NEW.a1, 5);
END;
| DELIMITER ;| INSERT INTO t1 VALUES (NULL, 3);
CREATE TRIGGER t1_trg_after_del AFTER DELETE ON t1 FOR EACH ROW SET @a := 1;
create trigger t1_bi before insert on t1 for each row   set new.udt:= convert_tz(new.ldt, 'Europe/Moscow', 'UTC');
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
query_vertical SELECT   CAST('2001-01-01 10:10:10.9999994' AS DATETIME) AS c1,   CAST('2001-01-01 10:10:10.9999995' AS DATETIME) AS c2,   CAST('2001-01-01 10:10:10.9999994' AS DATETIME(6)) AS c3,   CAST('2001-01-01 10:10:10.9999995' AS DATETIME(6)) AS c4,   CAST(20010101101010.9999994 AS DATETIME) AS c5,   CAST(20010101101010.9999995 AS DATETIME) AS c6,   CAST(20010101101010.9999994 AS DATETIME(6)) AS c7,   CAST(20010101101010.9999995 AS DATETIME(6)) AS c8;
query_vertical SELECT   EXTRACT(MICROSECOND FROM '2001-01-01 00:00:00.9999994') AS c1,   EXTRACT(MICROSECOND FROM '2001-01-01 00:00:00.9999995') AS c2,   EXTRACT(MICROSECOND FROM 20010101000000.9999994) AS c3,   EXTRACT(MICROSECOND FROM 20010101000000.9999995) AS c4;
CALL mtr.add_suppression("==[0-9]*== Warning: set address range perms: large range");
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
call mtr.add_suppression("Invalid .* username when attempting to connect to the master server");
CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch1.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch1';
CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch2.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch2';
CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE="binlog-default.000001", SOURCE_LOG_POS=4 FOR CHANNEL '';
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @save_storage_engine= @@default_storage_engine;
connect (con_1, localhost, user_name_robert_golebiowski1234,,);
SHOW GRANTS FOR u1@localhost USING r1;
connect (con1,localhost,u1,foo,);
SHOW GRANTS FOR u1@localhost USING r1;
disconnect con1;
connect(foo_conn, localhost, u1,);
connect(foo_conn, localhost, u1,);
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @save_storage_engine= @@session.default_storage_engine;
disable_query_log;
while ($1)  {   inc $2;
dec $1;
} enable_query_log;
create procedure proc_middle_a(p1 integer) begin   DECLARE l integer;   DECLARE EXIT HANDLER for 1 /* not sure how to handle exceptions */   begin     select "Oops ... now what ?";   end;   select "In prod_middle()";   create temporary table t1(a integer, b integer);   select GET_LOCK("user_mutex", 10) into l;   insert into t1 set a = p1, b = p1;   call proc_bottom_a(p1);   select RELEASE_LOCK("user_mutex") into l;   drop temporary table t1; end $$
create procedure proc_middle_b(p1 integer) begin   DECLARE l integer;   DECLARE EXIT HANDLER for SQLEXCEPTION, NOT FOUND   begin     begin       DECLARE CONTINUE HANDLER for SQLEXCEPTION, NOT FOUND       begin         /* Ignore errors from the cleanup code */       end;       select "Doing cleanup !";       select RELEASE_LOCK("user_mutex") into l;       drop temporary table t1;     end;     RESIGNAL;   end;   select "In prod_middle()";   create temporary table t1(a integer, b integer);   select GET_LOCK("user_mutex", 10) into l;   insert into t1 set a = p1, b = p1;   call proc_bottom_b(p1);   select RELEASE_LOCK("user_mutex") into l;   drop temporary table t1; end $$
load data infile '../../std_data/inconsistent_scan.csv' into table bureau columns terminated by "," ignore 1 lines;
connect (con1, localhost, root,,);
KILL QUERY @thread_id;
disconnect con1;
connect (ev_con1,localhost,ev_test,,events_test2);
disconnect ev_con1;
connect (con1,localhost,test,,test);
connect (con2,localhost,test,,test);
disconnect con1;
disconnect con2;
select t1.* as 'with_alias' from t1;
select t2.* as 'with_alias' from t2;
select t1.*, t1.* as 'with_alias' from t1;
select t1.* as 'with_alias', t1.* from t1;
select t1.* as 'with_alias', t1.* as 'alias2' from t1;
select t1.* as 'with_alias', a, t1.* as 'alias2' from t1;
select a, t1.* as 'with_alias' from t1;
select t1.* as 'with_alias', a from t1;
select a, t1.* as 'with_alias', b from t1;
select (select d from t2 where d > a), t1.* as 'with_alias' from t1;
select t1.* as 'with_alias', (select a from t2 where d > a) from t1;
select a as 'x', t1.* as 'with_alias' from t1;
select t1.* as 'with_alias', a as 'x' from t1;
select a as 'x', t1.* as 'with_alias', b as 'x' from t1;
select (select d from t2 where d > a) as 'x', t1.* as 'with_alias' from t1;
select t1.* as 'with_alias', (select a from t2 where d > a) as 'x' from t1;
select (select t2.* as 'x' from t2) from t1;
select a, (select t2.* as 'x' from t2) from t1;
select t1.*, (select t2.* as 'x' from t2) from t1;
insert into t3 select t1.* as 'with_alias' from t1;
insert into t3 select t2.* as 'with_alias', 1, 2 from t2;
insert into t3 select t2.* as 'with_alias', d as 'x', d as 'z' from t2;
insert into t3 select t2.*, t2.* as 'with_alias', 3 from t2;
create table t3 select t1.* as 'with_alias' from t1;
create table t3 select t2.* as 'with_alias', 1, 2 from t2;
create table t3 select t2.* as 'with_alias', d as 'x', d as 'z' from t2;
create table t3 select t2.*, t2.* as 'with_alias', 3 from t2;
PREPARE p FROM "SELECT sex, AVG(id), MIN(AVG(id)) OVER w min,         MAX(AVG(id)) OVER w max, NTILE(2) OVER w FROM t1     GROUP BY sex HAVING sex=(SELECT c FROM ss LIMIT 1) OR sex='F' OR sex IS NULL     WINDOW w AS (ORDER BY sex ROWS UNBOUNDED PRECEDING) ORDER BY sex DESC";
EXECUTE p;
EXECUTE p;
DROP PREPARE p;
SELECT t.*, MIN(t.rank) OVER (ROWS UNBOUNDED PRECEDING) min,        MAX(t.rank) OVER (ROWS UNBOUNDED PRECEDING) max FROM        (SELECT sex, id, date, ROW_NUMBER() OVER w AS row_no, RANK() OVER w AS `rank` FROM t1,t2         WHERE t1.id=t2.user_id         WINDOW w AS (PARTITION BY date ORDER BY id)        ) AS t;
prepare st_1180 from 'SELECT * FROM t1 WHERE ?="1111" and session_id = "abc"';
execute st_1180 using @arg1;
execute st_1180 using @arg1;
execute st_1180 using @arg1;
prepare st_1644 from 'insert into t1 values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
execute st_1644 using @arg01, @arg02, @arg03, @arg04, @arg05, @arg06, @arg07, @arg08, @arg09, @arg10,                       @arg11, @arg12, @arg13, @arg14, @arg15, @arg16, @arg17, @arg18, @arg19, @arg20;
execute st_1644 using @arg01, @arg02, @arg03, @arg04, @arg05, @arg06, @arg07, @arg08, @arg09, @arg10,                       @arg11, @arg12, @arg13, @arg14, @arg15, @arg16, @arg17, @arg18, @arg19, @arg20;
execute st_1644 using @arg01, @arg02, @arg03, @arg04, @arg05, @arg06, @arg07, @arg08, @arg09, @arg10,                       @arg11, @arg12, @arg13, @arg14, @arg15, @arg16, @arg17, @arg18, @arg19, @arg20;
prepare st_1676 from 'select a.cola, a.colb, a.cold from t1 a, t2 b where a.cola = ? and a.colb = ? and a.cold = ? and b.cola = a.cola and b.colb = a.colb and b.colc = a.cold';
execute st_1676 using @arg0, @arg1, @arg2;
prepare st_18492 from 'select * from t1 where 3 in (select (1+1) union select 1)';
execute st_18492;
prepare stmt1 from 'insert into t1 (a, b) values (?, ?)';
prepare stmt2 from 'insert into t2 (a, b) values (?, ?)';
execute stmt1 using @intarg, @varchararg;
execute stmt2 using @intarg, @varchararg;
execute stmt1 using @intarg, @UNDEFINED;
execute stmt2 using @intarg, @UNDEFINED;
execute stmt1 using @UNDEFINED, @varchararg;
execute stmt2 using @UNDEFINED, @varchararg;
execute stmt1 using @UNDEFINED, @nullarg;
execute stmt2 using @nullarg, @varchararg;
PREPARE stmt FROM 'select 1 from `t1` where `a` = any (select (@@tmpdir))';
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
CREATE FUNCTION p1(i INT) RETURNS INT BEGIN   SET @@sort_buffer_size= i;
RETURN i + 1;
END| DELIMITER ;| SELECT * FROM t2 WHERE a = @@sort_buffer_size AND p1(@@sort_buffer_size + 1) > a - 1;
PREPARE stmt FROM "SET PASSWORD FOR test_user1@'localhost' = 'SoSecret'";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET PASSWORD FOR @'localhost' = 'SoSecret';
PREPARE stmt FROM "SET PASSWORD FOR @'localhost' = 'SoSecret'";
SET PASSWORD FOR test_user1@'localhost' = NULL;
PREPARE stmt FROM "SET PASSWORD FOR test_user1@'localhost' = NULL";
PREPARE stmt FROM "SET PASSWORD FOR test_user2@'localhost' = 'SoSecret'";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
prepare s from 'select a<cast(? as signed) from t6';
execute s using @a;
execute s using @a;
PREPARE stmt FROM "SELECT * FROM mysql.user LIMIT 0";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "CREATE TABLE t1 AS SELECT * FROM mysql.user LIMIT 0";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "INSERT INTO t1 SELECT * FROM mysql.user LIMIT 1";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "UPDATE t1 SET user='mno'                    WHERE EXISTS (SELECT * FROM mysql.user LIMIT 1)";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "DELETE FROM t1                    WHERE EXISTS (SELECT * FROM mysql.user LIMIT 1)";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "SELECT * FROM mysql.user LIMIT 0 LOCK IN SHARE MODE";
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
create table t1 (         a int not null references t2,         b int not null references t2 (c),         primary key (a,b),         foreign key (a) references t3 match full,         foreign key (a) references t3 match partial,         foreign key (a,b) references t3 (c,d) on delete no action           on update no action,         foreign key (a,b) references t3 (c,d) on update cascade,         foreign key (a,b) references t3 (c,d) on delete set default,         foreign key (a,b) references t3 (c,d) on update set null) engine=myisam;
RENAME TABLE parent0 TO parent;
RENAME TABLE parent0 TO parent;
LOCK TABLES parent WRITE;
UNLOCK TABLES;
LOCK TABLES child READ, parent WRITE;
UNLOCK TABLES;
LOCK TABLES child WRITE, parent WRITE;
UNLOCK TABLES;
call mtr.add_suppression("Dictionary file not specified");
PREPARE stmt1 FROM 'UPDATE mysql.user SET authentication_string=(?) where USER = ?';
SET @a = REPEAT('a',2147483647);
EXECUTE stmt1 USING @a,@b;
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM 'UPDATE mysql.user SET authentication_string=(?) where USER = ?';
SET @a = REPEAT('a',1048576);
EXECUTE stmt1 USING @a,@b;
DEALLOCATE PREPARE stmt1;
connect (plug_con,localhost,user1,pass);
disconnect plug_con;
password validate password validate monkey CREATE USER 'user1'@'localhost' IDENTIFIED BY 'passWORD123#';
remove_file $MYSQLTEST_VARDIR/tmp/dictionary.txt;
remove_file $MYSQLTEST_VARDIR/tmp/dictionary2.txt;
connect (con2,localhost,root,,);  # Makes max_allowed_packet take effect, globally. select load_file("/proc/modules");
connect (con3,localhost,root,,);  # Makes max_allowed_packet take effect, globally. select load_file("/proc/self/fd/0");
disconnect con2;
disconnect con3;
CREATE TABLE t1 (c1 YEAR(4294967295));
CREATE TABLE t1 (c1 YEAR(4294967296));
c1 int(10) unsigned NOT NULL AUTO_INCREMENT,   c2 varchar(30) NOT NULL,   c3 smallint(5) unsigned DEFAULT NULL,   PRIMARY KEY (c1)) ENGINE = archive $data_directory $index_directory;
source $passwd_file;
connect(root_con,localhost,root,$new_pwd,mysql,,,SSL);
if ($cnt != $mysql_cnt) { SELECT TABLE_NAME,COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA='mysql' ORDER BY TABLE_NAME,ORDINAL_POSITION;
} SELECT user, host, plugin, LENGTH(authentication_string) > 0   FROM mysql.user ORDER BY user;
disconnect root_con;
remove_file $PASSWD_FILE;
remove_file $MYSQLD_LOG;
exec unset SUDO_USER && $MYSQL test -e "SELECT COUNT(*) AS zero_sudo_count FROM performance_schema.session_connect_attrs WHERE attr_name = 'os_sudouser' AND PROCESSLIST_ID=CONNECTION_ID()";
exec SUDO_USER=gizmo $MYSQL test -e "SELECT attr_value AS must_be_gizmo FROM performance_schema.session_connect_attrs WHERE ATTR_NAME = 'os_sudouser'";
while ($1) {   dec $1;
inc $2;
} SELECT count(*) FROM t1;
while ($1) {   while ($2)   {     dec $2;
}   dec $1;
} ALTER TABLE t2 ADD SPATIAL KEY(g);
while ($1) {   while ($2)   {     SELECT count(*) FROM t2;
dec $2;
}   dec $1;
} DROP TABLE t2;
HANDLER t1 OPEN;
HANDLER t1 READ a FIRST;
HANDLER t1 READ a NEXT;
HANDLER t1 READ a PREV;
HANDLER t1 READ a LAST;
HANDLER t1 CLOSE;
HANDLER t1 OPEN;
HANDLER t1 READ a FIRST;
HANDLER t1 READ a NEXT;
HANDLER t1 CLOSE;
rename table t0 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t1;
rename table t1 to t2;
rename table t1 to t1;
rename table t3 to t4, t2 to t3, t1 to t2, t4 to t2;
rename table t3 to t1, t2 to t3, t1 to t2, t4 to t1;
rename table t3 to t4, t5 to t3, t1 to t2, t4 to t1;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
send RENAME TABLE t1 TO t2, t3 to t4;
UNLOCK TABLES;
reap;
source include/wait_for_query_to_succeed.inc;
disconnect con2;
disconnect con1;
rename table test.t1 to nonexistingdb.t2;
connect (con1, localhost, root,,);
LOCK TABLES t1 READ;
RENAME TABLE t2 TO t3;
RENAME TABLE t1 TO t3;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
RENAME TABLE t1 TO t3;
RENAME TABLE t3 TO t4, t4 TO t5;
UNLOCK TABLES;
LOCK TABLES t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 READ, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t0 WRITE;
RENAME TABLE t0 TO t3;
UNLOCK TABLES;
LOCK TABLES t5 WRITE;
RENAME TABLE t5 TO t4;
UNLOCK TABLES;
LOCK TABLES t2 READ, t4 WRITE;
RENAME TABLE t4 TO t5;
UNLOCK TABLES;
LOCK TABLES t2 READ, t5 WRITE, t5 AS a WRITE, t5 AS b READ;
RENAME TABLE t5 TO t4;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t4 TO t2, t0 TO t4;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
RENAME TABLES t2 TO t1, t1 TO t3, t3 TO t5;
UNLOCK TABLES;
LOCK TABLES t4 WRITE, t5 WRITE, t6 WRITE;
RENAME TABLES t4 TO t1, t5 TO t2;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE;
RENAME TABLES t1 TO t0, t2 TO t4;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 READ;
RENAME TABLE v1 TO v2;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
RENAME TABLE v1 TO v3;
UNLOCK TABLES;
LOCK TABLES v2 WRITE, v3 WRITE;
RENAME TABLE v2 TO v0, v3 TO v2, v0 TO v3;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t4 WRITE;
RENAME TABLES t2 TO t0, t3 TO t2, t0 TO t3;
RENAME TABLE t1 TO t0, t4 TO t1, t0 TO t4;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t3 WRITE;
RENAME TABLE t1 TO t4;
UNLOCK TABLES;
disconnect con1;
select default(str), default(strnull), default(intg), default(rel) from t1;
explain select default(str), default(strnull), default(intg), default(rel) from t1;
select * from t1 where str <> default(str);
explain select * from t1 where str <> default(str);
SELECT s, 32 AS mi FROM t1 GROUP BY s HAVING DEFAULT(mi) IS NULL;
IMPORT TABLE FROM 't1_*.sdi';
connect (con1,localhost,test,,test);
lock table t1 write;
lock table t2 write;
unlock tables ;
send set global read_only=1;
unlock tables ;
reap;
lock table t1 read;
lock table t2 read;
unlock tables ;
unlock tables ;
unlock tables;
connect (root2,localhost,root,,test);
unlock tables;
disconnect root2;
disconnect con1;
connect (con_bug27440,127.0.0.1,mysqltest_u1,,test,$MASTER_MYPORT,);
disconnect con_bug27440;
connect (con1, localhost, user1);
disconnect con1;
RENAME TABLE t1 to t3;
connect (con1,localhost,test,,test);
connect (con2,localhost,root,,test);
UNLOCK TABLES;
FOR EACH ROW BEGIN END;
ADD DATAFILE 'ts1.ibd' ENGINE=INNODB;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd' ENGINE=INNODB;
EVERY 10 HOUR DO SELECT 1;
UNLOCK TABLES;
UNLOCK TABLES;
connect (con1,localhost,user1,,test);
connect (con2,localhost,root,,test);
call mtr.add_suppression(".*Password salt for user.*");
call mtr.add_suppression("Found invalid password for user:*");
connect(con1,localhost,kristofer,secret,,);
disconnect con1;
connect(con2,localhost,kristofer,badpassword,,);
connect(con2,localhost,kristofer,secret2,,);
SHOW CREATE USER 'kristofer'@'localhost';
change_user kristofer2,secret2;
disconnect con2;
connect(con3,localhost,kristofer,wrongpass,,);
connect(con3,localhost,kristofer,,,);
SHOW CREATE USER 'kristofer'@'localhost';
disconnect con3;
connect(con4,127.0.0.1,kristofer,,,);
connect(con1,localhost,kristofer,secret);
disconnect con1;
connect(con1,localhost,kristofer,secret);
connect(con1,localhost,kristofer,secret);
connect (con1, localhost, root,,);
INSERT INTO t1 SELECT REPEAT('1', 2*1024*1024);
remove_file $outfile;
disconnect con1;
remove_file $outfile;
echo '#________________________VAR_06_Host_Cache_Size__________________#' echo '##' SELECT COUNT(@@GLOBAL.Host_Cache_Size);
insert into t1 values (repeat('b',20));
select c cb20 from t1 where c=repeat('b',20);
DROP TABLE åäö, 日本語,  𩸽;
CREATE FUNCTION f1() RETURNS longblob BEGIN   DECLARE ret longblob;   SELECT statement_digest_text( "DROP TABLE t" ) INTO ret;   RETURN ret; END; //
prepare s from "DO SHA1(DATABASE());";
execute s;
replace_regex /version.*/VERSION/ /created.*/CREATED/ /last_altered.*/LAST_ALTERED/ /id.*/ID/ /\/\//\//;
replace_regex /version.*/VERSION/ /created.*/CREATED/ /last_altered.*/LAST_ALTERED/ /id.*/ID/ /\/\//\//;
replace_regex /version.*/VERSION/ /created.*/CREATED/ /last_altered.*/LAST_ALTERED/ /id.*/ID/ /\/\//\//;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES dst_t1 WRITE;
UNLOCK TABLES;
LOCK TABLES dst_t2 WRITE;
UNLOCK TABLES;
LOCK TABLES dst.dst_t2 WRITE;
UNLOCK TABLES;
replace_regex /version.*/VERSION/ /created.*/CREATED/ /last_altered.*/LAST_ALTERED/ /id.*/ID/ /\/\//\//;
replace_regex /version.*/VERSION/ /created.*/CREATED/ /last_altered.*/LAST_ALTERED/ /id.*/ID/ /\/\//\//;
replace_regex /version.*/VERSION/ /created.*/CREATED/ /last_altered.*/LAST_ALTERED/ /id.*/ID/ /\/\//\//;
replace_regex /version.*/VERSION/ /created.*/CREATED/ /last_altered.*/LAST_ALTERED/ /id.*/ID/ /\/\//\//;
SELECT TRACE RLIKE 'minmax_keypart_in_disjunctive_query' AS OK FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
SELECT @trace RLIKE "keypart_reference_from_where_clause";
SET @a:=5;
set @select=2,@t5=1.23456;
set @test_int=10,@test_double=1e-10,@test_string="abcdeghi",@test_string2="abcdefghij",@select=NULL;
select @test_int,@test_double,@test_string,@test_string2,@select;
show local variables like 'default_storage_engine';
show local variables like 'default_storage_engine';
SELECT @@global.global.key_buffer_size;
SELECT @@global.session.key_buffer_size;
SELECT @@global.local.key_buffer_size;
connect (con1,localhost,root,,);
disconnect con1;
set global sql_mode=repeat('a',80);
select @@&;
select @@@;
SET @@myisam_mmap_size= 500M;
SELECT UTC_DATE();
SET @@sql_notes = OF;
SET GLOBAL delay_key_write = OF;
SET @@sql_safe_updates = OF;
SET @@foreign_key_checks = OF;
SET @@unique_checks = OF;
SET @@sql_buffer_result = OF;
SET @@sql_quote_show_create = OF;
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* You need to use --log-bin to make --binlog-format work.");
CONNECT (con1,localhost,root,,test);
CONNECTION default;
DISCONNECT con1;
while($var_id <= $count_vars) { } SET @@sql_big_selects=@sql_big_selects_save;
PREPARE s FROM "set character_set_client = ?";
EXECUTE s USING @x;
DEALLOCATE PREPARE s;
create table t1 (c national character varying(10));
call mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] You need to use --log-bin to make --binlog-format work.");
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost USING r1;
connect(con1, localhost, u1, foo, test);
SELECT INSERT('𝌆テÀa', 2, 2, 'テb');
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set optimizer_switch=default;
call mtr.add_suppression(".*Out of memory *");
INSERT INTO t1 VALUES   (REPEAT(0x1125,200000), REPEAT(0x1125,200000)), ('', ''), ('', '');
source $passwd_file;
connect(root_con,localhost,root,$new_pwd,mysql);
disconnect root_con;
remove_file $PASSWD_FILE;
remove_file $MYSQLD_LOG;
remove_file $MYSQLD_LOG;
mkdir $DDIR;
remove_file $MYSQLD_LOG;
lock tables t1 write;
unlock tables;
lock tables t1 write, t1 as t0 read;
unlock tables;
lock tables t1 write, t1 as t0 read, t1 as t2 read;
unlock tables;
lock tables t1 write, t1 as t0 write, t1 as t2 read;
unlock tables;
lock tables t1 write, t1 as t0 write, t1 as t2 read, t1 as t3 read;
unlock tables;
lock tables t1 write, t1 as t0 write, t1 as t2 write;
unlock tables;
lock tables t1 write,t1 as b write, t2 write, t2 as c read;
lock tables t1 write,t1 as b write, t2 write, t2 as c read;
unlock tables;
lock tables t1 write;
unlock tables;
CREATE PROCEDURE p1() CREATE VIEW v1 AS SELECT * FROM t1;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
CREATE PROCEDURE p1() RENAME TABLE t2 TO t3;
CREATE FUNCTION f1() RETURNS INT BEGIN CALL p1(); RETURN 1; END $ DELIMITER ;$ SELECT f1();
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} set optimizer_switch=default;
if (!$mysql_errno) {   if (`SELECT @@session.debug LIKE '%trace%'`)   {   } } DROP TABLE IF EXISTS t1,t2;
while ($1) {   dec $1;
} ALTER TABLE t1 ADD INDEX i1(a);
load data infile '../../std_data/loaddata3.dat' into table v1 fields terminated by '' enclosed by '' ignore 1 lines;
load data infile '../../std_data/loaddata3.dat' ignore into table v1 fields terminated by '' enclosed by '' ignore 1 lines;
prepare stmt1 from "insert into v3(a) values (?);";
execute stmt1 using @a;
execute stmt1 using @a;
deallocate prepare stmt1;
prepare stmt1 from "insert into v3(a) select ?;";
execute stmt1 using @a;
execute stmt1 using @a;
deallocate prepare stmt1;
while ($colnum) {   dec $colnum;
} while ($colnum) {   dec $colnum;
} while ($colnum) {   dec $colnum;
} CREATE VIEW view_broken AS SELECT * FROM t1, t2, t3;
RENAME TABLES t1 TO t5, v1 TO v2;
RENAME TABLES t5 TO t1, v2 TO v1, t3 TO t4;
connect (con1,localhost,root,,test);
disconnect con1;
connect (con1,localhost,root,,test);
disconnect con1;
connect (con1,localhost,root,,test);
disconnect con1;
CREATE TABLE innodb_table1 (m INT, n INT,   FOREIGN KEY (n) REFERENCES t0(f1)) START TRANSACTION;
create procedure p1 ()    modifies sql data  begin    set profiling = ON;    select 'This p1 should show up in profiling';    insert into profile_log select count(*) from information_schema.profiling;  end//
create procedure p2()    deterministic  begin    set profiling = ON;    call p1();    select 'This p2 should show up in profiling';  end//
create procedure p3 ()    reads sql data  begin    set profiling = ON;    select 'This p3 should show up in profiling';    show profile;  end//
lock table t1 write;  select @@profiling;
unlock table;  select @@profiling;
PREPARE s FROM 'DO 1';
EXECUTE s;
DEALLOCATE PREPARE s;
call mtr.add_suppression("Can't create thread to");
connect (con1, localhost, root,,mysql);
connect (con2, localhost, root,,mysql);
connect (con3, localhost, root,,mysql);
connect (con4, localhost, root,,mysql);
disconnect con1;
disconnect con2;
disconnect con3;
connect (con1, localhost, root,,mysql);
connect (con2, localhost, root,,mysql);
connect (con3, localhost, root,,mysql);
connect (con4, localhost, root,,mysql);
disconnect con1;
disconnect con2;
disconnect con3;
call mtr.add_suppression("Out of memory");
connect (con1, localhost, root,,mysql);
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @save_storage_engine= @@default_storage_engine;
RENAME TABLE T1 TO T2;
select mysqltest.t1.* from MYSQLTEST.t1;
select MYSQLTEST.t1.* from MYSQLTEST.t1;
select MYSQLTEST.T1.* from MYSQLTEST.T1;
select MYSQLTEST.T1.* from T1;
select MYSQLTEST.t1.* from MYSQLTEST.t1;
drop table if exists İ,İİ;
create table İ (s1 int);
show create table İ;
drop table İ;
create table İİ (s1 int);
show create table İİ;
drop table İİ;
show create database mysql_TEST;
connect (con1,localhost,user_1,,db1);
connect (con2,localhost,USER_1,,db1);
disconnect con1;
disconnect con2;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
perl;
my $dir = $ENV{'MYSQLTEST_VARDIR'};
open ( OUTPUT, ">$dir/tmp/mysqld_path_file.inc") ;
my $path = $ENV{MYSQLD};
$path =~ /^(.*)\/([^\/]*)$/;
print OUTPUT "let \$mysqld_path = $1;\n";
print OUTPUT "let \$mysqld_bin = $2;\n";
close (OUTPUT);
disconnect con1;
SELECT @@global.validate_password.check_user_name;
connect(base_user_con,localhost,base_user,base_user,test);
disconnect base_user_con;
connect(login_user_con,localhost,login_user,,test);
disconnect login_user_con;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set @read_rnd_buffer_size_save= @@read_rnd_buffer_size;
create table `about:text` (  _id int not null auto_increment, `about:text` varchar(255) not null default '', primary key (_id) );
connect (con1, localhost, root,,);
INSERT INTO t1 SELECT CONCAT(REPEAT('1', 1024*1024 - 27),                               "\'\r dummydb dummyhost");
remove_file $outfile;
disconnect con1;
remove_file $outfile;
if(!$federated_support) { 	skip "Test need FEDERATED engine";
} create table t1 (id int) engine=FEDERATED;
SHOW GRANTS FOR u1@localhost USING r1;
connect(con1, localhost, u1, foo, db1);
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
SHOW GRANTS FOR u1@localhost USING r1;
connect(con2, localhost, u2, oof, db1);
disconnect con1;
disconnect con2;
UNLOCK TABLES;
enable_info;
disable_info;
INSERT INTO t0 SET a=1, b=20 AS n ON DUPLICATE KEY UPDATE b= n.b;
INSERT INTO t1 SET b='11', a=0 AS n ON DUPLICATE KEY UPDATE b= n.a, a= n.b;
INSERT INTO t1 SET b='11', a=0 AS n ON DUPLICATE KEY UPDATE b= n.a, a= n.b;
source $passwd_file;
connect(root_con,localhost,root,$new_pwd,mysql);
if ($cnt != $mysql_cnt) { SELECT TABLE_NAME,COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA='mysql' ORDER BY TABLE_NAME,ORDINAL_POSITION;
} SELECT user, host, plugin, LENGTH(authentication_string)   FROM mysql.user ORDER by user;
disconnect root_con;
remove_file $PASSWD_FILE;
remove_file $MYSQLD_LOG;
write_file $BOOTSTRAP_SQL;
connect(root_con,localhost,root,,mysql);
if ($cnt != $mysql_cnt) { SELECT TABLE_NAME,COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA='mysql' ORDER BY TABLE_NAME,ORDINAL_POSITION;
} SELECT user, host, plugin, LENGTH(authentication_string)   FROM mysql.user ORDER BY user;
disconnect root_con;
remove_file $MYSQLD_LOG;
remove_file $BOOTSTRAP_SQL;
remove_file $MYSQLD_LOG;
remove_file $MYSQLD_LOG;
remove_file $MYSQLD_LOG;
remove_file $MYSQL_TMP_DIR/keyring;
remove_file $MYSQLD_LOG;
write_file $BOOTSTRAP_SQL;
create table t1 (a int not null,b int not null, primary key using BTREE (a)) engine=heap comment="testing heaps";
source include/force_binlog_format_statement.inc;
if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) IN ('Win32', 'Win64', 'Windows')`) { } if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) NOT IN ('Win32', 'Win64', 'Windows')`) { } RESET MASTER;
if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) IN ('Win32', 'Win64', 'Windows')`) { } if (`SELECT CONVERT(@@VERSION_COMPILE_OS USING latin1) NOT IN ('Win32', 'Win64', 'Windows')`) { } RESET MASTER;
connect (test1,localhost,mysqltest1,,test);
connect (test2,localhost,mysqltest2,,test);
connect (con1,localhost,root,,test);
disconnect con1;
connect(con1,localhost,kristofer,secret,,,,SSL);
disconnect con1;
connect(con2,localhost,kristofer,secret2,,,,SSL);
SHOW GRANTS FOR 'kristofer'@'localhost';
change_user kristofer2,secret2;
disconnect con2;
connect(con3,localhost,kristofer,,,,,SSL);
SHOW GRANTS FOR 'kristofer'@'localhost';
disconnect con3;
connect(con4,127.0.0.1,kristofer,,,,,SSL);
connect(con3,localhost,kristofer,awesomeness,,,,SSL);
SHOW GRANTS FOR 'kristofer'@'localhost';
disconnect con3;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
send INSERT INTO t1 VALUES (1);
reap;
reap;
disconnect con1;
disconnect con2;
create table t_illegal (a int, b int, check a>b);
create table t_illegal (a int, b int, constraint abc check a>b);
create table t_illegal (a int, b int, constraint abc);
alter table t_11714 add constraint cons1;
CREATE TABLE t_illegal (col_1 INT CHECK something (whatever));
CREATE TABLE t_illegal (col_1 INT CHECK something);
ALTER TABLE t1 DROP CONSTRAINT;
CREATE PROCEDURE test_drop_constraint() BEGIN   ALTER TABLE t1 ADD CONSTRAINT constraint_name UNIQUE(f2);
END$ DELIMITER ;$ CALL test_drop_constraint();
PREPARE drop_constraint_stmt FROM   'ALTER TABLE t1 DROP CONSTRAINT `primary`,                   DROP CONSTRAINT f2_unique,                   DROP CONSTRAINT fk,                   DROP CONSTRAINT f2_check';
EXECUTE drop_constraint_stmt;
EXECUTE drop_constraint_stmt;
DROP PREPARE drop_constraint_stmt;
ALTER TABLE t1 ALTER CONSTRAINT;
ALTER TABLE t1 ALTER CONSTRAINT unknown NOT;
CREATE PROCEDURE test_alter_constraint() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     SELECT "Error ER_ALTER_CONSTRAINT_ENFORCEMENT_NOT_SUPPORTED is reported."     AS error_message;
END;
$ DELIMITER ;$ CALL test_alter_constraint();
PREPARE drop_constraint_stmt FROM   'ALTER TABLE t1 DROP CONSTRAINT `primary`,                   DROP CONSTRAINT f2_unique,                   DROP CONSTRAINT fk,                   DROP CONSTRAINT f2_check';
PREPARE alter_constraint_stmt FROM   'ALTER TABLE t1 ALTER CONSTRAINT f2_check NOT ENFORCED';
EXECUTE alter_constraint_stmt;
EXECUTE drop_constraint_stmt;
EXECUTE alter_constraint_stmt;
EXECUTE drop_constraint_stmt;
DROP PREPARE alter_constraint_stmt;
DROP PREPARE drop_constraint_stmt;
create function f2_base() returns int begin   insert into t1_base values (1);   return 0; end|
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
MfmqTBMBAAAALgAAAN0AAAAAACgAAAAAAAEABHRlc3QAB3QxX2Jhc2UAAQMAAQ== MfmqTBcBAAAAIgAAAP8AAAAAACgAAAAAAAEAAf/+AQAAAA== ';
prepare stmt1 from 'select * from t1_base';
deallocate prepare stmt1;
call mtr.add_suppression("Slave SQL.*Can.t execute the query because you have a conflicting read lock., Error_code: MY-001223");
prepare stmt1 from 'insert into t1_base values (1)';
execute stmt1;
unlock tables;
unlock tables;
unlock tables;
deallocate prepare stmt1;
prepare stmt1 from 'insert into t1_base values (1)';
deallocate prepare stmt1;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
handler t1_base open;
handler t1_base read first;
handler t1_base close;
unlock tables;
handler t1_base open;
handler t1_base read first;
handler t1_base close;
unlock tables;
set @id:= connection_id();
kill query @id;
unlock tables;
kill query @id;
unlock tables;
unlock tables;
lock tables t1_base read;
unlock tables;
lock tables t1_base read;
unlock tables;
unlock tables;
lock tables t1_base write;
unlock tables;
unlock tables;
unlock tables;
lock tables t1_temp write;
unlock tables;
lock tables t1_temp write;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
release savepoint sv1;
unlock tables;
unlock tables;
unlock tables;
release savepoint sv1;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
connect (con_tmp,localhost,root,,);
disconnect con_tmp;
connect (con_tmp,localhost,root,,);
disconnect con_tmp;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
disconnect con1;
disconnect con2;
disconnect con3;
connect (con1,localhost,root);
disconnect con1;
connect (con1,localhost,root);
disconnect con1;
insert into t1 (a) select b from t2 on duplicate key update a=default(b);
create table BIT_XOR(a int);
create table BIT_XOR (a int);
drop table BIT_XOR;
create table BIT_XOR(a int);
create table BIT_XOR (a int);
select abs(3 AS three);
select abs(3 three);
select abs(3 AS "three");
select abs(3 "three");
select instr("foobar" AS p1, "bar");
select instr("foobar" p1, "bar");
select instr("foobar" AS "p1", "bar");
select instr("foobar" "p1", "bar");
select instr(@foobar "p1", "bar");
select instr("foobar", "bar" AS p2);
select instr("foobar", "bar" p2);
select instr("foobar", "bar" AS "p2");
select instr("foobar", "bar" "p2");
select instr("foobar", @bar "p2");
select instr("foobar" AS p1, "bar" AS p2);
select conv(255 AS p1, 10, 16);
select conv(255 p1, 10, 16);
select conv(255 AS "p1", 10, 16);
select conv(255 "p1", 10, 16);
select conv(255, 10 AS p2, 16);
select conv(255, 10 p2, 16);
select conv(255, 10 AS "p2", 16);
select conv(255, 10 "p2", 16);
select conv(255, 10, 16 AS p3);
select conv(255, 10, 16 p3);
select conv(255, 10, 16 AS "p3");
select conv(255, 10, 16 "p3");
select conv(255 AS p1, 10 AS p2, 16 AS p3);
select atan(10 AS p1);
select atan(10 p1);
select atan(10 AS "p1");
select atan(10 "p1");
select atan(10 AS p1, 20);
select atan(10 p1, 20);
select atan(10 AS "p1", 20);
select atan(10 "p1", 20);
select atan(10, 20 AS p2);
select atan(10, 20 p2);
select atan(10, 20 AS "p2");
select atan(10, 20 "p2");
select atan(10 AS p1, 20 AS p2);
STOP SLAVE ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, ;
STOP SLAVE ,,,,,,,,,,,,, sql_thread, ,,,,,,,,,,,,,,,,,,, ;
STOP SLAVE ,,,,,,,,,,,,, io_thread, ,,,,,,,,,,,,,,,,,,, ;
START TRANSACTION ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, ;
SELECT (SELECT EXISTS(SELECT * LIMIT 1 ORDER BY VALUES (c00)));
DELETE FROM b ORDER BY(SELECT 1 FROM a ORDER BY a ORDER BY a);
SELECT '' IN (SELECT '1' c FROM t1 ORDER BY '' ORDER BY '') FROM t1;
SELECT 1 FROM t1 FOR UPDATE UNION SELECT 1 FROM t1 ORDER BY 1 LIMIT 1;
SELECT 1 FROM t1 WHERE 1 INTO @var17727401 GROUP BY 1 HAVING 1 ORDER BY 1 LIMIT 1;
SELECT (SELECT 1 FROM t1 INTO @var17727401);
SELECT 1 FROM (SELECT 1 FROM t1 INTO @var17727401) a;
SELECT EXISTS(SELECT 1 FROM t1 INTO @var17727401);
SELECT 1 FROM t1 INTO @var17727401 UNION SELECT 1 FROM t1 INTO t1;
(SELECT 1 FROM t1 INTO @var17727401) UNION (SELECT 1 FROM t1 INTO t1);
((SELECT 1 FROM t1 ORDER BY 1) LIMIT 1) ORDER BY 1);
((SELECT 1 FROM t1 LIMIT 1) ORDER BY 1) LIMIT 1);
create table t1 (a int not null,b int not null, primary key using HASH (a)) engine=heap comment="testing heaps";
connect (con1,localhost,root,,);
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
drop function if exists bug17615|
create table t3 (a varchar(256) unicode)|
create function bug17615() returns varchar(256) unicode begin   declare tmp_res varchar(256) unicode;   set tmp_res= 'foo string';   return tmp_res; end|
insert into t3 values(bug17615())|
select * from t3|
drop function bug17615|
drop table t3|
CREATE FUNCTION f(f1 VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_unicode_ci)   RETURNS VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_danish_ci BEGIN   DECLARE f2 VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_swedish_ci;   DECLARE f3 VARCHAR(64) CHARACTER SET ucs2 COLLATE ucs2_bin;   SET f1= concat(collation(f1), ' ', collation(f2), ' ', collation(f3));   RETURN f1; END|
SELECT f('a')|
SELECT collation(f('a'))|
DROP FUNCTION f|
CREATE FUNCTION f()   RETURNS VARCHAR(64) UNICODE BINARY BEGIN   RETURN ''; END|
CREATE FUNCTION f1()   RETURNS VARCHAR(64) CHARACTER SET ucs2 BEGIN   DECLARE f1 VARCHAR(64) CHARACTER SET ucs2;   DECLARE f2 VARCHAR(64) CHARACTER SET ucs2;   SET f1='str';   CALL p1(f1, f2);   RETURN f2; END|
SELECT f1()|
DROP PROCEDURE p1|
DROP FUNCTION f1|
CREATE FUNCTION f(f1 VARCHAR(64) COLLATE ucs2_unicode_ci)   RETURNS VARCHAR(64) CHARACTER SET ucs2 BEGIN   RETURN 'str'; END|
CREATE FUNCTION f(f1 VARCHAR(64) CHARACTER SET ucs2)   RETURNS VARCHAR(64) COLLATE ucs2_unicode_ci BEGIN   RETURN 'str'; END|
CREATE FUNCTION f(f1 VARCHAR(64) CHARACTER SET ucs2)   RETURNS VARCHAR(64) CHARACTER SET ucs2 BEGIN   DECLARE f2 VARCHAR(64) COLLATE ucs2_unicode_ci;   RETURN 'str'; END|
source include/show_binlog_events.inc;
GRANT `admin-db1t1` TO `admin-db1` WITH ADMIN OPTION;
connect(con1, localhost, app-middleware-db1, foo, test);
GRANT r1 TO `app-middleware-db1`@`localhost` WITH ADMIN OPTION;
SHOW GRANTS FOR CURRENT_USER() USING `admin-db1`;
connect(con2, localhost, app, foo, test);
GRANT `admin-db1t1` TO `app`@`localhost` WITH ADMIN OPTION;
disconnect con1;
disconnect con2;
connect(con1, localhost, u1, foo, test);
disconnect con1;
GRANT r1 TO u1@localhost WITH ADMIN OPTION;
connect(con1, localhost, u1, foo, test);
GRANT r1 TO u2@localhost WITH ADMIN OPTION;
GRANT r2 TO u2@localhost WITH ADMIN OPTION;
connect(con2, localhost, u3, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
GRANT r3 TO r2 WITH ADMIN OPTION;
GRANT r3 TO u1 WITH ADMIN OPTION;
disconnect con1;
connect(con1, localhost, u1, foo, test);
GRANT r3 TO u2 WITH ADMIN OPTION;
cat_file $MYSQLD_DATADIR/test_string_service.log;
remove_file $MYSQLD_DATADIR/test_string_service.log;
call mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
if ($lctn == 1) { } if ($lctn == 2) { } TRUNCATE TABLE mysql.help_topic;
disable_query_log;
enable_query_log;
disable_query_log;
enable_query_log;
disable_query_log;
enable_query_log;
disable_query_log;
enable_query_log;
disable_query_log;
enable_query_log;
disable_query_log;
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' FROM information_schema.schemata LIMIT 0, 5;
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' FROM schemata LIMIT 0, 5;
enable_query_log;
connect (con28181_1,localhost,user_1,,mysqltest);
into outfile "../../tmp/outfile-test.4" fields terminated by ',' optionally enclosed by '"'  lines terminated by '\n' from information_schema.schemata where schema_name like 'mysqltest';
disconnect con28181_1;
connect (con28181_2,localhost,user_1,,mysqltest);
into outfile "../../tmp/outfile-test.4" fields terminated by ',' optionally enclosed by '"'  lines terminated by '\n' from information_schema.schemata where schema_name like 'mysqltest';
disconnect con28181_2;
connect(con1,localhost,privtest,,);
disconnect con1;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=2;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=2;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=2;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr3_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=3;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW FOLLOWS tr0_bi SET @a:=2;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr3_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=3;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW PRECEDES tr0_bi SET @a:=2;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=2;
CREATE TRIGGER tr1_bu BEFORE UPDATE ON t1 FOR EACH ROW SET @a:=3;
CREATE TRIGGER tr3_bi BEFORE INSERT ON t1 FOR EACH ROW FOLLOWS tr2_bi SET @a:=3;
CREATE TRIGGER tr2_bu BEFORE UPDATE ON t1 FOR EACH ROW FOLLOWS tr1_bu SET @a:=3;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr1_bu BEFORE UPDATE ON t1 FOR EACH ROW SET @a:=3;
CREATE TRIGGER tr2_bu BEFORE UPDATE ON t1 FOR EACH ROW FOLLOWS tr1_bi SET @a:=3;
CREATE TRIGGER tr2_au AFTER UPDATE ON t1 FOR EACH ROW FOLLOWS tr1_bi SET @a:=3;
CREATE TRIGGER tr1_au AFTER UPDATE ON t1 FOR EACH ROW FOLLOWS tr1_bu SET @a:=3;
CREATE TRIGGER tr1_ai AFTER INSERT ON t1 FOR EACH ROW FOLLOWS tr1_bi SET @a:=3;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=2;
CREATE TRIGGER tr1_bu BEFORE UPDATE ON t1 FOR EACH ROW SET @a:=3;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=2;
CREATE TRIGGER tr0_bi BEFORE INSERT ON t1 FOR EACH ROW PRECEDES tr1_bi SET @a:=0;
CREATE TRIGGER tr1_1_bi BEFORE INSERT ON t1 FOR EACH ROW FOLLOWS tr1_bi SET @a:=0;
CREATE TRIGGER tr1_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=1;
CREATE TRIGGER tr2_bi BEFORE INSERT ON t1 FOR EACH ROW SET @a:=2;
CREATE TRIGGER tr1_bu BEFORE UPDATE ON t1 FOR EACH ROW SET @a:=3;
unlock tables;
unlock tables;
VALUES ROW(1, 10);
VALUES ROW(1, 10), ROW(2, 20);
SELECT * FROM (VALUES ROW(1, 10)) AS dt;
SELECT * FROM (VALUES ROW(1, 10), ROW(2, 20)) AS dt;
VALUES ROW(1, 10), ROW(2);
VALUES ROW(1), ROW(2, 20);
TABLE t0;
SELECT * FROM (TABLE t0) AS dt;
SELECT * FROM t0 JOIN (VALUES ROW(2, 20)) AS dt;
SELECT * FROM t0 JOIN (VALUES ROW(2, 20), ROW(3, 30)) AS dt;
SELECT * FROM t0 LEFT JOIN (VALUES ROW(2, 20), ROW(3, 30)) AS dt ON t0.a = dt.column_0;
SELECT * FROM t0 LEFT JOIN (VALUES ROW(1, 20), ROW(1, 30)) AS dt ON t0.a = dt.column_0;
SELECT * FROM t0 RIGHT JOIN (VALUES ROW(2, 20), ROW(3, 30)) AS dt ON t0.a = dt.column_0;
SELECT * FROM t0 RIGHT JOIN (VALUES ROW(1, 20), ROW(1, 30)) AS dt ON t0.a = dt.column_0;
SELECT * FROM (VALUES ROW(1), ROW(2)) AS dt0 NATURAL JOIN (VALUES ROW(1, 10), ROW(2, 20)) AS dt1;
SELECT * FROM (VALUES ROW(1), ROW(2)) AS dt0 NATURAL JOIN (VALUES ROW(1, 10), ROW(1, 20)) AS dt1;
VALUES ROW(1) UNION SELECT 2;
VALUES ROW(1, 10) UNION SELECT 2, 20;
VALUES ROW((SELECT 1), 10);
VALUES ROW(1, 10), ROW(2, "20");
SELECT * FROM (VALUES ROW(1, 10), ROW(2, "20") UNION SELECT 3, 30) AS dt;
SELECT * FROM (SELECT 1, 10 UNION VALUES ROW(2, 20), ROW(3, "30")) AS dt;
VALUES ROW((SELECT a FROM t0), 10);
SELECT * FROM t0 WHERE a IN (VALUES ROW(1));
SELECT * FROM t0 WHERE a IN (VALUES ROW(1), ROW(2));
SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, 10));
SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, 10), ROW(2, 20));
SELECT * FROM t0 WHERE a NOT IN (VALUES ROW(1));
SELECT * FROM t0 WHERE a NOT IN (VALUES ROW(1), ROW(2));
SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10));
SELECT * FROM t0 WHERE (a, b) NOT IN (VALUES ROW(1, 10), ROW(2, 20));
SELECT * FROM t0 WHERE a >ALL (VALUES ROW(1));
SELECT * FROM t0 WHERE a >ALL (VALUES ROW(1), ROW(2));
SELECT * FROM t0 WHERE a <ANY (VALUES ROW(1));
SELECT * FROM t0 WHERE a <ANY (VALUES ROW(1), ROW(2));
VALUES ROW();
VALUES ROW(RAND(0), RAND(1));
SELECT * FROM t0 WHERE b IN (VALUES ROW(a*10));
VALUES ROW(1, NULL);
VALUES ROW(1, 10), ROW(2, NULL);
SELECT * FROM t0 WHERE (a, b) IN (VALUES ROW(1, NULL));
INSERT INTO t SELECT * FROM (VALUES ROW(1, 11), ROW(2, 20)) AS n(a, b) ON DUPLICATE KEY UPDATE b= n.b;
VALUES ROW(DEFAULT);
SELECT * FROM (VALUES ROW(DEFAULT)) AS dt;
INSERT INTO t VALUES ROW(DEFAULT(a), 20);
INSERT INTO t VALUES ROW(DEFAULT(a) + 1, 30);
VALUES ROW(1, 1.0, 1.0E0, '1', DATE'2000-01-01', TIME'00:00:01',            TIMESTAMP'2000-01-01 00:00:01', CAST('{"j":"1"}' AS JSON)),        ROW(2, 2.0, 2.0E0, '2', DATE'2000-01-02', TIME'00:00:02',            TIMESTAMP'2000-01-01 00:00:01', CAST('{"j":"2"}' AS JSON));
CREATE VIEW v AS VALUES;
CREATE VIEW v AS VALUES ROW(1);
CREATE VIEW v(x) AS VALUES ROW(1);
CREATE VIEW v AS SELECT * FROM (VALUES ROW(1)) AS t1;
CREATE VIEW v AS SELECT * FROM (VALUES ROW(1)) AS t1(x);
CREATE VIEW v(x) AS SELECT * FROM (VALUES ROW(1)) AS t1(z);
CREATE VIEW v(x, y) AS VALUES ROW(1,2), ROW(2,4), ROW(3,6);
SELECT DISTINCT SQL_BIG_RESULT col_json, col_char FROM ( VALUES   ROW( 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', NULL, NULL ),   ROW( NULL, NULL, '"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"' ) ) AS t1 ( col_char, col_time, col_json ) GROUP BY col_time ORDER BY col_json;
SELECT t1.col FROM (TABLE t) AS t1,      (SELECT * FROM (VALUES ROW('Y')) AS sq_t1, t) AS t2;
SELECT 1 FROM (TABLE t1) AS table1 JOIN t2 AS table2      ON table1.x = table2.y WHERE table1.x IN (VALUES ROW('B'));
SELECT 1 FROM (TABLE t1) AS table1 JOIN t2 AS table2      ON table1.x = table2.y WHERE table1.x IN (VALUES ROW(NULL));
SELECT 1 FROM (TABLE t1) AS table1 JOIN t2 AS table2      ON table1.x = table2.y WHERE table1.x IN (VALUES ROW(NULL), ROW('B'));
VALUES ROW(1), ROW(2) LIMIT 1;
(VALUES ROW(1), ROW(2), ROW(3), ROW(4), ROW(5)) LIMIT 2 OFFSET 3;
TABLE t1 LIMIT 5 OFFSET 5;
VALUES ROW(1) ORDER BY 1;
VALUES ROW(1) ORDER BY 1 DESC;
(VALUES ROW(1)) ORDER BY 1;
(VALUES ROW(1)) ORDER BY 1 DESC;
VALUES ROW(1),ROW(2) ORDER BY 1;
VALUES ROW(1),ROW(2) ORDER BY 1 DESC;
(VALUES ROW(1),ROW(2)) ORDER BY 1;
(VALUES ROW(1),ROW(2)) ORDER BY 1 DESC;
VALUES ROW(1,9),ROW(2,4) ORDER BY 2;
VALUES ROW(1,9),ROW(2,4) ORDER BY 2 DESC;
(VALUES ROW(1,9),ROW(2,4)) ORDER BY 2;
(VALUES ROW(1,9),ROW(2,4)) ORDER BY 2 DESC;
VALUES ROW(1) ORDER BY '1';
VALUES ROW(1) ORDER BY '1' DESC;
(VALUES ROW(1)) ORDER BY '1';
(VALUES ROW(1)) ORDER BY '1' DESC;
VALUES ROW(1),ROW(2) ORDER BY '1';
VALUES ROW(1),ROW(2) ORDER BY '1' DESC;
(VALUES ROW(1),ROW(2)) ORDER BY '1';
(VALUES ROW(1),ROW(2)) ORDER BY '1' DESC;
VALUES ROW(1,9),ROW(2,4) ORDER BY '2';
VALUES ROW(1,9),ROW(2,4) ORDER BY '2' DESC;
(VALUES ROW(1,9),ROW(2,4)) ORDER BY '2';
(VALUES ROW(1,9),ROW(2,4)) ORDER BY '2' DESC;
VALUES ROW(1),ROW(2) ORDER BY 1;
VALUES ROW(1),ROW(2) ORDER BY 1 DESC;
VALUES ROW(1) ORDER BY (SELECT 1);
VALUES ROW(1) ORDER BY (SELECT 1) DESC;
(VALUES ROW(1)) ORDER BY (SELECT 1);
(VALUES ROW(1)) ORDER BY (SELECT 1) DESC;
VALUES ROW(1),ROW(2) ORDER BY (SELECT 1);
VALUES ROW(1),ROW(2) ORDER BY (SELECT 1) DESC;
(VALUES ROW(1),ROW(2)) ORDER BY (SELECT 1);
(VALUES ROW(1),ROW(2)) ORDER BY (SELECT 1) DESC;
VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT 2);
VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT 2) DESC;
(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT 2);
(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT 2) DESC;
VALUES ROW(1) ORDER BY column_0;
VALUES ROW(1) ORDER BY column_0 DESC;
(VALUES ROW(1),ROW(2)) ORDER BY column_0;
(VALUES ROW(1),ROW(2)) ORDER BY column_0 DESC;
VALUES ROW(1),ROW(2) ORDER BY column_0;
VALUES ROW(1),ROW(2) ORDER BY column_0 DESC;
(VALUES ROW(1),ROW(2)) ORDER BY column_0;
(VALUES ROW(1),ROW(2)) ORDER BY column_0 DESC;
VALUES ROW(1,9),ROW(2,4) ORDER BY column_1;
VALUES ROW(1,9),ROW(2,4) ORDER BY column_1 DESC;
(VALUES ROW(1,9),ROW(2,4)) ORDER BY column_1;
(VALUES ROW(1,9),ROW(2,4)) ORDER BY column_1 DESC;
VALUES ROW(1) ORDER BY (SELECT column_0);
VALUES ROW(1) ORDER BY (SELECT column_0) DESC;
(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0);
(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0) DESC;
VALUES ROW(1),ROW(2) ORDER BY (SELECT column_0);
VALUES ROW(1),ROW(2) ORDER BY (SELECT column_0) DESC;
(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0);
(VALUES ROW(1),ROW(2)) ORDER BY (SELECT column_0) DESC;
VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT column_1);
VALUES ROW(1,9),ROW(2,4) ORDER BY (SELECT column_1) DESC;
(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT column_1);
(VALUES ROW(1,9),ROW(2,4)) ORDER BY (SELECT column_1) DESC;
SELECT (VALUES ROW(1) ORDER BY t) AS a FROM t;
SELECT (VALUES ROW(1) ORDER BY w) AS a FROM t;
WHERE USER != 'event_scheduler'`;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set @save_storage_engine= @@session.default_storage_engine;
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,u1,,test);
HANDLER s1.t1 OPEN;
HANDLER s1.t1 OPEN AS t1;
HANDLER t1 READ k1 FIRST;
HANDLER t1 READ k1=(1,10);
disconnect con1;
unlock tables;
unlock tables;
unlock tables;
lock tables t1 read;
connect (addconroot1, localhost, root,,);
connect (addconroot2, localhost, root,,);
unlock tables;
disconnect addconroot2;
disconnect addconroot1;
lock table t1 read;
unlock tables;
connect (addconroot, localhost, root,,);
lock tables t1 read;
lock tables t2 read;
disconnect addconroot;
unlock tables;
create table `#mysql50#abc``def` ( id int );
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
CREATE TRIGGER trg1 AFTER INSERT ON table1 FOR EACH ROW   INSERT INTO table2 SELECT t.notable.*;
UNLOCK TABLES;
help 'function_of_my_dream';
help '%possible_f%';
help 'impossible_func%';
help 'impossible_category%';
help 'impossible_%';
help '%function_1';
help '%function_2';
help '%function_3';
help '%function_4';
help '%function_5';
help '%function_6';
help '%function_7';
help '%category_2';
help 'impossible_function_1';
help 'impossible_category_1';
LOCK TABLES t1 WRITE;
HELP no_such_topic;
UNLOCK TABLES;
SELECT cast(TIMESTAMP'2019-10-10 10:11:12' AT TIME ZONE 'UTC' AS DATETIME);
SELECT cast(TIMESTAMP'2019-10-10 10:11:12' AT TIME ZONE '+00:00' AS DATETIME);
SELECT cast(TIMESTAMP'2019-10-10 10:11:12+00:00' AT TIME ZONE '+00:00' AS DATETIME);
SELECT cast( TIME'10:10' AT TIME ZONE 'UTC' AS DATETIME );
SELECT cast( '2019-10-10' AT TIME ZONE 'UTC' AS DATETIME );
SELECT cast( 123 AT TIME ZONE 'UTC' AS DATETIME );
SELECT cast( a AT TIME ZONE '+00:00' AS DATETIME ) FROM t1;
SELECT cast( b AT TIME ZONE '+00:00' AS DATETIME ) FROM t1;
SELECT cast( a AT TIME ZONE '+00:00' AS DATETIME ) FROM t1;
SELECT cast( b AT TIME ZONE '+00:00' AS DATETIME ) FROM t1;
SELECT cast( '2019-10-10 10:11' AT TIME ZONE 'UTC' AS DATETIME );
RENAME TABLE mysql.time_zone TO time_zone_backup;
RENAME TABLE time_zone_backup TO mysql.time_zone;
CREATE FUNCTION f2 () RETURNS INTEGER BEGIN    DECLARE CONTINUE HANDLER FOR SQLSTATE '42000' SET @aux = 1;
RETURN f_not_exists () ;
END| CREATE PROCEDURE p3 ( arg1 VARCHAR(32) ) BEGIN    CALL p_not_exists ( );
END| DELIMITER ;| CALL p3 ( f2 () );
CREATE FUNCTION f2 () RETURNS INTEGER BEGIN    DECLARE CONTINUE HANDLER FOR SQLSTATE '42000' SET @aux = 1;
RETURN f_not_exists () ;
END| CREATE PROCEDURE p3 ( arg2 INTEGER ) BEGIN    CALL p_not_exists ( );
END| DELIMITER ;| CALL p3 ( f2 () );
CREATE FUNCTION f2 () RETURNS INTEGER BEGIN    DECLARE CONTINUE HANDLER FOR SQLSTATE '42000' SET @aux = 1;
RETURN f_not_exists () ;
END| DELIMITER ;| SELECT f2 ();
CREATE PROCEDURE p1 () DROP TRIGGER tr1;
CREATE PROCEDURE p1 () DROP TRIGGER tr1;
CREATE FUNCTION f1 ( 	some_value int ) RETURNS smallint DETERMINISTIC BEGIN 	INSERT INTO t1 SET c1 = some_value;
RETURN(LAST_INSERT_ID());
END$$ DELIMITER ;$$ DROP DATABASE IF EXISTS db2;
SELECT db1.f1(1);
CREATE PROCEDURE `p1`() BEGIN     CREATE TABLE IF NOT EXISTS t2(id INT PRIMARY KEY,     CONSTRAINT FK FOREIGN KEY (id) REFERENCES t1( id1 ));
END$ DELIMITER ;$ CALL p1();
CREATE FUNCTION testf_bug11763507() RETURNS INT BEGIN     RETURN 0;
END $ CREATE PROCEDURE testp_bug11763507() BEGIN     SELECT "PROCEDURE testp_bug11763507";
END $ DELIMITER ;$ SELECT testf_bug11763507();
CREATE FUNCTION f1(arg TINYINT UNSIGNED) RETURNS TINYINT BEGIN   RETURN abs('1abcd'); END|
CREATE PROCEDURE f1(IN arg TINYINT UNSIGNED) BEGIN   DECLARE arg1 TINYINT;   select abs('1abcd') into arg; END|
CREATE PROCEDURE sp1() BEGIN SELECT SUBTIME('2006-07-16' , '05:05:02.040778'); END|
CREATE PROCEDURE sp2() BEGIN DECLARE v1 TINYINT DEFAULT 450000; END|
CREATE FUNCTION fn2() RETURNS tinyint BEGIN DECLARE v1 TINYINT DEFAULT 450000; RETURN v1; END|
CREATE PROCEDURE proc_c() BEGIN   DECLARE div_zero INTEGER;   SET SQL_MODE='TRADITIONAL';   SELECT 1/0; END|
CREATE FUNCTION fn1() RETURNS TINYINT BEGIN SET  @x=floor('1a'); RETURN 1; END|
CREATE FUNCTION crc(_text TEXT) RETURNS BIGINT(20) UNSIGNED DETERMINISTIC   RETURN CONV(LEFT(MD5(_text),16),16,10);
CREATE TRIGGER tr1 AFTER INSERT ON t1 FOR EACH ROW BEGIN      CALL proc(NEW.a,NEW.b);
END | CREATE PROCEDURE proc(IN aa INTEGER) BEGIN END | DELIMITER ;| INSERT INTO t1 VALUES (1,10);
CREATE PROCEDURE очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_e() BEGIN END;
CREATE PROCEDURE очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é() BEGIN END;
CREATE PROCEDURE очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_E() BEGIN END;
SHOW CREATE PROCEDURE очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é;
DROP PROCEDURE очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é;
CREATE FUNCTION очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_e() RETURNS INT return 15081947;
CREATE FUNCTION очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é() RETURNS INT return 15081947;
CREATE FUNCTION очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_E() RETURNS INT return 15081947;
SHOW CREATE FUNCTION очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é;
DROP FUNCTION очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é;
CREATE FUNCTION myfunc(dt VARCHAR(50)) RETURNS VARCHAR(32) DETERMINISTIC BEGIN   DECLARE dt_local TIMESTAMP(0);
RETURN CONCAT(UNIX_TIMESTAMP(dt_local));
END; // DELIMITER ;// SELECT myfunc('2019-01-01 00:00:00');
PREPARE stmt FROM 'SELECT CONCAT(UNIX_TIMESTAMP(?))';
EXECUTE stmt USING @var;
EXECUTE stmt USING @var;
EXECUTE stmt USING @var;
DEALLOCATE PREPARE stmt;
CREATE FUNCTION func1() RETURNS INT BEGIN   DECLARE EXIT HANDLER FOR SQLEXCEPTION RETURN NULL;
RETURN 1;
END| CREATE FUNCTION func2() RETURNS INT BEGIN   DECLARE EXIT HANDLER FOR SQLEXCEPTION RETURN NULL;
RETURN 1;
END| DELIMITER ;| SELECT func1();
CREATE PROCEDURE p() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
WHILE @x < 2 DO     CASE((SELECT q > 1)) WHEN 1 THEN SELECT 1; END CASE;
END WHILE;
END$ DELIMITER ;$ CALL p();
if (!$require_case_insensitive_file_system) { } USE INFORMATION_SCHEMA;
query_vertical SELECT * FROM information_schema.columns WHERE table_schema = 'information_schema'   AND table_name   = 'PARAMETERS' ORDER BY ordinal_position;
CREATE FUNCTION test_func1 (s char(20) RETURNS CHAR(50) RETURN CONCAT('Hello', ,s,'!');
CREATE PROCEDURE testproc (OUT param1 INT)   BEGIN    SELECT 2+2 as param1;   END; //
CREATE PROCEDURE test_proc (OUT p_p1 datetime,OUT p_p2 time,OUT p_p3 timestamp) BEGIN SELECT 1 ; END; \\
CREATE PROCEDURE test_proc0 (OUT p_p1 datetime(0),OUT p_p2 time(0),OUT p_p3 timestamp(0)) BEGIN SELECT 1 ; END; \\
CREATE PROCEDURE test_proc1 (OUT p_p1 datetime(1),OUT p_p2 time(1),OUT p_p3 timestamp(1)) BEGIN SELECT 1 ; END; \\
CREATE PROCEDURE test_proc2 (OUT p_p1 datetime(2),OUT p_p2 time(2),OUT p_p3 timestamp(2)) BEGIN SELECT 1 ; END; \\
CREATE PROCEDURE test_proc3 (OUT p_p1 datetime(3),OUT p_p2 time(3),OUT p_p3 timestamp(3)) BEGIN SELECT 1 ; END; \\
CREATE PROCEDURE test_proc4 (OUT p_p1 datetime(4),OUT p_p2 time(4),OUT p_p3 timestamp(4)) BEGIN SELECT 1 ; END; \\
CREATE PROCEDURE test_proc5 (OUT p_p1 datetime(5),OUT p_p2 time(5),OUT p_p3 timestamp(5)) BEGIN SELECT 1 ; END; \\
CREATE PROCEDURE test_proc6 (OUT p_p1 datetime(6),OUT p_p2 time(6),OUT p_p3 timestamp(6)) BEGIN SELECT 1 ; END; \\
CREATE TABLE t2 AS SELECT INSERT(1133,3,0,22) FROM t1;
CREATE TABLE t2 AS SELECT REPEAT(1,2) FROM t1;
insert into t1 values (repeat(0x201f, 10));
insert into t1 values (repeat(0x2020, 10));
insert into t1 values (repeat(0x2021, 10));
connect (con1,localhost,mysqltest_1,,);
disconnect con1;
connect (con1,localhost,mysqltest_2,,);
disconnect con1;
connect (con1,localhost,root,,);
send INSERT INTO t1 VALUES(1);
FLUSH TABLE t1;
reap;
disconnect con1;
create function bug23333()  RETURNS int(11) DETERMINISTIC begin   insert into t1 values (null);
return @a;
end| reset master;
CALL mtr.add_suppression("ACL table mysql.role_edges missing. Some operations may fail.");
CALL mtr.add_suppression("ACL table mysql.default_roles missing. Some operations may fail.");
connect(conn_u1, localhost, u1,,);
disconnect conn_u1;
connect (con2, localhost, root);
disconnect con2;
connect (con1, localhost, root);
disconnect con1;
connect (con1, localhost, root);
disconnect con1;
connect (con1,localhost,root);
disconnect con1;
connect(con1,localhost,root);
connect(con2,localhost,root);
WHERE state= 'Waiting for table metadata lock'   AND info='UPDATE t1 SET a=NULL';
WHERE state= 'Waiting for table metadata lock'   AND info='UPDATE t1 SET a=NULL';
disconnect con1;
disconnect con2;
disconnect con1;
connect(con1, localhost, root);
connect(con2, localhost, root);
disconnect con1;
disconnect con2;
connect (con1, localhost, root);
connect(con1,localhost,root,,);
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
WHERE INFO='DELETE FROM t1 WHERE f1 = 1' and                      STATE='Waiting for table metadata lock';
disconnect con1;
disconnect con2;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
WHERE INFO='DELETE FROM t1 WHERE f1 = 1' and                      STATE='Waiting for table metadata lock';
disconnect con1;
disconnect con2;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
WHERE INFO='DELETE FROM t1 WHERE f1 = 1' and                      STATE='Waiting for table metadata lock';
disconnect con1;
disconnect con2;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
WHERE INFO='DELETE FROM t1 WHERE f1 = 1' and                      STATE='Waiting for table metadata lock';
disconnect con1;
disconnect con2;
LOCK TABLES t2 WRITE;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
WHERE INFO='DELETE FROM t1 WHERE f1 = 1' and                      STATE='Waiting for table metadata lock';
UNLOCK TABLES;
disconnect con1;
disconnect con2;
LOCK TABLES t2 WRITE;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
WHERE INFO='DELETE FROM t1 WHERE f1 = 1' and                      STATE='Waiting for table metadata lock';
UNLOCK TABLES;
disconnect con1;
disconnect con2;
connect(con1,localhost,uu,,);
disconnect con1;
CREATE DEFINER=foo@localhost PROCEDURE my_db.foo_proc() BEGIN INSERT into my_db.t1 values(2) on duplicate key UPDATE id = values(id) + 200;
END $$ DELIMITER ;$$ DELIMITER $$;
CREATE DEFINER=baz@localhost PROCEDURE my_db.baz_proc() BEGIN set ROLE all;
END $$ DELIMITER ;$$ INSERT into my_db.t1 values(5);
CALL my_db.foo_proc();
CALL my_db.baz_proc();
CALL my_db.baz_proc();
CALL my_db.foo_proc();
disconnect my_user_con;
GRANT r2 TO r1 WITH ADMIN OPTION;
GRANT r1 TO u1 WITH ADMIN OPTION;
connect(conn_u1,localhost, u1,,,,);
disconnect conn_u1;
GRANT r1 TO u1 WITH ADMIN OPTION;
connect(conn_u1, localhost, u1,,,,);
disconnect conn_u1;
SHOW GRANTS FOR `r_verifier`@`localhost`;
SHOW GRANTS FOR `TestUserFails`@`localhost`;
connect(con1, localhost, TestUserWorks, test, bug_test);
connect(con2, localhost, TestUserFails, test, bug_test);
disconnect con1;
disconnect con2;
if (!$require_case_insensitive_file_system) { } drop table if exists t5, t6, t7, t8;
PREPARE stmt FROM ' select * from t1 where a = ? ' ;
EXECUTE stmt USING @var ;
DEALLOCATE PREPARE stmt ;
prepare stmt1 from ' select 1 as my_col ' ;
prepare stmt1 from ' select ? as my_col ' ;
prepare ;
prepare stmt1 ;
prepare stmt1 from ;
prepare_garbage stmt1 from ' select 1 ' ;
prepare stmt1 from_garbage ' select 1 ' ;
prepare stmt1 from ' select_garbage 1 ' ;
prepare from ' select 1 ' ;
prepare stmt1 ' select 1 ' ;
prepare ? from ' select ? as my_col ' ;
prepare stmt1 from @arg00;
prepare stmt1 from @arg00;
prepare stmt1 from @arg01;
prepare stmt1 from ' select * from t1 where a <= 2 ' ;
prepare stmt1 from ' select * from t1 where x <= 2 ' ;
prepare stmt1 from ' insert into t1(a,x) values(?,?) ' ;
prepare stmt1 from ' insert into t1(x,a) values(?,?) ' ;
prepare stmt1 from ' select * from not_exist where a <= 2 ' ;
prepare stmt1 from ' insert into t1 values(? ' ;
prepare stmt1 from ' select a, b from t1                      where a=? and where ' ;
execute never_prepared ;
prepare stmt1 from ' select * from t1 where a <= 2 ' ;
prepare stmt1 from ' select * from not_exist where a <= 2 ' ;
execute stmt1 ;
prepare stmt2 from ' select * from t5 ' ;
execute stmt2 ;
execute stmt2 ;
execute stmt2 ;
execute stmt2 ;
execute stmt2 ;
execute stmt2 ;
execute stmt2 ;
execute stmt2 ;
prepare stmt1 from ' select * from t1 where a <= 2 ' ;
execute stmt1 ;
prepare stmt1 from ' select * from t1 where a <= ? ' ;
execute stmt1 using @arg00;
execute stmt1 ;
execute stmt1 using @arg00, @arg01;
execute stmt1 using @not_set;
deallocate prepare never_prepared ;
prepare stmt1 from ' select * from t1 where a <= 2 ' ;
prepare stmt1 from ' select * from not_exist where a <= 2 ' ;
deallocate prepare stmt1;
prepare stmt2 from ' select a,b from t5 where a <= 2 ' ;
deallocate prepare stmt2;
prepare stmt1 from ' select a from t1 where a <= 2 ' ;
prepare stmt2 from ' select b from t1 where a <= 2 ' ;
execute stmt2 ;
execute stmt1 ;
prepare stmt1 from ' select a from t1 where a <= 2 ' ;
prepare stmt2 from ' select a from t1 where a <= 2 ' ;
execute stmt2 ;
execute stmt1 ;
deallocate prepare stmt1 ;
execute stmt2 ;
prepare stmt4 from ' show databases like ''mysql'' ';
execute stmt4;
prepare stmt4 from ' show tables from test like ''t2%'' ';
execute stmt4;
prepare stmt4 from ' show columns from t2 where field in (select ?) ';
execute stmt4 using @arg00;
execute stmt4 using @arg00;
execute stmt4 using @arg00;
prepare stmt4 from ' show columns from t2 from test like ''a%'' ';
execute stmt4;
prepare stmt4 from ' show index from t2 from test ';
execute stmt4;
prepare stmt4 from ' show table status from test like ''t2%'' ';
execute stmt4;
prepare stmt4 from ' show table status from test like ''t9%'' ';
execute stmt4;
prepare stmt4 from ' show status like ''Threads_running'' ';
execute stmt4;
prepare stmt4 from ' show variables like ''sql_mode'' ';
execute stmt4;
prepare stmt4 from ' show engine myisam logs ';
execute stmt4;
prepare stmt4 from ' show grants for user ';
prepare stmt4 from ' show create table t2 ';
prepare stmt4 from ' show master status ';
prepare stmt4 from ' show master logs ';
prepare stmt4 from ' show slave status ';
prepare stmt4 from ' show warnings limit 20 ';
prepare stmt4 from ' show errors limit 20 ';
prepare stmt4 from ' show storage engines ';
execute stmt4;
prepare stmt1 from ' drop table if exists t5 ' ;
execute stmt1 ;
prepare stmt1 from ' drop table t5 ' ;
execute stmt1 ;
prepare stmt1 from ' SELECT @@version ' ;
execute stmt1 ;
prepare stmt_do from ' do @var:=  (1 in (select a from t1)) ' ;
prepare stmt_set from ' set @var= (1 in (select a from t1)) ' ;
while ($1) {   execute stmt_do ;
execute stmt_set ;
dec $1 ;
} drop table if exists t5 ;
prepare stmt_do from ' do @var:=  (1 in (select a from t5)) ' ;
prepare stmt_set from ' set @var= (1 in (select a from t5)) ' ;
while ($1) {   execute stmt_do ;
execute stmt_set ;
dec $1 ;
} drop table t5 ;
deallocate prepare stmt_do ;
deallocate prepare stmt_set ;
prepare stmt1 from ' prepare stmt2 from '' select 1 ''  ' ;
prepare stmt1 from ' execute stmt2 ' ;
prepare stmt1 from ' deallocate prepare never_prepared ' ;
prepare stmt1 from 'alter view v1 as select 2';
prepare stmt4 from ' use test ' ;
prepare stmt3 from ' create database mysqltest ';
prepare stmt3 from ' drop database mysqltest ';
prepare stmt3 from ' describe t2 ';
execute stmt3;
execute stmt3;
prepare stmt3 from ' lock tables t1 read ' ;
prepare stmt3 from ' unlock tables ' ;
into table t1 fields terminated by ''\t'' ';
execute stmt1 ;
prepare stmt1 from ' optimize table t1 ' ;
prepare stmt1 from ' analyze table t1 ' ;
prepare stmt1 from ' checksum table t1 ' ;
prepare stmt1 from ' repair table t1 ' ;
prepare stmt1 from ' handler t1 open ';
prepare stmt3 from ' commit ' ;
prepare stmt3 from ' rollback ' ;
prepare stmt4 from ' SET sql_mode=ansi ';
execute stmt4;
prepare stmt4 from ' SET sql_mode="" ';
execute stmt4;
prepare stmt5 from ' select ''2'' || ''3'' ' ;
execute stmt5;
execute stmt5;
prepare stmt1 from ' flush local privileges ' ;
prepare stmt1 from ' KILL 0 ';
prepare stmt1 from ' explain select a from t1 order by b ';
execute stmt1;
prepare stmt1 from ' explain select a from t1 where a > ? order by b ';
execute stmt1 using @arg00;
prepare stmt1 from ' insert into t2 values(?, ?) ' ;
prepare stmt1 from ' select * from t2 where id= ? and name= ? ';
execute stmt1 using @id, @arg00 ;
execute stmt1 using @id, @arg01 ;
execute stmt1 using @id, @arg02 ;
execute stmt1 using @id, @arg03 ;
execute stmt1 using @id, @arg04 ;
prepare stmt_drop from ' drop table if exists t2 ' ;
execute stmt_drop;
prepare stmt_create from ' create table t2 (                              a int primary key, b char(10)) ';
execute stmt_create;
prepare stmt3 from ' create table t3 like t2 ';
execute stmt3;
prepare stmt3 from ' create table t3 (m int) select ? as m ' ;
execute stmt3 using @arg00;
prepare stmt3 from ' create index t2_idx on t2(b) ';
prepare stmt3 from ' drop index t2_idx on t2 ' ;  prepare stmt3 from ' alter table t2 drop primary key ';
prepare stmt3 from ' rename table t2 to new_t2 ';
execute stmt3;
execute stmt3;
rename table new_t2 to t2;
prepare stmt1 from ' rename table t5 to t6, t7 to t8 ' ;
execute stmt1 ;
execute stmt1 ;
execute stmt1 ;
rename table t6 to t5, t8 to t7 ;
execute stmt1 ;
1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 AND 1 = 1 ;
execute stmt1 ;
execute stmt1 ;
'1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' AND '1234567890123456789012345678901234567890123456789012345678901234567890' = '1234567890123456789012345678901234567890123456789012345678901234567890' ;
execute stmt1 ;
execute stmt1 ;
prepare stmt1 from ' select ''ABC'' as my_const_col FROM t1 WHERE  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  and  ? = ?  ' ;
execute stmt1 using  @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00,  @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00,  @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00,  @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00,  @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00, @arg00,  @arg00, @arg00;
execute stmt1 using  @arg00, @arg01, @arg02, @arg03, @arg04, @arg05, @arg06, @arg07,  @arg10, @arg11, @arg12, @arg13, @arg14, @arg15, @arg16, @arg17, @arg20, @arg21, @arg22, @arg23, @arg24, @arg25, @arg26, @arg27,  @arg30, @arg31, @arg32, @arg33, @arg34, @arg35, @arg36, @arg37,  @arg40, @arg41, @arg42, @arg43, @arg44, @arg45, @arg46, @arg47,  @arg50, @arg51, @arg52, @arg53, @arg54, @arg55, @arg56, @arg57,  @arg60, @arg61 ;
while ($1) {   dec $1 ;
} set @string= concat(@string, 'c0 int)' );
prepare stmt1 from @string ;
execute stmt1 ;
while ($1) {   dec $1 ;
} select @string as "" ;
prepare stmt1 from @string ;
execute stmt1 ;
prepare stmt1 from ' select * from t5 ' ;
execute stmt1 ;
prepare stmt1 from "select 1 from t1 where 1=(select 1 from t1 having c1)";   execute stmt1;
drop prepare stmt1;
SHOW GRANTS FOR root@localhost;
connect(confr3,localhost,wl12217,,wl12217);
disconnect confr3;
connect(confr3,localhost,wl12217,,wl12217);
disconnect confr3;
connect(confr5,localhost,wl12217,,wl12217);
disconnect confr5;
connect(confr5,localhost,wl12217,,wl12217);
disconnect confr5;
SHOW GRANTS for "mysql.session"@localhost;
HANDLER tbl_18335504 OPEN;
HANDLER tbl_18335504 READ FIRST WHERE b = 2 AND 1 > sleep(2);
HANDLER tbl_18335504 READ i1 FIRST WHERE a = 20 AND 1 > sleep(2);
HANDLER tbl_18335504 READ i1 FIRST WHERE a > 10 AND 1 > sleep(2) LIMIT 5;
HANDLER tbl_18335504 READ FIRST WHERE b > 1 AND 1 > sleep(2) LIMIT 5;
HANDLER tbl_18335504 CLOSE;
create trigger ai after insert on t1 for each row set @a:= new.at;
create trigger au after update on t1 for each row set @a:= new.at;
create trigger ad after delete on t1 for each row set @a:= old.at;
load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (i, k);
CONNECT (rl_holder,    localhost, root,,);
CONNECT (rl_acquirer,  localhost, root,,);
CONNECT (wl_acquirer,  localhost, root,,);
CONNECT (rl_contender, localhost, root,,);
CONNECTION rl_holder;
CONNECTION rl_acquirer;
CONNECTION wl_acquirer;
sleep 2;
CONNECTION rl_contender;
CONNECTION rl_holder;
sleep 2;
CONNECTION rl_acquirer;
CONNECTION wl_acquirer;
CONNECTION rl_contender;
CONNECTION default;
DISCONNECT rl_acquirer;
DISCONNECT wl_acquirer;
DISCONNECT rl_contender;
DISCONNECT rl_holder;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set optimizer_switch=default;
write_file $BOOTSTRAP_SQL;
source $passwd_file;
connect(root_con,localhost,root,$new_pwd,mysql);
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u3@localhost;
disconnect root_con;
remove_file $PASSWD_FILE;
remove_file $MYSQLD_LOG;
remove_file $BOOTSTRAP_SQL;
CREATE TABLE t1(x INT, KEY `` ((x + 1)));
CREATE PROCEDURE p1() BEGIN   CREATE TABLE t(a INT,b INT,UNIQUE INDEX i((a+b)));
END// DELIMITER ;// CALL p1();
CREATE TEMPORARY TABLE issue_functional_key_part (       sold_on DATETIME NOT NULL DEFAULT NOW(),       INDEX sold_on_date ((DATE(sold_on)))     )     SELECT NOW() `sold_on`;
LOAD DATA INFILE '$MYSQLTEST_VARDIR/tmp/bug30838749' INTO TABLE t2   LINES STARTING BY 'EXPLAIN' TERMINATED BY 'EOL';
SELECT TRACE NOT RLIKE '"final_filtering_effect": 1' AS OK   FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
CREATE FUNCTION testQuestion() RETURNS INTEGER BEGIN   DECLARE foo INTEGER;
DECLARE bar INTEGER;
RETURN foo;
END $$ CREATE PROCEDURE testQuestion2() BEGIN   SELECT 1;
END $$ DELIMITER ;$$ DROP TABLE IF EXISTS t1,t2;
connect (con1,localhost,root,,);
disconnect con1;
CREATE TRIGGER trigg1 AFTER INSERT ON t1   FOR EACH ROW BEGIN    INSERT INTO t2 VALUES (1);
END;
$$ DELIMITER ;$$ SHOW STATUS LIKE 'Questions';
CALL mtr.add_suppression("\\[ERROR\\].* Operating system error number");
CALL mtr.add_suppression("\\[ERROR\\].* The error means mysqld does not have the access");
CALL mtr.add_suppression("\\[ERROR\\].* Cannot create a tablespace for table .* because the directory is not a valid location. The DATA DIRECTORY location must be in a known directory");
CALL mtr.add_suppression("\\[ERROR\\].* Error number 30 means 'Read-only file system'");
CALL mtr.add_suppression("\\[ERROR\\].* 'mkdir' returned OS error 130");
while ($cnt_0) {     while ($cnt_1)   {     if ($first_table==t1)     {     }     if ($first_table==t2)     {     }     while ($cnt_2)     {       while ($cnt_3)       {         while ($cnt_4)         {           if ($first_operand==col_time_key)           {           }           if ($first_operand==col_datetime_key)           {           }                $first_table $first_index_hint INDEX ($first_index)                STRAIGHT_JOIN                $second_table $second_index_hint INDEX ($second_index)                WHERE $first_operand $operator $second_operand;
$first_table $first_index_hint INDEX ($first_index)                STRAIGHT_JOIN                $second_table $second_index_hint INDEX ($second_index)                WHERE $first_operand $operator $second_operand;
dec $cnt_4;
}         dec $cnt_3;
}       dec $cnt_2;
}     dec $cnt_1;
}   if ($cnt_0==5)   {   }   if ($cnt_0==4)   {   }   if ($cnt_0==3)   {   }   if ($cnt_0==2)   {   }   dec $cnt_0;
} DROP TABLE t1,t2;
ON t3.col_time_key > t2.col_datetime_key;
ON t3.col_time_key > t2.col_datetime_key;
perl;
open(FILE, ">", "$ENV{MYSQL_TMP_DIR}/perror_syslocale.inc") or die $!;
if(`systeminfo /FO LIST | findstr /C:"System Locale"` =~ m/en-us/)  {print FILE "let \$non_eng_sys= 0;\n";} else  {print FILE "let \$non_eng_sys= 1;\n";} close FILE;
source $MYSQL_TMP_DIR/perror_syslocale.inc;
remove_file $MYSQL_TMP_DIR/perror_syslocale.inc;
if ($non_eng_sys) {   skip Need an English Windows Installation;
LOCK TABLE t1 WRITE;
connect (con1,localhost,root,,);
send INSERT INTO t1 VALUES (1);
WHERE ID = $con1_id AND STATE = 'Waiting for table metadata lock';
WHERE ID = $con1_id AND STATE = 'Waiting for table metadata lock';
UNLOCK TABLES;
reap;
disconnect con1;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
send FLUSH TABLES WITH READ LOCK;
KILL CONNECTION @id;
reap;
disconnect con2;
call mtr.add_suppression("You need to use --log-bin to make --log-replica-updates work.");
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work.");
(SELECT     LOCATE('IS_version=', properties) AS pos1,         # find the start of "IS_version=..." substring     (SELECT SUBSTR(properties, pos1)) AS tail,         # extract the "IS_version=..." substring     (SELECT LOCATE(';', tail)) AS pos2,                # find the 1st ";" delimiter inside "IS_version=..."     (SELECT SUBSTR(tail, 12, pos2 - 12)) AS is_version # extract the result ("12" is for the length of "IS_version=")    FROM mysql.dd_properties) AS a`;
(SELECT     LOCATE('.', @@version) AS dot1,     (SELECT SUBSTR(@@version, dot1 + 1)) AS tail1,     (SELECT LOCATE('.', tail1)) AS dot2,     (SELECT SUBSTR(tail1, dot2 + 1)) AS tail2,     (SELECT LOCATE('-', tail2)) AS dash1,     (SELECT SUBSTR(@@version, 1, dot1 - 1)) AS v1,     (SELECT SUBSTR(tail1, 1, dot2 - 1)) AS v2,     (SELECT SUBSTR(tail2, 1, dash1 - 1)) AS v3) a`;
if (`select locate('materialization', @@optimizer_switch) > 0`) {   set optimizer_switch='materialization=off';
} if (`select locate('loosescan', @@optimizer_switch) > 0`) {   set optimizer_switch='loosescan=off';
} if (`select locate('duplicateweedout', @@optimizer_switch) > 0`) {   set optimizer_switch='duplicateweedout=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`) {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`) {   set optimizer_switch='mrr=off';
} SET @@default_storage_engine='innodb';
connect (conn1,localhost,mysqltest_1,,mysqltest_1);
disconnect conn1;
connect (conn2,localhost,mysqltest_1,,mysqltest_1);
disconnect conn2;
connect (conn3,localhost,mysqltest_1,,mysqltest_1);
disconnect conn3;
connect (conn4,localhost,mysqltest_1,,mysqltest_1);
disconnect conn4;
connect (conn5,localhost,mysqltest_1,,mysqltest_1);
disconnect conn5;
CONNECT (con1, localhost, root);
CONNECT (con2, localhost, root);
CONNECTION con1;
CONNECTION default;
CONNECTION con1;
CONNECTION con2;
CONNECTION con1;
CONNECTION default;
CONNECTION con1;
CONNECTION con2;
CONNECTION con1;
CONNECTION default;
CONNECTION con1;
CONNECTION con2;
CONNECTION con1;
CONNECTION default;
CONNECTION con1;
CONNECTION con2;
CONNECTION con1;
CONNECTION default;
CONNECTION default;
CONNECTION con1;
CONNECTION default;
CONNECTION default;
DISCONNECT con1;
DISCONNECT con2;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
UNLOCK TABLES;
LOCK INSTANCE FOR BACKUP;
UNLOCK TABLES;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
LOCK INSTANCE FOR BACKUP;
UNLOCK TABLES;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
UNLOCK TABLES;
UNLOCK INSTANCE;
insert into t1 values (repeat(0x0000201f, 10));
insert into t1 values (repeat(0x00002020, 10));
insert into t1 values (repeat(0x00002021, 10));
connect (locker,localhost,root,,);
connect (writer,localhost,root,,);
while ($i) {   send UPDATE t2 INNER JOIN (t1 JOIN t3 USING(a)) USING(a)          SET a = NULL WHERE t1.b <> t2.b;
} PREPARE stmt FROM 'UPDATE t2 INNER JOIN (t1 JOIN t3 USING(a)) USING(a)                      SET a = NULL WHERE t1.b <> t2.b';
while ($i) {   ALTER TABLE t2 ADD COLUMN (c INT);
} while ($i) {   dec $i;
} while ($i) {   dec $i;
PREPARE stmt FROM 'UPDATE t2 INNER JOIN (t1 JOIN t3 USING(a)) USING(a) SET a = NULL WHERE t1.b <> t2.b';
} DROP TABLE t1, t2, t3;
if (`SELECT icu_major_version() > 50`) { SET GLOBAL regexp_stack_limit = 239;
} SET NAMES latin1;
PREPARE stmt1 FROM "select 'a' rlike ?";
DEALLOCATE PREPARE stmt1;
CREATE DEFINER=root@localhost PROCEDURE p1() BEGIN   UPDATE t1, t2   SET a = 1   WHERE regexp_like(t1.subject, t2.pattern);
END|| DELIMITER ;|| CALL p1();
PREPARE stmt1 FROM "SELECT regexp_like( 'a', ? )";
PREPARE stmt2 FROM "SELECT regexp_like( ?, 'a' )";
PREPARE stmt3 FROM "SELECT regexp_like( ?, ? )";
EXECUTE stmt1 USING @pattern;
EXECUTE stmt2 USING @subject;
EXECUTE stmt3 USING @subject, @pattern;
EXECUTE stmt1 USING @pattern;
EXECUTE stmt2 USING @subject;
EXECUTE stmt3 USING @subject, @pattern;
DEALLOCATE PREPARE stmt1;
DEALLOCATE PREPARE stmt2;
DEALLOCATE PREPARE stmt3;
DO 1 rlike multilinestring(point(1, 1));
SELECT length(regexp_replace( repeat('a', @buf_sz_utf16), 'a', 'b' ));
SELECT length(regexp_replace( repeat('a', @buf_sz_utf16 + 1), 'a', 'b' ));
SELECT length(regexp_replace( repeat('a', @buf_sz_utf16), 'a', 'bb' ));
INSERT INTO t1 VALUES ( repeat( 'a', 16384 ) );
DO '1' regexp repeat('$', 50000000);
DO ( (@b) regexp (cot (unhex ( 1 )) ) );
DO ( (@c) rlike (cot ( (!( @f )) )) );
DO ( ('') rlike (cot ( ' %' )) );
DO ( (-28277) regexp (period_add ( -10966, 1381205734 )) );
DO ( (( @f )) rlike (json_depth ( 'key4' )) );
DO ( ('-  ') regexp (cot ( right (':#.', 33) )) );
DO ( (1) regexp (exp ( 64826 )) );
DO ( (@g) regexp (cot ( @f )) );
DO ( (@b) regexp (exp ( 0x1fc5574c )) );
DO ( (25091) rlike (exp ( 14373 )) );
enable_connect_log;
connect(conn1, localhost, root);
send SELECT regexp_instr('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC', '(A+)+B');
replace_result $conn1_id <conn1_id>;
reap;
disconnect conn1;
source include/wait_until_disconnected.inc;
disable_connect_log;
SELECT regexp_like( repeat(@v1, 'abc'), 'abc' );
SET @s := "SELECT regexp_like( '', '', ? / '' )";
PREPARE stmt FROM @s;
EXECUTE stmt;
EXECUTE stmt;
CREATE TABLE t1 AS SELECT   regexp_instr( 'a', 'a' ) AS a,   regexp_like( 'a', 'a' ) AS b,   regexp_replace( 'abc', 'b', 'x' ) AS c,   regexp_substr( 'a', 'a' ) AS d,   regexp_substr( repeat('a', 512), 'a' ) AS e,   regexp_substr( repeat('a', 513), 'a' ) AS f;
do regexp_like(0, "^{18446744073709551616");
do regexp_instr(0, "^{18446744073709551616");
DO INSERT(regexp_like(1, '['), 0, 1, '');
DO INSERT(regexp_instr(1, '['), 0, 1, '');
DO INSERT(regexp_replace(1, '[', 42), 0, 1, '');
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] You need to use --log-bin to make --binlog-format work.");
lock tables t1 write, t2 write, t3 write;
lock tables t1 write, t2 write, t3 write, t1 as t4 read;
lock tables t1 write, t2 read;
unlock tables;
lock table t1 write;
unlock tables;
LOCK TABLES mysql.time_zone READ, mysql.time_zone_name READ, t1 READ;
UNLOCK TABLES;
LOCK TABLES mysql.time_zone READ, mysql.time_zone_name READ, t1 WRITE;
UNLOCK TABLES;
LOCK TABLES mysql.time_zone READ, mysql.time_zone_name READ;
UNLOCK TABLES;
LOCK TABLES mysql.time_zone WRITE, mysql.time_zone_name WRITE;
UNLOCK TABLES;
LOCK TABLES mysql.time_zone READ, mysql.time_zone_name WRITE, t1 READ;
LOCK TABLES mysql.time_zone WRITE, mysql.time_zone_name WRITE, t1 READ;
LOCK TABLES mysql.time_zone WRITE, mysql.time_zone_name WRITE, t1 WRITE;
LOCK TABLES mysql.time_zone READ, mysql.time_zone_name WRITE;
lock table v_bug5719 write;
unlock tables;
lock tables v_bug5719 write;
unlock tables;
lock tables t1 write, v_bug5719 write;
unlock tables;
LOCK TABLES t1 WRITE, t2 READ;
UNLOCK TABLES;
lock table t1 write, t2 write;
flush table t1;
unlock tables;
lock tables t1 write, v1 write;
flush table t1;
flush table t1;
unlock tables;
connect(con1,localhost,root,,);
lock table t1 write;
disconnect con1;
connect(con1,localhost,root,,);
disconnect con1;
lock tables t1 write, v1 write;
flush table t2;
create trigger t2_bi before insert on t2 for each row set @a:=1;
unlock tables;
create function f1 () returns int begin   insert into t2 values (1);   return 0; end|
lock tables v1 read;
flush table t2;
create trigger t2_bi before insert on t2 for each row set @a:=1;
unlock tables;
lock tables t1 write;
create trigger t2_bi before insert on t2 for each row set @a:=1;
flush table t2;
unlock tables;
lock tables t1 write, t1 as a read, t1 as b read;
unlock tables;
lock tables t1 write, t1 as a read, t1 as b read;
unlock tables;
LOCK TABLE t1 WRITE;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 CLOSE;
UNLOCK TABLES;
LOCK TABLE t1 READ;
LOCK TABLE t1 WRITE;
LOCK TABLE t1 READ;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
connect (con2, localhost, root);
LOCK TABLE t1 WRITE;
LOCK TABLE t2 WRITE;
FLUSH TABLE t2;
UNLOCK TABLES;
UNLOCK TABLES;
disconnect con2;
LOCK TABLES t1 LOW_PRIORITY WRITE;
UNLOCK TABLES;
call mtr.add_suppression("Can't open and lock privilege tables: Table 'user' was not locked with LOCK TABLES");
LOCK TABLES t1 READ;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 READ;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLE v1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE, v1 WRITE;
UNLOCK TABLES;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
LOCK TABLE s1.v1 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
create table tm (k int, index using btree (k)) charset utf8mb4 engine=myisam;
alter table tm add column l int, add index using btree (l);
alter table t1 drop key k, add index using btree (k), algorithm=inplace;
alter table t1 drop key k, add index using hash (k), algorithm=inplace;
alter table t1 drop key k, add index using btree (k), algorithm=inplace;
alter table t1 drop key k, add index using btree (k), algorithm=copy;
disable_query_log;
call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
enable_query_log;
create table ```a` (i int);
drop table ```a`;
CREATE TABLE `t1` (   `a b` INT,   `c"d` INT,   `e``f` INT,   PRIMARY KEY (`a b`, `c"d`, `e``f`) ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
create trigger trg1 before insert on t1 for each row begin   if new.a > 10 then     set new.a := 10;     set new.a := 11;   end if; end|
create trigger trg2 before update on t1 for each row begin   if old.a % 2 = 0 then set new.b := 12; end if; end|
set sql_mode="traditional"|
create trigger trg3 after update on t1 for each row begin   if new.a = -1 then     set @fired:= "Yes";   end if; end|
create trigger trg4 before insert on t2 for each row begin   if new.a > 10 then     set @fired:= "No";   end if; end|
set sql_mode=default|
[mysqltest1] port=1234 DROP TABLE IF EXISTS `test1`;
CREATE TRIGGER `testref` BEFORE INSERT ON `test1` FOR EACH ROW BEGIN INSERT INTO test2 SET a2 = NEW.a1; END  // DELIMITER ;// INSERT INTO `test1` VALUES (1);
CREATE FUNCTION `bug9056_func1`(a INT, b INT) RETURNS int(11) RETURN a+b // CREATE PROCEDURE `bug9056_proc1`(IN a INT, IN b INT, OUT c INT) BEGIN SELECT a+b INTO c; end  // create function bug9056_func2(f1 char binary) returns char begin   set f1= concat( 'hello', f1 );
return f1;
end // CREATE PROCEDURE bug9056_proc2(OUT a INT) BEGIN   select sum(id) from t1 into a;
END // DELIMITER ;// set sql_mode='ansi';
CREATE TRIGGER `test trig` BEFORE INSERT ON `t1 test` FOR EACH ROW BEGIN INSERT INTO `t2 test` SET a2 = NEW.a1; END  // DELIMITER ;// INSERT INTO `t1 test` VALUES (1);
CREATE TRIGGER tr1 BEFORE INSERT ON t1        FOR EACH ROW        BEGIN          SET new.a = 0;
END| DELIMITER ;| SET SQL_MODE = @old_sql_mode;
create trigger tr2 after insert on t1 for each row begin   insert into t2 set b=new.a and created=new.created; end|
/*!50003 CREATE FUNCTION `f`() RETURNS bigint(20) return 42 */| /*!50003 CREATE PROCEDURE `p`() select 42 */| DELIMITER ;| show create function f;
connect (root,localhost,root,,test,$MASTER_MYPORT,$MASTER_MYSOCK);
connect (user1,localhost,myDB_User,,mysqldump_myDB,$MASTER_MYPORT,$MASTER_MYSOCK);
disconnect user1;
disconnect root;
create view v3 as select bug23491_original.f1();
connect (user27293,localhost,user1,,mysqldump_test_db,$MASTER_MYPORT,$MASTER_MYSOCK);
disconnect user27293;
INSERT INTO t1 SET c1=11, c2=REPEAT('q',509);
create event ee1 on schedule at '2035-12-31 20:01:23' do set @a=5;    	 	 show events;
create event ee3 on schedule at '2030-12-31 22:01:23' do set @a=5;    		 show events;
CREATE TRIGGER `trig` BEFORE INSERT ON `test` FOR EACH ROW BEGIN END | DELIMITER ;| ALTER DATABASE `test-database` CHARACTER SET latin1 COLLATE latin1_swedish_ci;
CREATE PROCEDURE simpleproc1 (OUT param1 INT) BEGIN   SELECT COUNT(*) INTO param1 FROM t1;
END// DELIMITER ;// DELIMITER //;
CREATE PROCEDURE simpleproc2 (OUT param1 INT) BEGIN   SELECT COUNT(*) INTO param1 FROM t2;
END// DELIMITER ;// SET GLOBAL EVENT_SCHEDULER = OFF;
CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792;
CREATE EVENT e2 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792;
CREATE TRIGGER trig1 BEFORE INSERT ON t2   FOR EACH ROW BEGIN     INSERT INTO t2 VALUES(1);
END;
| DELIMITER ;| DELIMITER |;
CREATE TRIGGER trig2 AFTER INSERT ON t2   FOR EACH ROW BEGIN     INSERT INTO t2 VALUES(1, ']]>');
END;
| DELIMITER ;| CREATE VIEW v1 AS SELECT * FROM t1;
connect (conn_1, localhost, user1, , BUG52792, $MASTER_MYPORT, $MASTER_MYSOCK);
disconnect conn_1;
while ($colnum) {   dec $colnum;
} DROP VIEW v1;
CREATE TABLE t1(f1 INT INVISIBLE, f2 INT,                 f3 INT AS (f1 + 10), f4 INT AS (f2 + 10) INVISIBLE,                 f5 INT AS (f2 + 10) STORED INVISIBLE);
CREATE TABLE t2(f1 INT, f2 INT INVISIBLE);
remove_file $MYSQLTEST_VARDIR/tmp/test1.sql;
remove_file $MYSQLTEST_VARDIR/tmp/t2.txt;
remove_file $MYSQLTEST_VARDIR/tmp/t2.sql;
remove_file $MYSQLTEST_VARDIR/tmp/test_t2.log;
remove_file $MYSQLTEST_VARDIR/tmp/tmp1.xml;
remove_file $MYSQLTEST_VARDIR/tmp/tmp2.xml;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
send with recursive q (num, mark) as (  select 1, "a"  union all select 1+num, "b" from q where mark="a"  union all select 1+num, "a" from q where mark="b" ) select num from q;
KILL QUERY @id;
reap;
disconnect con1;
disconnect con2;
connect (con0,localhost,root,,,,,SSL);
disconnect con0;
connect (con1,localhost,ssl_user1,,,,,SSL);
connect (con2,localhost,ssl_user2,,,,,SSL);
connect (con3,localhost,ssl_user3,,,,,SSL);
connect (con4,localhost,ssl_user4,,,,,SSL);
connect (con5,localhost,ssl_user5,,,,,SSL);
disconnect con1;
disconnect con2;
disconnect con3;
disconnect con4;
CREATE EVENT event_status  ON SCHEDULE AT NOW()  ON COMPLETION NOT PRESERVE  DO BEGIN   CREATE TABLE thread_status   SELECT variable_name, variable_value   FROM performance_schema.session_status   WHERE variable_name LIKE 'SSL_ACCEPTS' OR   variable_name LIKE 'SSL_CALLBACK_CACHE_HITS';
END$$ DELIMITER ;$$ SELECT variable_name, variable_value FROM thread_status;
connect(con1,localhost,bug42158,,,,,SSL);
disconnect con1;
connect (tzuser, localhost, mysqltest_1,,);
disconnect tzuser;
connect (tzuser2, localhost, mysqltest_1,,);
disconnect tzuser2;
connect (tzuser3, localhost, mysqltest_1,,);
disconnect tzuser3;
create procedure check_pk_person(in person_type char, in id integer) begin   declare x integer;   declare msg varchar(128);   /*     Test integrity constraints for an 'arc' relationship.     Based on 'person_type', 'id' points to either a     physical person, or a moral person.   */   case person_type     when 'P' then     begin       select count(person_id) from ab_physical_person         where ab_physical_person.person_id = id         into x;       if (x != 1)       then         set msg= concat('No such physical person, PK:', id);         SIGNAL SQLSTATE '45000' SET           MESSAGE_TEXT = msg,           MYSQL_ERRNO = 10000;       end if;     end;     when 'M' then     begin       select count(company_id) from ab_moral_person         where ab_moral_person.company_id = id         into x;       if (x != 1)       then         set msg= concat('No such moral person, PK:', id);         SIGNAL SQLSTATE '45000' SET           MESSAGE_TEXT = msg,           MYSQL_ERRNO = 10000;       end if;     end;     else     begin       set msg= concat('No such person type:', person_type);       SIGNAL SQLSTATE '45000' SET         MESSAGE_TEXT = msg,         MYSQL_ERRNO = 50000;     end;   end case; end $$
create procedure check_pk_inventory(in id integer) begin   declare x integer;   declare msg varchar(128);   select count(item_id) from in_inventory     where in_inventory.item_id = id     into x;   if (x != 1)   then     set msg= concat('Failed integrity constraint, table in_inventory, PK:',                     id);     SIGNAL SQLSTATE '45000' SET       MESSAGE_TEXT = msg,       MYSQL_ERRNO = 10000;   end if; end $$
create procedure check_pk_order(in id integer) begin   declare x integer;   declare msg varchar(128);   select count(po_id) from po_order     where po_order.po_id = id     into x;   if (x != 1)   then     set msg= concat('Failed integrity constraint, table po_order, PK:', id);     SIGNAL SQLSTATE '45000' SET       MESSAGE_TEXT = msg,       MYSQL_ERRNO = 10000;   end if; end $$
connect(con1, localhost, root,,);
SELECT REPEAT('T', 16777211);
disconnect con1;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
{ Version" : 1 , "mysql_server" : { "max_connections" : { "Value" : "23" , "Metadata" : { "Timestamp" : 1573471430265110 , "User" : "root" , "Host" : "localhost" } } } } SET PERSIST_ONLY replica_exec_mode = DEFAULT;
FLUSH TABLE ta, tb;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.events_waits_current     WHERE event_name LIKE '%COND_open';
LET $wait_condition=   SELECT event_id != @first_wait_id     FROM performance_schema.events_waits_current     WHERE event_name LIKE '%COND_open';
FLUSH TABLE ta, tb;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.events_waits_current     WHERE event_name LIKE '%COND_open';
FLUSH TABLE tb;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.events_waits_current     WHERE event_name LIKE '%COND_open';
FLUSH TABLE tb;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for table flush' AND info LIKE 'FLUSH TABLES';
FLUSH TABLE tb;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for table flush' AND info LIKE 'FLUSH TABLES tb';
FLUSH TABLE tb;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for table flush' AND info LIKE 'FLUSH TABLES';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.events_waits_current     WHERE event_name LIKE '%COND_open';
LET $wait_condition=   SELECT COUNT(*) = 0 FROM information_schema.processlist     WHERE state LIKE 'Waiting for table flush' AND info LIKE 'FLUSH TABLES';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for table metadata lock'       AND info LIKE 'CREATE TABLE tb%';
FLUSH TABLE tb;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'ALTER TABLESPACE%';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
CREATE TABLESPACE ts2 ADD DATAFILE 'ts2_1.ibd';
LET $wait_condition=   SELECT COUNT(*) = 2 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE '%TABLESPACE%';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'ALTER TABLESPACE%';
LET $wait_condition=   SELECT COUNT(*) = 0 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'ALTER TABLESPACE%';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd';
CREATE TABLESPACE ts2 ADD DATAFILE 'ts2.ibd';
LET $wait_condition=   SELECT COUNT(*) = 2 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'DROP TABLESPACE%';
LET $wait_condition=   SELECT COUNT(*) = 0 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'DROP TABLESPACE%';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
CREATE TABLESPACE ts2 ADD DATAFILE 'ts2_1.ibd';
CREATE TABLESPACE ts3 ADD DATAFILE 'ts3_1.ibd';
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
CREATE TABLESPACE ts2 ADD DATAFILE 'ts2_1.ibd';
CREATE TABLESPACE ts3 ADD DATAFILE 'ts3_1.ibd';
FLUSH TABLE t1 WITH READ LOCK;
UNLOCK TABLES;
FLUSH TABLE t2 FOR EXPORT;
UNLOCK TABLES;
LOCK TABLE t3 READ;
UNLOCK TABLES;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
UNLOCK TABLES;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
DEALLOCATE PREPARE stmt1;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'DROP TABLESPACE%';
LET $wait_condition=   SELECT COUNT(*) = 0 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'DROP TABLESPACE%';
CREATE TABLESPACE `` ADD DATAFILE 'x.ibd';
CREATE TABLESPACE xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ADD DATAFILE 'x.ibd';
CREATE TABLESPACE xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ADD DATAFILE 'x.ibd';
CREATE TABLESPACE `¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥` ADD DATAFILE 'x.ibd';
CREATE TABLESPACE `¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥¥` ADD DATAFILE 'x.ibd';
CREATE TABLESPACE `€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€` ADD DATAFILE 'x.ibd';
CREATE TABLESPACE `€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€` ADD DATAFILE 'x.ibd';
CREATE TABLESPACE `a𐍈` ADD DATAFILE 'x.ibd';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
LOCK TABLE t1 READ;
UNLOCK TABLES;
UNLOCK TABLES;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1_1.ibd';
ALTER TABLE t1 TABLESPACE ``;
CREATE TABLE t2 (pk INTEGER PRIMARY KEY) TABLESPACE ``;
LET $wait_condition=   SELECT COUNT(*) = 1 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'ALTER TABLESPACE%';
LET $wait_condition=   SELECT COUNT(*) = 2 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.events_waits_current     WHERE object_type LIKE 'TABLESPACE';
CALL sys.ps_setup_disable_instrument('wait');
CALL sys.ps_setup_enable_instrument('wait/lock/metadata/sql/mdl');
LET $wait_condition=   SELECT COUNT(*) = 0 FROM information_schema.processlist     WHERE state LIKE 'Waiting for tablespace metadata lock' AND           info LIKE 'ALTER TABLESPACE%';
LET $wait_condition=   SELECT COUNT(*) = 0 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.events_waits_history_long     WHERE object_type LIKE 'TABLESPACE' AND object_name LIKE 'ts1';
CALL sys.ps_setup_enable_instrument('wait');
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE' AND object_name LIKE 'ts1';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE' AND object_name LIKE 'ts1';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE' AND object_name LIKE 'ts1';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE' AND object_name LIKE 'ts1';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE' AND object_name LIKE 'ts1';
LET $wait_condition=   SELECT COUNT(*) = 1 FROM performance_schema.metadata_locks     WHERE object_type LIKE 'TABLESPACE' AND object_name LIKE 'ts2';
UNLOCK TABLES;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
ALTER TABLESPACE ts1 RENAME TO ts2;
ALTER TABLESPACE ts2 RENAME TO ts1;
ALTER TABLESPACE ts1 RENAME TO ts2;
ALTER TABLESPACE ts1 RENAME TO ts2;
ALTER TABLESPACE ts2 RENAME TO ts3;
ALTER TABLESPACE ts2 RENAME TO ts3;
ALTER TABLESPACE ts3 RENAME TO ts4;
ALTER TABLESPACE ts3 RENAME TO ts4;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
connect (con1, localhost, root);
ALTER TABLESPACE ts1 RENAME TO ts2;
disconnect con1;
UNLOCK TABLES;
LOCK TABLES t1 READ;
connect (con1, localhost, root);
ALTER TABLESPACE ts1 RENAME TO ts2;
disconnect con1;
UNLOCK TABLES;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
connect (con1, localhost, root);
disconnect con1;
CREATE TABLESPACE ts1 ADD DATAFILE 'df1.ibd';
connect (con1, localhost, root);
ALTER TABLESPACE ts1 RENAME TO t1;
disconnect con1;
CREATE TABLESPACE s1 ADD DATAFILE 's1.ibd';
LOCK TABLE t1 WRITE;
UNLOCK TABLE;
LOCK TABLES test1 WRITE;
UNLOCK TABLES;
LOCK TABLES part1 WRITE;
UNLOCK TABLES;
CREATE FUNCTION MY_KILL(tid INT) RETURNS INT BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;   KILL tid;   RETURN (SELECT COUNT(*) = 0 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE ID = tid); END|
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
KILL (SELECT COUNT(*) FROM mysql.user);
disable_reconnect;
enable_reconnect;
send SELECT id FROM t1 WHERE id IN        (SELECT /*+ NO_BNL(a,b,c,d) */ DISTINCT a.id FROM t2 a, t2 b, t2 c, t2 d           GROUP BY ACOS(1/a.id), b.id, c.id, d.id           HAVING a.id BETWEEN 10 AND 20);
KILL @id;
reap;
send SELECT ACOS(0);
KILL QUERY @id;
reap;
while ($i) {   dec $i ;
} SET SESSION optimizer_search_depth=0;
while ($i) {   dec $i;
if ($i)   {   }   if (!$i)   {   } } SET DEBUG_SYNC= 'before_join_optimize SIGNAL in_sync WAIT_FOR continue';
send EXECUTE stmt;
KILL QUERY @id;
reap;
while ($i) {   dec $i ;
} SET DEBUG_SYNC = 'RESET';
KILL @id;
disconnect con1;
disable_query_log;
while ($1) {   dec $1;
} enable_query_log;
create procedure p_verify_reprepare_count(expected int) begin   declare old_reprepare_count int default @reprepare_count;   select variable_value from   performance_schema.session_status where   variable_name='com_stmt_reprepare'   into @reprepare_count;   if old_reprepare_count + expected <> @reprepare_count then     select concat("Expected: ", expected,                    ", actual: ", @reprepare_count - old_reprepare_count)     as "ERROR";   else     select '' as "SUCCESS";   end if; end|
prepare stmt from "select * from t1";
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
rename table t1 to t2;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select a from t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "insert into t1 (a) value (?)";
execute stmt using @val;
execute stmt using @val;
execute stmt using @val;
prepare stmt from "insert into t1 (a) value (?)";
execute stmt using @val;
execute stmt using @val;
execute stmt using @val;
prepare stmt from "insert into t1 (a) value (?)";
execute stmt using @val;
execute stmt using @val;
execute stmt using @val;
prepare stmt from "insert into t1 (a) value (?)";
execute stmt using @val;
execute stmt using @val;
execute stmt using @val;
execute stmt using @val;
prepare stmt from "insert into t1 (a) value (?)";
execute stmt using @val;
deallocate prepare stmt;
prepare stmt from "insert into t1 (a) values (?)";
execute stmt using @var;
execute stmt using @var;
prepare stmt from "insert into t1(a) values (?)";
execute stmt using @var;
execute stmt using @var;
deallocate prepare stmt;
prepare stmt from "insert into t1 (a) values (?)";
execute stmt using @var;
execute stmt using @var;
prepare stmt from "insert into t1 (a) values (?)";
execute stmt using @var;
execute stmt using @var;
prepare stmt from "insert into t1 (a) values (?)";
execute stmt using @var;
execute stmt using @var;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from 'select count(*) from t1';
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select count(*) from t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select a from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from t1";
execute stmt;
execute stmt;
flush table t2;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
lock tables t1 read, t2 read;
execute stmt;
execute stmt;
execute stmt;
unlock tables;
lock tables t1 read, t2 read;
execute stmt;
execute stmt;
execute stmt;
unlock tables;
lock tables t1 read, t2 read;
execute stmt;
execute stmt;
execute stmt;
unlock tables;
deallocate prepare stmt;
lock tables t1 read, v1 read;
prepare stmt from 'select * from v1';
execute stmt;
execute stmt;
unlock tables;
lock tables t1 read;
execute stmt;
unlock tables;
deallocate prepare stmt;
lock tables t1 read, v1 read;
prepare stmt from 'select * from v1';
execute stmt;
execute stmt;
unlock tables;
lock tables t1 read;
execute stmt;
unlock tables;
deallocate prepare stmt;
prepare stmt from "select * from v1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
create function f1() returns int begin   declare x int;   call p1(x);   return x; end|
create procedure p1(out x int) select max(a) from t1 into x;
prepare stmt from "select * from v1";
execute stmt;
execute stmt;
create procedure p1(out x int) select max(a) from t2 into x;
execute stmt;
flush table t1;
execute stmt;
execute stmt;
prepare stmt from "select * from v1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
flush table t1;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
prepare stmt from "insert into v1 (a) values (?)";
execute stmt using @var;
execute stmt using @var;
execute stmt using @var;
execute stmt using @var;
deallocate prepare stmt;
prepare stmt from  "select ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE  from INFORMATION_SCHEMA.ROUTINES where  routine_name='p1'";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from  "select * from mysql.general_log where argument='IMPOSSIBLE QUERY STRING'";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from  "select database_name, table_name, n_rows, sum_of_other_index_sizes from mysql.innodb_table_stats where table_name='t1'";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from v1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
prepare stmt from "alter table t1 add column b int";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
prepare stmt from "show create procedure p1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
prepare stmt from "show create function f1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
prepare stmt from "show create trigger t1_bi";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select a from t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from v_27420";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from  "select oref, a, a in (select a from t_27430_1 where oref=t_27430_2.oref) Z from t_27430_2";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select * from v_27690_1, v_27690_2";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "select f1()";
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
connect (con1,localhost,root,,);
disconnect con1;
deallocate prepare stmt_sf;
deallocate prepare stmt_sp;
prepare stmt from "select 1 as res from dual where (1) in (select * from t1)";
execute stmt;
deallocate prepare stmt;
prepare stmt from 'create table t2 as select * from t1';
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "create temporary table if not exists t2 as select * from t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "create table t2 like t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "update t2 set a=a+1 where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "insert into t2 set a=((1) in (select * from t1))";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "insert into t2 select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "replace t2 set a=((1) in (select * from t1))";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "replace t2 select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "delete from t2 where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "delete t2, t3 from t2, t3 where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "update t2, t3 set t3.a=t2.a, t2.a=null where (1) in (select * from t1)";
execute stmt;
deallocate prepare stmt;
prepare stmt from "load data infile '../std_data_ln/words.dat' into table t1";
prepare stmt from "show databases where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show tables where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show fields from t1 where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show keys from t1 where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show variables where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show status where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show engine all status where (1) in (select * from t1)";
prepare stmt from "show engine all logs where (1) in (select * from t1)";
prepare stmt from "show engine all mutex where (1) in (select * from t1)";
prepare stmt from "show processlist where (1) in (select * from t1)";
prepare stmt from "show charset where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show collation where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show table status where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show triggers where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show open tables where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show procedure status where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show function status where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "show events where (1) in (select * from t1)";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "set @a=((1) in (select * from t1))";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "do ((1) in (select * from t1))";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "call p1((1) in (select * from t1))";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "create view v1 as select * from t1";
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "alter view v1 as select 2";
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW   SET @a:= (SELECT COUNT(*) FROM t1);
PREPARE stmt1 FROM 'INSERT INTO t1 VALUES (1)';
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PREPARE stmt2 FROM 'CREATE TEMPORARY TABLE tm (i INT) ENGINE=InnoDB UNION=(t1)';
EXECUTE stmt2;
EXECUTE stmt2;
DEALLOCATE PREPARE stmt2;
PREPARE stmt3 FROM 'ALTER TABLE tm UNION=(t1)';
EXECUTE stmt3;
EXECUTE stmt3;
DEALLOCATE PREPARE stmt3;
call mtr.add_suppression("Got an error from thread_id=.*ha_myisam.cc:");
call mtr.add_suppression("MySQL thread id .*, query id .* localhost.*mysqltest_u1 Checking table");
connect (con1,localhost,mysqltest_u1,,);
flush table mysqltest_db1.t1;
disconnect con1;
CALL mtr.add_suppression("Cannot create temporary merge file");
create table t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1)  ( subpartition x11 nodegroup 0,    subpartition x12 nodegroup 1),   partition x2 values less than (5) ( subpartition x21 nodegroup 0,   subpartition x22 nodegroup 1),   partition x3 values less than (10) ( subpartition x31 max_rows=50,   subpartition x32 nodegroup 1) );
CREATE TABLE t1 (f1 INT NOT NULL AUTO_INCREMENT,  f2 INT NOT NULL,  PRIMARY KEY (f1,f2)) ENGINE=InnoDB PARTITION BY RANGE (f2)   (PARTITION p0 VALUES LESS THAN (100),    PARTITION p1 VALUES LESS THAN (200),    PARTITION p2 VALUES LESS THAN (300),    PARTITION p3 VALUES LESS THAN (MAXVALUE));
INSERT INTO t VALUES (REPEAT('a', 128)), (REPEAT('b', 128)), (REPEAT('c', 128)), (REPEAT('d', 128));
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
if($log_error_ == "stderr") { } FLUSH LOGS;
SET @save_filters= @@global.dragnet.log_error_filter_rules;
disable_warnings;
SET @save_filters= @@global.dragnet.log_error_filter_rules;
SELECT @@global.dragnet.log_error_filter_rules;
SELECT @@global.dragnet.log_error_filter_rules;
SELECT @@session.dragnet.log_error_filter_rules;
disable_warnings;
SET @@global.dragnet.log_error_filter_rules= REPEAT("IF prio>9 THEN drop. ", 1025);
SET @rules= CONCAT("IF ", REPEAT("x", 20000), ">9 THEN drop.");
call mtr.add_suppression("\\[ERROR\\] \\[MY\\-010000\\] \\[Server\\] Errors should not be suppressed");
enable_warnings;
disable_warnings;
perl;
use File::stat;
my $file= $ENV{'GREP_FILE'} or die("grep file not set");
my $pattern="^20";
my $stime= $ENV{'GREP_START'};
open(FILE, "$file") or die("Unable to open $file: $!");
while (<FILE>) {      my $line = $_;
my $ts = 0;
if ($stime == 0) {        print "$line";
}      elsif ($line =~ /$pattern/) {        $line =~ /([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])T([0-9][0-9]):([0-9][0-9]):([0-9][0-9])\.([0-9][0-9][0-9][0-9][0-9][0-9])[-+Z][0-9:]* *[0-9]* *?(\[.*)/;
$ts=$1.$2.$3.$4.$5.$6.$7;
if ($ts >= $stime) {          $stime= 0;
}      }    }    close(FILE);
select HEX(0x19c9bbcce9e0a88f5212572b0c5b9e6d0 | _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2), HEX(0x19c9bbcce9e0a88f5212572b0c5b9e6d0 ^ _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2), HEX(0x19c9bbcce9e0a88f5212572b0c5b9e6d0 & _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2), HEX(~ _binary 0x19c9bbcce9e0a88f5212572b0c5b9e6d0), HEX(~ _binary 0x13c19e5cfdf03b19518cbe3d65faf10d2);
PREPARE s1 FROM "SELECT HEX(vbin1 & vbin2), HEX(vbin1 | vbin2), HEX(vbin1 ^ vbin2),   HEX(~vbin1), HEX(vbin1 << 3), HEX(vbin2 >> 3), BIT_COUNT(vbin1) FROM t WHERE id in(1, 2, 3, 4, 5, 6)";
EXECUTE s1;
EXECUTE s1;
PREPARE s2 FROM "SELECT HEX(vbin1 & vbin2), HEX(vbin1 | vbin2), HEX(vbin1 ^ vbin2),   HEX(~vbin1), HEX(vbin1 << 3), HEX(vbin2 >> 3), BIT_COUNT(vbin1) FROM t WHERE id in(7)";
EXECUTE s2;
EXECUTE s2;
CREATE TABLE at(_bit bit(64),                 _tin tinyint(8),                 _boo bool,                 _sms smallint signed,                 _smu smallint unsigned,                 _mes mediumint signed,                 _meu mediumint unsigned,                 _ins int signed,                 _inu int unsigned,                 _bis bigint signed,                 _biu bigint unsigned,                 _dec decimal (5,2),                 _flo float,                 _dou double,                 _yea year,                 _jsn json,                 _chr char(12),                 _vch varchar(12),                 _bin binary(255),                 _vbn varbinary(255),                 _tbl tinyblob,                 _ttx tinytext,                 _blb blob,                 _txt text,                 _mbb mediumblob,                 _mtx mediumtext,                 _lbb longblob,                 _ltx longtext,                 _pnt point,                 _dat date default '1988-12-15',                 _dtt datetime default '2015-10-24 12:00:00',                 _smp timestamp default '2015-10-24 14:00:00',                 _tim time default' 07:08:09',                 _enu enum('a', 'b', 'c'),                 _set set('a', 'b', 'c')                 );
INSERT INTO at (     _bit,     _tin,     _boo,     _sms,     _smu,     _mes,     _meu,     _ins,     _inu,     _bis,     _biu,     _dec,     _flo,     _dou,     _yea,     _jsn,     _chr,     _vch,     _bin,     _vbn,     _tbl,     _ttx,     _blb,     _txt,     _mbb,     _mtx,     _lbb,     _ltx,     _pnt,     _enu,     _set ) VALUES (     64,     64,     true,     64,     64,     64,     64,     64,     64,     64,     64,     64,     64,     64,     2005,     cast('{"a": 3}' as json),     "abcdefghijkl",     "abcdefghijkl",     x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFEBABE11111111',     x'CAFEBABE00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111CAFEBABE',     x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111',     "abcdefg",     x'cafebabe',     "abcdefg",     x'cafebabe',     "abcdefg",     x'cafebabe',     "abcdefg",     st_geomfromtext('point(1 1)'),     1,     1 );
SELECT _bit | 2147483647 FROM at;
SELECT _tin | 2147483647 FROM at;
SELECT _boo | 2147483647 FROM at;
SELECT _sms | 2147483647 FROM at;
SELECT _smu | 2147483647 FROM at;
SELECT _mes | 2147483647 FROM at;
SELECT _meu | 2147483647 FROM at;
SELECT _ins | 2147483647 FROM at;
SELECT _inu | 2147483647 FROM at;
SELECT _bis | 2147483647 FROM at;
SELECT _biu | 2147483647 FROM at;
SELECT _dec | 2147483647 FROM at;
SELECT _flo | 2147483647 FROM at;
SELECT _dou | 2147483647 FROM at;
SELECT _yea | 2147483647 FROM at;
SELECT _jsn | 2147483647 FROM at;
SELECT _chr | 2147483647 FROM at;
SELECT _vch | 2147483647 FROM at;
SELECT _bin | 2147483647 FROM at;
SELECT _vbn | 2147483647 FROM at;
SELECT _tbl | 2147483647 FROM at;
SELECT _ttx | 2147483647 FROM at;
SELECT _blb | 2147483647 FROM at;
SELECT _txt | 2147483647 FROM at;
SELECT _mbb | 2147483647 FROM at;
SELECT _mtx | 2147483647 FROM at;
SELECT _lbb | 2147483647 FROM at;
SELECT _ltx | 2147483647 FROM at;
SELECT _pnt | 2147483647 FROM at;
SELECT _dat | 2147483647 FROM at;
SELECT _dtt | 2147483647 FROM at;
SELECT _smp | 2147483647 FROM at;
SELECT _tim | 2147483647 FROM at;
SELECT _enu | 2147483647 FROM at;
SELECT _set | 2147483647 FROM at;
SELECT _bit & 2147483647 FROM at;
SELECT _tin & 2147483647 FROM at;
SELECT _boo & 2147483647 FROM at;
SELECT _sms & 2147483647 FROM at;
SELECT _smu & 2147483647 FROM at;
SELECT _mes & 2147483647 FROM at;
SELECT _meu & 2147483647 FROM at;
SELECT _ins & 2147483647 FROM at;
SELECT _inu & 2147483647 FROM at;
SELECT _bis & 2147483647 FROM at;
SELECT _biu & 2147483647 FROM at;
SELECT _dec & 2147483647 FROM at;
SELECT _flo & 2147483647 FROM at;
SELECT _dou & 2147483647 FROM at;
SELECT _yea & 2147483647 FROM at;
SELECT _jsn & 2147483647 FROM at;
SELECT _chr & 2147483647 FROM at;
SELECT _vch & 2147483647 FROM at;
SELECT _bin & 2147483647 FROM at;
SELECT _vbn & 2147483647 FROM at;
SELECT _tbl & 2147483647 FROM at;
SELECT _ttx & 2147483647 FROM at;
SELECT _blb & 2147483647 FROM at;
SELECT _txt & 2147483647 FROM at;
SELECT _mbb & 2147483647 FROM at;
SELECT _mtx & 2147483647 FROM at;
SELECT _lbb & 2147483647 FROM at;
SELECT _ltx & 2147483647 FROM at;
SELECT _pnt & 2147483647 FROM at;
SELECT _dat & 2147483647 FROM at;
SELECT _dtt & 2147483647 FROM at;
SELECT _smp & 2147483647 FROM at;
SELECT _tim & 2147483647 FROM at;
SELECT _enu & 2147483647 FROM at;
SELECT _set & 2147483647 FROM at;
SELECT _bit ^ 2147483647 FROM at;
SELECT _tin ^ 2147483647 FROM at;
SELECT _boo ^ 2147483647 FROM at;
SELECT _sms ^ 2147483647 FROM at;
SELECT _smu ^ 2147483647 FROM at;
SELECT _mes ^ 2147483647 FROM at;
SELECT _meu ^ 2147483647 FROM at;
SELECT _ins ^ 2147483647 FROM at;
SELECT _inu ^ 2147483647 FROM at;
SELECT _bis ^ 2147483647 FROM at;
SELECT _biu ^ 2147483647 FROM at;
SELECT _dec ^ 2147483647 FROM at;
SELECT _flo ^ 2147483647 FROM at;
SELECT _dou ^ 2147483647 FROM at;
SELECT _yea ^ 2147483647 FROM at;
SELECT _jsn ^ 2147483647 FROM at;
SELECT _chr ^ 2147483647 FROM at;
SELECT _vch ^ 2147483647 FROM at;
SELECT _bin ^ 2147483647 FROM at;
SELECT _vbn ^ 2147483647 FROM at;
SELECT _tbl ^ 2147483647 FROM at;
SELECT _ttx ^ 2147483647 FROM at;
SELECT _blb ^ 2147483647 FROM at;
SELECT _txt ^ 2147483647 FROM at;
SELECT _mbb ^ 2147483647 FROM at;
SELECT _mtx ^ 2147483647 FROM at;
SELECT _lbb ^ 2147483647 FROM at;
SELECT _ltx ^ 2147483647 FROM at;
SELECT _pnt ^ 2147483647 FROM at;
SELECT _dat ^ 2147483647 FROM at;
SELECT _dtt ^ 2147483647 FROM at;
SELECT _smp ^ 2147483647 FROM at;
SELECT _tim ^ 2147483647 FROM at;
SELECT _enu ^ 2147483647 FROM at;
SELECT _set ^ 2147483647 FROM at;
SELECT _bit | x'cafebabe' FROM at;
SELECT _tin | x'cafebabe' FROM at;
SELECT _boo | x'cafebabe' FROM at;
SELECT _sms | x'cafebabe' FROM at;
SELECT _smu | x'cafebabe' FROM at;
SELECT _mes | x'cafebabe' FROM at;
SELECT _meu | x'cafebabe' FROM at;
SELECT _ins | x'cafebabe' FROM at;
SELECT _inu | x'cafebabe' FROM at;
SELECT _bis | x'cafebabe' FROM at;
SELECT _biu | x'cafebabe' FROM at;
SELECT _dec | x'cafebabe' FROM at;
SELECT _flo | x'cafebabe' FROM at;
SELECT _dou | x'cafebabe' FROM at;
SELECT _yea | x'cafebabe' FROM at;
SELECT _jsn | x'cafebabe' FROM at;
SELECT _chr | x'cafebabe' FROM at;
SELECT _vch | x'cafebabe' FROM at;
SELECT hex(_bin | x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _bin | x'cafebabe' FROM at;
SELECT hex(_vbn | x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _vbn | x'cafebabe' FROM at;
SELECT hex(_tbl | x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _tbl | x'cafebabe' FROM at;
SELECT _ttx | x'cafebabe' FROM at;
SELECT hex(_blb | x'cafebabe') FROM at;
SELECT _txt | x'cafebabe' FROM at;
SELECT hex(_mbb | x'cafebabe') FROM at;
SELECT _mtx | x'cafebabe' FROM at;
SELECT hex(_lbb | x'cafebabe') FROM at;
SELECT _ltx | x'cafebabe' FROM at;
SELECT _pnt | x'cafebabe' FROM at;
SELECT _dat | x'cafebabe' FROM at;
SELECT _dtt | x'cafebabe' FROM at;
SELECT _smp | x'cafebabe' FROM at;
SELECT _tim | x'cafebabe' FROM at;
SELECT _enu | x'cafebabe' FROM at;
SELECT _set | x'cafebabe' FROM at;
SELECT _bit & x'cafebabe' FROM at;
SELECT _tin & x'cafebabe' FROM at;
SELECT _boo & x'cafebabe' FROM at;
SELECT _sms & x'cafebabe' FROM at;
SELECT _smu & x'cafebabe' FROM at;
SELECT _mes & x'cafebabe' FROM at;
SELECT _meu & x'cafebabe' FROM at;
SELECT _ins & x'cafebabe' FROM at;
SELECT _inu & x'cafebabe' FROM at;
SELECT _bis & x'cafebabe' FROM at;
SELECT _biu & x'cafebabe' FROM at;
SELECT _dec & x'cafebabe' FROM at;
SELECT _flo & x'cafebabe' FROM at;
SELECT _dou & x'cafebabe' FROM at;
SELECT _yea & x'cafebabe' FROM at;
SELECT _jsn & x'cafebabe' FROM at;
SELECT _chr & x'cafebabe' FROM at;
SELECT _vch & x'cafebabe' FROM at;
SELECT hex(_bin & x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _bin & x'cafebabe' FROM at;
SELECT hex(_vbn & x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _vbn & x'cafebabe' FROM at;
SELECT hex(_tbl & x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _tbl & x'cafebabe' FROM at;
SELECT _ttx & x'cafebabe' FROM at;
SELECT hex(_blb & x'cafebabe') FROM at;
SELECT _txt & x'cafebabe' FROM at;
SELECT hex(_mbb & x'cafebabe') FROM at;
SELECT _mtx & x'cafebabe' FROM at;
SELECT hex(_lbb & x'cafebabe') FROM at;
SELECT _ltx & x'cafebabe' FROM at;
SELECT _pnt & x'cafebabe' FROM at;
SELECT _dat & x'cafebabe' FROM at;
SELECT _dtt & x'cafebabe' FROM at;
SELECT _smp & x'cafebabe' FROM at;
SELECT _tim & x'cafebabe' FROM at;
SELECT _enu & x'cafebabe' FROM at;
SELECT _set & x'cafebabe' FROM at;
SELECT _bit ^ x'cafebabe' FROM at;
SELECT _tin ^ x'cafebabe' FROM at;
SELECT _boo ^ x'cafebabe' FROM at;
SELECT _sms ^ x'cafebabe' FROM at;
SELECT _smu ^ x'cafebabe' FROM at;
SELECT _mes ^ x'cafebabe' FROM at;
SELECT _meu ^ x'cafebabe' FROM at;
SELECT _ins ^ x'cafebabe' FROM at;
SELECT _inu ^ x'cafebabe' FROM at;
SELECT _bis ^ x'cafebabe' FROM at;
SELECT _biu ^ x'cafebabe' FROM at;
SELECT _dec ^ x'cafebabe' FROM at;
SELECT _flo ^ x'cafebabe' FROM at;
SELECT _dou ^ x'cafebabe' FROM at;
SELECT _yea ^ x'cafebabe' FROM at;
SELECT _jsn ^ x'cafebabe' FROM at;
SELECT _chr ^ x'cafebabe' FROM at;
SELECT _vch ^ x'cafebabe' FROM at;
SELECT hex(_bin ^ x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _bin ^ x'cafebabe' FROM at;
SELECT hex(_vbn ^ x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _vbn ^ x'cafebabe' FROM at;
SELECT hex(_tbl ^ x'CAFEBABE000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CAFE1111CAFE1111') FROM at;
SELECT _tbl ^ x'cafebabe' FROM at;
SELECT _ttx ^ x'cafebabe' FROM at;
SELECT hex(_blb ^ x'cafebabe') FROM at;
SELECT _txt ^ x'cafebabe' FROM at;
SELECT hex(_mbb ^ x'cafebabe') FROM at;
SELECT _mtx ^ x'cafebabe' FROM at;
SELECT hex(_lbb ^ x'cafebabe') FROM at;
SELECT _ltx ^ x'cafebabe' FROM at;
SELECT _pnt ^ x'cafebabe' FROM at;
SELECT _dat ^ x'cafebabe' FROM at;
SELECT _dtt ^ x'cafebabe' FROM at;
SELECT _smp ^ x'cafebabe' FROM at;
SELECT _tim ^ x'cafebabe' FROM at;
SELECT _enu ^ x'cafebabe' FROM at;
SELECT _set ^ x'cafebabe' FROM at;
SELECT HEX(_bin & _bin), HEX(_bin & _vbn), HEX(_vbn & _bin), HEX(_vbn & _vbn) FROM at;
SELECT HEX(_bin | _bin), HEX(_bin | _vbn), HEX(_vbn | _bin), HEX(_vbn | _vbn) FROM at;
SELECT HEX(_bin ^ _bin), HEX(_bin ^ _vbn), HEX(_vbn ^ _bin), HEX(_vbn ^ _vbn) FROM at;
PREPARE s1 FROM "SELECT group_id, HEX(BIT_AND(a)) FROM t GROUP BY group_id";
EXECUTE s1;
PREPARE s2 FROM "SELECT group_id, HEX(BIT_OR(a)) FROM t GROUP BY group_id";
EXECUTE s2;
PREPARE s3 FROM "SELECT group_id, HEX(BIT_XOR(a)) FROM t GROUP BY group_id";
EXECUTE s3;
PREPARE s4 FROM "SELECT HEX(BIT_AND(a)) FROM t";
EXECUTE s4;
PREPARE s5 FROM "SELECT HEX(BIT_OR(a)) FROM t";
EXECUTE s5;
PREPARE s6 FROM "SELECT HEX(BIT_XOR(a)) FROM t";
EXECUTE s6;
PREPARE s1 FROM "SELECT group_id, HEX(BIT_AND(a)) FROM t GROUP BY group_id";
EXECUTE s1;
PREPARE s2 FROM "SELECT group_id, HEX(BIT_OR(a)) FROM t GROUP BY group_id";
EXECUTE s2;
PREPARE s3 FROM "SELECT group_id, HEX(BIT_XOR(a)) FROM t GROUP BY group_id";
EXECUTE s3;
PREPARE s4 FROM "SELECT HEX(BIT_AND(a)) FROM t";
EXECUTE s4;
PREPARE s5 FROM "SELECT HEX(BIT_OR(a)) FROM t";
EXECUTE s5;
PREPARE s6 FROM "SELECT HEX(BIT_XOR(a)) FROM t";
EXECUTE s6;
PREPARE s1 FROM "SELECT HEX(BIT_AND(a)),HEX(BIT_OR(a)),HEX(BIT_XOR(a)) FROM t WHERE group_id = 5";
EXECUTE s1;
EXECUTE s1;
PREPARE s2 FROM "SELECT group_id, HEX(BIT_AND(a)), HEX(BIT_OR(a)), HEX (BIT_XOR(a)) FROM t GROUP BY group_id";
EXECUTE s2;
EXECUTE s2;
SELECT HEX(_binary 0x0003 << (_binary 0x38 | 0x38));
SELECT HEX(_binary 0x0003 << (_binary 0x40 | 0x40));
LET $have_debug= `SELECT (version() LIKE '%debug%')`;
IF ($have_debug) { disable_query_log;
disable_result_log;
enable_result_log;
enable_query_log;
} DROP table t;
SET @a:= b'1010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001';
SELECT BIT_COUNT(_binary 0x221040808040100200200100);
INSERT INTO t VALUES(REPEAT(x'0a',1000));
SET @a:= b'1010010001000010000010000001000000010000000010000000001000000000010000000000010000000000001';
LET $c = 96;
WHILE ($c) {   EVAL INSERT INTO r SELECT $c, HEX(@a << $c), HEX(@a >> $c);
DEC $c;
} SELECT * FROM r ORDER by c;
INSERT INTO t VALUES(1, REPEAT('2', 257)), (1, REPEAT('1', 257));
INSERT INTO t VALUES(1, REPEAT('2', 255)), (1, REPEAT('1', 255));
INSERT INTO t VALUES(1, REPEAT('2', 32750), REPEAT('1', 32750));
SELECT 1 FROM t WHERE insert(a & 0x111111,'','','');
SELECT 1 FROM t WHERE insert(a & NULL,'','','');
PREPARE s FROM 'do json_array(1, database(), bit_or(@c:=0xe9))';
EXECUTE s;
EXECUTE s;
DEALLOCATE PREPARE s;
SET @s:="do field('1',monthname(now()),bit_and(export_set(1,'',1,0x29,186)))";
PREPARE s FROM @s;
EXECUTE s;
EXECUTE s;
DEALLOCATE PREPARE s;
SET @s1:='do length(concat(1,bit_xor(aes_encrypt(1,1,1))));';
PREPARE s FROM @s;
EXECUTE s;
EXECUTE s;
DEALLOCATE PREPARE s;
write_file $BOOTSTRAP_SQL;
mkdir $DDIR;
connect(root_con,localhost,root,,mysql);
disconnect root_con;
remove_file $MYSQLD_LOG;
remove_file $BOOTSTRAP_SQL;
mkdir $DDIR;
write_file $AFILE;
some text perl;
my $mysqldir="$ENV{'DDIR'}/mysql";
if (opendir(my $dh, $mysqldir))    {      print "Data directory $mysqldir not empty\n";
closedir($dh);
} remove_file $MYSQLD_LOG;
write_file $DDIR;
some text remove_file $MYSQLD_LOG;
CALL mtr.add_suppression("Dictionary file not specified");
perl;
my $logf= $ENV{'LOGF'} or die "LOGF not set";
open(FILE, "$logf") or die("Unable to open $logf: $!\n");
my $count_warnings= grep(/\[Warning\] \[[^]]*\] \[[^]]*\] The syntax 'plugin-validate-password-length' is deprecated and will be removed in a future release\. Please use validate-password-length instead\./gi,<FILE>);
my $count_warnings= $count_warnings;
print "Deprecation warning count : $count_warnings\n";
close(FILE);
open(FILE,">$logf") or die("Unable to open $logf for truncation $!\n");
close(FILE);
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
CREATE TABLE t4 (s1 CHAR(50) CHARACTER SET latin1,                  s2 CHAR(50) CHARACTER SET cp932,                  d DECIMAL(10,2))| CREATE PROCEDURE bug18293 (IN ins1 CHAR(50),                            IN ins2 CHAR(50) CHARACTER SET cp932,                            IN ind DECIMAL(10,2))   BEGIN     INSERT INTO t4 VALUES (ins1, ins2, ind);
END| CALL bug18293("Foo's a Bar", _cp932 0xED40ED41ED42, 47.93);
if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('firstmatch', @@optimizer_switch) > 0`)  {   set optimizer_switch='firstmatch=off';
} if (`select locate('loosescan', @@optimizer_switch) > 0`)  {   set optimizer_switch='loosescan=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
INSERT INTO t1 VALUES (REPEAT(_ucs2 0x201f, 10));
INSERT INTO t1 VALUES (REPEAT(_ucs2 0x2020, 10));
INSERT INTO t1 VALUES (REPEAT(_ucs2 0x2021, 10));
PREPARE stmt FROM "SELECT /*+ SET_VAR(big_tables=on) */ VARIABLE_VALUE FROM performance_schema.session_variables where VARIABLE_NAME = 'big_tables'";
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
CREATE PROCEDURE test_hint (hint_str VARCHAR(255), var_str VARCHAR(64)) BEGIN SET @orig_q= CONCAT("SELECT                      VARIABLE_VALUE                      FROM performance_schema.session_variables where VARIABLE_NAME = '",  var_str, "'");
PREPARE orig_stmt FROM @orig_q;
PREPARE hint_stmt FROM @hint_q;
EXECUTE orig_stmt;
EXECUTE hint_stmt;
EXECUTE orig_stmt;
DEALLOCATE PREPARE orig_stmt;
DEALLOCATE PREPARE hint_stmt;
END\\ DELIMITER ;\\ CREATE TABLE t1 (col INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
INSERT INTO t1 VALUES ( repeat( 'a', 10 ), 1),                       ( repeat( 'b', 10 ), 2);
LOCK TABLES t1 WRITE;
connect (con1,localhost,root,,);
disconnect con1;
UNLOCK TABLES;
SELECT TIMEDIFF(NOW(), UTC_TIMESTAMP);
SELECT /*+ SET_VAR(time_zone = '+04:00') */ TIMEDIFF(NOW(), UTC_TIMESTAMP);
SELECT /*+ SET_VAR(time_zone = 'UTC') */ TIMEDIFF(NOW(), UTC_TIMESTAMP);
UPDATE /*+ SET_VAR(time_zone = 'UTC') */ t1 SET f1 = TIMEDIFF(NOW(), UTC_TIMESTAMP);
INSERT /*+ SET_VAR(time_zone = 'UTC') */ t1 VALUES (TIMEDIFF(NOW(), UTC_TIMESTAMP));
DELETE /*+ SET_VAR(time_zone = 'UTC') */ FROM t1 WHERE f1 = TIMEDIFF(NOW(), UTC_TIMESTAMP);
set @a := foo;
set @a := connection_id() + 3;
set @b := 1;
set session @honk=99;
SET @a := (SELECT afield FROM bigfailure);
SET @a := (select afield from (SELECT afield FROM bigfailure) as b);
SET @a := (select * from bigfailure where afield = (SELECT afield FROM bigfailure));
insert into city 'blah';
set @rownum := 0;
set @rank := 0;
set @prev_score := NULL;
select @rownum := @rownum + 1 as `row`,  @rank := IF(@prev_score!=a, @rownum, @rank) as `rank`,  @prev_score := a as score from t1 order by score desc;
set @var := 0;
set @``= "illegal";
select @``;
SELECT 1 NOT IN (SELECT 1 FROM t1 as t1 GROUP BY 1 LIKE (SELECT 1 FROM t1 as t2)) AS col;
SELECT 1 NOT IN (SELECT 1 FROM t1 as t1 ORDER BY 1 LIKE (SELECT 1 FROM t1 as t2)) AS col;
SET @c := FROM_UNIXTIME(1537002029);
DO ((@c := (_utf32' -'))) SOUNDS LIKE(@c);
PREPARE s1 FROM 'SELECT * FROM numbers WHERE ui=?';
PREPARE s2 FROM 'SELECT * FROM numbers WHERE si=?';
EXECUTE s1 USING @ui_min;
EXECUTE s1 USING @ui_max;
EXECUTE s1 USING @si_min;
EXECUTE s1 USING @si_max;
EXECUTE s2 USING @ui_min;
EXECUTE s2 USING @ui_max;
EXECUTE s2 USING @si_min;
EXECUTE s2 USING @si_max;
DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
SET @str_ascii=_ASCII'abcxyz';
PREPARE s1 FROM 'SELECT HEX(vc_utf8mb4) FROM strings WHERE vc_ascii = ?';
PREPARE s2 FROM 'SELECT HEX(vc_utf8mb4) FROM strings WHERE vc_latin1 = ?';
PREPARE s3 FROM 'SELECT HEX(vc_utf8mb4) FROM strings WHERE vc_utf8mb4 = ?';
PREPARE s4 FROM 'SELECT HEX(vc_utf8mb4) FROM strings WHERE vc_utf16 = ?';
PREPARE s5 FROM 'SELECT HEX(vc_utf8mb4) FROM strings WHERE vc_utf32 = ?';
EXECUTE s1 USING @str_ascii;
EXECUTE s1 USING @str_latin1;
EXECUTE s1 USING @str_utf8mb4;
EXECUTE s1 USING @str_utf16;
EXECUTE s1 USING @str_utf32;
EXECUTE s2 USING @str_ascii;
EXECUTE s2 USING @str_latin1;
EXECUTE s2 USING @str_utf8mb4;
EXECUTE s2 USING @str_utf16;
EXECUTE s2 USING @str_utf32;
EXECUTE s3 USING @str_ascii;
EXECUTE s3 USING @str_latin1;
EXECUTE s3 USING @str_utf8mb4;
EXECUTE s3 USING @str_utf16;
EXECUTE s3 USING @str_utf32;
EXECUTE s4 USING @str_ascii;
EXECUTE s4 USING @str_latin1;
EXECUTE s4 USING @str_utf8mb4;
EXECUTE s4 USING @str_utf16;
EXECUTE s4 USING @str_utf32;
EXECUTE s5 USING @str_ascii;
EXECUTE s5 USING @str_latin1;
EXECUTE s5 USING @str_utf8mb4;
EXECUTE s5 USING @str_utf16;
EXECUTE s5 USING @str_utf32;
DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
PREPARE s FROM 'SELECT 0e0 + ?';
EXECUTE s USING @maxint;
DEALLOCATE PREPARE s;
PREPARE s FROM 'SELECT 0.0 + ?';
EXECUTE s USING @maxint;
DEALLOCATE PREPARE s;
PREPARE s FROM 'SELECT 0 + ?';
EXECUTE s USING @maxint;
DEALLOCATE PREPARE s;
PREPARE s FROM 'SELECT concat(?,"")';
EXECUTE s USING @maxint;
DEALLOCATE PREPARE s;
do null not between 1 and @undefined_var;
do null not between @undefined_var and 1;
while ($iteration < 6) {   inc $iteration;
} insert into t1 select col1_idx, col2_idx, col3, col4, 'america', 'america' from t1;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
CREATE FUNCTION bug27563() RETURNS INT(11) DETERMINISTIC BEGIN   DECLARE CONTINUE HANDLER FOR SQLSTATE '70100' SET @a:= 'killed';   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET @a:= 'exception';   SET DEBUG_SYNC= 'now SIGNAL in_sync WAIT_FOR kill';   RETURN 1; END|
send INSERT INTO t1 VALUES (bug27563());
KILL QUERY @id;
reap;
send UPDATE t1 SET f1= bug27563();
KILL QUERY @id;
reap;
send DELETE FROM t1 WHERE bug27563() IS NULL;
KILL QUERY @id;
reap;
send SELECT * FROM t1 WHERE f1= bug27563();
KILL QUERY @id;
reap;
CREATE TRIGGER trg27563 BEFORE INSERT ON t1 FOR EACH ROW BEGIN   DECLARE CONTINUE HANDLER FOR SQLSTATE '70100' SET @a:= 'killed';   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET @a:= 'exception';   INSERT INTO t2 VALUES(0);   SET DEBUG_SYNC= 'now SIGNAL in_sync WAIT_FOR kill';   INSERT INTO t2 VALUES(1); END|
send INSERT INTO t1 VALUES(2),(3);
KILL QUERY @id;
reap;
connect (blocker, localhost, root, , );
connect (dml, localhost, root, , );
connect (ddl, localhost, root, , );
lock table t1 read;
unlock tables;
lock tables t2 read;
unlock tables;
lock tables t1 read;
unlock tables;
lock tables t1 read;
unlock tables;
disconnect con1;
disconnect con2;
show grants for test@localhost;
show grants for test@localhost;
connect (root,localhost,root,,test);
connect (user1,localhost,mysqltest_1,,test);
create function f2 () returns int begin declare v int; select s1 from t2 into v; return v; end//
create function f2 () returns int begin declare v int; select s1 from t2 into v; return v; end//
connect (test14256,localhost,test14256,,test);
disconnect test14256;
LOCK TABLES v1 READ;
UNLOCK TABLES;
disconnect user1;
disconnect root;
create definer=some_user@`` sql security invoker view v1 as select 1;
connect (n1,localhost,readonly,,);
disconnect n1;
connect (session1,localhost,mysqltest_db1,PWD,test);
disconnect session1;
CREATE FUNCTION f2() RETURNS VARCHAR(77) SQL SECURITY INVOKER BEGIN   DECLARE cu VARCHAR(77);   CALL p1(cu);   RETURN cu; END|
connect (conn1, localhost, mysqltest_u1,,);
disconnect conn1;
connect (root,localhost,root,,);
connect (def,localhost,def_17254,,db17254);
connect (inv,localhost,inv_17254,,db17254);
disconnect def;
disconnect inv;
connect (conn1, localhost, mysqltest_u1, , mysqltest_db1);
connect (conn2, localhost, mysqltest_u2, , mysqltest_db2);
PREPARE stmt1 FROM "SELECT * FROM mysqltest_db1.t2";
EXECUTE stmt1;
PREPARE stmt2 FROM "SELECT * FROM mysqltest_db1.v1, mysqltest_db1.t2";
EXECUTE stmt2;
EXECUTE stmt1;
EXECUTE stmt2;
disconnect conn2;
disconnect conn1;
connect (u1,localhost,u26813,,db26813);
disconnect u1;
connect (u2,localhost,u29908_2,,mysqltest_29908);
connect (u1,localhost,u29908_1,,mysqltest_29908);
disconnect u1;
disconnect u2;
disconnect bug24040_con;
connect (addconfoo, localhost, foo,,);
disconnect root;
disconnect addconfoo;
connect (root,localhost,root,,test);
connect (test11765687,localhost,alice,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,bob,,mysqltest1);
connect (test11765687,localhost,cecil,,mysqltest1);
connect (test11765687,localhost,dan,,mysqltest1);
connect (test11765687,localhost,eugene,,mysqltest1);
connect (test11765687,localhost,fiona,,mysqltest1);
connect (test11765687,localhost,greg,,mysqltest1);
connect (test11765687,localhost,han,,mysqltest1);
connect (test11765687,localhost,inga,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,jamie,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,karl,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,lena,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,mhairi,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,noam,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,olga,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,pjotr,,mysqltest1);
disconnect test11765687;
connect (test11765687,localhost,quintessa,,mysqltest1);
disconnect root;
PREPARE stmt_v1     FROM "SELECT * FROM mysqltest1.v1";
PREPARE stmt_v2 FROM "SELECT * FROM mysqltest1.v2";
EXECUTE stmt_v1;
EXECUTE stmt_v2;
PREPARE stmt FROM "SELECT a FROM v3";
EXECUTE stmt;
CREATE VIEW v_mysqluser1_f1 AS SELECT mysqltest1.f1() AS a;
LOCK TABLES v1 READ;
connect (conn_11766767, localhost, user_11766767,,);
disconnect conn_11766767;
connect (conn1, localhost, user1, , test);
disconnect conn1;
SHOW GRANTS FOR user1@localhost;
connect (con1,localhost,user1,,);
PREPARE stmt FROM 'SELECT * FROM v1';
EXECUTE stmt;
DROP PREPARE stmt;
disconnect con1;
connect (con_user_22,localhost,user_name_len_22_01234,,test);
connect (con_user_32,localhost,user_name_len_32_012345678901234,,test);
connect (con1,localhost,u1,,);
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' FROM v1;
cat_file $OUTFILE;
remove_file $OUTFILE;
connect (con1,localhost,u1,,);
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' FROM v1;
call mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
call mtr.add_suppression("Found 1 prepared XA transactions");
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect(conA,localhost,root,,);
connect(conB,localhost,root,,);
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by list (a) subpartition by hash (a+b) ( partition x1 values in (1,2,3)   ( subpartition x11 nodegroup 0,     subpartition x12 nodegroup 1),   partition x2 values in (4,5,6)   ( subpartition x21 nodegroup 0,     subpartition x22 nodegroup 1) );
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p1999;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p1999/data;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p1999/idx;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2000;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2000/data;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2000/idx;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2001;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2001/data;
mkdir $MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2001/idx;
PARTITION BY LIST(YEAR(adate)) (   PARTITION p1999 VALUES IN (1995, 1999, 2003)     DATA DIRECTORY = '$MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p1999/data'     INDEX DIRECTORY = '$MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p1999/idx',   PARTITION p2000 VALUES IN (1996, 2000, 2004)     DATA DIRECTORY = '$MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2000/data'     INDEX DIRECTORY = '$MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2000/idx',   PARTITION p2001 VALUES IN (1997, 2001, 2005)     DATA DIRECTORY = '$MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2001/data'     INDEX DIRECTORY = '$MYSQLTEST_VARDIR/tmp/tc_partition_list_directory/p2001/idx' );
RENAME TABLE t to t_2;
RENAME TABLE t_2 to t;
while ($i) {   connect (test_con1,localhost,root,,,,,SSL);
disconnect test_con1;
dec $i;
} echo completed;
CALL mtr.add_suppression('You need to use --log-bin to make --binlog-format work.');
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set @save_storage_engine= @@default_storage_engine;
connect (con1,localhost,user1,,);
disconnect con1;
connect (con1,localhost,test,,test);
LOCK TABLES t2 READ;
connect (con2,localhost,test2,,test);
UNLOCK TABLES;
LOCK TABLES t2 WRITE;
UNLOCK TABLES;
disconnect con1;
disconnect con2;
connect(base_user_con,localhost,base_user,base_user,test);
disconnect base_user_con;
connect(login_user_con,localhost,login_user,,test);
disconnect login_user_con;
;
/* line with only comment */;
prepare bar from "DELETE FROM table_28779 WHERE a = 7 OR 1=1/*' AND b = 'bar';";
prepare bar from "DELETE FROM table_28779 WHERE a = 7 OR 1=1/*' AND b = 'bar';*";
prepare bar from "DELETE FROM table_28779 WHERE a = 7 OR 1=1/*! AND 2=2;";
prepare bar from "DELETE FROM table_28779 WHERE a = 7 OR 1=1/*! AND 2=2;*";
prepare bar from "DELETE FROM table_28779 WHERE a = 7 OR 1=1/*!98765' AND b = 'bar';";
prepare bar from "DELETE FROM table_28779 WHERE a = 7 OR 1=1/*!98765' AND b = 'bar';*";
SELECT 1 /*!99999 /* */ */;
SELECT 2 /*!12345 /* */ */;
SELECT 3 /*! /* */ */;
CREATE PROCEDURE p2 () BEGIN  DECLARE p LONGTEXT CHARACTER SET UTF8 DEFAULT '<Ñ><r>A</r></Ñ>';
END// DELIMITER ;// CALL p2();
CREATE PROCEDURE spxml(xml VARCHAR(128)) BEGIN   DECLARE c INT;
DECLARE i INT DEFAULT 1;
WHILE i <= c DO     BEGIN       SELECT i, @i, ExtractValue(xml,'/a/b[$i]'), ExtractValue(xml,'/a/b[$@i]');
END;
END WHILE;
END| DELIMITER ;| call spxml('<a><b>b1</b><b>b2</b><b>b3</b></a>');
CREATE PROCEDURE spxml(xml VARCHAR(128), i CHAR(16)) BEGIN   SELECT ExtractValue(xml,'/a/b[$i]');
END| DELIMITER ;| CALL spxml('<a><b>b1</b><b>b2</b></a>', '1');
select UpdateXML('<a>a</a>',repeat('a b ',1000),'');
do weight_string(extractvalue('','/*/a'));
do char((weight_string(extractvalue((''),('tX')))) using cp852);
connect (connection_for_table_check,127.0.0.1,root,,test,$MASTER_MYPORT);
RENAME TABLE t1 TO t2;
insert ignore t1 values (1, repeat('a',210), repeat('b', 310));
insert ignore t1 values (2, repeat(0xD0B1,215), repeat(0xD0B1, 310));
select i from t1 where a=repeat(_utf8 'a',200);
select i from t1 where a=repeat(_utf8 0xD0B1,200);
select i from t1 where b=repeat(_utf8 'b',310);
create table ti (k int, index using btree (k)) charset utf8mb4 engine=innodb;
create table th (k int, index using btree (k)) charset utf8mb4 engine=heap;
alter table ti add column l int, add index using btree (l);
alter table th add column l int, add index using hash (l);
create table ti (k int, index using hash (k)) charset utf8mb4 engine=innodb;
alter table ti add column l int, add index using hash (l);
create table t1 (k int, index using btree (k)) charset utf8mb4 engine=innodb;
create table t1 (k int, index using hash (k)) charset utf8mb4 engine=heap;
create table t1 (k int, index using btree (k), index using hash (k)) engine=heap;
create table t1 (k int, index (k), index using hash (k)) engine=heap;
create table t1 (k int, index using btree (k), index (k)) engine=innodb;
create table t1 (k int, index using btree (k), index using hash (k)) engine=innodb;
WHERE info LIKE 'ALTER EVENT%' AND                      state='Waiting for event metadata lock';
source include/wait_condition.inc;
WHERE info LIKE 'SHOW CREATE EVENT%' AND                      state='Waiting for event metadata lock';
source include/wait_condition.inc;
DISCONNECT con1;
DISCONNECT con2;
CREATE PROCEDURE p1() BEGIN   DECLARE v1 BIT;   DECLARE v2 BIT(1);   DECLARE v3 BIT(3) DEFAULT b'101';   DECLARE v4 BIT(64) DEFAULT 0x5555555555555555;   DECLARE v5 BIT(3);   DECLARE v6 BIT(64);   DECLARE v7 BIT(8) DEFAULT 128;   DECLARE v8 BIT(8) DEFAULT '128';   DECLARE v9 BIT(8) DEFAULT ' 128';   DECLARE v10 BIT(8) DEFAULT 'x 128';   SET v1 = v4;   SET v2 = 0;   SET v5 = v4; # check overflow   SHOW WARNINGS;   SET v6 = v3; # check padding   SELECT HEX(v1);   SELECT HEX(v2);   SELECT HEX(v3);   SELECT HEX(v4);   SELECT HEX(v5);   SELECT HEX(v6);   SELECT HEX(v7);   SELECT HEX(v8);   SELECT HEX(v9);   SELECT HEX(v10); END|
CREATE PROCEDURE p1(arg VARCHAR(255)) BEGIN   INSERT INTO t1 VALUES('p1: step1');   CASE arg * 10     WHEN 10 * 10 THEN       INSERT INTO t1 VALUES('p1: case1: on 10');     WHEN 10 * 10 + 10 * 10 THEN       BEGIN         CASE arg / 10           WHEN 1 THEN             INSERT INTO t1 VALUES('p1: case1: case2: on 1');           WHEN 2 THEN             BEGIN               DECLARE i TINYINT DEFAULT 10;               WHILE i > 0 DO                 INSERT INTO t1 VALUES(CONCAT('p1: case1: case2: loop: i: ', i));                 CASE MOD(i, 2)                   WHEN 0 THEN                     INSERT INTO t1 VALUES('p1: case1: case2: loop: i is even');                   WHEN 1 THEN                     INSERT INTO t1 VALUES('p1: case1: case2: loop: i is odd');                   ELSE                     INSERT INTO t1 VALUES('p1: case1: case2: loop: ERROR');                 END CASE;                 SET i = i - 1;               END WHILE;             END;           ELSE             INSERT INTO t1 VALUES('p1: case1: case2: ERROR');         END CASE;         CASE arg           WHEN 10 THEN             INSERT INTO t1 VALUES('p1: case1: case3: on 10');           WHEN 20 THEN             INSERT INTO t1 VALUES('p1: case1: case3: on 20');           ELSE             INSERT INTO t1 VALUES('p1: case1: case3: ERROR');         END CASE;       END;     ELSE       INSERT INTO t1 VALUES('p1: case1: ERROR');   END CASE;   CASE arg * 10     WHEN 10 * 10 THEN       INSERT INTO t1 VALUES('p1: case4: on 10');     WHEN 10 * 10 + 10 * 10 THEN       BEGIN         CASE arg / 10           WHEN 1 THEN             INSERT INTO t1 VALUES('p1: case4: case5: on 1');           WHEN 2 THEN             BEGIN               DECLARE i TINYINT DEFAULT 10;               WHILE i > 0 DO                 INSERT INTO t1 VALUES(CONCAT('p1: case4: case5: loop: i: ', i));                 CASE MOD(i, 2)                   WHEN 0 THEN                     INSERT INTO t1 VALUES('p1: case4: case5: loop: i is even');                   WHEN 1 THEN                     INSERT INTO t1 VALUES('p1: case4: case5: loop: i is odd');                   ELSE                     INSERT INTO t1 VALUES('p1: case4: case5: loop: ERROR');                 END CASE;                 SET i = i - 1;               END WHILE;             END;           ELSE             INSERT INTO t1 VALUES('p1: case4: case5: ERROR');         END CASE;         CASE arg           WHEN 10 THEN             INSERT INTO t1 VALUES('p1: case4: case6: on 10');           WHEN 20 THEN             INSERT INTO t1 VALUES('p1: case4: case6: on 20');           ELSE             INSERT INTO t1 VALUES('p1: case4: case6: ERROR');         END CASE;       END;     ELSE       INSERT INTO t1 VALUES('p1: case4: ERROR');   END CASE; END|
CREATE PROCEDURE p2() BEGIN   DECLARE i TINYINT DEFAULT 3;   WHILE i > 0 DO     IF MOD(i, 2) = 0 THEN       SET @_test_session_var = 10;     ELSE       SET @_test_session_var = 'test';     END IF;     CASE @_test_session_var       WHEN 10 THEN         INSERT INTO t1 VALUES('p2: case: numerical type');       WHEN 'test' THEN         INSERT INTO t1 VALUES('p2: case: string type');       ELSE         INSERT INTO t1 VALUES('p2: case: ERROR');     END CASE;     SET i = i - 1;   END WHILE; END|
CREATE PROCEDURE p1(IN arg BIGINT UNSIGNED) BEGIN   SELECT arg;   SELECT * FROM t1;   SELECT * FROM t1 WHERE col = arg; END|
CREATE PROCEDURE p1(x VARCHAR(10), y CHAR(3)) READS SQL DATA BEGIN   SELECT x, y; END|
CREATE PROCEDURE p1(x DATETIME) BEGIN   CREATE TABLE t1 SELECT x;   SHOW CREATE TABLE t1;   DROP TABLE t1; END|
CREATE PROCEDURE p1() BEGIN   SELECT HEX(b),     b = 0,     b = FALSE,     b IS FALSE,     b = 1,     b = TRUE,     b IS TRUE   FROM t1; END|
CREATE PROCEDURE p2() BEGIN   DECLARE vb BIT(1);   SELECT b INTO vb FROM t1 WHERE b = 0;   SELECT HEX(vb),     vb = 0,     vb = FALSE,     vb IS FALSE,     vb = 1,     vb = TRUE,     vb IS TRUE;   SELECT b INTO vb FROM t1 WHERE b = 1;   SELECT HEX(vb),     vb = 0,     vb = FALSE,     vb IS FALSE,     vb = 1,     vb = TRUE,     vb IS TRUE; END|
CREATE PROCEDURE proc_12976_a() BEGIN   declare localvar bit(1);   SELECT val INTO localvar FROM table_12976_a;   SELECT coalesce(localvar, 1)+1, coalesce(val, 1)+1 FROM table_12976_a; END||
CREATE PROCEDURE proc_12976_b(   name varchar(15),   out ep bit,   out msg varchar(10)) BEGIN   SELECT emailperm into ep FROM table_12976_b where (appname = name);   IF ep is true THEN     SET msg = 'True';   ELSE     SET msg = 'False';   END IF; END||
CREATE PROCEDURE p1() BEGIN   DECLARE v TINYINT DEFAULT 1e200;   SELECT v; END|
CREATE PROCEDURE p2() BEGIN   DECLARE v DECIMAL(5) DEFAULT 1e200;   SELECT v; END|
CREATE PROCEDURE p3() BEGIN   DECLARE v CHAR(5) DEFAULT 'abcdef';   SELECT v LIKE 'abc___'; END|
CREATE PROCEDURE p4(arg VARCHAR(2)) BEGIN     DECLARE var VARCHAR(1);     SET var := arg;     SELECT arg, var; END|
CREATE PROCEDURE p5(arg CHAR(2)) BEGIN     DECLARE var CHAR(1);     SET var := arg;     SELECT arg, var; END|
CREATE PROCEDURE p6(arg DECIMAL(2)) BEGIN     DECLARE var DECIMAL(1);     SET var := arg;     SELECT arg, var; END|
CREATE PROCEDURE p1 (arg DECIMAL(64,2)) BEGIN   DECLARE var DECIMAL(64,2);   SET var = arg;   SELECT var; END|
CREATE FUNCTION f1(arg TINYINT UNSIGNED) RETURNS TINYINT BEGIN   RETURN arg; END|
CREATE FUNCTION f1(arg TINYINT UNSIGNED) RETURNS TINYINT BEGIN   RETURN arg; END|
CREATE FUNCTION f1(arg MEDIUMINT) RETURNS MEDIUMINT BEGIN   RETURN arg; END|
CREATE FUNCTION f1(arg MEDIUMINT) RETURNS MEDIUMINT BEGIN   RETURN arg; END|
CREATE PROCEDURE p1() BEGIN   DECLARE sp_var INTEGER;   SELECT col INTO sp_var FROM t1 LIMIT 1;   SHOW WARNINGS;   SET @user_var = sp_var;   SELECT sp_var;   SELECT @user_var; END|
CREATE FUNCTION f1(arg VARCHAR(255)) RETURNS VARCHAR(255) BEGIN   DECLARE v1 VARCHAR(255);   DECLARE v2 VARCHAR(255);   SET v1 = CONCAT(LOWER(arg), UPPER(arg));   SET v2 = CONCAT(LOWER(v1), UPPER(v1));   INSERT INTO t1 VALUES(v1), (v2);   RETURN CONCAT(LOWER(arg), UPPER(arg)); END|
CREATE PROCEDURE p1(arg ENUM('a', 'b')) BEGIN   SELECT arg; END|
CREATE PROCEDURE p2(arg ENUM('a', 'b')) BEGIN   DECLARE var ENUM('c', 'd') DEFAULT arg;   SHOW WARNINGS;   SELECT arg, var; END|
CREATE FUNCTION f1(arg ENUM('a', 'b')) RETURNS ENUM('c', 'd') BEGIN   RETURN arg; END|
CREATE PROCEDURE p1(arg VARCHAR(255)) BEGIN   SELECT CHARSET(arg); END|
CREATE PROCEDURE p2(arg VARCHAR(255) CHARACTER SET UTF8) BEGIN     SELECT CHARSET(arg); END|
CALL p1(_UTF8 't');
CALL p2(_LATIN1 't');
CREATE PROCEDURE p1(arg1 BINARY(2), arg2 VARBINARY(2)) BEGIN   DECLARE var1 BINARY(2) DEFAULT 0x41;   DECLARE var2 VARBINARY(2) DEFAULT 0x42;   SELECT HEX(arg1), HEX(arg2);   SELECT HEX(var1), HEX(var2); END|
CREATE PROCEDURE p1(arg TINYINT) BEGIN   SELECT arg; END|
CREATE PROCEDURE p1(x VARCHAR(50)) BEGIN   SET x = SUBSTRING(x, 1, 3);   SELECT x; END|
CREATE FUNCTION f1(x VARCHAR(50)) RETURNS VARCHAR(50) BEGIN   RETURN SUBSTRING(x, 1, 3); END|
CREATE FUNCTION f1() RETURNS VARCHAR(2000) BEGIN   DECLARE var VARCHAR(2000);   SET var = '';   SET var = CONCAT(var, 'abc');   SET var = CONCAT(var, '');   RETURN var; END|
CREATE PROCEDURE p1() BEGIN   DECLARE v_char VARCHAR(255);   DECLARE v_text TEXT DEFAULT '';   SET v_char = 'abc';   SET v_text = v_char;   SET v_char = 'def';   SET v_text = concat(v_text, '|', v_char);   SELECT v_text; END|
DROP PROCEDURE IF EXISTS bug27415_text_test| DROP PROCEDURE IF EXISTS bug27415_text_test2| CREATE PROCEDURE bug27415_text_test(entity_id_str_in text) BEGIN     DECLARE str_remainder text;
END| CREATE PROCEDURE bug27415_text_test2(entity_id_str_in text) BEGIN     DECLARE str_remainder text;
DECLARE str_remainder2 text;
END| CALL bug27415_text_test('a,b,c')| CALL bug27415_text_test('a,b,c')| CALL bug27415_text_test2('a,b,c')| CALL bug27415_text_test('a,b,c')| DROP PROCEDURE bug27415_text_test| DROP PROCEDURE bug27415_text_test2| DELIMITER ;| drop function if exists f1;
create function f1() returns int  begin  if @a=1 then set @b='abc';  else set @b=1;  end if;  set @a=1;  return 0; end|
create table t1 (a int)|
insert into t1 (a) values (1), (2)|
set @b=1|
set @a=0|
select f1(), @b from t1|
set @b:='test'|
set @a=0|
select f1(), @b from t1|
CREATE PROCEDURE ctest() BEGIN   DECLARE i CHAR(16);
DECLARE j INT;
END| DELIMITER ;| CALL ctest();
CREATE PROCEDURE vctest() BEGIN   DECLARE i VARCHAR(16);
DECLARE j INT;
END| DELIMITER ;| CALL vctest();
select group_concat('3') over ();
PREPARE p FROM "SELECT sex, AVG(id), ROW_NUMBER() OVER w FROM t1     GROUP BY sex HAVING sex='M' OR sex IS NULL     WINDOW w AS () ORDER BY sex DESC";
EXECUTE p;
EXECUTE p;
DROP PREPARE p;
PREPARE p FROM "SELECT sex, AVG(id), SUM(AVG(id)) OVER w, NTILE(2) OVER w FROM t1     GROUP BY sex HAVING sex=(SELECT c FROM ss LIMIT 1) OR sex='F' OR sex IS NULL     WINDOW w AS (ORDER BY sex ROWS UNBOUNDED PRECEDING) ORDER BY sex DESC";
EXECUTE p;
EXECUTE p; # The second execute used to fail DROP PREPARE p;
SELECT sex, AVG(id) FROM t1    GROUP BY sex WITH ROLLUP    HAVING (sex='M' OR sex IS NULL) AND AVG(id)=3.0    ORDER BY GROUPING(sex), sex;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN ? PRECEDING and ? PRECEDING) FROM t1";
EXECUTE p USING @p1, @p2;
EXECUTE p USING @p2, @p1;
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN ? FOLLOWING and ? FOLLOWING) FROM t1";
EXECUTE p USING @p2, @p1;
EXECUTE p USING @p1, @p2;
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN ? FOLLOWING and ? FOLLOWING) FROM t1";
EXECUTE p USING @p2, @p1;
EXECUTE p USING @p1, @p2;
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS ? PRECEDING) FROM t1";
EXECUTE p USING @p1;
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id RANGE ? PRECEDING) FROM t1";
EXECUTE p USING @p1;
DROP PREPARE p;
PREPARE p FROM "SELECT sex, COUNT(id) OVER (ORDER BY id ROWS BETWEEN CURRENT ROW AND ? FOLLOWING) FROM t1";
EXECUTE p USING @p1;
DROP PREPARE p;
PREPARE p FROM "SELECT t, FIRST_VALUE(t) OVER (ORDER BY t RANGE INTERVAL ? HOUR PRECEDING) FROM t_time";
EXECUTE p USING @p1;
PREPARE p FROM "SELECT t, FIRST_VALUE(t) OVER (ORDER BY t RANGE BETWEEN INTERVAL ? HOUR PRECEDING AND INTERVAL ? HOUR PRECEDING) FROM t_time";
EXECUTE p USING @p1, @p2;
EXECUTE p USING @p2, @p1;
EXECUTE p USING @p2, @p1;
PREPARE p FROM "SELECT t, FIRST_VALUE(t) OVER (ORDER BY t RANGE BETWEEN INTERVAL ? HOUR PRECEDING AND INTERVAL ? HOUR_MINUTE PRECEDING) FROM t_time";
EXECUTE p USING @p2, @p1;
EXECUTE p USING @p2, @p1;
PREPARE s FROM   'SELECT id, NTILE(?) OVER w FROM t1 WINDOW w AS (ORDER BY id)';
EXECUTE s USING @a;
PREPARE p FROM "SELECT id, NTILE(?) OVER w FROM t1 WINDOW w AS (ORDER BY id)";
EXECUTE p USING @p1;
EXECUTE p USING @p1;
EXECUTE p USING @p1;
DROP PREPARE p;
SELECT SUM(b) OVER (ORDER by a GROUPS 2 PRECEDING) FROM t;
SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE CURRENT ROW) FROM t;
SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE TIES) FROM t;
SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE GROUP) FROM t;
SELECT SUM(b) OVER (ORDER by a ROWS 2 PRECEDING EXCLUDE NO OTHERS) FROM t;
PREPARE p from 'SELECT sex, PERCENT_RANK() OVER (ORDER BY AVG(id) DESC)                 FROM t1 GROUP BY sex ORDER BY sex';
EXECUTE p;
PREPARE ps FROM "SELECT RANK() OVER ( PARTITION BY pk ORDER BY col_int, col_varchar, pk) AS rnk, CUME_DIST() OVER ( PARTITION BY col_int ORDER BY pk ) AS c_dist FROM t";
EXECUTE ps;
DROP PREPARE ps;
PREPARE ps FROM " SELECT ROW_NUMBER() OVER ( ORDER BY d ) AS rn FROM t1 WINDOW  w1 AS ( ORDER BY d ),         w2 AS ( ORDER BY a RANGE 5 PRECEDING )";
EXECUTE ps;
DROP PREPARE ps;
CREATE VIEW v1 AS   SELECT STDDEV_SAMP(a) OVER ( ORDER BY a ROWS CURRENT ROW) AS std_dev_samp FROM t;
SELECT STDDEV_SAMP(a) OVER ( ORDER BY a ROWS CURRENT ROW ) AS std_dev_samp FROM t;
PREPARE ps FROM "SELECT  AVG(c2)  OVER ( ) AS res FROM  te2";
EXECUTE ps;
EXECUTE ps;
EXECUTE ps;
CREATE FUNCTION f1() RETURNS char(255) BEGIN   DECLARE ret char(255);
SELECT  AVG(c2)  OVER ( ) AS res FROM  te2 INTO ret;
RETURN ret;
END! DELIMITER ;! SELECT f1();
PREPARE ps FROM  "SELECT AVG(col_int_key) OVER () FROM t WHERE pk=3 GROUP BY col_int_key";
EXECUTE ps;
EXECUTE ps;
PREPARE ps FROM "SELECT AVG(12) OVER () FROM dual";
EXECUTE ps;
EXECUTE ps;
DROP PREPARE ps;
CREATE TABLE E (   col_int int(11) DEFAULT NULL,   col_varchar_10_utf8 varchar(10) CHARACTER SET utf8 DEFAULT NULL,   pk int(11) NOT NULL AUTO_INCREMENT,   col_varchar_10_latin1 varchar(10) DEFAULT NULL,   col_varchar_255_utf8 varchar(255) CHARACTER SET utf8 DEFAULT NULL,   col_varchar_255_latin1 varchar(255) DEFAULT NULL,   col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,   col_varchar_255_utf8_key varchar(255) CHARACTER SET utf8    GENERATED ALWAYS AS    (concat(repeat(col_varchar_10_utf8,3),repeat(col_varchar_10_utf8,3)))    VIRTUAL,   col_varchar_255_latin1_key varchar(255)    GENERATED ALWAYS AS    (concat(repeat(col_varchar_10_latin1,3),repeat(col_varchar_10_latin1,3)))    VIRTUAL,   col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8    GENERATED ALWAYS AS    (repeat(substr(col_varchar_10_utf8,-(1)),5)) VIRTUAL,   col_varchar_10_latin1_key varchar(10) GENERATED ALWAYS AS    (repeat(substr(col_varchar_10_latin1,-(1)),7)) VIRTUAL,   PRIMARY KEY (pk DESC),   UNIQUE KEY ucover_key1    (pk DESC, col_int_key DESC, col_varchar_255_utf8_key DESC,     col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,     col_varchar_10_latin1_key DESC),   UNIQUE KEY ucover_key2    (pk, col_int_key, col_varchar_255_utf8_key, col_varchar_255_latin1_key,     col_varchar_10_utf8_key, col_varchar_10_latin1_key),   KEY col_int_key (col_int_key DESC),   KEY col_varchar_255_utf8_key (col_varchar_255_utf8_key DESC),   KEY col_varchar_255_latin1_key (col_varchar_255_latin1_key DESC),   KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key DESC),   KEY col_varchar_10_latin1_key (col_varchar_10_latin1_key),   KEY multi_key1 (col_int_key DESC, col_varchar_10_latin1_key),   KEY multi_key1a (col_int_key DESC, col_varchar_10_latin1_key DESC),   KEY multi_key2 (col_int_key,col_int DESC),   KEY multi_key3 (col_varchar_255_utf8_key DESC, col_varchar_255_utf8),   KEY multi_key4 (col_varchar_255_latin1_key, col_varchar_255_latin1),   KEY multi_key5 (pk DESC,col_int_key DESC, col_varchar_10_latin1_key),   KEY cover_key1    (pk DESC,col_int_key DESC, col_varchar_255_utf8_key,     col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,     col_varchar_10_latin1_key) );
CREATE TABLE C (   col_int int(11) DEFAULT NULL,   col_varchar_10_utf8 varchar(10) CHARACTER SET utf8 DEFAULT NULL,   pk int(11) NOT NULL AUTO_INCREMENT,   col_varchar_10_latin1 varchar(10) DEFAULT NULL,   col_varchar_255_utf8 varchar(255) CHARACTER SET utf8 DEFAULT NULL,   col_varchar_255_latin1 varchar(255) DEFAULT NULL,   col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,   col_varchar_255_utf8_key varchar(255) CHARACTER SET utf8   GENERATED ALWAYS AS    (concat(repeat(col_varchar_10_utf8,3),repeat(col_varchar_10_utf8,3)))    VIRTUAL,   col_varchar_255_latin1_key varchar(255) GENERATED ALWAYS AS    (concat(repeat(col_varchar_10_latin1,3),repeat(col_varchar_10_latin1,3)))    VIRTUAL,   col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8 GENERATED ALWAYS AS    (repeat(substr(col_varchar_10_utf8,-(1)),5)) VIRTUAL,   col_varchar_10_latin1_key varchar(10) GENERATED ALWAYS AS    (repeat(substr(col_varchar_10_latin1,-(1)),7)) VIRTUAL,   PRIMARY KEY (pk DESC),   UNIQUE KEY ucover_key1    (pk DESC, col_int_key DESC, col_varchar_255_utf8_key DESC,     col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,     col_varchar_10_latin1_key DESC),   UNIQUE KEY ucover_key2    (pk, col_int_key, col_varchar_255_utf8_key, col_varchar_255_latin1_key,     col_varchar_10_utf8_key, col_varchar_10_latin1_key),   KEY col_int_key (col_int_key DESC),   KEY col_varchar_255_utf8_key (col_varchar_255_utf8_key DESC),   KEY col_varchar_255_latin1_key (col_varchar_255_latin1_key DESC),   KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key DESC),   KEY col_varchar_10_latin1_key (col_varchar_10_latin1_key),   KEY multi_key1 (col_int_key DESC, col_varchar_10_latin1_key),   KEY multi_key1a (col_int_key DESC, col_varchar_10_latin1_key DESC),   KEY multi_key2 (col_int_key, col_int DESC),   KEY multi_key3 (col_varchar_255_utf8_key DESC, col_varchar_255_utf8),   KEY multi_key4 (col_varchar_255_latin1_key, col_varchar_255_latin1),   KEY multi_key5    (pk DESC, col_int_key DESC, col_varchar_10_latin1_key),   KEY cover_key1    (pk DESC, col_int_key DESC, col_varchar_255_utf8_key,     col_varchar_255_latin1_key DESC, col_varchar_10_utf8_key DESC,     col_varchar_10_latin1_key) );
PREPARE stmt FROM "SELECT w, SUM(w) OVER (ROWS 3.14 PRECEDING) FROM t";
EXECUTE stmt;
PREPARE stmt FROM "SELECT w, SUM(w) OVER (ROWS ? PRECEDING) FROM t";
EXECUTE stmt USING @p1;
EXECUTE stmt USING @p1;
DROP PREPARE stmt;
PREPARE s FROM 'DO (SELECT a FROM t WINDOW w2 AS (w1), w1 AS (ORDER BY a, a));';
EXECUTE s;
EXECUTE s;
SELECT FROM_UNIXTIME(FIRST_VALUE(@b)RESPECT NULLS OVER(),                  REPEAT('1',32))IS NOT FALSE;
DO ST_WITHIN(ST_ASWKB(ST_ASBINARY(1,'axis-order=srid-defined')), ST_ASWKT( ST_ASBINARY(LAST_VALUE(4732)OVER()),'axis-order=srid-defined'));
DO ST_OVERLAPS(ST_ASWKB(ST_ASBINARY(1,'axis-order=lat-long'), 'axis-order=srid-defined'), ST_ASWKT(LAST_VALUE('*7') OVER()));
DO ST_POINTN(ST_ASWKT(ST_ASWKT(ST_ASWKB(6565))), ST_ASBINARY(LAST_VALUE(0xfd8b9af2bedb16c0d7f1cca63b5c9e) OVER()));
DO POW(-8714,REPEAT('1',32)) OR VALIDATE_PASSWORD_STRENGTH(LAST_VALUE(1) OVER());
DO SUBSTRING_INDEX(((((RADIANS(0xBD)) && (ST_SRID(1, 4326)))) OR (COT(UUID_SHORT()))), FIRST_VALUE(ROW_COUNT())RESPECT NULLS OVER(), 171);
DO ((JSON_TYPE('4:8')) AND (((ROLES_GRAPHML()) LIKE (FIRST_VALUE(31543) RESPECT NULLS OVER()))));
DO CONCAT_WS( JSON_OBJECTAGG( ROW_COUNT(), BIT_COUNT(-23163)), DEGREES((1.595545e+308)), REPEAT(FIRST_VALUE('%0') OVER(), 30));
DO REPLACE((( RELEASE_LOCK( ACOS(0x41))) OR (1)), LAST_VALUE(9.750062e+306) RESPECT NULLS OVER(), UUID_SHORT());
DO NTILE(MAX(NOT 1)) OVER();
DO LAG(1, 9223372036854775807) OVER();
DO LEAD(1, 9223372036854775807) OVER();
DO NTILE(9223372036854775807) OVER();
DO LAG(1, 18446744073709551615) OVER();
DO LEAD(1, 18446744073709551615) OVER();
DO NTILE(18446744073709551615) OVER();
CREATE PROCEDURE p1(n INT) DO NTILE(n) OVER();
PREPARE stmt FROM 'DO NTILE(?) OVER()';
EXECUTE stmt USING @v;
EXECUTE stmt USING @undefined;
DO NTILE(@v) OVER();
DO NTILE(@undefined) OVER();
CREATE PROCEDURE p2(n INT) DO LEAD(1, n) OVER();
CREATE PROCEDURE p3(n INT) DO LAG(1, n) OVER();
PREPARE stmt FROM 'DO LAG(1, ?) OVER()';
EXECUTE stmt USING @v;
PREPARE stmt FROM 'DO LEAD(1, ?) OVER()';
EXECUTE stmt USING @v;
DO LAG(1, @v) OVER();
DO LEAD(1, @v) OVER();
DO LAG(1, @v) OVER();
DO LEAD(1, @v) OVER();
DO NTILE(@v) OVER();
DO LAG(1, @v) OVER();
DO LEAD(1, @v) OVER();
DO NTILE(@v) OVER();
DO LAG(1, @v) OVER();
DO LAG(1, @v) OVER(), @v:=20;
DO LEAD(1, @v) OVER();
DO LEAD(1, @v) OVER(), @v:=20;
DO NTILE(@v) OVER();
DO NTILE(@v) OVER(), @v:=20;
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET @saved_binlog_format= @@SESSION.binlog_format;
} set optimizer_switch='semijoin=on,materialization=on';
if (`select locate('loosescan', @@optimizer_switch) > 0`) {   set optimizer_switch='loosescan=off';
} if (`select locate('firstmatch', @@optimizer_switch) > 0`) {   set optimizer_switch='firstmatch=off';
} if (`select locate('duplicateweedout', @@optimizer_switch) > 0`) {   set optimizer_switch='duplicateweedout=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`) {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`) {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET SESSION binlog_format= @saved_binlog_format;
while($iteration) {   dec $iteration;
} drop table t1,t2,t3,t4;
LOAD DATA INFILE '../../tmp/data1.tmp' INTO TABLE t2;
LOAD DATA INFILE '../../tmp/data2.tmp' INTO TABLE t2;
WHERE f1 < 3 and f2 > 11;
WHERE f1 > 2 and f2 < 25 and f3 > 200;
WHERE f1 > 3 and f2 < 50 or f3 > 200;
(SELECT f1, f2, f3 FROM t1) as dt             WHERE (dt.f1 = 6) or( t1.f2 = 50 and dt.f3 = 200);
(SELECT f1, f2, f3 FROM t1) as dt, t0             WHERE f1 > 3 and f2 < 50 and i0 > 3;
WHERE f1 > 3 and f2 < 50 and f3 > 200;
WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300;
WHERE (f1 > 2 and f2 < 35) or (f1+f3) > 300 or (f1 < 2);
(SELECT f3 FROM t1) as dt2                           WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 300                           and (f3 < 400);
(SELECT f3 FROM t1) as dt2) as dt3                           WHERE (f1 > 2 and f2 < 35) and (f1+f3) > 200 and (f3 < 300);
WHERE i > 1 and i+j > 40;
FROM (SELECT l as i, m as j, n as k                   FROM (SELECT f1 as l, f2 as m, f3 as n                         FROM t1) as dt1 ) as dt2             WHERE i > 1 and i+j > 40;
FROM (SELECT f1 as i, f2 as j FROM t1 ) as dt1 ,                 (SELECT f1 as l, f2 as m, f3 as n FROM t1) as dt2            WHERE i > 1 and i+j > 40 and m < 20 and m+i > 20;
(SELECT (i+j) AS g, f1 FROM  (SELECT (f1+f2) AS i, (f1-f2) AS j FROM   (SELECT f1+10 AS f1, f2+10 AS f2 FROM t1) AS dt0)  AS dt1,  (SELECT f1, f2 FROM t1) AS dt2) AS dt3 WHERE g > 26 and g+f1 > 31;
(SELECT (f1+f2) as i, (f3+10) as j FROM t1) as                                dt1) as dt2 WHERE l > 20 and l+m > 10 ;
FROM (SELECT f1+f2 as j                                  FROM t1) as dt1(k)) as dt(m)             WHERE m > 30;
WHERE f1 > 3;
WHERE f1+f2 > 30;
FROM (SELECT f1, SUM(f2) FROM t1 GROUP BY f1 WITH ROLLUP) as dt            WHERE f1 IS NULL;
FROM (SELECT f1 as j, SUM(f2) as sum                   FROM t1 GROUP BY f1 WITH ROLLUP) as dt WHERE j+sum > 50 OR             j IS NULL;
FROM (SELECT f1 as j, SUM(f2) as sum                   FROM t1 GROUP BY f1 WITH ROLLUP                   HAVING AVG(f2) > 1) AS dt WHERE j+sum > 50 OR             j IS NULL;
WHERE f1 > 3;
WHERE f1 > 0 ;
WHERE f1 > 2;
FROM (SELECT f1, SUM(f2) OVER(PARTITION BY f1)                   FROM t1 GROUP BY f1) as dt WHERE f1 > 2;
FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f2)                   FROM t1 GROUP BY f1) as dt WHERE f2 > 30;
FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1)                   FROM t1 GROUP BY f1) as dt             WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2)                   FROM t1 GROUP BY f1) as dt             WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
FROM (SELECT f1, f2, SUM(f3) OVER(PARTITION BY f1,f2),                   AVG(f3) OVER (PARTITION BY f1)                   FROM t1 GROUP BY f1) as dt             WHERE f1 > 2 and f2 > 30 and (f1+f2) > 40;
FROM (SELECT f1, SUM(f2) as SUM, AVG(f3) OVER (PARTITION BY SUM(f2))                   FROM t1 GROUP BY f1) as dt             WHERE SUM > 40;
FROM (SELECT f1, SUM(f2) OVER (PARTITION by f1,f2),                   AVG(f3) OVER (PARTITION BY f2,f1),                   FIRST_VALUE(f3) OVER (PARTITION by f1)                   FROM t1) as dt             WHERE f1 > 2 ;
FROM (SELECT f1, SUM(f1) OVER (PARTITION by f2),                   AVG(f2) OVER (PARTITION BY f1)                   FROM t1) as dt             WHERE f1 > 2 ;
FROM (SELECT f1 FROM t1) as dt WHERE f1 > ?;
DROP PREPARE p;
(SELECT (f1+f2) as i, (f3+?) as j FROM t1) as                                dt1) as dt2 WHERE l > 20 and l+m > 10 ;
WHERE a > 0.5;
WHERE f1 > 3*RAND() AND f1 < 10;
(SELECT f1, SUM(f2) OVER(PARTITION BY f1) FROM t1) as dt             WHERE f1 > 3*RAND() AND f1 < 10;
(SELECT f1 FROM t1) as dt             WHERE f1 > 3*RAND() AND f1<10;
FROM (SELECT f1 FROM t1 UNION SELECT f2 FROM t1) as dt             WHERE f1 > 2;
(SELECT (SELECT 1 FROM t1 LIMIT 1) as f1 FROM t1) as dt WHERE f1 = 1;
CREATE FUNCTION p() RETURNS INTEGER BEGIN   DECLARE retn INTEGER;
SELECT count(f1) FROM t1 INTO retn;
RETURN retn;
END| DELIMITER ;|             WHERE p() = 1;
CREATE FUNCTION p() RETURNS INTEGER DETERMINISTIC BEGIN   DECLARE retn INTEGER;
SELECT count(f1) FROM t1 INTO retn;
RETURN retn;
END| DELIMITER ;| DROP FUNCTION p;
CREATE PROCEDURE p() BEGIN   DECLARE val INTEGER;
END| DELIMITER ;| CALL p();
qn2 AS (SELECT 3*f1 AS f2 FROM qn) SELECT * from qn2)) as dt WHERE f2 > 1;
qn2 AS (SELECT 3*f1 AS f2 FROM qn) SELECT * from qn,qn2)) as dt WHERE f1 < 10 and f2 > 1;
WHERE dt.f1 > 31 and t1.f2  > 40;
WHERE dt.f1 is null;
WHERE dt.f1 > 3;
LEFT JOIN t1 AS t2 ON TRUE) AS dt ON dt.f1 > 3;
FROM t1 GROUP BY f1) as dt1                            WHERE f1 > 10) dt2 WHERE sum > 10;
FROM (SELECT f1, f2 FROM t1 WHERE f1 > 10) as dt1                            GROUP BY f1) dt2 WHERE sum > 10;
((SELECT f1, f2 FROM t1) as dt, (SELECT f1, f2 FROM t1) as dt1) WHERE FALSE;
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
(SELECT * FROM (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
(SELECT /*+ NO_DERIVED_CONDITION_PUSHDOWN(dt1) */ * FROM  (SELECT * FROM t1) as dt1) as dt2 WHERE f1 > 3;
SELECT NULL IN(SELECT (f1 between 0 and 1)  FROM (SELECT f1 FROM t WHERE  (@b:=NULL) - f2)as dt );
select sum(all a),count(all a),avg(all a),std(all a),variance(all a),bit_or(all a),bit_and(all a),min(all a),max(all a),min(all c),max(all c) from t1;
prepare stmt1 from 'SELECT COUNT(*) FROM t1';
execute stmt1;
execute stmt1;
execute stmt1;
deallocate prepare stmt1;
prepare stmt1 from 'SELECT max(a) FROM t1';
execute stmt1;
execute stmt1;
execute stmt1;
deallocate prepare stmt1;
INSERT INTO t1 VALUES   (1,CONCAT(REPEAT('_', 250), "qq")), (1,CONCAT(REPEAT('_', 250), "zz")),   (1,CONCAT(REPEAT('_', 250), "aa")), (1,CONCAT(REPEAT('_', 250), "ff"));
INSERT INTO D VALUES    (39,40,4,repeat('  X', 42)),   (43,56,4,repeat('  X', 42)),   (47,12,4,repeat('  X', 42)),   (71,28,4,repeat('  X', 42)),   (76,54,4,repeat('  X', 42)),   (83,45,4,repeat('  X', 42)),   (105,53,12,NULL);
CREATE FUNCTION f1 (par INT) RETURNS INT     DETERMINISTIC     SQL SECURITY INVOKER BEGIN    RETURN par + 1;
END| DELIMITER ;| ANALYZE TABLE t1;
PREPARE si8 FROM 'SELECT MAX(i8) FROM t1 WHERE i8 > ?';
PREPARE ei8 FROM 'EXPLAIN SELECT MAX(i8) FROM t1 WHERE i8 > ?';
PREPARE sdc FROM 'SELECT MAX(dc) FROM t1 WHERE dc > ?';
PREPARE edc FROM 'EXPLAIN SELECT MAX(dc) FROM t1 WHERE dc > ?';
PREPARE sf8 FROM 'SELECT MAX(f8) FROM t1 WHERE f8 > ?';
PREPARE ef8 FROM 'EXPLAIN SELECT MAX(f8) FROM t1 WHERE f8 > ?';
PREPARE svc FROM 'SELECT MAX(vc) FROM t1 WHERE vc > ?';
PREPARE evc FROM 'EXPLAIN SELECT MAX(vc) FROM t1 WHERE vc > ?';
EXECUTE si8 USING @i8;
EXECUTE ei8 USING @i8;
EXECUTE sdc USING @dc;
EXECUTE edc USING @dc;
EXECUTE sf8 USING @f8;
EXECUTE ef8 USING @f8;
EXECUTE svc USING @vc;
EXECUTE evc USING @vc;
CREATE FUNCTION seq_1_to_2() RETURNS INT BEGIN   DECLARE limit_value, return_value INT;
SELECT c1 INTO return_value FROM tr;
IF (return_value < limit_value) THEN      UPDATE tr SET c1 = c1 + 1;
ELSE      UPDATE tr SET c1 = 1;
END IF;
RETURN (return_value);
END| DELIMITER ;| CREATE TABLE t1 (c1 INT);
/*!99999 SET @@SESSION.non_supported_session_variable = 1*/;
/*!99999 SET @@SESSION.non_supported_session_variable = 1*/;
/*!99999 SET @@SESSION.non_supported_session_variable = 1*/;
/*!99999 SET @@SESSION.non_supported_session_variable = 1*/;
while ($1) {  SHOW VARIABLES LIKE "%long_query_time%";
dec $1;
} while($2) {  SELECT 1;
dec $2;
} SET GLOBAL  log_output=         @old_log_output;
CREATE TABLE t2 AS SELECT INSERT(1133,3,0,22) FROM t1;
CREATE TABLE t2 AS SELECT REPEAT(1,2) FROM t1;
call mtr.add_suppression("Server SSL certificate doesn't verify");
if (!$crllen) {   skip Needs OpenSSL;
CREATE PROCEDURE db1.sp1() SQL SECURITY DEFINER BEGIN   SELECT * FROM db1.t1;
END// CREATE PROCEDURE db2.sp1() SQL SECURITY DEFINER BEGIN   SELECT * FROM db2.t1;
END// CREATE PROCEDURE test.sp1() SQL SECURITY DEFINER BEGIN   SELECT * FROM db1.t1;
END// CREATE PROCEDURE db1.sp2() SQL SECURITY DEFINER BEGIN   SELECT * FROM db1.t2;
END// CREATE PROCEDURE db1.sp3() SQL SECURITY INVOKER BEGIN   SELECT * FROM db1.t2;
END// DELIMITER ;// GRANT EXECUTE ON *.* TO r1;
SHOW GRANTS FOR u1@localhost USING r1;
connect(con1, localhost, u1, foo, test);
CALL db1.sp1();
CALL db1.sp3();
SHOW GRANTS FOR u1@localhost USING r1;
CALL db1.sp1();
SHOW GRANTS FOR u1@localhost USING r1;
CALL db1.sp1();
CALL db1.sp2();
CALL db2.sp1();
CALL db1.sp3();
CALL db1.sp1();
CALL db1.sp2();
CALL db2.sp1();
CALL db1.sp3();
CALL db1.sp3();
SHOW GRANTS FOR u_worldrou@localhost USING r_worldrou;
connect(con_world,localhost,u_worldrou,xxx,world);
CALL world.proc_empty();
SELECT world.func_plusone(1);
SELECT world.func_plustwo(1);
disconnect con_world;
disconnect con1;
connect (con1,localhost,test,,test);
connect (con2,localhost,test2,,test);
disconnect con1;
disconnect con2;
create trigger trg_bug26141_ai after insert on t1 for each row begin   insert into t2 (c) values (1);   select release_lock("lock_bug26141_sync") into @a;   select get_lock("lock_bug26141_wait", 1000) into @a; end|
create trigger trg_bug26141_au after update on t1 for each row begin   insert into t3 (c) values (1); end|
send insert into t1 (c) values (2);
reap;
disconnect connection_update;
disconnect connection_aux;
SELECT 'c373e9f5ad0791a0dab5444553544200' IN(SELECT t1.FOLDERID FROM t1 WHERE t1.PARENTID='2f6161e879db43c1a5b82c21ddc49089' AND t1.FOLDERNAME = 'Level1');
PREPARE my_stmt FROM "SELECT t1.b, count(*) FROM t1 group by t1.b having count(*) > ALL (SELECT COUNT(*) FROM t2 WHERE t2.a=1 GROUP By t2.b)";
EXECUTE my_stmt;
EXECUTE my_stmt;
deallocate prepare my_stmt;
create procedure p1() begin   declare done int default 3;   repeat     select       (SELECT rs.t2_id        FROM t2 rs        WHERE rs.t1_id=          (SELECT lt.t1_id           FROM t1 lt           WHERE lt.t3_id=a.t3_id)        ORDER BY b DESC LIMIT 1) as x     from t3 AS a;     set done= done-1;   until done <= 0 end repeat; end//
prepare st1 from "select * from t1 where (a1, a2) in (select b1, min(b2) from t2 where b1 > '0' group by b1)";
execute st1;
execute st1;
prepare st1 from "select * from t1 where (a1, a2) in (select b1, min(b2) from t2 where b1 > '0' group by b1)";
execute st1;
execute st1;
CREATE PROCEDURE p1 () BEGIN SELECT f1 FROM t1 WHERE f1 IN (SELECT f1 FROM t2); END|
CREATE PROCEDURE p1 () BEGIN SELECT f1 FROM t1 WHERE f1 IN (SELECT f1 FROM t2); END|
CREATE PROCEDURE run_n_times(x int) BEGIN DECLARE c int; WHILE x DO   SET x = x-1;   SELECT COUNT(expr_key) INTO c FROM ot   WHERE expr_key IN (SELECT expr_nokey FROM it)     AND ot.expr_key<100000000; END WHILE; END|
source include/have_profiling.inc;
LET $OLD_DB= `SELECT DATABASE()`;
CREATE PROCEDURE test_if_commit() BEGIN   ROLLBACK;
END| DELIMITER ;| SET AUTOCOMMIT = FALSE;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
load data infile '../../std_data/words.dat' into table t4;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
show engine all mutex;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
show engine all logs;
source include/implicit_commit_helper.inc;
show engine all status;
source include/implicit_commit_helper.inc;
show charset where (1) in (select * from t1);
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
do ((1) in (select * from t1));
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
lock tables t1 write, trans write;
source include/implicit_commit_helper.inc;
unlock tables;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
show create database db2;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
rename table t3 to t4;
source include/implicit_commit_helper.inc;
rename table t4 to t3;
source include/implicit_commit_helper.inc;
handler t1 open as ha1;
source include/implicit_commit_helper.inc;
handler ha1 read a first;
source include/implicit_commit_helper.inc;
handler ha1 close;
source include/implicit_commit_helper.inc;
show slave hosts;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
help 'foo';
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
show function code f1;
source include/implicit_commit_helper.inc;
prepare stmt1 from "insert into t1 values (5)";
source include/implicit_commit_helper.inc;
execute stmt1;
source include/implicit_commit_helper.inc;
deallocate prepare stmt1;
source include/implicit_commit_helper.inc;
create trigger trg1 before insert on t1 for each row set @a:=1;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
CREATE TABLESPACE ts1 ADD DATAFILE './ts1.ibd' ENGINE=INNODB;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
source include/implicit_commit_helper.inc;
echo ok;
write_file $BOOTSTRAP_SQL;
select test.a(), test.st_x(), test.st_y();
CALL mtr.add_suppression("Failed to initialize TLS for channel: mysql_admin");
CALL mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
create table test_reserved (signal int);
create table test_reserved (resignal int);
create table test_reserved (condition int);
create procedure test_invalid() begin   SIGNAL; end $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
drop procedure test_signal_syntax $$
SIGNAL SQLSTATE '00000' $$
SIGNAL SQLSTATE '00001' $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
drop procedure test_resignal_syntax $$
prepare stmt from 'SIGNAL SQLSTATE \'23000\'';
prepare stmt from 'RESIGNAL SQLSTATE \'23000\'';
SIGNAL foo;
SIGNAL SQLSTATE '01000';
SIGNAL SQLSTATE '02000';
SIGNAL SQLSTATE '23000';
SIGNAL SQLSTATE VALUE '23000';
SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 65536;
SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 99999;
SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 4294967295;
SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 0;
SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = -1;
SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 65535;
RESIGNAL;
RESIGNAL foo;
RESIGNAL SQLSTATE '12345';
RESIGNAL SQLSTATE VALUE '12345';
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
SIGNAL SQLSTATE '77777' SET MESSAGE_TEXT='' $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
show warnings $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
create procedure test_signal() begin   DECLARE something CONDITION FOR SQLSTATE '99999';   DECLARE message_text VARCHAR(64) DEFAULT "Local string variable";   DECLARE sqlcode INTEGER DEFAULT 1234;   SIGNAL something SET     MESSAGE_TEXT = message_text,     MYSQL_ERRNO = sqlcode; end $$
call test_signal() $$
drop procedure test_signal $$
call test_signal("Parameter string", NULL) $$
call test_signal(NULL, 1234) $$
call test_signal("Parameter string", 45678) $$
drop procedure test_signal $$
call test_signal() $$
set @sqlcode= 12 $$
call test_signal() $$
set @message_text= "User variable" $$
call test_signal() $$
drop procedure test_signal $$
create procedure test_signal() begin   DECLARE aaa VARCHAR(64);   DECLARE bbb VARCHAR(64);   DECLARE ccc VARCHAR(64);   DECLARE ddd VARCHAR(64);   DECLARE eee VARCHAR(64);   DECLARE fff VARCHAR(64);   DECLARE ggg VARCHAR(64);   DECLARE hhh VARCHAR(64);   DECLARE iii VARCHAR(64);   DECLARE jjj VARCHAR(64);   DECLARE kkk VARCHAR(64);   DECLARE warn CONDITION FOR SQLSTATE "01234";   set aaa= repeat("A", 64);   set bbb= repeat("B", 64);   set ccc= repeat("C", 64);   set ddd= repeat("D", 64);   set eee= repeat("E", 64);   set fff= repeat("F", 64);   set ggg= repeat("G", 64);   set hhh= repeat("H", 64);   set iii= repeat("I", 64);   set jjj= repeat("J", 64);   set kkk= repeat("K", 64);   SIGNAL warn SET     CLASS_ORIGIN = aaa,     SUBCLASS_ORIGIN = bbb,     CONSTRAINT_CATALOG = ccc,     CONSTRAINT_SCHEMA = ddd,     CONSTRAINT_NAME = eee,     CATALOG_NAME = fff,     SCHEMA_NAME = ggg,     TABLE_NAME = hhh,     COLUMN_NAME = iii,     CURSOR_NAME = jjj,     MESSAGE_TEXT = kkk,     MYSQL_ERRNO = 65535; end $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
call test_signal() $$
drop procedure test_signal $$
create function test_signal_func() returns integer begin   DECLARE v INT;   DECLARE warn CONDITION FOR SQLSTATE "01XXX";   SIGNAL warn SET     MESSAGE_TEXT = "This function SIGNAL a warning",     MYSQL_ERRNO = 1012;   SELECT @@warning_count INTO v;   return v; end $$
drop function test_signal_func $$
drop function test_signal_func $$
drop function test_signal_func $$
drop table if exists t1 $$
create table t1 (a integer) $$
create trigger t1_ai after insert on t1 for each row begin   DECLARE msg VARCHAR(128);   DECLARE warn CONDITION FOR SQLSTATE "01XXX";   set msg= concat("This trigger SIGNAL a warning, a=", NEW.a);   SIGNAL warn SET     MESSAGE_TEXT = msg,     MYSQL_ERRNO = 1012; end $$
insert into t1 values (1), (2) $$
drop trigger t1_ai $$
create trigger t1_ai after insert on t1 for each row begin   DECLARE msg VARCHAR(128);   DECLARE not_found CONDITION FOR SQLSTATE "02XXX";   set msg= concat("This trigger SIGNAL a not found, a=", NEW.a);   SIGNAL not_found SET     MESSAGE_TEXT = msg,     MYSQL_ERRNO = 1012; end $$
insert into t1 values (3), (4) $$
drop trigger t1_ai $$
create trigger t1_ai after insert on t1 for each row begin   DECLARE msg VARCHAR(128);   DECLARE error CONDITION FOR SQLSTATE "03XXX";   set msg= concat("This trigger SIGNAL an error, a=", NEW.a);   SIGNAL error SET     MESSAGE_TEXT = msg,     MYSQL_ERRNO = 1012; end $$
insert into t1 values (5), (6) $$
drop table t1 $$
create table t1 (errno integer, msg varchar(128)) $$
insert into t1 set errno=1012, msg='Warning message 1 in trigger' $$
insert into t1 set errno=1013, msg='Warning message 2 in trigger' $$
drop table t1 $$
drop table if exists t1 $$
drop procedure if exists p1 $$
drop function if exists f1 $$
create table t1 (s1 int) $$
insert into t1 values (1) $$
create procedure p1() begin   declare a int;   declare c cursor for select f1() from t1;   declare continue handler for sqlstate '03000'     select "caught 03000";   declare continue handler for 1326     select "caught cursor is not open";   select "Before open";   open c;   select "Before fetch";   fetch c into a;   select "Before close";   close c; end $$
drop table t1 $$
drop procedure p1 $$
drop function f1 $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
create procedure test_resignal() begin   DECLARE x integer;   DECLARE c cursor for select * from t_cursor;   DECLARE CONTINUE HANDLER for not found   begin     select "before RESIGNAL";     RESIGNAL SQLSTATE "02444" SET       MESSAGE_TEXT = "RESIGNAL to a not found",       MYSQL_ERRNO = 55555 ;     select "after RESIGNAL";   end;   open c;   fetch c into x;   close c; end $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
create procedure test_resignal() begin   DECLARE x integer;   DECLARE c cursor for select * from t_cursor;   DECLARE CONTINUE HANDLER for not found   begin     select "before RESIGNAL";     RESIGNAL SQLSTATE "44444" SET       MESSAGE_TEXT = "RESIGNAL to an error",       MYSQL_ERRNO = 55555 ;     select "after RESIGNAL";   end;   open c;   fetch c into x;   close c; end $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
call test_resignal() $$
show warnings $$
drop procedure test_resignal $$
drop procedure if exists peter_p1 $$
drop procedure if exists peter_p2 $$
CALL peter_p2() $$
show warnings $$
drop procedure peter_p1 $$
drop procedure peter_p2 $$
CREATE PROCEDURE peter_p1 () BEGIN   DECLARE x CONDITION FOR SQLSTATE '42000';   DECLARE EXIT HANDLER FOR x   BEGIN     SHOW WARNINGS;     RESIGNAL x SET MYSQL_ERRNO = 9999;   END;   BEGIN     DECLARE EXIT HANDLER FOR x     BEGIN       SHOW WARNINGS;       RESIGNAL x SET         SCHEMA_NAME = 'test',         MYSQL_ERRNO= 1232;     END;     /* Raises ER_WRONG_VALUE_FOR_VAR : 1231, SQLSTATE 42000 */     SET @@sql_mode=NULL;   END; END $$
CREATE PROCEDURE peter_p2 () BEGIN   DECLARE x CONDITION for SQLSTATE '42000';   DECLARE EXIT HANDLER FOR x   BEGIN     SHOW WARNINGS;     RESIGNAL x SET       MESSAGE_TEXT = 'Hi, I am a useless error message',       MYSQL_ERRNO = 9999;   END;   CALL peter_p1(); END $$
CALL peter_p2() $$
show warnings $$
drop procedure peter_p1 $$
drop procedure peter_p2 $$
drop procedure if exists peter_p3 $$
call peter_p3() $$
show warnings $$
drop procedure peter_p3 $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
call test_signal $$
drop procedure test_signal $$
create procedure test_signal() begin   DECLARE céèçà foo CONDITION FOR SQLSTATE '12345';   SIGNAL céèçà SET MYSQL_ERRNO = 1000; end $$
create procedure test_signal() begin   DECLARE 'céèçà' CONDITION FOR SQLSTATE '12345';   SIGNAL 'céèçà' SET MYSQL_ERRNO = 1000; end $$
call test_signal $$
drop procedure test_signal $$
drop procedure test_signal $$
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR 1051   BEGIN     DROP DATABASE none;  # Error 1008   END;   DROP TABLE none;  # Error 1051 END $$
CREATE FUNCTION f1() RETURNS INTEGER BEGIN   DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
RETURN 1;
END| CREATE PROCEDURE p1() BEGIN   DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
END| DELIMITER ;| CALL p1();
CREATE PROCEDURE p1() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION RESIGNAL;   SIGNAL SQLSTATE 'HY000'; END|
CREATE PROCEDURE p2() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING RESIGNAL;   SIGNAL SQLSTATE '01000'; END|
CREATE PROCEDURE p3() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     RESIGNAL SET MESSAGE_TEXT= 'custom error msg';   SIGNAL SQLSTATE 'HY000'; END|
CREATE PROCEDURE p4() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING     RESIGNAL SET MESSAGE_TEXT= 'custom warning msg';   SIGNAL SQLSTATE '01000'; END|
CREATE PROCEDURE p5() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION     RESIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'custom error msg';   SIGNAL SQLSTATE 'HY000'; END|
CREATE PROCEDURE p6() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING     RESIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'custom warning msg';   SIGNAL SQLSTATE '01000'; END|
CREATE PROCEDURE p7() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'handled' AS Msg;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION RESIGNAL;     SIGNAL SQLSTATE 'HY000';   END; END|
CREATE PROCEDURE p8() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'handled' AS Msg;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLWARNING RESIGNAL;     SIGNAL SQLSTATE '01000';   END; END|
CREATE PROCEDURE p9() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'handled' AS Msg;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION       RESIGNAL SET MESSAGE_TEXT= 'custom error msg';     SIGNAL SQLSTATE 'HY000';   END; END|
CREATE PROCEDURE p10() BEGIN   DECLARE CONTINUE HANDLER FOR SQLWARNING SELECT 'handled' AS Msg;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLWARNING       RESIGNAL SET MESSAGE_TEXT= 'custom warning msg';     SIGNAL SQLSTATE '01000';   END; END|
CREATE PROCEDURE p11() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'handled' AS Msg;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLEXCEPTION       RESIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'custom error msg';     SIGNAL SQLSTATE 'HY000';   END; END|
CREATE PROCEDURE p12() BEGIN   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SELECT 'handled' AS Msg;   BEGIN     DECLARE CONTINUE HANDLER FOR SQLWARNING       RESIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'custom warning msg';     SIGNAL SQLSTATE '01000';   END; END|
if (!$require_case_insensitive_file_system) { } USE test;
FROM mysql.innodb_index_stats       WHERE table_name = 't1'         AND index_name = 'latest_key'         AND stat_name = 'n_diff_pfx01';
HANDLER information_schema.COLUMNS OPEN;
PREPARE ps1 FROM 'SHOW TABLES FROM no_such_schema';
PREPARE ps2 FROM 'SHOW TABLES FROM mysql LIKE \'%tables%\'';
EXECUTE ps1;
EXECUTE ps2;
DEALLOCATE PREPARE ps1;
DEALLOCATE PREPARE ps2;
call mtr.add_suppression('Skipped updating resource group metadata in InnoDB read only mode.');
LOCK TABLE t1 write;
connect (con1,localhost,root,,test,,);
connect (con2,localhost,root,,test,,);
UNLOCK TABLES;
disconnect con1;
disconnect con2;
call mtr.add_suppression("option 'thread_stack':");
CALL mtr.add_suppression("Could not increase number of max_open_files to more than *");
CALL mtr.add_suppression("Plugin audit_log reported *");
DROP TABLE IF EXISTS t1, `t``1`, `t 1`;
SET @create = IF(@have_ndb = 0, @create_cmd, 'SET @dummy = 0');
SET @drop = IF(@have_ndb = 0, @drop_cmd, 'SET @dummy = 0');
PREPARE create_stmt FROM @create;
PREPARE drop_stmt FROM @drop;
EXECUTE create_stmt;
DROP PREPARE create_stmt;
EXECUTE drop_stmt;
DROP PREPARE drop_stmt;
SELECT j, i, f, JSON_ARRAYAGG(i) OVER w jarray_i, JSON_ARRAYAGG(f)   OVER w jarray_f FROM t1 WINDOW w AS (ORDER BY j);
SELECT j, s, JSON_ARRAYAGG(s) OVER w jarray_s, JSON_ARRAYAGG(j)   OVER w jarray_j FROM t1 WINDOW w AS (ORDER BY j);
SELECT i, JSON_ARRAYAGG(i) OVER() FROM t1;
SELECT s, j, JSON_ARRAYAGG(s) OVER w jarray_s, JSON_ARRAYAGG(j)   OVER w jarray_j FROM t1 WINDOW w AS (ORDER BY j) ORDER BY j DESC;
SELECT j, i, f, JSON_ARRAYAGG(i) OVER w jarray_i, JSON_ARRAYAGG(f)   OVER w jarray_f FROM t1 WINDOW w AS (ORDER BY j DESC);
CREATE VIEW v AS SELECT i, j, JSON_ARRAYAGG(j)   OVER (ORDER BY i DESC ROWS UNBOUNDED PRECEDING) jarray_j FROM t1;
SELECT s, j, JSON_ARRAYAGG(s) OVER w jarray_s, JSON_ARRAYAGG(j)   OVER w jarray_j FROM t1 GROUP BY s,j WINDOW w AS (ORDER BY j);
SELECT i, f, JSON_ARRAYAGG(i) OVER w jarray_i, JSON_ARRAYAGG(f)   OVER w jarray_f FROM t1 GROUP BY i,f WITH ROLLUP HAVING GROUPING(f)=1   WINDOW w AS (ORDER BY f);
SELECT i, f, RANK() OVER w rank1, NTH_VALUE(i,3)   OVER w nth, LEAD(f, 2) OVER w lead1, LAG(f,2) OVER w lag1, JSON_ARRAYAGG(i)   OVER w jarray_i FROM t1 WINDOW w AS (ORDER BY f);
SELECT i, PERCENT_RANK() OVER (ORDER BY f) p_rank, JSON_ARRAYAGG(j)   OVER (ORDER BY i,j ROWS UNBOUNDED PRECEDING) jarray_j FROM t1;
SELECT i, f, MIN(i) OVER w min, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1        WINDOW w AS (PARTITION BY f);
SELECT i, f, MAX(i) OVER w max, JSON_ARRAYAGG(i) OVER w jarray_i FROM t1        WINDOW w AS (PARTITION BY i ROWS UNBOUNDED PRECEDING);
SELECT i, j, f, RANK() OVER w rank1, JSON_ARRAYAGG(i)   OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j ROWS                                        BETWEEN 2 PRECEDING AND 1 PRECEDING);
SELECT i, j, f, CUME_DIST() OVER w c_dist, JSON_ARRAYAGG(i)   OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j ROWS                                        BETWEEN 1 FOLLOWING AND 2 FOLLOWING);
SELECT i, f, PERCENT_RANK() OVER w p_rank, JSON_ARRAYAGG(i)   OVER w jarray_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY f RANGE                                        BETWEEN 2.1 FOLLOWING AND 4.5 FOLLOWING);
SELECT i, f, j, CUME_DIST() OVER w c_dist, JSON_ARRAYAGG(j)   OVER w jarray_j FROM t1 WINDOW w AS (PARTITION BY i ORDER BY f RANGE                                        BETWEEN 1 PRECEDING AND 10 FOLLOWING);
SELECT j, s, f, JSON_OBJECTAGG(j,f) OVER w jobject_f, JSON_OBJECTAGG(j,s)   OVER w jobject_s FROM t1 WINDOW w AS (ORDER BY j);
SELECT i, JSON_OBJECTAGG(i,j) OVER() FROM t1;
SELECT j, s, JSON_OBJECTAGG(j,s) OVER w jobject_s, JSON_OBJECTAGG(f,j)   OVER w jobject_j FROM t1 WINDOW w AS (ORDER BY j) ORDER BY j DESC;
SELECT j, i, JSON_OBJECTAGG(j,i) OVER w jobject_i, JSON_OBJECTAGG(j,f)   OVER w jobject_f FROM t1 WINDOW w AS (ORDER BY j DESC);
SELECT i, j, JSON_OBJECTAGG(j,f) OVER w jobject_i, JSON_OBJECTAGG(j,s)   OVER w jobject_f FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j);
SELECT j, s, f, JSON_OBJECTAGG(j,s) OVER w jobject_s, JSON_OBJECTAGG(f,j)   OVER w jobject_j FROM t1 WINDOW w AS (PARTITION BY i ORDER BY s);
SELECT i, JSON_OBJECTAGG(i,j) OVER(PARTITION BY i) FROM t1;
CREATE VIEW v AS SELECT i, j, JSON_OBJECTAGG(i,j)   OVER (ORDER BY i DESC ROWS UNBOUNDED PRECEDING) jobject_j FROM t1;
SELECT j, s, JSON_OBJECTAGG(j, s) OVER w jobject_s FROM t1   GROUP BY j,s WINDOW w AS (ORDER BY j);
SELECT i, JSON_OBJECTAGG(i,f) OVER w jobject_f FROM t1 GROUP BY i,f   WITH ROLLUP HAVING GROUPING(f)=1  WINDOW w AS (ORDER BY f);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_f, RANK()   OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY i ORDER BY i);
SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, RANK()   OVER w rank1, NTH_VALUE(i,2) OVER w nth, LEAD(f, 1)   OVER w lead1, LAG(f,1) OVER w lag1 FROM t1   WINDOW w AS (PARTITION BY i ORDER BY j);
SELECT i, f, PERCENT_RANK() OVER (ORDER BY f) p_rank, JSON_OBJECTAGG(i,j)   OVER (ORDER BY i,j ROWS UNBOUNDED PRECEDING) jobject_j FROM t1;
SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, MIN(i)   OVER w min FROM t1 WINDOW w AS (PARTITION BY i);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, MAX(i)   OVER w max FROM t1 WINDOW w AS (PARTITION BY f ROWS UNBOUNDED PRECEDING);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, RANK()   OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS                                     BETWEEN 2 PRECEDING AND 1 PRECEDING);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, RANK()   OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS                                     BETWEEN 2 PRECEDING AND CURRENT ROW);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, CUME_DIST()   OVER w c_dist FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j ROWS                                      BETWEEN 1 FOLLOWING AND 2 FOLLOWING);
SELECT i, j, f, JSON_OBJECTAGG(f,j) OVER w jobject_i FROM t1 WINDOW w AS (PARTITION BY i ORDER BY f RANGE BETWEEN 2.1 FOLLOWING              AND 4.5 FOLLOWING);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j, CUME_DIST()   OVER w c_dist FROM t1 WINDOW w AS (PARTITION BY i ORDER BY j,f ROWS                                      BETWEEN 2 PRECEDING AND 2 FOLLOWING);
SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, MAX(i) OVER w max FROM t1   WINDOW w AS (PARTITION BY f ROWS UNBOUNDED PRECEDING);
SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, RANK()   OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS                                     BETWEEN 2 PRECEDING AND 1 PRECEDING);
SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i, RANK()   OVER w rank1 FROM t1 WINDOW w AS (PARTITION BY f ORDER BY j ROWS                                     BETWEEN 2 PRECEDING AND CURRENT ROW);
SELECT i, j, f, JSON_OBJECTAGG(i,j) OVER w jobject_i FROM t1   WINDOW w AS (PARTITION BY i ORDER BY j ROWS BETWEEN 1 FOLLOWING                AND 5 FOLLOWING);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j FROM t1   WINDOW w AS (PARTITION BY i ROWS BETWEEN 1 FOLLOWING AND                UNBOUNDED FOLLOWING);
SELECT i, j, f, JSON_OBJECTAGG(j,f) OVER w jobject_j FROM t1   WINDOW w AS (PARTITION BY i ROWS BETWEEN 2 PRECEDING AND 4 FOLLOWING);
SELECT i, j, f, JSON_OBJECTAGG(i,f) OVER w jobject_i FROM t1   WINDOW w AS (PARTITION BY i ORDER BY f RANGE BETWEEN 2.1 FOLLOWING AND                4.5 FOLLOWING);
SELECT 0 & (JSON_ARRAYAGG(1) OVER w) FROM (select 1) as dt  WINDOW w as ();
SELECT MAKETIME(((1)<=> (JSON_OBJECTAGG('1',1)OVER())),'1',1);
SELECT MAKETIME(((1)<=> (2*JSON_OBJECTAGG('1',1)OVER())),'1',1);
SELECT (1 + CAST(JSON_OBJECTAGG(1,2) OVER () AS DECIMAL));
SELECT JSON_OBJECTAGG(`key`, i) OVER w AS agg        FROM t WINDOW w AS (ORDER BY `key` ROWS CURRENT ROW);
SELECT JSON_OBJECTAGG(`key`, i) OVER w AS agg        FROM t WINDOW w AS (ORDER BY i ROWS CURRENT ROW);
if (!$TABLE) {   DROP SCHEMA mysql;
CREATE TABLESPACE mysql ADD DATAFILE 'new_file.ibd';
CREATE PROCEDURE ddse_access() DROP TABLE mysql.innodb_index_stats(i INTEGER);
SHOW GRANTS FOR "mysql.session"@localhost;
SHOW GRANTS FOR "mysql.session"@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u2;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u2;
SHOW GRANTS FOR root@localhost;
connect(pipe_con,localhost,root,,,,,PIPE);
disconnect pipe_con;
SELECT * FROM json_table('[]', '$[*]'   COLUMNS (p CHAR(1) CHARACTER SET utf8 PATH '$.a')) AS t;
SELECT * FROM json_table('[]', '$[*]'   COLUMNS (p CHAR(1) CHARACTER SET "utf8" PATH '$.a')) AS t;
SELECT * FROM json_table('[]', '$[*]'   COLUMNS (p CHAR(1) CHARACTER SET 'utf8' PATH '$.a')) AS t;
SELECT * FROM json_table('[]', '$[*]'   COLUMNS (p CHAR(1) CHARACTER SET `utf8` PATH '$.a')) AS t;
SELECT * FROM json_table('[]', '$[*]'   COLUMNS (p NATIONAL CHAR(1) PATH '$.a')) AS t;
SELECT * FROM json_table('[]', '$[*]' COLUMNS (p NCHAR(1) PATH '$.a')) AS t;
SELECT * FROM json_table('[]', '$[*]' COLUMNS (p NCHAR PATH '$.a')) AS t;
SELECT * FROM json_table('[]', '$[*]' COLUMNS (p NVARCHAR(1) PATH '$.a')) AS t;
if (`select locate('materialization', @@optimizer_switch) > 0`) {   set optimizer_switch='materialization=off';
} if (`select locate('firstmatch', @@optimizer_switch) > 0`) {   set optimizer_switch='firstmatch=off';
} if (`select locate('duplicateweedout', @@optimizer_switch) > 0`) {   set optimizer_switch='duplicateweedout=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`) {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`) {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
create event задачка on schedule every 123 minute starts now() ends now() + interval 1 month do select 1;
drop event задачка;
create event закачка on schedule every 10 hour do select get_lock("test_lock1", 20);
drop event закачка;
create event закачка on schedule every 10 hour do select get_lock("test_lock2", 20);
where ( (state like 'User lock%' AND info like 'select get_lock%')        OR (command='Daemon' AND user='event_scheduler' AND            state = 'Waiting for next activation'));
drop event закачка;
where (state like 'User lock%' AND info like 'select get_lock%');
create event закачка21 on schedule every 10 hour do select get_lock("test_lock2_1", 20);
where ( (state like 'User lock%' AND info like 'select get_lock%')           OR (command='Daemon' AND user='event_scheduler' AND               state = 'Waiting for next activation'));
where (info like "select get_lock%" OR user='event_scheduler');
drop event закачка21;
create trigger t_16_bi before insert on t_16 for each row create event  e_16 on schedule every 1 second do set @a=5;
create trigger t1_ai after insert on t1 for each row show create event e1;
SHOW EVENTS FROM ``;
lock table t1 read;
unlock tables;
create function f1() returns int begin   show create event e1;   return 1; end|
create trigger trg before insert on t1 for each row begin   show create event e1; end|
create function f1() returns int begin   select event_name from information_schema.events;   return 1; end|
create trigger trg before insert on t1 for each row begin   select event_name from information_schema.events; end|                                                                                                                                                    --error ER_EVENT_RECURSION_FORBIDDEN create function f1() returns int begin   create event e2 on schedule every 10 hour do select 1;   return 1; end|
create function f1() returns int begin   alter event e1 rename to e2;   return 1; end|
create function f1() returns int begin   drop event e2;   return 1; end|
create trigger trg before insert on t1 for each row begin   set new.a= f1(); end|
create function f1() returns int begin   call p1();   return 0; end|
create procedure p1() begin   select event_name from information_schema.events; end|
insert into t1 (a) values (1)|
drop procedure p1|
create procedure p1() begin   create temporary table tmp select event_name from information_schema.events; end|
insert into t1 (a) values (1)|
select * from tmp|
drop temporary table tmp|
drop procedure p1|
create procedure p1() begin   alter event e1 rename to e2; end|
insert into t1 (a) values (1)|
drop procedure p1|
create procedure p1() begin   drop event e1; end|
insert into t1 (a) values (1)|
drop table t1|
drop event e1|
create event имя_события_в_кодировке_утф8_длиной_больше_чем_48 on schedule every 2 year do select 1;
drop event имя_события_в_кодировке_утф8_длиной_больше_чем_48;
create event очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_66 on schedule every 2 year do select 1;
echo The following SELECTs should all give 1;
connect (ssl_con,localhost,root,,,,,SSL);
disconnect ssl_con;
while ($count) {   connect (ssl_con,localhost,root,,,,,SSL);
dec $count;
send select * from t1;
send_quit ssl_con;
connect (ssl_con2,localhost,root,,,,,SSL);
disconnect ssl_con2;
disconnect ssl_con;
} connect (ssl_con,localhost,root,,,,,SSL);
disconnect ssl_con;
select (NOT FALSE) OR TRUE, NOT (FALSE OR TRUE), NOT FALSE OR TRUE;
select (NOT FALSE) XOR FALSE, NOT (FALSE XOR FALSE), NOT FALSE XOR FALSE;
select (NOT FALSE) AND FALSE, NOT (FALSE AND FALSE), NOT FALSE AND FALSE;
select NOT NOT TRUE, NOT NOT NOT FALSE;
select (NOT NULL) IS TRUE, NOT (NULL IS TRUE), NOT NULL IS TRUE;
select (NOT NULL) IS NOT TRUE, NOT (NULL IS NOT TRUE), NOT NULL IS NOT TRUE;
select (NOT NULL) IS FALSE, NOT (NULL IS FALSE), NOT NULL IS FALSE;
select (NOT NULL) IS NOT FALSE, NOT (NULL IS NOT FALSE), NOT NULL IS NOT FALSE;
select (NOT TRUE) IS UNKNOWN, NOT (TRUE IS UNKNOWN), NOT TRUE IS UNKNOWN;
select (NOT TRUE) IS NOT UNKNOWN, NOT (TRUE IS NOT UNKNOWN), NOT TRUE IS NOT UNKNOWN;
select (NOT TRUE) IS NULL, NOT (TRUE IS NULL), NOT TRUE IS NULL;
select (NOT TRUE) IS NOT NULL, NOT (TRUE IS NOT NULL), NOT TRUE IS NOT NULL;
connect (con2, localhost, root);
disconnect con2;
connect (con2, localhost, root);
connect (con3, localhost, root);
WHERE state= 'Waiting for stored function metadata lock'    AND info='SHOW OPEN TABLES WHERE f1()=0';
disconnect con2;
disconnect con3;
connect (con2, localhost, root);
LOCK TABLES t0 WRITE, t1 WRITE;
UNLOCK TABLES;
disconnect con2;
WHERE info LIKE 'DROP FUNCTION mixedcase' AND                      state='Waiting for stored function metadata lock';
source include/wait_condition.inc;
WHERE info LIKE 'SHOW CREATE FUNCTION%' AND                      state='Waiting for stored function metadata lock';
source include/wait_condition.inc;
WHERE info LIKE 'ALTER FUNCTION mixedcase%' AND                      state='Waiting for stored function metadata lock';
source include/wait_condition.inc;
WHERE info LIKE 'SHOW CREATE PROCEDURE%' AND                      state='Waiting for stored procedure metadata lock';
source include/wait_condition.inc;
WHERE info LIKE 'ALTER PROCEDURE mixedcase%' AND                      state='Waiting for stored procedure metadata lock';
source include/wait_condition.inc;
DISCONNECT con1;
DISCONNECT con2;
create table t1 (a int) partition by range (a) ( partition p0 values less than (NULL),   partition p1 values less than (MAXVALUE));
create table t1 (a int) partition by range (a) ( partition p0 values less than (maxvalue));
create trigger tr1 before insert on t1 for each row begin   set @a = 1; end|
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1)   ( subpartition x11 engine innodb nodegroup 0,     subpartition x12 engine innodb nodegroup 1),    partition x2 values less than (5)    ( subpartition x21 engine innodb nodegroup 0,      subpartition x22 engine innodb nodegroup 1) );
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1)   ( subpartition x11 nodegroup 0,     subpartition x12 nodegroup 1),    partition x2 values less than (5)    ( subpartition x21 nodegroup 0,      subpartition x22 nodegroup 1) );
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1)   ( subpartition x11 engine innodb nodegroup 0,     subpartition x12 engine innodb nodegroup 1),    partition x2 values less than (5)    ( subpartition x21 engine innodb nodegroup 0,      subpartition x22 engine innodb nodegroup 1) );
ALTER TABLE t1 partition by range (a) subpartition by hash (a+b) ( partition x1 values less than (1)   ( subpartition x11 engine innodb nodegroup 0,     subpartition x12 engine innodb nodegroup 1),    partition x2 values less than (5)    ( subpartition x21 engine innodb nodegroup 0,      subpartition x22 engine innodb nodegroup 1) );
if (!$VALGRIND_TEST) {   if ($is_debug) {     SET GLOBAL debug = "+d,temptable_api";
} } SET optimizer_switch = "derived_merge=off";
if ($is_debug) {   SET GLOBAL debug = default;
} SET SESSION internal_tmp_mem_storage_engine = default;
while ($i < 19) {   if ($i == 0)   {   }   if ($i == 1)   {   }   if ($i == 2)   {   }   if ($i == 3)   {   }   if ($i == 4)   {   }   if ($i == 5)   {   }   if ($i == 6)   {   }   if ($i == 7)   {   }   if ($i == 8)   {   }   if ($i == 9)   {   }   if ($i == 10)   {   }   if ($i == 11)   {   }   if ($i == 12)   {   }   if ($i == 13)   {   }   if ($i == 14)   {   }   if ($i == 15)   {   }   if ($i == 16)   {   }   if ($i == 17)   {   }   if ($i == 18)   {   }   SELECT i1 = $value AS a,          u1 = $value AS au,          i2 = $value AS b,          u2 = $value AS bu,          i3 = $value AS c,          u3 = $value AS cu,          i4 = $value AS d,          u4 = $value AS du,          i8 = $value AS e,          u8 = $value AS eu   FROM t1;
execute s1 using @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv;
execute s1 using @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv;
execute s1 using @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv;
execute s1 using @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv;
execute s2 using @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv;
execute s2 using @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv;
execute s2 using @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv;
execute s2 using @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv;
execute s3 using @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv;
execute s3 using @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv;
execute s3 using @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv;
execute s3 using @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv;
execute s4 using @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv;
execute s4 using @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv;
execute s4 using @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv;
execute s4 using @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv;
execute s5 using @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv;
execute s5 using @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv;
execute s5 using @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv;
execute s5 using @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv;
execute s6 using @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv, @iv;
execute s6 using @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv, @dv;
execute s6 using @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv, @fv;
execute s6 using @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv, @sv;
inc $i;
} DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
while ($i < 9) {   if ($i == 0)   {   }   if ($i == 1)   {   }   if ($i == 2)   {   }   if ($i == 3)   {   }   if ($i == 4)   {   }   if ($i == 5)   {   }   if ($i == 6)   {   }   if ($i == 7)   {   }   if ($i == 8)   {   }   SELECT f4 = $value AS a,          f8 = $value AS b   FROM t2;
execute s1 using @fv, @fv;
execute s1 using @sv, @sv;
execute s2 using @fv, @fv;
execute s2 using @sv, @sv;
execute s3 using @fv, @fv;
execute s3 using @sv, @sv;
execute s4 using @fv, @fv;
execute s4 using @sv, @sv;
execute s5 using @fv, @fv;
execute s5 using @sv, @sv;
execute s6 using @fv, @fv;
execute s6 using @sv, @sv;
inc $i;
} DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
while ($i < 11) {   if ($i == 0)   {        -100000000000000000000000000000000000000000000000000000000000000000;
}   if ($i == 1)   {         -99999999999999999999999999999999999999999999999999999999999999999;
}   if ($i == 2)   {         -99999999999999999999999999999999999.999999999999999999999999999999;
}   if ($i == 3)   {   }   if ($i == 4)   {   }   if ($i == 5)   {   }   if ($i == 6)   {   }   if ($i == 7)   {   }   if ($i == 8)   {         99999999999999999999999999999999999.999999999999999999999999999999;
}   if ($i == 9)   {         99999999999999999999999999999999999999999999999999999999999999999;
}   if ($i == 10)   {         100000000000000000000000000000000000000000000000000000000000000000;
}   SELECT dc1 = $value AS a,          dc2 = $value AS b,          dc3 = $value AS c,          dc4 = $value AS d   FROM t3;
execute s1 using @dv, @dv, @dv, @dv;
execute s1 using @sv, @sv, @sv, @sv;
execute s2 using @dv, @dv, @dv, @dv;
execute s2 using @sv, @sv, @sv, @sv;
execute s3 using @dv, @dv, @dv, @dv;
execute s3 using @sv, @sv, @sv, @sv;
execute s4 using @dv, @dv, @dv, @dv;
execute s4 using @sv, @sv, @sv, @sv;
execute s5 using @dv, @dv, @dv, @dv;
execute s5 using @sv, @sv, @sv, @sv;
execute s6 using @dv, @dv, @dv, @dv;
execute s6 using @sv, @sv, @sv, @sv;
inc $i;
} DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
while ($i < 1) {   if ($i == 0)   {   }   SELECT fc = $value AS a,          vc = $value AS b   FROM t4;
execute s1 using @sv, @sv;
execute s2 using @sv, @sv;
execute s3 using @sv, @sv;
execute s4 using @sv, @sv;
execute s5 using @sv, @sv;
execute s6 using @sv, @sv;
inc $i;
} DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
while ($i < 3) {   if ($i == 0)   {   }   if ($i == 1)   {   }   if ($i == 2)   {   }   SELECT d = $s_value AS a   FROM t5;
execute s1 using @sv;
execute s1 using @iv;
execute s1 using @tsv;
execute s1 using @tsn;
execute s2 using @sv;
execute s2 using @iv;
execute s2 using @tsv;
execute s2 using @tsn;
execute s3 using @sv;
execute s3 using @iv;
execute s3 using @tsv;
execute s3 using @tsn;
execute s4 using @sv;
execute s4 using @iv;
execute s4 using @tsv;
execute s4 using @tsn;
execute s5 using @sv;
execute s5 using @iv;
execute s5 using @tsv;
execute s5 using @tsn;
execute s6 using @sv;
execute s6 using @iv;
execute s6 using @tsv;
execute s6 using @tsn;
inc $i;
} set @iv=-20010101;
execute s1 using @iv;
execute s1 using @sv;
DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
while ($i < 5) {   if ($i == 0)   {   }   if ($i == 1)   {   }   if ($i == 2)   {   }   if ($i == 3)   {   }   if ($i == 4)   {   }   SELECT t1 = $s_value AS a,          t2 = $s_value AS b   FROM t6;
execute s1 using @tv, @tv;
execute s1 using @dcv, @dcv;
execute s2 using @tv, @tv;
execute s2 using @dcv, @dcv;
execute s3 using @tv, @tv;
execute s3 using @dcv, @dcv;
execute s4 using @tv, @tv;
execute s4 using @dcv, @dcv;
execute s5 using @tv, @tv;
execute s5 using @dcv, @dcv;
execute s6 using @tv, @tv;
execute s6 using @dcv, @dcv;
inc $i;
} DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
while ($i < 5) {   if ($i == 0)   {   }   if ($i == 1)   {   }   if ($i == 2)   {   }   if ($i == 3)   {   }   if ($i == 4)   {   }   SELECT dt1 = $ds_value AS a,          dt2 = $ds_value AS b   FROM t7;
execute s1 using @dsv, @dsv;
execute s1 using @iv, @iv;
execute s1 using @tssv, @tssv;
execute s1 using @dcv, @dcv;
execute s2 using @dsv, @dsv;
execute s2 using @iv, @iv;
execute s2 using @tssv, @tssv;
execute s2 using @dcv, @dcv;
execute s3 using @dsv, @dsv;
execute s3 using @iv, @iv;
execute s3 using @tssv, @tssv;
execute s3 using @dcv, @dcv;
execute s4 using @dsv, @dsv;
execute s4 using @iv, @iv;
execute s4 using @tssv, @tssv;
execute s4 using @dcv, @dcv;
execute s5 using @dsv, @dsv;
execute s5 using @iv, @iv;
execute s5 using @tssv, @tssv;
execute s5 using @dcv, @dcv;
execute s6 using @dsv, @dsv;
execute s6 using @iv, @iv;
execute s6 using @tssv, @tssv;
execute s6 using @dcv, @dcv;
inc $i;
} DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
DEALLOCATE PREPARE s3;
DEALLOCATE PREPARE s4;
DEALLOCATE PREPARE s5;
DEALLOCATE PREPARE s6;
connect (con1, localhost, root,,);
connect (con2, localhost, root,,);
create function f1() returns int begin   declare j int;   select i from t1 where i = 1 into j;   return j; end|
create function f2() returns int begin   declare k int;   select i from t1 where i = 1 into k;   insert into t2 values (k + 5);   return 0; end|
create function f3() returns int begin   return (select i from t1 where i = 3); end|
create function f4() returns int begin   if (select i from t1 where i = 3) then     return 1;   else     return 0;   end if; end|
create function f5() returns int begin   insert into t2 values ((select i from t1 where i = 1) + 5);   return 0; end|
create function f6() returns int begin   declare k int;   select i from v1 where i = 1 into k;   return k; end|
create function f7() returns int begin   declare k int;   select j from v2 where j = 1 into k;   return k; end|
create function f8() returns int begin   declare k int;   select i from v1 where i = 1 into k;   insert into t2 values (k+5);   return k; end|
create function f9() returns int begin   update v2 set j=j+10 where j=1;   return 1; end|
create function f10() returns int begin   return f1(); end|
create function f11() returns int begin   declare k int;   set k= f1();   insert into t2 values (k+5);   return k; end|
create function f12(p int) returns int begin   insert into t2 values (p);   return p; end|
create function f13(p int) returns int begin   return p; end|
create procedure p2(inout p int) begin   select i from t1 where i = 1 into p; end|
create function f14() returns int begin   declare k int;   call p2(k);   insert into t2 values (k+5);   return k; end|
create function f15() returns int begin   declare k int;   call p2(k);   return k; end|
create function f16() returns int begin   create temporary table if not exists temp1 (a int);   insert into temp1 select * from t1;   drop temporary table temp1;   return 1; end|
create function f17() returns int begin   declare j int;   select i from t1 where i = 1 into j;   call p3;   return 1; end|
create procedure p3() begin   create temporary table if not exists temp1 (a int);   insert into temp1 select * from t1;   drop temporary table temp1; end|
create trigger t4_bi before insert on t4 for each row begin   declare k int;   select i from t1 where i=1 into k;   set new.l= k+1; end|
create trigger t4_bu before update on t4 for each row begin   if (select i from t1 where i=1) then     set new.l= 2;   end if; end|
create trigger t4_bd before delete on t4 for each row begin   if !(select i from v1 where i=1) then     signal sqlstate '45000';   end if; end|
create trigger t5_bi before insert on t5 for each row begin   set new.l= f1()+1; end|
create trigger t5_bu before update on t5 for each row begin   declare j int;   call p2(j);   set new.l= j + 1; end|
lock table t1 write;
unlock tables;
lock table t1 write;
unlock tables;
call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
disconnect con1;
disconnect con2;
connect (con2, localhost, root);
disconnect con2;
connect(con1, localhost, root);
disconnect con1;
connect(con2, localhost, root);
connect (con1, localhost, root);
WHERE state= 'Waiting for table flush' AND info= 'FLUSH TABLES';
disconnect con1;
disconnect con2;
connect (update,localhost,root,,);
connect (select,localhost,root,,);
disconnect update;
disconnect select;
connect (con1, localhost, root);
connect (con2, localhost, root);
UNLOCK TABLES;
disconnect con1;
disconnect con2;
connect (con1, localhost, root);
connect (con2, localhost, root);
connect (con1,localhost,root,,);
disconnect con1;
create procedure solver(initial_leftm varchar(200), initial_rightm varchar(200)) begin declare initial_leftm_j  json; declare initial_rightm_j json; set initial_leftm_j  = cast(initial_leftm as json),     initial_rightm_j = cast(initial_rightm as json); with recursive number_of_lines (value) as (select json_length(initial_rightm_j)), number_of_columns (value) as (select json_length(json_extract(initial_leftm_j,"$[0]"))), line_numbers (n) as ( select 0 union all select n+1 from line_numbers, number_of_lines where n<(value-1) ), column_numbers (n) as ( select 0 union all select n+1 from line_numbers, number_of_columns where n<(value-1) ), equations (null_if_done, leftm, rightm, pivot_lines, pivot_columns) as ( select 0, initial_leftm_j, initial_rightm_j,        cast("" as char(200)), cast("" as char(200)) union all select cur_pivot.cur_pivot_line , ( select "[" || group_concat( ( select "[" || group_concat( json_extract(json_extract(eq.leftm, "$[" || ln.n || "]"),              "$[" || cn.n || "]") - (case when find_in_set(ln.n,eq.pivot_lines)=0 and ln.n<>cur_pivot.cur_pivot_line then json_extract(json_extract(eq.leftm, "$[" || ln.n || "]"),                   "$[" || cur_pivot.cur_pivot_column || "]") *      json_extract(json_extract(eq.leftm, "$[" || cur_pivot.cur_pivot_line || "]"),                   "$[" || cn.n || "]") /      cur_pivot.cur_pivot_value else 0 end) order by cn.n separator ',') || "]" from column_numbers cn ) order by ln.n separator ',') || "]" from line_numbers ln ), ( select "[" || group_concat( json_extract(eq.rightm, "$[" || ln.n || "]") - (case when find_in_set(ln.n,eq.pivot_lines)=0 and ln.n<>cur_pivot.cur_pivot_line then json_extract(json_extract(eq.leftm, "$[" || ln.n || "]"),                   "$[" || cur_pivot.cur_pivot_column || "]") *      json_extract(eq.rightm, "$[" || cur_pivot.cur_pivot_line || "]") /      cur_pivot.cur_pivot_value else 0 end) order by ln.n separator ',') || "]" from line_numbers ln ), coalesce(cur_pivot.cur_pivot_line, "") || "," || eq.pivot_lines, coalesce(cur_pivot.cur_pivot_column, "") || "," || eq.pivot_columns from equations eq left join lateral ( select ln.n as cur_pivot_line, cn.n as cur_pivot_column, (  json_extract(json_extract(eq.leftm, "$[" || ln.n || "]"),               "$[" || cn.n || "]") ) as cur_pivot_value from line_numbers ln join column_numbers cn where find_in_set(ln.n,eq.pivot_lines)=0 and json_extract(json_extract(eq.leftm, "$[" || ln.n || "]"),              "$[" || cn.n || "]") <> 0 order by cur_pivot_line,cur_pivot_column limit 1 ) as cur_pivot on 1 where eq.null_if_done is not null ), final_equations as ( select * from equations where null_if_done is null ) select json_extract(eq.leftm, "$[" || ln.n || "]")  as left_member, json_extract(eq.rightm, "$[" || ln.n || "]") as right_member, free.value as list_of_free_unknowns from final_equations eq, line_numbers ln, ( select group_concat(cn.n+1) as value from final_equations eq, column_numbers cn where find_in_set(cn.n,eq.pivot_columns)=0 ) as free order by find_in_set(ln.n,eq.pivot_lines), ln.n; end $
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
rename table t3 to t4;
while($bug31036) {   INSERT INTO t1(a) VALUES (REPEAT('a', 510));
dec $bug31036;
} INSERT INTO t1(a) VALUES ('');
FLUSH TABLE t1;
FLUSH TABLE t1;
copy_file std_data/bug46565.ARZ $MYSQLD_DATADIR/test/t1.ARZ;
FLUSH TABLE t1;
FLUSH TABLE t1;
PREPARE stmt1 FROM "INSERT INTO t1( a ) VALUES ( ? )";
EXECUTE stmt1 USING @a;
LOCK INSTANCE FOR BACKUP;
CREATE TABLESPACE testtablespace ADD DATAFILE 'ts.ibd' ENGINE=InnoDB;
CREATE PROCEDURE testproc_1() BEGIN SELECT * FROM testtable_1;
END// DELIMITER ;// CREATE EVENT testevent_1 ON SCHEDULE EVERY 10 SECOND DO SELECT 1;
CREATE TRIGGER testtrigger_1 BEFORE INSERT ON testtable_1 FOR EACH ROW SET @a:=1;
UNLOCK INSTANCE;
CREATE TABLESPACE testtablespace ADD DATAFILE 'ts.ibd' ENGINE=InnoDB;
CREATE PROCEDURE testproc_1() BEGIN SELECT * FROM testtable_1;
END// DELIMITER ;// CREATE EVENT testevent_1 ON SCHEDULE EVERY 10 SECOND DO SELECT 1;
CREATE TRIGGER testtrigger_1 BEFORE INSERT ON testtable_1 FOR EACH ROW SET @a:=1;
LOCK INSTANCE FOR BACKUP;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
CALL mtr.add_suppression("Failed to set up SSL because of the following *");
CALL mtr.add_suppression("One can only use the --user switch.*");
SET GLOBAL PERSIST replica_compressed_protocol=1;
SET PERSIST @@global.replica_compressed_protocol=1;
SET PERSIST @@session.replica_compressed_protocol=1;
SET @@persist.@@replica_compressed_protocol=1;
[mysqld] innodb_fast_shutdown=1 innodb_default_row_format=REDUNDANT sql_mode=REAL_AS_FLOAT innodb_flush_log_at_trx_commit=2 max_digest_length=2024 disconnect_on_expired_password=OFF SELECT @@global.innodb_fast_shutdown;
GRANT PROXY ON 'internal_proxied'@'%' TO 'external_u1'@'%','external_u2'@'%';
[mysqld] sort_buffer_size=314156 [mysqld] innodb_fast_shutdown=1 innodb_default_row_format=REDUNDANT innodb_flush_log_at_trx_commit=2 SELECT VARIABLE_NAME, VARIABLE_SOURCE   FROM performance_schema.variables_info WHERE VARIABLE_NAME IN   ('sort_buffer_size', 'max_connections', 'max_digest_length',    'innodb_fast_shutdown', 'innodb_default_row_format', 'innodb_flush_log_at_trx_commit');
[mysqld] innodb_fast_shutdown=1 { "mysql_server": { "event_scheduler": OFF , "mysql_server_static_options": {"binlog_gtid_simple_recovery": "0" , "ft_query_expansion_limit": "200" } } } { "mysql_server": { "event_scheduler": "OFF" , "mysql_server_static_options": {"binlog_gtid_simple_recovery": 0 , "ft_query_expansion_limit": "200" } } } { "mysql_server": { "event_scheduler": OFF , "mysql_server_static_options": {"binlog_gtid_simple_recovery": "0"  "ft_query_expansion_limit": "200" } } } { "mysql_server": { "event_scheduler": OFF , "mysql_xxxx_static_options": {"binlog_gtid_simple_recovery": "0" , "ft_query_expansion_limit": "200" } } } { "xxxx_server": { "event_scheduler": OFF , "mysql_server_static_options": {"binlog_gtid_simple_recovery": "0" , "ft_query_expansion_limit": "200" } } } set @a=repeat('A',2000);
set @b=repeat('A',24000);
disconnect con1;
disconnect con1;
RENAME TABLE mysql.procs_priv TO mysql.procs_priv_backup;
FLUSH TABLE mysql.procs_priv;
RENAME TABLE mysql.procs_priv_backup TO mysql.procs_priv;
FLUSH TABLE mysql.procs_priv;
ALTER USER u1 COMMENT 'free form text';
ALTER USER u1 COMMENT 'changed the free form text';
ALTER USER u1 ATTRIBUTE '{"uid" : "34234"}';
ALTER USER u1 ATTRIBUTE '{"speed" : "9000"}';
ALTER USER u1 ATTRIBUTE '{"speed" : null }';
ALTER USER foo@localhost COMMENT 'password lock time';
ALTER USER foo@localhost ATTRIBUTE '{"flag":"red"}';
ALTER USER foo@localhost ATTRIBUTE '{"flag":null}';
ALTER USER foo@localhost COMMENT 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz';
ALTER USER foo@localhost COMMENT 'xxx';
ALTER USER foo@localhost ATTRIBUTE 'not a valid object';
ALTER USER foo@localhost ATTRIBUTE NULL;
ALTER USER foo@localhost ATTRIBUTE;
ALTER USER foo@localhost COMMENT;
ALTER USER u4@sdasd ATTRIBUTE '{}';
ALTER USER fff@asdasd COMMENT '';
ALTER USER USER() COMMENT 'test';
CREATE USER foo2@localhost IDENTIFIED BY 'foo' COMMENT 'xxx';
CREATE USER foo3 PASSWORD EXPIRE DEFAULT COMMENT 'abc';
CREATE USER foo4 ACCOUNT LOCK ATTRIBUTE '{"stuff":"ffuts"}';
ALTER USER foo4 ACCOUNT UNLOCK ATTRIBUTE '{"stuff":"unlocked"}';
ALTER USER foo@localhost ATTRIBUTE '{"key":"value"}';
ALTER USER foo@localhost COMMENT 'Added key/value pair';
ALTER USER redqueen@localhost DISCARD OLD PASSWORD COMMENT 'Dropped old password';
CREATE USER u1 COMMENT 'Hello "Smith"';
CREATE USER u1 COMMENT 'Hello "Smith"';
CREATE USER u1@localhost IDENTIFIED BY 'foo' COMMENT 'Not permitted to change this';
connect(con1,localhost,u1,foo);
ALTER USER u1@localhost COMMENT 'I comment what I want';
ALTER USER u1@localhost ATTRIBUTE '{"key": "value"}';
disconnect con1;
CREATE USER u1@localhost IDENTIFIED BY 'foo',u2@localhost IDENTIFIED BY 'foo' COMMENT "Works with partial restrictions";
connect (con1, localhost, u2,foo);
ALTER USER CURRENT_USER() COMMENT 'test';
ALTER USER CURRENT_USER() ATTRIBUTE '{ "comment" : null }';
SHOW GRANTS FOR u1@localhost;
ALTER USER u1@localhost ATTRIBUTE '{"Restrictions": [{"Database":"mysql","Privileges": [ "CREATE" ]}]}';
SHOW GRANTS FOR u1@localhost;
disconnect con1;
CREATE USER u1@localhost ATTRIBUTE "this is a string";
echo "WL6369 Explain for Connection";
connect (ce, localhost, root,,test);
connect (cq, localhost, root,,test);
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
show grants for second_user@localhost ;
show grants for second_user@localhost ;
connect (con3,localhost,second_user,looser,mysqltest);
prepare s_t9 from 'select c1 as my_col                                   from t9 where c1= 1' ;
execute s_t9 ;
show grants for second_user@localhost ;
show grants for second_user@localhost ;
show grants for second_user@localhost ;
prepare s_t1 from 'select a as my_col from t1' ;
execute s_t1 ;
execute s_t9 ;
deallocate prepare s_t9;
show grants for second_user@localhost ;
show grants for second_user@localhost ;
execute s_t1 ;
disconnect con3 ;
show grants for second_user@localhost ;
show grants for second_user@localhost ;
prepare stmt3 from ' grant all on test.t1 to drop_user@localhost ';
prepare stmt3 from ' revoke all privileges on test.t1 from  drop_user@localhost ';
prepare stmt3 from ' drop user drop_user@localhost ';
CREATE PROCEDURE p1() BEGIN   INSERT INTO t1 VALUES(1); END|
PREPARE stmt FROM 'INSERT INTO t1 VALUES (1)';
EXECUTE stmt;
GET DIAGNOSTICS CONDITION 1 @varErrorMessage = message_text, @varErrorNo = mysql_errno;
EXECUTE stmt;
GET DIAGNOSTICS CONDITION 1 @varErrorMessage = message_text, @varErrorNo = mysql_errno;
DROP PREPARE stmt;
(SELECT * FROM mysql.tables WHERE schema_id IN     (SELECT id FROM mysql.schemata WHERE name='mysql')) AS tables1 LEFT JOIN   mysql.tablespaces ON tables1.tablespace_id = tablespaces.id   WHERE tables1.name NOT IN ('ndb_binlog_index') ORDER BY tables1.name;
tablespace_id IN (SELECT id FROM mysql.tablespaces WHERE name='mysql') AND   name NOT IN ('ndb_binlog_index')   ORDER BY name ASC;
call mtr.add_suppression("Resizing redo log from");
call mtr.add_suppression("Upgrading redo log");
call mtr.add_suppression("Starting to delete and rewrite log files");
call mtr.add_suppression("New log files created");
call mtr.add_suppression("You need to use --log-bin to make --binlog-format work");
call mtr.add_suppression("Creating routine without parsing routine body");
call mtr.add_suppression("Storage engine '.*' does not support system tables. \\[mysql.*\\]");
call mtr.add_suppression("Table 'mysql.component' doesn't exist");
call mtr.add_suppression("is expected to be transactional");
call mtr.add_suppression("table is missing or has an incorrect definition");
call mtr.add_suppression("ACL DDLs will not work unless mysql_upgrade is executed");
call mtr.add_suppression(".* Native table .* has the wrong structure");
call mtr.add_suppression("Column count of mysql.* is wrong");
call mtr.add_suppression("The privilege system failed to initialize correctly.*");
call mtr.add_suppression(".*The system table mysql.global_grants is missing.*");
call mtr.add_suppression("ACL table mysql.[a-z_]* missing. Some operations may fail.");
call mtr.add_suppression("Info table is not ready to be used. Table 'mysql.slave_master_info' cannot be opened");
call mtr.add_suppression("Error in checking mysql.slave_master_info repository info type of TABLE");
call mtr.add_suppression("Error creating master info: Error checking repositories.");
call mtr.add_suppression("Slave: Failed to initialize the master info structure for channel");
call mtr.add_suppression("Failed to create or recover replication info repositories.");
call mtr.add_suppression("Plugin mysqlx reported: 'Unable to use user mysql.session");
call mtr.add_suppression("Plugin mysqlx reported: 'Unable to switch context");
(SELECT * FROM mysql.tables WHERE schema_id IN     (SELECT id FROM mysql.schemata WHERE name='mysql')) AS tables1 LEFT JOIN   mysql.tablespaces ON tables1.tablespace_id = tablespaces.id   WHERE tables1.name NOT IN ('ndb_binlog_index') ORDER BY tables1.name;
tablespace_id IN (SELECT id FROM mysql.tablespaces WHERE name='mysql') AND   name NOT IN ('ndb_binlog_index')   ORDER BY name ASC;
ALTER USER pwd_history_plugin@localhost IDENTIFIED WITH 'test_plugin_server' PASSWORD REUSE INTERVAL 1 DAY;
ALTER USER mohit@localhost IDENTIFIED WITH 'test_plugin_server' AS 'haha';
PREPARE q FROM 'EXPLAIN FORMAT=tree SELECT * FROM t1 WHERE pk = ?';
EXECUTE q USING @v;
engine=myisam data directory="$MYSQLTEST_VARDIR/tmp" index directory="$MYSQLTEST_VARDIR/run";
rename table t7 to t9;
engine=myisam index directory="$MYSQLTEST_VARDIR/run";
engine=myisam data directory="$MYSQLTEST_VARDIR/tmp";
DATA DIRECTORY='$MYSQLTEST_VARDIR/tmp' INDEX DIRECTORY='$MYSQLTEST_VARDIR/tmp';
DATA DIRECTORY='$MYSQLTEST_VARDIR/tmp' INDEX DIRECTORY='$MYSQLTEST_VARDIR/tmp';
RENAME TABLE t2 TO t1;
connect (session1,localhost,root,,);
connect (session2,localhost,root,,);
disconnect session1;
disconnect session2;
INDEX DIRECTORY='$MYSQLD_DATADIR/mysql';
DATA DIRECTORY='$MYSQLD_DATADIR/test';
DATA DIRECTORY='$MYSQLD_DATADIR/';
INDEX DIRECTORY='$MYSQLD_DATADIR';
INDEX DIRECTORY='$MYSQLTEST_VARDIR/master-data_var';
INDEX DIRECTORY='$MYSQL_TMP_DIR/mysql';
FLUSH TABLE t1;
FLUSH TABLE schema1.t1;
FLUSH TABLE schema1.t1;
data directory="$MYSQLTEST_VARDIR/tmp"       index directory="$MYSQLTEST_VARDIR/run";
DATA DIRECTORY "$MYSQLTEST_VARDIR/tmp";
SET @sav_big= (SELECT COALESCE(@session.big_tables, 0));
WHERE USER != 'event_scheduler'`;
while ($i) {  INSERT INTO t1 SELECT * FROM t1;   dec $i;  } FLUSH TABLE t1;  SELECT COUNT(*) FROM t1;
FLUSH TABLE mysql_db1.t1;
FLUSH TABLE t1;
while ($1) {   dec $1;
} while ($1) {   dec $1;
} FLUSH TABLE t1;
FLUSH TABLE t1;
FLUSH TABLE t1;
FLUSH TABLE t1;
write_file $BOOTSTRAP_SQL;
perl;
my $log= $ENV{'MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_e= grep(/\[Warning\] \[[^]]*\] \[[^]]*\] Can\'t open and lock time zone table/gi,<FILE>);
print "#     Time zone table warning found $c_e times.\n";
close(FILE);
remove_file $BOOTSTRAP_SQL;
remove_file $MYSQLD_LOG;
remove_file $DDIR/mysql.ibd;
perl;
my $log= $ENV{'MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_e= grep(/Failed to find valid data directory./gi,<FILE>);
print "#     DD initialization error found $c_e times.\n";
close(FILE);
remove_file $MYSQLD_LOG;
perl;
my $log= $ENV{'MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_e= grep(/\[ERROR\] \[[^]]*\] \[[^]]*\] failed to set datadir/gi,<FILE>);
print "#     Datadir error found $c_e times.\n";
close(FILE);
remove_file $MYSQLD_LOG;
perl;
my $log= $ENV{'MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_e= grep(/Failed to find valid data directory/gi,<FILE>);
print "#     DD initialization error found $c_e times.\n";
close(FILE);
remove_file $MYSQLD_LOG;
perl;
my $log= $ENV{'MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_e= grep(/Failed to find valid data directory/gi,<FILE>);
print "#     DD initialization error found $c_e times.\n";
close(FILE);
remove_file $MYSQLD_LOG;
SET @old_sql_mode := @@sql_mode;
create function func1(x int)     returns int deterministic     begin     declare z1, z2 int;
return z2;
end|    delimiter ;|    explain format=json select * from t1 order by func1(a);
if (`select locate('materialization', @@optimizer_switch) > 0`)  {     set optimizer_switch='materialization=off';
} if (`select locate('firstmatch', @@optimizer_switch) > 0`)  {     set optimizer_switch='firstmatch=off';
} if (`select locate('loosescan', @@optimizer_switch) > 0`)  {     set optimizer_switch='loosescan=off';
} explain format=json select * from t1 where t1.a in (select a from t2) ;
explain format=json select distinct concat(c1, repeat('xx', 250)) as cc from t2;
select distinct concat(c1, repeat('xx', 250)) as cc from t2 order by 1;
explain format=json select concat(c1, repeat('xx', 250)) as cc from t2 group by cc;
select concat(c1, repeat('xx', 250)) as cc from t2 group by cc order by 1;
explain format=json select count(distinct concat(c1, repeat('xx', 250))) as cc from t2;
select count(distinct concat(c1, repeat('xx', 250))) as cc from t2 order by 1;
INSERT INTO N VALUES (1,3,repeat('a',1000)),(0,4,'tell'),(7,6,'o'),(6,7,'g'),(8,8,'can'), (9,15,repeat('a',1020)),(4,16,repeat('a',1020)),(6,18,'his'),(NULL,19,'going'), (7,22,'mean'),(8,23,'here');
SELECT alias2 . `col_int_nokey` AS field1 FROM ( CC AS alias1 INNER JOIN ( ( BB AS alias2 INNER JOIN        (  SELECT   SQ1_alias1 . * FROM C AS SQ1_alias1  ) AS alias3          ON (alias3 . `col_int_key` = alias2 . `col_int_nokey`  ) ) )        ON (alias3 . `col_varchar_nokey` = alias2 . `col_varchar_key`  ) ) WHERE (  ( alias2 . `pk` , alias3 . `col_int_nokey` ) IN   ( SELECT 4 , 7  UNION  SELECT 137, 6 ) )     AND alias1 . `pk` > 149 AND alias1 . `pk` < ( 149 + 7 )     OR alias3 . `col_varchar_key` < 'o';
INSERT INTO t2 VALUES ('MFDLE',1,'no',1358168064), ('v',2,'really',154664960), (repeat('mcrxjxxfpo',100),3,repeat('mcrxjxxfpo',100),1), ('o',4,'CEJHM',3), ('j',5,'CRDLM',174915584), ('m',6,'that\'s',7), ('YVMBM',7,'is',4), ('h',8,'as',8), ('y',9,'not',686096384), ('m',10,repeat('mcrxjxxfpo',100),8), (repeat('mcrxjxxfpo',100),11,'v',2), ('and', 12,'b',6), ('from',13,'OJSUT',9), ('you',14,repeat('mcrxjxxfpo',100),1), ('mr',15,'ZMJFI',9), ('TYZOE',16,'I\'ll',-363069440), ('HLKEJ',17,'v',-767492096), ('OINER',18,repeat('mcrxjxxfpo',100),-102170624), (repeat('mcrxjxxfpo',100),19,'i',7), ('one',20,'CPIUQ',469303296), (repeat('mcrxjxxfpo',100),21,'IGLXO',1140391936), ('ERRUY',22,'WKQHJ',1), ('q',23,repeat('mcrxjxxfpo',100),1694564352), ('CYGKG',24,'o',7), ('BIWWF',25,'good',-1532035072);
mkdir $test_dir;
mkdir $wrong_test_dir;
1,a 2,b 1,a 2,b 1,a 2,b CREATE TABLE test.wl13168(id INT PRIMARY KEY, data VARCHAR(50));
remove_file $MYSQLTEST_VARDIR/tmp/wl13168_log.txt;
remove_file $MYSQLTEST_VARDIR/tmp/wl13168_log.txt;
remove_file $MYSQLTEST_VARDIR/tmp/wl13168_log.txt;
force-rmdir $test_dir;
force-rmdir $wrong_test_dir;
connect(con1,localhost,root,,);
reap;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
UNLOCK TABLES;
CONNECT (con1, localhost, root);
CONNECT (con2, localhost, root);
WHERE info LIKE 'DROP TRIGGER%' AND                      state LIKE 'Waiting for % metadata lock';
source include/wait_condition.inc;
WHERE info LIKE 'SHOW CREATE TRIGGER%' AND                      state LIKE 'Waiting for % metadata lock';
source include/wait_condition.inc;
DISCONNECT con1;
DISCONNECT con2;
call mtr.add_suppression(".* Failed to activate default role .*");
CREATE ROLE r1 IDENTIFIED BY 'test';
GRANT sys_role TO peter@clickhost.net;
GRANT role1 TO peter@clickhost.net;
GRANT wp_administrators TO joe@localhost WITH ADMIN OPTION;
GRANT engineering ON *.*, SUPER ON *.* TO joan, sally;
SHOW GRANTS FOR current_user() USING `engineering`@`%`,`role`@`%`;
SHOW GRANTS FOR `wp_administrators`;
SHOW GRANTS FOR `joe`@`localhost`;
SHOW GRANTS FOR `joe`@`localhost` USING wp_administrators;
SHOW GRANTS FOR `joe`@`localhost` USING role1;
SHOW GRANTS FOR `joe`@`localhost` USING engineering;
SHOW GRANTS FOR `joe`@`localhost`;
GRANT consultants TO engineering WITH ADMIN OPTION;
SHOW GRANTS FOR `joe`@`localhost` USING engineering;
SHOW GRANTS FOR sally USING engineering, consultants;
SHOW GRANTS FOR sally USING engineering, consultants;
SHOW GRANTS FOR sally USING consultants;
SHOW GRANTS FOR sally USING engineering;
SHOW GRANTS FOR sally USING consultants;
SHOW GRANTS FOR sally USING engineering;
GRANT consultants TO engineering WITH ADMIN OPTION;
GRANT consultants TO sally WITH ADMIN OPTION;
SHOW GRANTS FOR sally USING engineering;
connect (con2, localhost, joe, joe,);
SHOW GRANTS FOR current_user() USING `replication`;
SHOW GRANTS FOR `joe`@`localhost` USING `replication`;
SHOW GRANTS FOR `root`@`localhost` USING `replication`;
disconnect con2;
SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'schema_designer';
connect (con2, localhost, joe_schema_designer, schmoo, test);
connect (con3, localhost, joe_schema_designer, schmoo, test);
connect (con4, localhost, joe_schema_designer, schmoo, test);
connect (con5, localhost, joe_schema_designer, schmoo, test);
SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'db_admin';
CREATE PROCEDURE db1.sp1() BEGIN   SELECT * FROM db1.t1;
END// CREATE PROCEDURE test.sp1() BEGIN   SELECT * FROM db1.t1;
END// CREATE PROCEDURE db1.sp2() SQL SECURITY DEFINER BEGIN   SELECT * FROM db1.t2;
END// DELIMITER ;// GRANT EXECUTE ON PROCEDURE db1.sp1 TO `db_admin`;
SHOW GRANTS FOR CURRENT_USER() USING `db_admin`;
CALL db1.sp1();
CALL test.sp1();
SHOW GRANTS FOR CURRENT_USER() USING db_admin;
CALL db1.sp1();
CALL test.sp1();
CALL db1.sp2();
disconnect con1;
disconnect con2;
disconnect con3;
disconnect con4;
disconnect con5;
SHOW GRANTS FOR u1@`%`;
SHOW GRANTS FOR u1@`%` USING r1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, hoho, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
SHOW GRANTS FOR u1@localhost;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
SHOW GRANTS FOR u1@localhost USING u1234567890123456789012345678901;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con1, localhost, u1, foo, test);
disconnect con1;
connect(con_base,localhost, baseuser,,);
DISCONNECT con_base;
connect(con_admin1,localhost, admin1,,);
DISCONNECT con_admin1;
connect(con_admin2, localhost, admin2,,);
DISCONNECT con_admin2;
CONNECTION default;
connect(con_foo, localhost, foo, foo,test);
disconnect con_foo;
LOCK TABLE t1 write;
UNLOCK TABLES;
DELETE FROM t1 alias USING t1, t2 alias WHERE t1.a = alias.a;
DELETE FROM db1.t1 alias USING db1.t1, db2.t1 alias WHERE db1.t1.a = alias.a;
DELETE FROM t1 alias USING t1 alias WHERE a = 2;
CREATE PROCEDURE count_rows() BEGIN   SELECT COUNT(*) AS "COUNT(db1.t1)" FROM db1.t1;   SELECT COUNT(*) AS "COUNT(db1.t2)" FROM db1.t2;   SELECT COUNT(*) AS "COUNT(db2.t1)" FROM db2.t1;   SELECT COUNT(*) AS "COUNT(db2.t2)" FROM db2.t2;   SELECT COUNT(*) AS "COUNT(test.t1)" FROM test.t1;   SELECT COUNT(*) AS "COUNT(test.t2)" FROM test.t2; END|
CREATE TRIGGER tr1 AFTER DELETE ON t1 FOR EACH ROW  BEGIN    INSERT INTO t1 SELECT * FROM t1 AS A;
END | DELETE IGNORE FROM t1;
PREPARE stm FROM 'CALL p1()';
EXECUTE stm;
DEALLOCATE PREPARE stm;
PREPARE s FROM 'DELETE t1 FROM t1, (SELECT 1 FROM DUAL) AS dt';
EXECUTE s;
EXECUTE s;
DEALLOCATE PREPARE s;
call mtr.add_suppression("Could not use");
connect (con1, localhost, root);
disconnect con1;
connect (con1, localhost, root);
disconnect con1;
connect (con1, localhost, root);
disconnect con1;
connect (con1,localhost,root,,mysql);
connect (con2,localhost,root,,test);
connect (fail_con,localhost,root,z,test2);
connect (fail_con,localhost,root,z,);
disconnect con1;
disconnect con2;
create user test@127.0.0.1 identified by "gambling";
grant ALL on *.* to test@127.0.0.1;
connect (con3,localhost,test,gambling,mysql);
connect (con4,localhost,test,gambling,test);
disconnect con3;
disconnect con4;
connect (fail_con,localhost,test,,test2);
connect (fail_con,localhost,test,,'""');
connect (fail_con,localhost,test,zorro,test2);
connect (fail_con,localhost,test,zorro,);
connect (fail_con,localhost,test,,test2);
connect (fail_con,localhost,test,,);
drop user test@127.0.0.1;
connect (con7,localhost,root,,test);
set @id := 1;
disconnect con7;
disconnect must_change_con;
disconnect must_change_con;
disconnect must_change_con;
disconnect must_change_con;
disconnect must_change_con;
disconnect must_change_con;
disconnect must_change_con;
disconnect must_change_con;
connect(con1,localhost,newuser,,);
connect(con1,localhost,root,1234,);
connect(con1,localhost,new1,,test1);
ALTER USER b22551523@localhost IDENTIFIED with 'test_plugin_server';
ALTER USER b22551523@localhost IDENTIFIED with 'mysql_native_password';
CALL mtr.add_suppression("option 'log_error_verbosity'");
CALL mtr.add_suppression("--verbose is for use with");
connect(user1,localhost,mysqltest_1,,*NO-ONE*);
disconnect user1;
connect(user2,localhost,mysqltest_yeslog,,*NO-ONE*);
connect(user3,localhost,mysqltest_nolog,,*NO-ONE*);
disconnect user2;
disconnect user3;
connect(user1,localhost,mysqltest_2_nolog,,*NO-ONE*);
connect(user1,localhost,mysqltest_3_yeslog,,*NO-ONE*);
CREATE TABLE t1 (d ENUM("YES","NO")) PARTITION BY RANGE COLUMNS(d) (PARTITION p0 VALUES LESS THAN ("NO"),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
CREATE TABLE t1 (d SET("Car","MC")) PARTITION BY RANGE COLUMNS(d) (PARTITION p0 VALUES LESS THAN ("MC"),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
create table t1 (a int, b int) partition by range columns (a,b) ( partition p0 values less than (maxvalue, 10),   partition p1 values less than (maxvalue, maxvalue));
create table t1 (a int, b int, c int) partition by range columns (a,b,c) ( partition p0 values less than (1, maxvalue, 10),   partition p1 values less than (1, maxvalue, maxvalue));
create table t1 (a int, b char(10), c varchar(25), d datetime) partition by range columns(a,b,c,d) subpartition by hash (to_seconds(d)) subpartitions 4 ( partition p0 values less than (1, 0, MAXVALUE, '1900-01-01'),   partition p1 values less than (1, 'a', MAXVALUE, '1999-01-01'),   partition p2 values less than (1, 'a', MAXVALUE, MAXVALUE),   partition p3 values less than (1, MAXVALUE, MAXVALUE, MAXVALUE));
create table t1 (a int, b char(10), c varchar(25), d datetime) partition by range columns(a,b,c,d) subpartition by hash (to_seconds(d)) subpartitions 4 ( partition p0 values less than (1, '0', MAXVALUE, '1900-01-01'),   partition p1 values less than (1, 'a', MAXVALUE, '1999-01-01'),   partition p2 values less than (1, 'b', MAXVALUE, MAXVALUE),   partition p3 values less than (1, MAXVALUE, MAXVALUE, MAXVALUE));
create table t1 (a int, b int) partition by range columns (a,b) (partition p0 values less than (NULL, maxvalue));
create table t1 (a int, b int) partition by list columns(a,b) ( partition p0 values in ((maxvalue, 0)));
alter table t1 add partition (partition p1 values in (maxvalue, maxvalue));
create table t1 (a int, b int) partition by range columns(a,b) (partition p0 values less than (maxvalue, 10));
create table t1 (a int, b int) partition by list columns(a,b) (partition p0 values in ((maxvalue,maxvalue)));
create table t1 (a int, b int) partition by range columns(a,b) (partition p0 values less than (maxvalue,maxvalue));
create table t1 (a int, b int) partition by range columns(a,b) (partition p0 values less than (1, 0),  partition p1 values less than (2, maxvalue),  partition p2 values less than (3, 3),  partition p3 values less than (10, maxvalue));
CREATE PROCEDURE a(x INT) BEGIN   DECLARE rnd INT;   DECLARE cnt INT;   WHILE x > 0 DO     SET rnd= x % 100;     SET cnt = (SELECT COUNT(*) FROM t1 WHERE a = rnd);     INSERT INTO t1(a,b) VALUES (rnd, CAST(cnt AS CHAR));     SET x= x - 1;   END WHILE; END|
RENAME TABLE t1 TO tt1;
RENAME TABLE tt1 TO tt1tt1;
RENAME TABLE tt1tt1 TO ttt1ttt1ttt1ttt1_xyz;
RENAME TABLE ttt1ttt1ttt1ttt1_xyz TO tttttttttttttttt1_abc;
RENAME TABLE tttttttttttttttt1_abc TO t1;
connect (con1, localhost, root,,);
LOCK TABLES t1 WRITE, t2 WRITE, t3 WRITE, t0 WRITE;
RENAME TABLES t0 TO t00, t1 TO t01, t2 TO t4;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
RENAME TABLE t1 TO mysqltest.t1;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE;
RENAME TABLES t1 TO mysqltest.t1, t2 TO t3;
UNLOCK TABLES;
LOCK TABLES t4 WRITE, t1 WRITE;
RENAME TABLES t4 TO mysqltest.t4, t1 TO t3;
UNLOCK TABLES;
disconnect con1;
SELECT product, country_id , SUM(profit) FROM t1 GROUP BY product, country_id WITH ROLLUP ORDER BY product DESC, GROUPING (country_id), country_id;
SELECT product, country_id , year, SUM(profit) FROM t1 GROUP BY product, country_id, year WITH CUBE;
EXPLAIN SELECT product, country_id , year, SUM(profit) FROM t1 GROUP BY product, country_id, year WITH CUBE;
SELECT product, country_id , year, SUM(profit) FROM t1 GROUP BY product, country_id, year WITH CUBE UNION ALL SELECT product, country_id , year, SUM(profit) FROM t1 GROUP BY product, country_id, year WITH ROLLUP;
SELECT a, b, c, GROUPING(a) FROM t1 GROUP BY a,b,c WITH ROLLUP;
SELECT a, b, c, GROUPING(a, b) FROM t1 GROUP BY a,b,c WITH ROLLUP;
SELECT a, b, c, GROUPING(a, b, c) FROM t1 GROUP BY a,b,c WITH ROLLUP;
SELECT a, b FROM t1 GROUP BY a,b WITH ROLLUP HAVING GROUPING(b) = 1;
SELECT a, b, GROUPING(c) FROM t1 GROUP BY a,b WITH ROLLUP;
SELECT a, b, c, GROUPING(a, b, c) FROM t1 GROUP BY a,b WITH ROLLUP;
SELECT a, GROUPING(SUM(a)) FROM t1 GROUP BY (a) WITH ROLLUP;
SELECT a, b, GROUPING(a) FROM t1 GROUP BY a,b;
SELECT a, b, GROUPING(a) FROM t1 ;
SELECT a, b FROM t1 WHERE GROUPING(a)=1 GROUP BY a,b WITH ROLLUP;
SELECT a, b FROM t1 GROUP BY GROUPING(a),GROUPING(b) WITH ROLLUP;
SELECT a, b, c, GROUPING(1) FROM t1 GROUP BY a,b,c WITH ROLLUP;
SELECT a, GROUPING(1) FROM t1 GROUP BY 1 WITH ROLLUP;
SELECT GROUPING(1) FROM t1 GROUP BY 1 WITH ROLLUP;
while ($col_cnt) {   dec $col_cnt;
} while ($col_cnt) { dec $col_cnt;
} DROP TABLE t3;
SELECT a, b, GROUPING(c + c) FROM t1 GROUP BY a,b WITH ROLLUP;
SELECT a, b, GROUPING(c + c) FROM t1 GROUP BY a,b,(c + c) WITH ROLLUP;
SELECT GROUPING((SELECT MAX(b) FROM t1)) FROM t1 GROUP BY (SELECT MAX(b) FROM t1) WITH ROLLUP;
SELECT (SELECT MAX(b) FROM t1) FROM t1 GROUP BY (SELECT MAX(b) FROM t1)   WITH ROLLUP HAVING GROUPING((SELECT 1 FROM DUAL))=0;
SELECT (SELECT MAX(b) FROM t1) FROM t1 GROUP BY (SELECT MAX(b) FROM t1)   WITH ROLLUP HAVING GROUPING((SELECT MAX(b) FROM t1))=0;
SELECT 1 WHERE 2 > ALL (SELECT GROUPING(a) FROM t1 GROUP BY a WITH ROLLUP);
SELECT 1 WHERE 1 = ANY (SELECT GROUPING(a) FROM t1 GROUP BY a WITH ROLLUP);
PREPARE ps FROM "SELECT a FROM t1 GROUP BY a WITH ROLLUP HAVING GROUPING(a)=0";
EXECUTE ps;
PREPARE ps FROM "SELECT a FROM t1 GROUP BY a WITH ROLLUP HAVING GROUPING(a)=1";
EXECUTE ps;
PREPARE ps FROM "SELECT GROUPING(a) FROM v GROUP BY a WITH ROLLUP";
EXECUTE ps;
SELECT  MAX(a) FROM t1 WHERE (b) IN (SELECT MIN(t2.b) FROM t1 AS t2 GROUP BY t2.b WITH ROLLUP HAVING GROUPING (t2.b)=0);
SELECT  MAX(a) FROM t1 WHERE (b) IN (SELECT MIN(t2.b) FROM (SELECT b from t1) AS t2 GROUP BY t2.b WITH ROLLUP HAVING GROUPING (t2.b)=0);
WITH qn AS (SELECT a, b, c, GROUPING(a) as grouping_a FROM t1             GROUP BY a,b,c WITH ROLLUP) SELECT * FROM qn;
WITH qn AS (SELECT (SELECT  MAX(a) FROM t1) as field1 FROM t1 GROUP BY field1 WITH ROLLUP HAVING GROUPING(field1)=0) SELECT * FROM qn;
with qn as (SELECT  MAX(a) FROM t1 WHERE (b) IN ( SELECT MIN(t2.b) FROM (SELECT b from t1) AS t2 GROUP BY t2.b WITH ROLLUP HAVING GROUPING (t2.b)=0)) SELECT * FROM qn;
WITH qn AS(SELECT GROUPING((SELECT MAX(b) FROM t1)) as field1            FROM t1 GROUP BY (SELECT MAX(b) FROM t1) WITH ROLLUP) SELECT qn.field1 FROM qn;
SELECT a as Department,b as Employees, SUM(c), GROUPING(a) as GP_A,        GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP;
SELECT a as Department,b as Employees, SUM(c), GROUPING(a) as GP_A,        GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP        HAVING GP_A=1 OR GP_B=1;
SELECT IF(GROUPING(a)=1,'All Departments', a) as Department,        IF(GROUPING(b)=1, 'All Employees', b) as Employees,        SUM(c) as SUM FROM t1 GROUP BY a,b WITH ROLLUP;
SELECT a as Department, b as Employees, SUM(c), GROUPING(a) as GP_A,        GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP;
SELECT a as Department, b as Employees, SUM(c), GROUPING(a) as GP_A,        GROUPING(b) as GP_B FROM t1 GROUP BY a,b WITH ROLLUP        HAVING (GP_A =1 AND GP_B=1) OR (GP_B=1);
PREPARE ps FROM   "SELECT COALESCE(a,'rollup_null') FROM v GROUP BY a WITH ROLLUP";
EXECUTE ps;
DROP PREPARE ps;
SELECT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING i is NOT NULL ORDER BY i+j;
SELECT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) > 10 ORDER BY i;
SELECT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) + 20 < 35 ORDER BY i;
SELECT DISTINCT i, i+j, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING i is NOT NULL ORDER BY i+j;
SELECT DISTINCT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) > 10 ORDER BY i;
SELECT DISTINCT i, GROUPING(i+j), AVG(k) from t1 GROUP BY i,i+j WITH ROLLUP HAVING AVG(k) + 20 < 35 ORDER BY i;
SELECT i, j, AVG(k) FROM t1 GROUP BY i,j WITH ROLLUP ORDER BY GROUPING(i),i,GROUPING(j),j;
SELECT i, j, AVG(k) FROM t1 GROUP BY i,j WITH ROLLUP ORDER BY GROUPING(i),i,GROUPING(j),j LIMIT 5;
SELECT i, j, SUM(k) FROM t1 GROUP BY i,j WITH ROLLUP HAVING i > 10 and j < 1000 ORDER BY GROUPING(i),i,GROUPING(j),j;
SELECT CONCAT(i,':',j) as ij, CONCAT(j,':',i) as ji FROM t1 GROUP BY ij, ji WITH ROLLUP ORDER BY GROUPING(ij),ij,GROUPING(ji),ji;
SELECT i, 'sum' FROM (SELECT i, SUM(j) AS 'sum' FROM t1 GROUP BY i                       WITH ROLLUP ORDER BY GROUPING(i),i) AS tmp WHERE i is NULL;
SELECT i FROM t1 WHERE EXISTS (SELECT i, j, SUM(k) FROM t1 AS t2                                WHERE t1.i=t2.i GROUP BY i,j WITH ROLLUP                                HAVING SUM(k) > 40 ORDER BY GROUPING(i),i,                                GROUPING(j),j);
SELECT a, SUM(a), SUM(a)+1, CONCAT(SUM(a),'x'), SUM(a)+SUM(a), SUM(a)   FROM (SELECT 1 a, 2 b UNION SELECT 2,3 UNION SELECT 5,6 ) d       GROUP BY a WITH ROLLUP ORDER BY GROUPING(a),a;
SELECT i, j, i AS k, COUNT(*) AS count FROM t1 GROUP BY i, j, k WITH ROLLUP ORDER BY GROUPING(i),i, GROUPING(j),j, GROUPING(k),k;
SELECT * FROM (SELECT i, j, SUM(k) FROM t1 GROUP BY i, j WITH ROLLUP                ORDER BY GROUPING(i),i, GROUPING(j),j) as tmp;
SELECT i, j, i+j, AVG(j) over () from t1 GROUP BY i,j WITH ROLLUP HAVING i+j is NULL ORDER BY GROUPING(i);
SELECT i, j, i+j, FIRST_VALUE(i) over () from t1 GROUP BY i,j WITH ROLLUP HAVING i+j is NULL ORDER BY GROUPING(i);
SELECT i, j, i+j, FIRST_VALUE(i) over () from t1 GROUP BY i,j WITH ROLLUP HAVING GROUPING(i) = 1 ORDER BY GROUPING(i);
SELECT i, j, i+j, FIRST_VALUE(i) over () from t1 GROUP BY i,j WITH ROLLUP HAVING 1 + 2 - GROUPING(i) = 2 ORDER BY GROUPING(i);
SELECT i, j, i+j, AVG(j), AVG(j) over () from t1 GROUP BY i,j WITH ROLLUP HAVING GROUPING(j)+AVG(j) > 11 ORDER BY GROUPING(i);
SELECT i,j, SUM(k), GROUPING(i), GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP HAVING GROUPING(i) = 1 OR GROUPING (j) = 1 ORDER BY GROUPING(i),i,GROUPING(j),j;
SELECT DISTINCT GROUPING(i), GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP;
SELECT DISTINCT GROUPING(i), GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP ORDER BY GROUPING(i), GROUPING(j);
SELECT DISTINCT j, GROUPING(j) FROM t1 GROUP BY i,j WITH ROLLUP;
SELECT i, j, AVG(k) FROM t1 GROUP BY i,j+GROUPING(i) WITH ROLLUP;
SELECT GROUPING(table2.col_time) AS field1 FROM t1 AS table1,t1 as table2   WHERE table2.pk = 1 GROUP BY table2.col_time WITH ROLLUP   ORDER BY GROUPING(table2.col_time);
SELECT (((@e:=`b`)) NOT BETWEEN 0x0b5f09 AND (CHAR(md5(@pub1),   (CONNECTION_ID()+LEAD(5225.750000,110) RESPECT NULLS OVER(ORDER BY b, a)))))   FROM t GROUP BY b,a WITH ROLLUP;
SELECT (a+1) IS NULL, GROUPING(a+1) FROM t1 GROUP BY a+1 WITH ROLLUP;
SELECT a AS f1, 'w' AS f2 FROM t GROUP BY f1, f2 WITH ROLLUP HAVING GROUPING(f2)=1;
SELECT a AS f1, 'w' AS f2 FROM t GROUP BY f1, f2 WITH ROLLUP HAVING GROUPING(f2)=0;
SELECT a AS f1, 'w' AS f2 FROM t GROUP BY f1, f2 WITH ROLLUP HAVING GROUPING(f1)=0;
PREPARE ps FROM "SELECT RANK() OVER (ORDER BY a) FROM t1 GROUP BY a WITH ROLLUP";
CREATE PROCEDURE p1() BEGIN   DECLARE v1 DOUBLE(10,3);
END;// DELIMITER ;// CALL p1();
hoho huhu$nl$nl);
, foo );
echo "WL6369 Explain for Connection";
while ($1) {   dec $1;
} ANALYZE TABLE t1;
WHERE i<100 AND j<10             ORDER BY i LIMIT 5;
while ($n) {        VALUES ($n, $n, '$n', '$n');
dec $n;
} SET   optimizer_trace = "enabled=on",   optimizer_trace_max_mem_size = 1000000,   end_markers_in_json = ON;
while ($n) {        VALUES ($n+1+10, $n, '$n', '$n');
dec $n;
} SET optimizer_switch = "prefer_ordering_index=on";
EXECUTE pse USING @client_id;
EXECUTE ps USING @client_id;
DEALLOCATE PREPARE ps;
DEALLOCATE PREPARE pse;
EXECUTE pse USING @client_id;
EXECUTE ps USING @client_id;
DEALLOCATE PREPARE ps;
DEALLOCATE PREPARE pse;
ALTER DEFINER=s@1 VIEW v1 AS SELECT * FROM t1;
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
connect (con1, localhost, root,,);
create function f1() returns int begin   declare j int;   select i from t1 where i = 1 into j;   return j; end|
create function f2() returns int begin   declare k int;   select i from t1 where i = 1 into k;   insert into t2 values (k + 5);   return 0; end|
create function f3() returns int begin   return (select i from t1 where i = 3); end|
create function f4() returns int begin   if (select i from t1 where i = 3) then     return 1;   else     return 0;   end if; end|
create function f5() returns int begin   insert into t2 values ((select i from t1 where i = 1) + 5);   return 0; end|
create function f6() returns int begin   declare k int;   select i from v1 where i = 1 into k;   return k; end|
create function f7() returns int begin   declare k int;   select j from v2 where j = 1 into k;   return k; end|
create function f8() returns int begin   declare k int;   select i from v1 where i = 1 into k;   insert into t2 values (k+5);   return k; end|
create function f9() returns int begin   update v2 set j=j+10 where j=1;   return 1; end|
create function f10() returns int begin   return f1(); end|
create function f11() returns int begin   declare k int;   set k= f1();   insert into t2 values (k+5);   return k; end|
create function f12(p int) returns int begin   insert into t2 values (p);   return p; end|
create function f13(p int) returns int begin   return p; end|
create procedure p2(inout p int) begin   select i from t1 where i = 1 into p; end|
create function f14() returns int begin   declare k int;   call p2(k);   insert into t2 values (k+5);   return k; end|
create function f15() returns int begin   declare k int;   call p2(k);   return k; end|
create trigger t4_bi before insert on t4 for each row begin   declare k int;   select i from t1 where i=1 into k;   set new.l= k+1; end|
create trigger t4_bu before update on t4 for each row begin   if (select i from t1 where i=1) then     set new.l= 2;   end if; end|
create trigger t4_bd before delete on t4 for each row begin   if !(select i from v1 where i=1) then     signal sqlstate '45000';   end if; end|
create trigger t5_bi before insert on t5 for each row begin   set new.l= f1()+1; end|
create trigger t5_bu before update on t5 for each row begin   declare j int;   call p2(j);   set new.l= j + 1; end|
disconnect con1;
connect (con1,localhost,root,,test,,);
disconnect con1;
select insert(_utf32 0x000000610000006200000063,10,2,_utf32 0x000000640000006500000066);
select insert(_utf32 0x000000610000006200000063,1,2,_utf32 0x000000640000006500000066);
prepare stmt1 from @str2;
execute stmt1 using @ivar;
prepare stmt from 'select utext from t1 where utext like ?';
execute stmt using @param1;
execute stmt using @param1;
deallocate prepare stmt;
prepare stmt from 'select utext from t1 where utext like ?';
execute stmt using @param1;
execute stmt using @param1;
deallocate prepare stmt;
insert into t1 values (repeat('a',333)), (repeat('b',333));
CREATE TABLE t1 AS SELECT repeat('a',2) as s1 LIMIT 0;
SELECT id, CHAR_LENGTH(GROUP_CONCAT(body)) AS l FROM (SELECT 'a' AS id, REPEAT('foo bar', 100) AS body UNION ALL SELECT 'a' AS id, REPEAT('bla bla', 100) AS body) t1 GROUP BY id ORDER BY l DESC;
DO REPLACE(CONVERT(1 USING utf32),BIT_XOR(1),SHA1(@d));
do lcase(ltrim(from_unixtime(0,' %T ')));
do _cp852 "" <= lcase(trim(leading 1 from 12222)) not between '1' and '2';
do upper(substring(1.111111111111111111 from '2n'));
do nullif(1,'-' between lcase(right(11111111," 7,]" ))and '1');
do upper(right(198039009115594390000000000000000000000.000000,35));
do concat('111','11111111111111111111111111',           substring_index(uuid(),0,1.111111e+308));
do replace(ltrim(from_unixtime(0,' %T ')), '0', '1');
do insert(ltrim(from_unixtime(0,' %T ')), 2, 1, 'hi');
do replace(ltrim(from_unixtime(0,' %T ')), '0', '1');
connect(con1,localhost,kristofer,secret,,);
disconnect con1;
connect(con2,localhost,kristofer,secret2,,);
SHOW GRANTS FOR 'kristofer'@'localhost';
change_user kristofer2,secret2;
disconnect con2;
connect(con3,localhost,kristofer,,,);
SHOW GRANTS FOR 'kristofer'@'localhost';
disconnect con3;
connect(con4,127.0.0.1,kristofer,,,);
connect(con3,localhost,kristofer,awesomeness,,);
SHOW GRANTS FOR 'kristofer'@'localhost';
disconnect con3;
RENAME TABLE t1 TO `t2_............................end`;
RENAME TABLE `t2_............................end` to t1;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
LOCK TABLES test_concurrent_insert READ LOCAL;
UNLOCK TABLES;
LOCK TABLES test_concurrent_insert WRITE;
UNLOCK TABLES;
"1" "4" "3 CHECK TABLE test_repair_table3;
"1","101","IBM" CHECK TABLE test_repair_table5;
"1","101","IBM" FLUSH TABLES;
"1","101","IBM" FLUSH TABLES;
1,"string" 2","string" 3,"string" 1,"string" "2",string" 3,"string" check table bug22080_2;
1, 1E-2 -2E2, .9 -10E-1, -.9 -1, -100.1 1a, -2b repair table t1;
lock tables t1 read;
connect (con1,localhost,root,,);
unlock tables;
1,"integer sans quotes" 1,string sans quotes 1,quotes"in between" strings  "1",Integer with quote and string with no quote 1,"escape sequence \n \" \\ \r \a within quotes" 1,escape sequence \n \" \\ \r \a without quotes SELECT * FROM t1;
1,"string only at the beginning quotes SELECT * FROM t1;
1,string with only ending quotes" SELECT * FROM t1;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
connect(con2,localhost,bernt,secret,,);
disconnect con2;
if (`select locate('firstmatch', @@optimizer_switch) > 0`)  {     set optimizer_switch='firstmatch=off';
} if (`select locate('loosescan', @@optimizer_switch) > 0`)  {     set optimizer_switch='loosescan=off';
} drop table if exists t1;
if (`select locate('materialization', @@optimizer_switch) > 0`)  {     set optimizer_switch='materialization=off';
} explain select * from t1 where a in (select a from t11) order by 1, 2, 3 limit 1;
create procedure p_verify_reprepare_count(expected int) begin   declare old_reprepare_count int default @reprepare_count;   select variable_value from   performance_schema.session_status where   variable_name='com_stmt_reprepare'   into @reprepare_count;   if old_reprepare_count + expected <> @reprepare_count then     select concat("Expected: ", expected,                    ", actual: ", @reprepare_count - old_reprepare_count)     as "ERROR";   else     select '' as "SUCCESS";   end if; end|
prepare stmt from "select a from t1";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt1 from "truncate t1";
prepare stmt2 from "select 1 as my_column from t1";
prepare stmt3 from "select 1 as my_column from (select * from t1) as t2";
prepare stmt4 from "select 1 as my_column from (select 1) as t2 where exists (select 1 from t1)";
prepare stmt5 from "select * from (select 1 as b) as t2, t1";
prepare stmt6 from "select * from t1 union all select 1.5";
prepare stmt7 from "select 1 as my_column union all select 1 from t1";
prepare stmt8 from "insert into t1 values(1),(2)";
prepare stmt9 from "update t1 set a = 3 where a = 2";
prepare stmt10 from "delete from t1 where a = 1";
while ($num) {    dec $num;
} call p_verify_reprepare_count(0);
while ($num) {    dec $num;
} call p_verify_reprepare_count(0);
while ($num) {    dec $num;
} create table t1 (a int, b int);
prepare stmt1 from "select a,b from t1";
prepare stmt2 from "select a,b from (select * from t1) as t1";
prepare stmt3 from "select * from t1 where a = 2 and b = 2";
prepare stmt4 from "select * from t2 where (a,b) in (select * from t1)";
prepare stmt5 from "select * from t1 union select * from t2";
prepare stmt6 from "select * from t1 union all select * from t2";
prepare stmt7 from "insert into t1 set a = 4, b = 4";
prepare stmt8 from "insert into t1 select * from t2";
while ($num) {    dec $num;
} call p_verify_reprepare_count(0);
while ($num) {    call p_verify_reprepare_count(1);
dec $num;
} while ($num) {    call p_verify_reprepare_count(1);
dec $num;
} call p_verify_reprepare_count(1);
while ($num) {    dec $num;
} drop table t1;
query_get_value(explain select avg(a) from t1, possible_keys, 1);
query_get_value(explain select avg(a) from t1, Extra, 1);
prepare stmt from "select avg(a) from t1";
execute stmt;
execute stmt;
query_get_value(explain select avg(a) from t1, possible_keys, 1);
query_get_value(explain select avg(a) from t1, Extra, 1);
execute stmt;
execute stmt;
query_get_value(explain select avg(a) from t1, possible_keys, 1);
query_get_value(explain select avg(a) from t1, Extra, 1);
execute stmt;
execute stmt;
deallocate prepare stmt;
prepare stmt from "insert into t1 values(1)";
execute stmt;
execute stmt;
execute stmt;
execute stmt;
deallocate prepare stmt;
create procedure p1() begin   drop temporary table t1; end|
create function f1() returns int begin   call p1();   return 1; end|
prepare stmt from "select f1() as my_column, a from t1";
execute stmt;
prepare stmt from "select a, f1() as my_column from t1";
execute stmt;
prepare stmt from "select f1() as my_column, count(*) from t1";
execute stmt;
prepare stmt from "select count(*), f1() as my_column from t1";
execute stmt;
prepare stmt from "select 1 as my_column from (select 1) as t2                    where exists (select f1() from t1)";
execute stmt;
execute stmt;
prepare stmt from "select f1()";
execute stmt;
execute stmt;
deallocate prepare stmt;
create procedure p1() begin   drop temporary table t1;   create temporary table t1 as select 'abc' as a; end|
create function f1() returns int begin   call p1();   return 1; end|
prepare stmt from "select count(*), f1() as my_column from t1";
execute stmt;
deallocate prepare stmt;
prepare stmt from "call p1";
execute stmt;
create procedure mysqltest.p1() begin    drop schema mysqltest;    create schema mysqltest; end|
execute stmt;
execute stmt;
deallocate prepare stmt;
if (0) { create temporary table t1 as select 1 as a;
prepare stmt from "select 1 from t1 having count(*) = f1()";
execute stmt;
deallocate prepare stmt;
} drop temporary table if exists t1;
connect(root_con,localhost,root,,mysql);
disconnect root_con;
remove_file $MYSQLD_LOG;
remove_file $BOOTSTRAP_SQL;
SELECT POSITION(x'44' IN _utf8mb4'abcdef');
SELECT POSITION(x'64' IN _utf8mb4'abcdef');
SELECT POSITION(x'ff' IN _utf8mb4'abcdef');
SELECT CONCAT('"',CONCAT_WS('";"',repeat('a',60),repeat('b',60),repeat('c',60),repeat('d',100)), '"');
select insert('txs',2,1,'hi'),insert('is ',4,0,'a'),insert('txxxxt',2,4,'es');
select repeat('monty',5),concat('*',space(5),'*');
select insert("aa",100,1,"b"),insert("aa",1,3,"b"),left("aa",-1),substring("a",1,2);
select length(repeat("a",100000000)),length(repeat("a",1000*64));
select position("0" in "baaa" in (1)),position("0" in "1" in (1,2,3)),position("sql" in ("mysql"));
select position(("1" in (1,2,3)) in "01");
select length(repeat("a",65500)),length(concat(repeat("a",32000),repeat("a",32000))),length(replace("aaaaa","a",concat(repeat("a",10000)))),length(insert(repeat("a",40000),1,30000,repeat("b",50000)));
select length(repeat("a",1000000)),length(concat(repeat("a",32000),repeat("a",32000),repeat("a",32000))),length(replace("aaaaa","a",concat(repeat("a",32000)))),length(insert(repeat("a",48000),1,1000,repeat("a",48000)));
select domain from t1 where concat('@', trim(leading '.' from concat('.', domain))) = '@hello.de';
select domain from t1 where concat('@', trim(leading '.' from concat('.', domain))) = '@test.de';
select POSITION(_latin1'B' IN _latin1'abcd' COLLATE latin1_bin);
select POSITION(_latin1'B' COLLATE latin1_bin IN _latin1'abcd');
select POSITION(_latin1'B' COLLATE latin1_general_ci IN _latin1'abcd' COLLATE latin1_bin);
select _latin1'B' between _latin1'a' and _latin1'c';
select _latin1'B' collate latin1_bin between _latin1'a' and _latin1'c';
select _latin1'B' between _latin1'a' collate latin1_bin and _latin1'c';
select _latin1'B' between _latin1'a' and _latin1'c' collate latin1_bin;
select _latin2'B' between _latin1'a' and _latin1'b';
select _latin1'B' between _latin2'a' and _latin1'b';
select _latin1'B' between _latin1'a' and _latin2'b';
select _latin1'B' collate latin1_general_ci between _latin1'a' collate latin1_bin and _latin1'b';
select _latin1'B' in (_latin1'a',_latin1'b');
select _latin1'B' collate latin1_bin in (_latin1'a',_latin1'b');
select _latin1'B' in (_latin1'a' collate latin1_bin,_latin1'b');
select _latin1'B' in (_latin1'a',_latin1'b' collate latin1_bin);
select _latin2'B' in (_latin1'a',_latin1'b');
select _latin1'B' in (_latin2'a',_latin1'b');
select _latin1'B' in (_latin1'a',_latin2'b');
select _latin1'B' COLLATE latin1_general_ci in (_latin1'a' COLLATE latin1_bin,_latin1'b');
select _latin1'B' COLLATE latin1_general_ci in (_latin1'a',_latin1'b' COLLATE latin1_bin);
select collation(trim(LEADING _latin2' ' FROM _latin2'a')), coercibility(trim(LEADING _latin2'a' FROM _latin2'a'));
select collation(trim(TRAILING _latin2' ' FROM _latin2'a')), coercibility(trim(TRAILING _latin2'a' FROM _latin2'a'));
select collation(trim(BOTH _latin2' ' FROM _latin2'a')), coercibility(trim(BOTH _latin2'a' FROM _latin2'a'));
select collation(repeat(_latin2'a',10)), coercibility(repeat(_latin2'a',10));
select collation(insert(_latin2'abcd',2,3,_latin2'ef')), coercibility(insert(_latin2'abcd',2,3,_latin2'ef'));
create table t1 charset latin1 select   bin(130),   oct(130),   conv(130,16,10),   hex(130),   char(130),   format(130,10),   left(_latin2'a',1),   right(_latin2'a',1),    lcase(_latin2'a'),    ucase(_latin2'a'),   substring(_latin2'a',1,1),   concat(_latin2'a',_latin2'b'),   lpad(_latin2'a',4,_latin2'b'),   rpad(_latin2'a',4,_latin2'b'),   concat_ws(_latin2'a',_latin2'b'),   make_set(255,_latin2'a',_latin2'b',_latin2'c'),   export_set(255,_latin2'y',_latin2'n',_latin2' '),   trim(_latin2' a '),   ltrim(_latin2' a '),   rtrim(_latin2' a '),   trim(LEADING _latin2' ' FROM _latin2' a '),   trim(TRAILING _latin2' ' FROM _latin2' a '),   trim(BOTH _latin2' ' FROM _latin2' a '),   repeat(_latin2'a',10),   reverse(_latin2'ab'),   quote(_latin2'ab'),   soundex(_latin2'ab'),   substring(_latin2'ab',1),   insert(_latin2'abcd',2,3,_latin2'ef'),   replace(_latin2'abcd',_latin2'b',_latin2'B') ;
explain select insert('txs',2,1,'hi');
select trim(null from 'kate') as "must_be_null";
select trim('xyz' from null) as "must_be_null";
select trim(leading NULL from 'kate') as "must_be_null";
select trim(trailing NULL from 'xyz') as "must_be_null";
EXPLAIN SELECT s FROM t1 WHERE TRIM('y' FROM s) > 'ab';
EXPLAIN SELECT s FROM t1 WHERE TRIM(LEADING 'y' FROM s) > 'ab';
EXPLAIN SELECT s FROM t1 WHERE TRIM(TRAILING 'y' FROM s) > 'ab';
EXPLAIN SELECT s FROM t1 WHERE TRIM(BOTH 'y' FROM s) > 'ab';
set @dec=5;
select format(pi(), @dec);
select insert('hello', -1, 1, 'hi');
select insert('hello', -4294967295, 1, 'hi');
select insert('hello', 4294967295, 1, 'hi');
select insert('hello', -4294967296, 1, 'hi');
select insert('hello', 4294967296, 1, 'hi');
select insert('hello', -4294967297, 1, 'hi');
select insert('hello', 4294967297, 1, 'hi');
select insert('hello', -18446744073709551615, 1, 'hi');
select insert('hello', 18446744073709551615, 1, 'hi');
select insert('hello', -18446744073709551616, 1, 'hi');
select insert('hello', 18446744073709551616, 1, 'hi');
select insert('hello', -18446744073709551617, 1, 'hi');
select insert('hello', 18446744073709551617, 1, 'hi');
select insert('hello', 1, -1, 'hi');
select insert('hello', 1, -4294967295, 'hi');
select insert('hello', 1, 4294967295, 'hi');
select insert('hello', 1, -4294967296, 'hi');
select insert('hello', 1, 4294967296, 'hi');
select insert('hello', 1, -4294967297, 'hi');
select insert('hello', 1, 4294967297, 'hi');
select insert('hello', 1, -18446744073709551615, 'hi');
select insert('hello', 1, 18446744073709551615, 'hi');
select insert('hello', 1, -18446744073709551616, 'hi');
select insert('hello', 1, 18446744073709551616, 'hi');
select insert('hello', 1, -18446744073709551617, 'hi');
select insert('hello', 1, 18446744073709551617, 'hi');
select insert('hello', -1, -1, 'hi');
select insert('hello', -4294967295, -4294967295, 'hi');
select insert('hello', 4294967295, 4294967295, 'hi');
select insert('hello', -4294967296, -4294967296, 'hi');
select insert('hello', 4294967296, 4294967296, 'hi');
select insert('hello', -4294967297, -4294967297, 'hi');
select insert('hello', 4294967297, 4294967297, 'hi');
select insert('hello', -18446744073709551615, -18446744073709551615, 'hi');
select insert('hello', 18446744073709551615, 18446744073709551615, 'hi');
select insert('hello', -18446744073709551616, -18446744073709551616, 'hi');
select insert('hello', 18446744073709551616, 18446744073709551616, 'hi');
select insert('hello', -18446744073709551617, -18446744073709551617, 'hi');
select insert('hello', 18446744073709551617, 18446744073709551617, 'hi');
select repeat('hello', -1);
select repeat('hello', -4294967295);
select repeat('hello', 4294967295);
select repeat('hello', -4294967296);
select repeat('hello', 4294967296);
select repeat('hello', -4294967297);
select repeat('hello', 4294967297);
select repeat('hello', -18446744073709551615);
select repeat('hello', 18446744073709551615);
select repeat('hello', -18446744073709551616);
select repeat('hello', 18446744073709551616);
select repeat('hello', -18446744073709551617);
select repeat('hello', 18446744073709551617);
select repeat('a', cast(2 as unsigned int));
SELECT REPEAT( '#', tire ) AS A,        REPEAT( '#', tire % 999 ) AS B, tire FROM `t1`;
SELECT REPEAT('0', CAST(0 AS UNSIGNED));
SELECT REPEAT('0', -2);
SELECT REPEAT('0', 2);
DO UNHEX(-1);
DO UNHEX(-182680438);
DO UNHEX(-2251799813685249);
SELECT INSERT('abc', 3, 3, '1234');
SELECT INSERT('abc', 4, 3, '1234');
SELECT INSERT('abc', 5, 3, '1234');
SELECT INSERT('abc', 6, 3, '1234');
SELECT '1' IN ('1', SUBSTRING(-9223372036854775809, 1));
SELECT insert( substring_index( 'a', 'a', 'b' ), 1, 0, 'x' );
SELECT REPEAT('1', DAY(FROM_UNIXTIME(-1)));
CREATE TABLE t1 charset utf8mb4 SELECT SUBSTRING('1', DAY(FROM_UNIXTIME(-1))) AS f1,        LEFT('1', DAY(FROM_UNIXTIME(-1))) AS f2,        RIGHT('1', DAY(FROM_UNIXTIME(-1))) AS f3,        REPEAT('1', DAY(FROM_UNIXTIME(-1))) AS f4,        RPAD('hi', DAY(FROM_UNIXTIME(-1)),'?') AS f5,        LPAD('hi', DAY(FROM_UNIXTIME(-1)),'?') AS f6;
SELECT ((+0) IN ((0b111111111111111111111111111111111111111111111111111),(rpad(1.0,2048,1)), (32767.1)));
SELECT ((127.1) not in ((rpad(1.0,2048,1)),(''),(-1.1)));
do format(rpad('111111111.1',              1111111,              '999999999999999999999999999999999999999999'),0,'be_BY') ;
DO round(   concat( (     coalesce( (       ST_linefromwkb('2147483648',                   -b'1111111111111111111111111111111111111111111')),       ( convert('[.DC2.]',decimal(30,30)) ),       bit_count('')     ) ),     ( lpad( ( elt('01','}:K5')),               sha1('P'),               ( ( select '-9223372036854775808.1' > all (select '')))           )     )   ) );
SET @@global.max_allowed_packet:= @tmp_max;
while($1) {   dec $1;
} CREATE TABLE t1 (a VARBINARY(64));
SELECT LENGTH(TO_BASE64(REPEAT('a', @@max_allowed_packet-10)));
SELECT CHAR_LENGTH(EXPORT_SET(1,1,1,REPEAT(1,100000000)));  SET @@global.max_allowed_packet:= @tmp_max;
PREPARE stmt FROM "SELECT COLLATION(space(2))";
EXECUTE stmt;
EXECUTE stmt;
select t1.a as str, length(t1.a) as str_length, t2.a as pos, t2.a + 10 as length, insert(t1.a, t2.a, t2.a + 10, '1234567') as 'insert' from t1, t2;
SELECT 1 FROM t1 GROUP BY insert(a,'1','11','1');
SELECT insert(a,1,1,1) FROM t1;
do concat('a',concat_ws('a', 0x2859, 'a' ,                         trim(period_add('a',1) from (1&''))                         )           );
select length(repeat("",1)) as a;
select length(repeat("",1024*1024*1024)) as a;
select length(repeat("1",1024*1024)) as a;
select length(repeat("1",1024*1024*1024)) as a;
SET @@global.max_allowed_packet:= DEFAULT;
do rpad(_utf16"33",1073741826,_latin1"44");
SELECT length(repeat(_utf8mb4 0xE29883, 21844)) AS data;
SELECT length(data) AS len FROM ( SELECT repeat(_utf8mb4 0xE29883, 21844) AS data ) AS sub;
SELECT length(repeat(_utf8mb4 0xE29883, 21846)) AS data;
SELECT length(data) AS len FROM ( SELECT repeat(_utf8mb4 0xE29883, 21846) AS data ) AS sub;
SELECT COUNTRY FROM t1  WHERE trim(leading 'A' FROM  COUNTRY) = 'ustralia';
SELECT  COUNTRY  FROM t1  WHERE  trim(trailing 'a' FROM COUNTRY)= 'Australi';
SELECT COUNTRY FROM t1  WHERE trim(leading  'A' FROM COUNTRY) = 'ustralia'     AND trim(trailing 'a' FROM COUNTRY) = 'Australi';
SELECT c1 <=  REPEAT( SUBSTR( UPPER('Rdlpikti') , 1 , 2 ), 8 ) FROM t1;
SELECT * FROM t1 WHERE c1 <=  REPEAT( SUBSTR( UPPER('Rdlpikti') , 1 , 2 ), 8);
SELECT * FROM t1 WHERE c1 <=  REPEAT( SUBSTR( UPPER('Rdlpikti') , 1 , 2 ), 8);
SELECT BIN(MID(REPEAT('b',64),21,229));
SELECT BIN(RIGHT(REPEAT('b',64),30));
SELECT BIN(SUBSTRING(REPEAT('b',64),9));
SELECT OCT(LEFT(REPEAT('b',64),15));
do from_base64(aes_encrypt(right(cast((0x5d44f4d736397d92c8267c12)as decimal),1),                         rand(to_days('2028-12-04 15:50:01.284969'))));
do from_base64(cast(right(11,1)as binary(24)));
do convert(inet_aton(cast(left(-1,1)as binary(30))) using utf8);
do from_base64(cast((left(collation(4097),((repeat('1',32))or((-18772)))))                     as binary(40)));
do from_base64(cast((mid(17653,row('-688:20:12.162697',(null)) >= row(('*.)$'),(0xc254b6)),1))as binary(34)));
do from_base64(cast((mid(uuid(),20,64)) as binary(55)));
set @e:=_latin1'77';
do inet_aton(aes_encrypt(left(@e,1),5));
CREATE PROCEDURE sub1(id CHAR(10) CHARACTER SET utf8) BEGIN SELECT * FROM view1 WHERE table_name=id COLLATE utf8_tolower_ci;
END | DELIMITER ;| CALL sub1('t1');
select insert(null,2,1,'hi'),insert('txs',null,1,'hi');
select insert('txs',2,null,'hi'),insert('txs',2,1,null);
select insert('txs',null,null,'hi'),insert(null,null,null,null);
SELECT REPEAT(0x1111, 40000000) >> 1;
SELECT (~(REPEAT(0xb822, 0x5C9C380)));
connect (con1,localhost,root,,);
do concat(export_set(1,1,repeat('a',31),' $',213));
disconnect con1;
CREATE PROCEDURE proc (ofs INT, count INT) BEGIN   DECLARE i INT DEFAULT ofs;
WHILE i < count DO     SELECT i AS i;
IF LOWER(CHAR(i USING utf8) COLLATE utf8_tolower_ci) !=        LOWER(CHAR(i USING utf8mb4) COLLATE utf8mb4_0900_as_ci) THEN       SELECT i AS 'found funny character';
END IF;
END WHILE;
END| DELIMITER ;| CALL proc(51390, 51394);
connect (con1,localhost,root,,);
SELECT CONCAT('"',CONCAT('";"',repeat('a',60),                         repeat('b',60),                         repeat('c',60),                         repeat ('d',100)),'"');
SELECT CONCAT('"',CONCAT_WS('";"',repeat('a',60),                            repeat('b',60),                            repeat('c',60),                            repeat ('d',100)),'"');
SELECT CONCAT_WS('"',CONCAT_WS('";"',repeat('a',60),                               repeat('b',60),                               repeat('c',60),                               repeat ('d',100)),'"');
SELECT CONCAT('"',CONCAT('";"',repeat('a',60),                         repeat('b',60),                         repeat('c',60),                         repeat ('d',100)),'"');
SELECT CONCAT('"',CONCAT_WS('";"',repeat('a',60),                            repeat('b',60),                            repeat('c',60),                            repeat ('d',100)),'"');
SELECT CONCAT_WS('"',CONCAT_WS('";"',repeat('a',60),                               repeat('b',60),                               repeat('c',60),                               repeat ('d',100)),'"');
disconnect con1;
do repeat(row_count()  ,((-9223372036854775808 )<<('{ }'  ))  );
do ((repeat(1,9223372036854775808))or(convert((0x6d5b5d8d)using dec8)));
SELECT HEX(LPAD('', 42, TRIM(BOTH c1 FROM x'ff'))) FROM t1;
SELECT HEX(LPAD('', 42, TRIM(x'ffff' FROM c1))) FROM t1;
SELECT TRIM(BOTH x'f0' FROM _utf8mb4 x'F09F8DA3F09F8DA3');
SELECT TRIM(BOTH x'F09F8DA3' FROM _utf8mb4 x'F09F8DA3F09F8DA3');
SELECT TRIM(_latin2 x'a3' from _latin1 "hello");
SELECT TRIM(leading _utf8mb4 x'F09F8DA3' from _gb18030 x'9439B9376181308B33');
DO INSERT(1, 1, 1, CAST(1 AS DECIMAL(1,3)));
DO CONVERT( NULLIF( @a , 'c' ) USING BINARY);
SELECT INSERT(1, 1, 2, _utf8mb4 x'E4B8ADE69687');
remove_file $file;
do crc32(char(1.134475e+308));
SELECT INSERT(a, 1, 1, x'ff') FROM t1;
SELECT INSERT('a', 1, 1, YEAR(UNHEX('w')));
DO USER() in (COERCIBILITY(@c),  CONVERT(LAST_VALUE(FROM_UNIXTIME(1536999169)) OVER() USING utf32));
DO ST_ISVALID(INSTR(9223372036854775806 ,0x46bc299f));
DO ST_SRID(LOCATE(0x58ed0b8e,8,135));
DO NOT CAST(UTC_TIME AS CHAR(2877246026) CHARACTER SET ujis);
DO REPEAT(LAST_INSERT_ID(''), 4294967295);
DO REPEAT(LAST_INSERT_ID(''), 0x96e4ed7e70a7fec7f11572c8980a);
CREATE VIEW v AS SELECT REPEAT('x', 1 NOT IN (0)) AS c;
CREATE TABLE at(_bin binary(16),                 _vbn varbinary(16),                 _tbl tinyblob,                 _ttx tinytext,                 _blb blob);
SELECT bin_to_uuid(_bin), bin_to_uuid(_vbn), bin_to_uuid(_tbl), bin_to_uuid(_ttx), bin_to_uuid(_blb) FROM at;
EVAL $query;
EVAL CREATE TABLE t3 AS $query;
INSERT into at(_bin,_blb) VALUES('c8eb4b15cb0948bb','c8eb4b15cb0948bb');
CREATE TABLE t3 AS SELECT hex('c8eb4b15cb0948bb'),hex(_bin),hex(_blb) FROM at;
CREATE TABLE t3 AS SELECT unhex(_bin) FROM at;
SELECT bin_to_uuid(x'');
SELECT bin_to_uuid(x'', true);
PREPARE s FROM "SELECT bin_to_uuid(x'7f9d04ae61b34468ac798ffcc984ab68',true)";
EXECUTE s;
EXECUTE s;
PREPARE s2 FROM "SELECT bin_to_uuid(uuid_to_bin('{12345678-1234-5678-1234-567812345678}', true), true)";
EXECUTE s2;
EXECUTE s2;
exec $MYSQL test -e "SELECT length(attr_value) > 0 AS must_be_non_zero FROM performance_schema.session_connect_attrs WHERE attr_name = 'os_user' AND PROCESSLIST_ID=CONNECTION_ID()";
SET @KEYS=REPEAT('c', 16);
SET @ENCSTR=REPEAT('d', 256);
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1;
SET @KEYS=RANDOM_BYTES(1);
SET @KEYS=RANDOM_BYTES(1024);
SET @KEYS='helloworld';
SET @ENCSTR=REPEAT('K',100);
select AES_ENCRYPT(@ENCSTR, @KEYS, @IV)=AES_ENCRYPT(@ENCSTR, @KEYS, @IV1);
SET @KEYS='helloworld1234567890';
SET @ENCSTR=REPEAT('J',255);
INSERT INTO t1 values(AES_ENCRYPT(@ENCSTR, @KEYS, @IV));
SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1;
SELECT COALESCE (AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR,0) FROM t1;
SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1;
SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1;
SHOW GRANTS FOR 'kristofer'@'localhost';
SHOW GRANTS FOR 'kristofer'@'localhost';
connect(con4,127.0.0.1,kristofer,,,);
call mtr.add_suppression("The table 't1' is full");
while ($1) {   INSERT INTO t1 SET b=repeat('a',200);
dec $1;
} DELETE FROM t1 WHERE a=1 or a=5;
INSERT INTO t1 SET b=repeat('a',600);
UPDATE t1 SET b=repeat('a', 800) where a=10;
INSERT INTO t1 SET b=repeat('a',400);
UPDATE t1 SET b=repeat('a', 600) where a=11;
connect (con1,localhost,mysqltest_u1,,);
disconnect con1;
call mtr.add_suppression("The plugin .* used to authenticate user .* is not loaded. Nobody can currently login using this account");
call mtr.add_suppression("User entry .* has an empty plugin value. The user will be ignored and no one can login with this user anymore.");
call mtr.add_suppression("Some of the user accounts with SUPER privileges were disabled because of empty mysql.user.plugin value.");
call mtr.add_suppression("Found an entry in the 'role_edges' table with unknown authorization ID '`r3`@`%`'");
SHOW GRANTS FOR ''@'';
SONAME "$TESTUDFSERVICES";
show function code almost_empty;
create procedure code_sample(x int, out err int, out nulls int) begin   declare count int default 0;   set nulls = 0;   begin     declare c cursor for select name from t1;     declare exit handler for not found close c;     open c;     loop       begin         declare n varchar(20);         declare continue handler for sqlexception set err=1;         fetch c into n;         if isnull(n) then           set nulls = nulls + 1; 	else           set count = count + 1;           update t2 set idx = count where name=n;         end if;       end;     end loop;   end;   select t.name, t.idx from t2 t order by idx asc; end//
create procedure sudoku_solve(p_naive boolean, p_all boolean)   deterministic   modifies sql data begin   drop temporary table if exists sudoku_work, sudoku_schedule;   create temporary table sudoku_work   (     `row` smallint not null,     col smallint not null,     dig smallint not null,     cnt smallint,     key using btree (cnt),     key using btree (`row`),     key using btree (col),     unique key using hash (`row`,col)   );   create temporary table sudoku_schedule   (     idx int not null auto_increment primary key,     `row` smallint not null,     col smallint not null   );   call sudoku_init();   if p_naive then     update sudoku_work set cnt = 0 where dig = 0;   else     call sudoku_count();   end if;   insert into sudoku_schedule (`row`,col)     select `row`,col from sudoku_work where cnt is not null order by cnt desc;   begin     declare v_scounter bigint default 0;     declare v_i smallint default 1;     declare v_dig smallint;     declare v_schedmax smallint;     select count(*) into v_schedmax from sudoku_schedule;    more:      loop     begin       declare v_tcounter bigint default 0;      sched:       while v_i <= v_schedmax do       begin         declare v_row, v_col smallint;         select `row`,col into v_row,v_col from sudoku_schedule where v_i = idx;         select dig into v_dig from sudoku_work           where v_row = `row` and v_col = col;         case v_dig         when 0 then           set v_dig = 1;           update sudoku_work set dig = 1             where v_row = `row` and v_col = col;         when 9 then           if v_i > 0 then             update sudoku_work set dig = 0               where v_row = `row` and v_col = col;             set v_i = v_i - 1;             iterate sched;           else             select v_scounter as 'Solutions';             leave more;           end if;         else           set v_dig = v_dig + 1;           update sudoku_work set dig = v_dig             where v_row = `row` and v_col = col;         end case;         set v_tcounter = v_tcounter + 1;         if not sudoku_digit_ok(v_row, v_col, v_dig) then           iterate sched;         end if;         set v_i = v_i + 1;       end;       end while sched;       select dig from sudoku_work;       select v_tcounter as 'Tests';       set v_scounter = v_scounter + 1;       if p_all and v_i > 0 then         set v_i = v_i - 1;       else         leave more;       end if;     end;     end loop more;   end;   drop temporary table sudoku_work, sudoku_schedule; end//
CREATE PROCEDURE proc_19194_simple(i int) BEGIN   DECLARE str CHAR(10);   CASE i     WHEN 1 THEN SET str="1";     WHEN 2 THEN SET str="2";     WHEN 3 THEN SET str="3";     ELSE SET str="unknown";   END CASE;   SELECT str; END|
CREATE PROCEDURE proc_19194_searched(i int) BEGIN   DECLARE str CHAR(10);   CASE     WHEN i=1 THEN SET str="1";     WHEN i=2 THEN SET str="2";     WHEN i=3 THEN SET str="3";     ELSE SET str="unknown";   END CASE;   SELECT str; END|
CREATE PROCEDURE proc_19194_nested_1(i int, j int) BEGIN   DECLARE str_i CHAR(10);   DECLARE str_j CHAR(10);   CASE i     WHEN 10 THEN SET str_i="10";     WHEN 20 THEN     BEGIN       set str_i="20";       CASE         WHEN j=1 THEN SET str_j="1";         WHEN j=2 THEN SET str_j="2";         WHEN j=3 THEN SET str_j="3";       ELSE SET str_j="unknown";       END CASE;       select "i was 20";     END;     WHEN 30 THEN SET str_i="30";     WHEN 40 THEN SET str_i="40";     ELSE SET str_i="unknown";   END CASE;   SELECT str_i, str_j; END|
CREATE PROCEDURE proc_19194_nested_2(i int, j int) BEGIN   DECLARE str_i CHAR(10);   DECLARE str_j CHAR(10);   CASE     WHEN i=10 THEN SET str_i="10";     WHEN i=20 THEN     BEGIN       set str_i="20";       CASE j         WHEN 1 THEN SET str_j="1";         WHEN 2 THEN SET str_j="2";         WHEN 3 THEN SET str_j="3";       ELSE SET str_j="unknown";       END CASE;       select "i was 20";     END;     WHEN i=30 THEN SET str_i="30";     WHEN i=40 THEN SET str_i="40";     ELSE SET str_i="unknown";   END CASE;   SELECT str_i, str_j; END|
CREATE PROCEDURE proc_19194_nested_3(i int, j int) BEGIN   DECLARE str_i CHAR(10);   DECLARE str_j CHAR(10);   CASE i     WHEN 10 THEN SET str_i="10";     WHEN 20 THEN     BEGIN       set str_i="20";       CASE j         WHEN 1 THEN SET str_j="1";         WHEN 2 THEN SET str_j="2";         WHEN 3 THEN SET str_j="3";       ELSE SET str_j="unknown";       END CASE;       select "i was 20";     END;     WHEN 30 THEN SET str_i="30";     WHEN 40 THEN SET str_i="40";     ELSE SET str_i="unknown";   END CASE;   SELECT str_i, str_j; END|
CREATE PROCEDURE proc_19194_nested_4(i int, j int) BEGIN   DECLARE str_i CHAR(10);   DECLARE str_j CHAR(10);   CASE     WHEN i=10 THEN SET str_i="10";     WHEN i=20 THEN     BEGIN       set str_i="20";       CASE         WHEN j=1 THEN SET str_j="1";         WHEN j=2 THEN SET str_j="2";         WHEN j=3 THEN SET str_j="3";       ELSE SET str_j="unknown";       END CASE;       select "i was 20";     END;     WHEN i=30 THEN SET str_i="30";     WHEN i=40 THEN SET str_i="40";     ELSE SET str_i="unknown";   END CASE;   SELECT str_i, str_j; END|
CREATE PROCEDURE p1() CREATE INDEX idx ON t1 (c1);
create procedure proc_26977_broken(v int) begin   declare i int default 5;   declare continue handler for sqlexception   begin     select 'caught something';     retry:     while i > 0 do       begin         set i = i - 1;         select 'looping', i;       end;     end while retry;   end;   select 'do something';   insert into t1 values (v);   select 'do something again';   insert into t1 values (v); end//
create procedure proc_26977_works(v int) begin   declare i int default 5;   declare continue handler for sqlexception   begin     select 'caught something';     retry:     while i > 0 do       begin         set i = i - 1;         select 'looping', i;       end;     end while retry;     select 'optimizer: keep hreturn';   end;   select 'do something';   insert into t1 values (v);   select 'do something again';   insert into t1 values (v); end//
create procedure proc_33618_h(num int) begin   declare count1 int default '0';   declare vb varchar(30);   declare last_row int;   while(num>=1) do     set num=num-1;     begin       declare cur1 cursor for select `a` from t_33618;       declare continue handler for not found set last_row = 1;       set last_row:=0;       open cur1;       rep1:       repeat         begin           declare exit handler for 1062 begin end;           fetch cur1 into vb;           if (last_row = 1) then             leave rep1;           end if;         end;         until last_row=1       end repeat;       close cur1;     end;   end while; end//
create procedure proc_33618_c(num int) begin   declare count1 int default '0';   declare vb varchar(30);   declare last_row int;   while(num>=1) do     set num=num-1;     begin       declare cur1 cursor for select `a` from t_33618;       declare continue handler for not found set last_row = 1;       set last_row:=0;       open cur1;       rep1:       repeat         begin           declare cur2 cursor for select `b` from t_33618;           fetch cur1 into vb;           if (last_row = 1) then             leave rep1;           end if;         end;         until last_row=1       end repeat;       close cur1;     end;   end while; end//
CREATE PROCEDURE p1()  BEGIN    DECLARE dummy int default 0;
CASE 12      WHEN 12      THEN SET dummy = 0;
END CASE;
END// DELIMITER ;// SHOW PROCEDURE CODE p1;
CREATE PROCEDURE p1() BEGIN   DECLARE c CURSOR FOR SELECT a FROM t1;   OPEN c;   BEGIN     DECLARE v INT;     DECLARE CONTINUE HANDLER FOR SQLWARNING     BEGIN       GET DIAGNOSTICS @n = NUMBER;       GET DIAGNOSTICS CONDITION @n @err_no = MYSQL_ERRNO, @err_txt = MESSAGE_TEXT;       SELECT "Warning found!";       SELECT @err_no, @err_txt;     END;     DECLARE EXIT HANDLER FOR NOT FOUND     BEGIN       GET DIAGNOSTICS @n = NUMBER;       GET DIAGNOSTICS CONDITION @n @err_no = MYSQL_ERRNO, @err_txt = MESSAGE_TEXT;       SELECT "End of Result Set found!";       SELECT @err_no, @err_txt;     END;     WHILE TRUE DO       FETCH c INTO v;     END WHILE;   END;   CLOSE c;   SELECT a INTO @foo FROM t1 LIMIT 1; # Clear warning stack END|
CREATE FUNCTION testf_bug11763507() RETURNS INT BEGIN     RETURN 0;
END $ CREATE PROCEDURE testp_bug11763507() BEGIN     SELECT "PROCEDURE testp_bug11763507";
END $ DELIMITER ;$ SHOW FUNCTION CODE testf_bug11763507;
SHOW FUNCTION CODE TESTF_bug11763507;
CREATE FUNCTION f() RETURNS INT   RETURN 1|
CREATE PROCEDURE p1() BEGIN   DECLARE x1 INT DEFAULT (SELECT 1 + 2);   DECLARE x2 INT DEFAULT (SELECT * FROM (SELECT 1 + 2) t1);   DECLARE x3 INT DEFAULT (SELECT * FROM t1);   DECLARE x4 INT DEFAULT (SELECT * FROM t2);   DECLARE x5 INT DEFAULT (SELECT * FROM t3);   DECLARE x6 INT DEFAULT (SELECT f());   DECLARE c1 CURSOR FOR SELECT (1 + 2) FROM dual;   DECLARE c2 CURSOR FOR SELECT * FROM (SELECT 1 + 2) t1;   DECLARE c3 CURSOR FOR SELECT * FROM t1;   DECLARE c4 CURSOR FOR SELECT * FROM t2;   DECLARE c5 CURSOR FOR SELECT * FROM t3;   DECLARE c6 CURSOR FOR SELECT f();   IF (SELECT 1 + 2) THEN     SET @dummy = 1;   END IF;   IF (SELECT * FROM (SELECT 1 + 2) t1) THEN     SET @dummy = 1;   END IF;   IF (SELECT * FROM t1) THEN     SET @dummy = 1;   END IF;   IF (SELECT * FROM t2) THEN     SET @dummy = 1;   END IF;   IF (SELECT * FROM t3) THEN     SET @dummy = 1;   END IF;   IF (SELECT f()) THEN     SET @dummy = 1;   END IF;   SET x1 = (SELECT 1 + 2);   SET x1 = (SELECT * FROM (SELECT 1 + 2) t1);   SET x1 = (SELECT * FROM t1);   SET x1 = (SELECT * FROM t2);   SET x1 = (SELECT * FROM t3);   SET x1 = (SELECT f());   CASE     WHEN (SELECT 1 + 2) = 1                     THEN SET @dummy = 1;     WHEN (SELECT * FROM (SELECT 1 + 2) t1) = 2  THEN SET @dummy = 1;     WHEN (SELECT * FROM t1) = 3                 THEN SET @dummy = 1;     WHEN (SELECT * FROM t2) = 3                 THEN SET @dummy = 1;     WHEN (SELECT * FROM t3) = 3                 THEN SET @dummy = 1;     WHEN (SELECT f()) = 3                       THEN SET @dummy = 1;   END CASE;   CASE (SELECT 1 + 2)     WHEN 1 THEN SET @dummy = 1;     ELSE SET @dummy = 1;   END CASE;   CASE (SELECT * FROM (SELECT 1 + 2) t1)     WHEN 1 THEN SET @dummy = 1;     ELSE SET @dummy = 1;   END CASE;   CASE (SELECT * FROM t1)     WHEN 1 THEN SET @dummy = 1;     ELSE SET @dummy = 1;   END CASE;   CASE (SELECT * FROM t2)     WHEN 1 THEN SET @dummy = 1;     ELSE SET @dummy = 1;   END CASE;   CASE (SELECT * FROM t3)     WHEN 1 THEN SET @dummy = 1;     ELSE SET @dummy = 1;   END CASE;   CASE (SELECT f())     WHEN 1 THEN SET @dummy = 1;     ELSE SET @dummy = 1;   END CASE;   WHILE (SELECT 1 - 1) DO     SET @dummy = 1;   END WHILE;   WHILE (SELECT * FROM (SELECT 1 - 1) t1) DO     SET @dummy = 1;   END WHILE;   WHILE (SELECT * FROM t1) - 10 DO     SET @dummy = 1;   END WHILE;   WHILE (SELECT * FROM t2) - 10 DO     SET @dummy = 1;   END WHILE;   WHILE (SELECT * FROM t3) - 10 DO     SET @dummy = 1;   END WHILE;   WHILE (SELECT f()) - 1 DO     SET @dummy = 1;   END WHILE;   REPEAT     SET @dummy = 1;   UNTIL (SELECT 1 - 1) END REPEAT;   REPEAT     SET @dummy = 1;   UNTIL (SELECT * FROM (SELECT 1 - 1) t1) END REPEAT;   REPEAT     SET @dummy = 1;   UNTIL (SELECT * FROM t1) - 10 END REPEAT;   REPEAT     SET @dummy = 1;   UNTIL (SELECT * FROM t2) - 10 END REPEAT;   REPEAT     SET @dummy = 1;   UNTIL (SELECT * FROM t3) - 10 END REPEAT;   REPEAT     SET @dummy = 1;   UNTIL (SELECT f()) - 1 END REPEAT; END|
CREATE FUNCTION f1() RETURNS INT   RETURN (SELECT 1 + 2)|
CREATE FUNCTION f2() RETURNS INT   RETURN (SELECT * FROM (SELECT 1 + 2) t1)|
CREATE FUNCTION f3() RETURNS INT   RETURN (SELECT * FROM t1)|
CREATE FUNCTION f4() RETURNS INT   RETURN (SELECT * FROM t2)|
CREATE FUNCTION f5() RETURNS INT   RETURN (SELECT * FROM t3)|
CREATE FUNCTION f6() RETURNS INT   RETURN f()|
SHOW FUNCTION CODE f1;
SHOW FUNCTION CODE f2;
SHOW FUNCTION CODE f3;
SHOW FUNCTION CODE f4;
SHOW FUNCTION CODE f5;
SHOW FUNCTION CODE f6;
CREATE PROCEDURE p11_many_handlers () BEGIN   DECLARE CONTINUE HANDLER FOR 1050             SELECT "1050 for 401a, please";
DECLARE EXIT     HANDLER FOR NOT FOUND        SELECT "a place not found";
DECLARE CONTINUE HANDLER FOR SQLWARNING       SELECT "a warn place";
DECLARE EXIT     HANDLER FOR SQLEXCEPTION     SELECT "an exceptional place";
DECLARE CONTINUE HANDLER FOR SQLSTATE '01000' SELECT "state of the nation";
BEGIN     DECLARE EXIT   HANDLER FOR NOT FOUND, 1,2   SELECT "multi multi";
END;
END| DELIMITER ;| SHOW PROCEDURE CODE p11_many_handlers;
connect (con1, localhost, root,,);
LOCK TABLES v1 WRITE;
UNLOCK TABLES;
disconnect con1;
connect (comp_con,localhost,root,,,,,COMPRESS);
disconnect comp_con;
connect(zstd_con, localhost, root,,,,,,,zstd,10);
disconnect zstd_con;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set @read_rnd_buffer_size_save= @@read_rnd_buffer_size;
select * from t2 left join t1 ignore index(primary) on t1.fooID = t2.fooID and t1.fooID = 30;
PREPARE prep_stmt FROM '  SELECT 1 AS f FROM t1  LEFT JOIN t1 t2   RIGHT JOIN t1 t3     JOIN t1 t4    ON 1   ON 1  ON 1  GROUP BY f';
EXECUTE prep_stmt;
EXECUTE prep_stmt;
ON 0 WHERE t1.a OR t3.a;
(t2 LEFT JOIN (t3 LEFT JOIN t4 ON 1) ON t2.a) ON 0 WHERE t1.a OR t4.a;
PREPARE prep_stmt_9846 FROM ' SELECT alias1.pk AS field1 FROM t1 AS alias1 LEFT JOIN (    t1 AS alias2   RIGHT  JOIN   (      t1 AS alias3     JOIN t1 AS alias4     ON 1   )   ON 1 ) ON 1 GROUP BY field1';
execute prep_stmt_9846;
execute prep_stmt_9846;
deallocate prepare prep_stmt_9846;
SELECT MAX( t2.i2 )   FROM t3 RIGHT JOIN t2 ON ( t2.i3 = 2 )   WHERE t2.i3 <> t1.i1 ) AS field1 FROM t1;
FROM   t6 AS t6a   LEFT JOIN   (     t2     RIGHT JOIN     (       (         t1         LEFT JOIN         (           t4           JOIN           t3           ON t4.col_int         )         ON t4.col_int_key = t1.pk       )       LEFT JOIN       (         t5         JOIN         t6 AS t6b         ON t5.col_varchar_10_utf8_key = t6b.col_varchar_10_latin1_key       )       ON t1.pk = t5.col_int     )     ON t4.col_varchar_10_latin1_key = t1.col_varchar_10_latin1_key        AND t5.col_varchar_10_utf8_key = 0   )   ON t6a.pk IS TRUE WHERE t6b.col_int_key IS TRUE ;
SET @a:=(SELECT ROW(1, 2)=                 ROW((SELECT 1 FROM t1 LEFT JOIN t1 t2 ON 1), 1));
$query;
FROM where_subselect_table WHERE (9) IN ( $query )  /* TRANSFORM_OUTCOME_UNORDERED_MATCH */;
WHERE t1.name LIKE 'A%';
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
WHERE t1.name LIKE 'A%' OR 'ASDFGH' IS NULL;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
WHERE 0 OR 0;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
WHERE 1 OR 0;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
WHERE NOT(NOT (0)) OR 1;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
WHERE NOT(NOT (0)) OR 0 = 1;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
WHERE 1 IS NOT TRUE AND 0 IS TRUE ;
EXECUTE stmt;
WHERE 'a' LIKE 1 OR 2 LIKE '2%' ;
EXECUTE stmt;
WHERE 1 IS NOT NULL;
EXECUTE stmt;
WHERE (1<2 AND 2<3) OR (1>1 AND 2<3);
EXECUTE stmt;
WHERE (1>=1 AND 2<=2) OR (1=1 AND 2<3);
EXECUTE stmt;
WHERE (1<>1 AND 2=2) OR (1 BETWEEN 0 AND 2);
EXECUTE stmt;
PREPARE prep_stmt FROM " SELECT 1 FROM ( ( SELECT * FROM t1 WHERE col_varchar >= 1 )  AS table1 RIGHT JOIN t2 ON ( ( NULL < NULL ) IS NULL OR 1 = 0 ) ) " ;
EXECUTE prep_stmt ;
EXECUTE prep_stmt ;
t3.col_int, t4.col_int,   t3.col_int = t4.col_int or t4.col_int IS NULL   FROM (t1     LEFT JOIN t2     ON t1.col_int_key = t2.col_int_key AND        t1.col_int_unique = t2.col_int_unique     LEFT JOIN t3     ON t3.col_char_16_unique = t2.col_char_16_unique     LEFT JOIN t4     ON t4.col_int = t3.col_int AND    #Note, this pred term        t4.col_int_unique = t1.col_int_unique  ) WHERE t1.col_int_unique = 5;
connect (con1,localhost,test,,test);
connect (con2,localhost,test2,,test);
disconnect con1;
disconnect con2;
lock table t1 read;
flush table t1;
unlock tables;
lock table t1 write;
flush table t1;
unlock tables;
lock table t1 write;
connect (locker,localhost,root,,test);
send lock table t1 read;
sleep 2;
flush table t1;
unlock tables;
reap;
unlock tables;
lock table t1 write;
send lock table t1 write;
sleep 2;
flush table t1;
unlock tables;
reap;
unlock tables;
disconnect locker;
handler t1 open as a1;
handler t1 open as a2;
handler t2 open;
handler a1 read first limit 9;
handler a2 read first limit 9;
handler t2 read first limit 9;
handler a1 read first limit 9;
handler a2 read first limit 9;
handler t2 read first limit 9;
handler t1 open as a1;
handler t1 open as a2;
handler t2 open;
handler a1 read first limit 9;
handler a2 read first limit 9;
handler t2 read first limit 9;
flush table t1;
handler a1 read first limit 9;
handler a2 read first limit 9;
handler t2 read first limit 9;
flush table t2;
handler t2 close;
handler t1 open;
handler t1 read first limit 1;
handler t1 read next limit 1;
handler t1 read next limit 1;
flush table t1;
handler t1 read next limit 1;
handler t1 read next limit 1;
handler t1 close;
UNLOCK TABLES;
CREATE PROCEDURE p1() BEGIN   DECLARE export INT;
END| DELIMITER ;| DROP PROCEDURE p1;
FLUSH TABLES FOR EXPORT;
FLUSH TABLES WITH EXPORT;
FLUSH TABLES t1,t2 WITH EXPORT;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
FLUSH TABLE export FOR EXPORT;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
FLUSH TABLE t1 FOR EXPORT;
UNLOCK TABLES;
FLUSH TABLE t1 FOR EXPORT;
UNLOCK TABLES;
UNLOCK TABLES;
FLUSH TABLE db1.t1 FOR EXPORT;
UNLOCK TABLES;
FLUSH TABLE db1.t1 FOR EXPORT;
FLUSH TABLE db1.t1 FOR EXPORT;
FLUSH TABLE db1.t1 FOR EXPORT;
FLUSH TABLE db1.t1 FOR EXPORT;
FLUSH TABLE t1 FOR EXPORT;
FLUSH TABLE t2 FOR EXPORT;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE t1 READ;
FLUSH TABLE t1 FOR EXPORT;
UNLOCK TABLES;
UNLOCK TABLES;
FLUSH TABLE t1 FOR EXPORT;
LOCK TABLE t1 READ;
UNLOCK TABLES;
UNLOCK TABLES;
FLUSH TABLE t1 FOR EXPORT;
FLUSH TABLE t1 FOR EXPORT;
FLUSH TABLE t1 FOR EXPORT;
UNLOCK TABLES;
UNLOCK TABLE;
UNLOCK TABLES;
UNLOCK TABLE;
LOCK TABLES test.t1 READ;
UNLOCK TABLES;
LOCK TABLES test.t1 WRITE;
LOCK TABLES test.t1 READ;
LOCK TABLES test.t1 WRITE;
UNLOCK TABLES;
CALL mtr.add_suppression('Disk is full writing');
CALL mtr.add_suppression('Retry in 60 secs');
INSERT INTO t1 VALUES (1, REPEAT("a", 8192));
INSERT INTO t1 VALUES (2, REPEAT("b", 8192));
INSERT INTO t1 VALUES (3, REPEAT("c", 8192));
HANDLER t1 READ FIRST;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ a FIRST;
HANDLER t1 READ a NEXT;
HANDLER t1 CLOSE;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 READ `PRIMARY` NEXT;
HANDLER t1 READ ab NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 CLOSE;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 READ NEXT;
HANDLER t1 READ `PRIMARY` NEXT;
HANDLER t1 READ `PRIMARY` NEXT;
HANDLER t1 READ ab NEXT;
HANDLER t1 READ ab NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ b NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 READ NEXT;
HANDLER t1 CLOSE;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 READ `PRIMARY` PREV;
HANDLER t1 READ `PRIMARY` PREV;
HANDLER t1 READ b PREV;
HANDLER t1 READ b PREV;
HANDLER t1 CLOSE;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 READ `PRIMARY` PREV LIMIT 3;
HANDLER t1 READ b NEXT LIMIT 5;
HANDLER t1 CLOSE;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
HANDLER t1 OPEN;
HANDLER t1 READ FIRST;
INSERT INTO t VALUES     (REPEAT('a', 128)),     (REPEAT('b', 128)),     (REPEAT('c', 128)),     (REPEAT('d', 128));
SHOW GRANTS FOR 'user3'@'%';
call mtr.add_suppression("Some of the user accounts with SUPER");
call mtr.add_suppression("perform the MySQL upgrade procedure");
call mtr.add_suppression("For complete");
call mtr.add_suppression("User entry .B19011337");
call mtr.add_suppression("Column count of mysql.* is wrong. "                          "Expected .*, found .*. "                          "The table is probably corrupted");
call mtr.add_suppression("The plugin 'mysql_old_password' used to authenticate user 'user_old_pass_wp'@'%' is not loaded. Nobody can currently login using this account.");
call mtr.add_suppression("Some of the user accounts with SUPER");
call mtr.add_suppression("1. Stop");
call mtr.add_suppression("2. Run");
call mtr.add_suppression("3. Restart");
call mtr.add_suppression("For complete");
connect (con0,localhost,root,,);
connect (con1,localhost,user_old_pass_pn,lala,,,,SSL);
connect (con2,localhost,user_old_pass_wp,lala,);
connect (con3,localhost,user_nat_pass_pn,lala,);
connect (con4,localhost,user_nat_pass_wp,lala,);
call mtr.add_suppression("User entry 'user_old_pass_pn'@'%' has an empty plugin value. The user will be ignored and no one can login with this user anymore.");
call mtr.add_suppression("User entry 'su_old_pass_pn'@'%' has an empty plugin value. The user will be ignored and no one can login with this user anymore.");
disconnect con0;
disconnect con3;
disconnect con4;
connect (con5,localhost,user_old_pass_wp,lala,);
call mtr.add_suppression("User entry 'B20614545'@'localhost' has an empty plugin value. The user will be ignored and no one can login with this user anymore.");
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u2;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u2;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR user1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR user1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR sheldon;
SHOW GRANTS FOR root@localhost;
SHOW GRANTS FOR sheldon;
LOCK TABLE m1 WRITE, m2 WRITE;
UNLOCK TABLES;
LOCK TABLE m1 WRITE, m2 WRITE;
UNLOCK TABLES;
LOCK TABLE m1 WRITE, m2 WRITE;
UNLOCK TABLES;
LOCK TABLE m1 WRITE, m2 WRITE;
UNLOCK TABLES;
connect(con1, localhost, root,,);
connect(con2, localhost, root,,);
connect(con3, localhost, root,,);
connect(con4, localhost, root,,);
connect(con5, localhost, root,,);
disconnect con1;
disconnect con2;
disconnect con3;
disconnect con4;
disconnect con5;
disconnect con1;
connect (con,localhost,root,,);
disconnect con;
create table t1( bool_col bool, boolean_col boolean, bit_col bit(5), tiny tinyint, tiny_uns tinyint unsigned, small smallint, small_uns smallint unsigned, medium mediumint, medium_uns mediumint unsigned, int_col int, int_col_uns int unsigned, big bigint, big_uns bigint unsigned, decimal_col decimal(10,5), numeric_col numeric(10), fixed_col fixed(10), dec_col dec(10), decimal_col_uns decimal(10,5) unsigned, fcol float, fcol_uns float unsigned, dcol double, double_precision_col double precision, dcol_uns double unsigned, date_col date, time_col time, timestamp_col timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, year_col year, datetime_col datetime, char_col char(5), varchar_col varchar(10), binary_col binary(10), varbinary_col varbinary(10), tinyblob_col tinyblob, blob_col blob, mediumblob_col mediumblob, longblob_col longblob, text_col text, mediumtext_col mediumtext, longtext_col longtext, enum_col enum("A","B","C"), set_col set("F","E","D") );
CALL mtr.add_suppression('Following users were specified in CREATE USER IF NOT EXISTS but they already exist');
CALL mtr.add_suppression('Following users were specified in ALTER USER IF EXISTS but they do not exist');
LET old_log_output=          `select @@global.log_output`;
LET old_general_log=         `select @@global.general_log`;
LET old_general_log_file=    `select @@global.general_log_file`;
set charset default,@dummy='A';
CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3';
ALTER  USER test_user9 IDENTIFIED WITH 'caching_sha2_password' BY '';
connect(con1,localhost,u1,,);
disconnect con1;
INTO TABLE test_log FIELDS TERMINATED BY '\n' LINES TERMINATED BY '\n';
SELECT TRIM(LEADING '\t' FROM MID(argument,LOCATE('Query',argument)+5)) FROM                 test_log WHERE (argument LIKE '%BY %' OR argument LIKE '%AS %'                 OR argument LIKE '%PASSWORD %')                 AND argument NOT LIKE '%Prepare%';
SET @sql='SELECT command_type, argument FROM mysql.general_log WHERE argument LIKE "%Bug#16953758%"';
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
SET @sql='DROP TABLE 18616826_does_not_exist';
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
connect(con1,localhost,plaintext_test,'pwd',);
disconnect con1;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
PARTITION BY LIST(MOD(i, 2))  SUBPARTITION BY KEY(i)  (PARTITION p1 VALUES IN (-1) (SUBPARTITION sp1, SUBPARTITION sp2),   PARTITION p2 VALUES IN (0)  (SUBPARTITION sp3, SUBPARTITION sp5),   PARTITION p3 VALUES IN (1)  (SUBPARTITION sp4, SUBPARTITION sp6));
PARTITION BY LIST(MOD(i, 2))  SUBPARTITION BY KEY(i)  (PARTITION $too_long_name VALUES IN (-1) (SUBPARTITION sp1, SUBPARTITION sp2),   PARTITION p2 VALUES IN (0)  (SUBPARTITION sp3, SUBPARTITION sp5),   PARTITION p3 VALUES IN (1)  (SUBPARTITION sp4, SUBPARTITION sp6));
PARTITION BY LIST(MOD(i, 2))  SUBPARTITION BY KEY(i)  (PARTITION p1 VALUES IN (-1) (SUBPARTITION sp1, SUBPARTITION $too_long_name),   PARTITION p2 VALUES IN (0)  (SUBPARTITION sp3, SUBPARTITION sp5),   PARTITION p3 VALUES IN (1)  (SUBPARTITION sp4, SUBPARTITION sp6));
PARTITION BY LIST(MOD(i, 2))  SUBPARTITION BY KEY(i)  (PARTITION $long_name_2 VALUES IN (-1) (SUBPARTITION $long_name_3, SUBPARTITION sp2),   PARTITION p2 VALUES IN (0) (SUBPARTITION sp3, SUBPARTITION sp5),   PARTITION p3 VALUES IN (1) (SUBPARTITION sp4, SUBPARTITION sp6));
prepare stmt1 from 'select a from t1 where a rlike ? order by a';
execute stmt1 using @a;
execute stmt1 using @a;
deallocate prepare stmt1;
PREPARE stmt1 FROM "SELECT a FROM t1 WHERE a=1 AND '7.0' REGEXP b LIMIT 1";
EXECUTE stmt1;
EXECUTE stmt1;
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
DO 1 regexp (multilinestring(point(1,1)));
SELECT '1' RLIKE RPAD('1', 10000, '(');
SELECT REGEXP_INSTR(e, 'pattern') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e);
SELECT REGEXP_LIKE(e, 'pattern') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e);
SELECT REGEXP_REPLACE(e, 'pattern', 'xyz') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e);
SELECT REGEXP_SUBSTR(e, 'pattern') FROM (VALUES ROW('Find pattern'), ROW(NULL), ROW('Find pattern')) AS v(e);
LET $MYSQLD_DATADIR = `select @@datadir`;
LET $INNODB_PAGE_SIZE = `select @@innodb_page_size`;
LET $data_directory = DATA DIRECTORY='$MYSQL_TMP_DIR/alternate_dir/data';
LET $data_directory2 = DATA DIRECTORY='$MYSQL_TMP_DIR/alternate_dir/data2';
LET $index_directory = INDEX DIRECTORY='$MYSQL_TMP_DIR/alternate_dir/data';
LET $innodb_file_per_table_orig=`select @@global.innodb_file_per_table`;
LET $innodb_strict_mode_orig=`select @@session.innodb_strict_mode`;
(PARTITION p0 engine=InnoDB $data_directory $index_directory,       PARTITION p1 engine=InnoDB $data_directory $index_directory);
(PARTITION p0 engine=InnoDB $data_directory,       PARTITION p1 engine=InnoDB $data_directory2);
RENAME TABLE t1 TO t11;
ENGINE = InnoDB PARTITION BY HASH (a)      (PARTITION p0 engine=InnoDB $data_directory,       PARTITION p1 engine=InnoDB $data_directory2)";
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PARTITION BY RANGE( YEAR(purchased) )     SUBPARTITION BY HASH( TO_DAYS(purchased) ) (         PARTITION p0 VALUES LESS THAN (1990) (             SUBPARTITION s0 $data_directory,             SUBPARTITION s1 $data_directory2         ),         PARTITION p1 VALUES LESS THAN (2000) (             SUBPARTITION s2 $data_directory,             SUBPARTITION s3 $data_directory2         ),         PARTITION p2 VALUES LESS THAN MAXVALUE (             SUBPARTITION s4 $data_directory,             SUBPARTITION s5 $data_directory2         )     );
engine = innodb row_format = dynamic     PARTITION BY RANGE( YEAR(purchased) )     SUBPARTITION BY HASH( TO_DAYS(purchased) ) (         PARTITION p0 VALUES LESS THAN (1990) (             SUBPARTITION s0 $data_directory,             SUBPARTITION s1 $data_directory2         ),         PARTITION p1 VALUES LESS THAN (2000) (             SUBPARTITION s2 $data_directory,             SUBPARTITION s3 $data_directory2         ),         PARTITION p2 VALUES LESS THAN MAXVALUE (             SUBPARTITION s4 $data_directory,             SUBPARTITION s5 $data_directory2         )     );
ENGINE = InnoDB DATA DIRECTORY = '$MYSQL_TMP_DIR/alternate_dir/data_table' PARTITION BY RANGE (a) SUBPARTITION BY HASH (a) SUBPARTITIONS 3 (PARTITION p0 VALUES LESS THAN (10)  (SUBPARTITION sp0,   SUBPARTITION sp1 DATA DIRECTORY='$MYSQL_TMP_DIR/alternate_dir/data_subpart',   SUBPARTITION sp2),  PARTITION p1 VALUES LESS THAN (20)  DATA DIRECTORY = '$MYSQL_TMP_DIR/alternate_dir/data_part'  (SUBPARTITION sp3,   SUBPARTITION sp4 DATA DIRECTORY='$MYSQL_TMP_DIR/alternate_dir/data_subpart',   SUBPARTITION sp5),  PARTITION p2 VALUES LESS THAN (30)  (SUBPARTITION sp6,   SUBPARTITION sp7 DATA DIRECTORY='$MYSQL_TMP_DIR/alternate_dir/data_subpart',   SUBPARTITION sp8));
(a int not null,  primary key (a)) ENGINE=InnoDB PARTITION BY KEY (a) (PARTITION p0 DATA DIRECTORY '$MYSQL_TMP_DIR/alternate_dir/data_part',  PARTITION p1);
EVAL SET GLOBAL innodb_file_per_table=$innodb_file_per_table_orig;
EVAL SET SESSION innodb_strict_mode=$innodb_strict_mode_orig;
EVAL SET @@default_storage_engine=$old_default_storage_engine;
perl;
my $search_file=     $ENV{'SEARCH_FILE'}     or die "SEARCH_FILE not set";
my $search_pattern=  $ENV{'SEARCH_PATTERN'}  or die "SEARCH_PATTERN not set";
my $search_pattern1= $ENV{'SEARCH_PATTERN1'}  or die "SEARCH_PATTERN1 not set";
my $minimum_matches= $ENV{'MINIMUM_MATCHES'} or die "MINIMUM_MATCHES not set";
open(FILE, "$search_file") or die("Unable to open '$search_file': $!\n");
my $count = 0;
while (<FILE>) {       if (m{$search_pattern}) { ++$count; }       if (m{$search_pattern1}) {         die ("# ERROR: The file '$search_file' contains \n".            "#        the unexpected pattern '$search_pattern1' at $_\n");
}     }     close(FILE);
if ( $count < $minimum_matches ) {        die("# ERROR: The file '$search_file' does not contain \n".            "#        the expected pattern '$search_pattern' often enough.\n".            "#        Found: $count    Expected: >= $minimum_matches");
source 'include/function_defaults.inc';
call mtr.add_suppression('Failed to open optimizer cost constant tables');
RENAME TABLE mysql.engine_cost TO mysql.engine_cost_renamed;
RENAME TABLE mysql.engine_cost_renamed TO mysql.engine_cost;
call mtr.add_suppression('Unknown cost constant "lunch_cost" in mysql.server_cost table');
call mtr.add_suppression('Invalid value for cost constant "row_evaluate_cost" in mysql.server_cost table: -1.0');
call mtr.add_suppression('Invalid value for cost constant "key_compare_cost" in mysql.server_cost table: 0.0');
call mtr.add_suppression('Invalid value for cost constant "io_block_read_cost" for "default" storage engine and device type 0 in mysql.engine_cost table: 0.0');
call mtr.add_suppression('Unknown storage engine "Falcon" in mysql.engine_cost table');
call mtr.add_suppression('Invalid device type -1 for "InnoDB" storage engine for cost constant "io_block_read_cost" in mysql.engine_cost table');
call mtr.add_suppression('Unknown cost constant "lunch_cost" in mysql.engine_cost table');
CREATE TABLE t1 (i int, KEY USING HASH (i)) ENGINE=MEMORY;
CREATE TABLE t1 (i int, KEY USING BTREE (i)) ENGINE=MEMORY;
CREATE TABLE t1 (i int, KEY USING BTREE (i)) ENGINE=MyISAM;
CREATE TABLE t1 (i int, KEY USING BTREE (i)) ENGINE=MyISAM;
disable_query_log;
while ($1)  {    dec $1;
} enable_query_log;
connect (con1,localhost,test,,test);
connect (con2,localhost,test2,,test);
disconnect con1;
disconnect con2;
INSERT IGNORE INTO t1 SELECT REPEAT('a',11);
CREATE TABLE t1 AS SELECT REPEAT(' ', 16) AS a LIMIT 0;
CREATE TABLE t1 AS SELECT REPEAT(' ', 10) AS a LIMIT 0;
CREATE TABLE t1 AS SELECT REPEAT (' ', 10) AS a LIMIT 0;
CREATE TABLE t1 AS SELECT REPEAT (' ', 10) AS a LIMIT 0;
CREATE TABLE t1 AS SELECT REPEAT(' ', 10) AS a LIMIT 0;
perl;
my $outf= $ENV{'OUTF'} or die "OUTF not set";
open(FILE, "$outf") or die("Unable to open $outf: $!\n");
my $count_error= grep(/\[ERROR\] \[[^]]*\] \[[^]]*\] Syntax error at '\[strength tertiary\]'/gi,<FILE>);
print "Occurances : $count_error\n";
close(FILE);
select _rowid,t1._rowid,skey,sval from t1;
select * from t1 ignore index (primary) where tt like 'Aa%';
select * from t1 ignore index (primary) where tt like 'AA%';
CREATE TABLE t1 ENGINE=INNODB AS SELECT repeat('a', 5) AS s1 LIMIT 0;
CREATE TABLE t1 ENGINE=FALCON AS SELECT repeat('a', 5) AS s1 LIMIT 0;
CREATE TABLE t1 ENGINE=MARIA AS SELECT repeat('a', 5) AS s1 LIMIT 0;
call mtr.add_suppression(".*The system table mysql.global_grants.*");
call mtr.add_suppression("ACL table mysql.global_grants missing. Some operations may fail.");
call mtr.add_suppression("An empty or illegal privilege identifier was ignored when global privileges were read from disk.");
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u2@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR `u1`@`%`;
SHOW GRANTS FOR `u1`@`%`;
SHOW GRANTS FOR `u1`@`localhost`;
SHOW GRANTS FOR `u1`@`localhost`;
connect(con1,localhost,u1,foo,,,,);
CREATE DEFINER=root@localhost EVENT test.eve1 ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 2 SECOND DO BEGIN   INSERT INTO restricted.t1 VALUES (5,5); END;//
disconnect con1;
connect(con1,localhost,u1,foo,,,,);
disconnect con1;
connect(con1,localhost,u1,foo,,,,);
disconnect con1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1@localhost;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
connect(con_admin_test,localhost,u1,pwd,,,,);
disconnect con_admin_test;
CONNECTION default;
connect(con_admin_test,localhost,u1,pwd,,,,);
disconnect con_admin_test;
CONNECTION default;
connect(con_admin_test,localhost,u1,pwd,,,,);
disconnect con_admin_test;
CONNECTION default;
connect(con_admin_test,localhost,u1,pwd,,,,);
DISCONNECT con_admin_test;
CONNECTION default;
SHOW GRANTS FOR u1@localhost;
connect(con_admin_test,localhost,u1,pwd,,,,);
disconnect con_admin_test;
CONNECTION default;
connect(con_admin_test_test,localhost,u1,pwd,,,,);
CONNECTION default;
connect(con_admin_test,localhost,u1,pwd,,,,);
DISCONNECT con_admin_test;
CONNECTION default;
SHOW GRANTS FOR u1@localhost;
connect(con_admin_test,localhost,u1,pwd,,,,);
CONNECTION default;
CONNECTION con_admin_test;
DISCONNECT con_admin_test;
CONNECTION default;
SHOW GRANTS FOR u1 using r1;
SHOW GRANTS FOR u1 using r2;
SHOW GRANTS FOR u1 using r1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
connect(con_rep_slave_test,localhost,u1,pwd,,,,);
STOP SLAVE;
DISCONNECT con_rep_slave_test;
CONNECTION default;
connect(con_rep_slave_test,localhost,u1,pwd,,,,);
DISCONNECT con_rep_slave_test;
CONNECTION default;
GRANT '' @c05 ON TABLE *.* TO ''@'' IDENTIFIED WITH c06 BY '' REQUIRE X509;
GRANT '' @c05 ON TABLE * TO CURRENT_USER()IDENTIFIED WITH c07 REQUIRE X509 WITH  MAX_QUERIES_PER_HOUR 0x2e3;
GRANT WRAPPER @c04 ON FUNCTION c02.* TO CURRENT_USER IDENTIFIED WITH '' BY '?'  REQUIRE SSL;
CONNECTION default;
connect(con1,localhost,u1,pwd,,,,);
disconnect con1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u2;
connect (con2,localhost,u1,foo,,);
disconnect con2;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SHOW GRANTS FOR u1;
SET @old_50915_lc_time_names := @@lc_time_names;
query_vertical SELECT host,user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='user1';
disconnect con1;
query_vertical SELECT host,user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='user1';
disconnect con1;
query_vertical SELECT host,user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='user2';
ALTER USER user() IDENTIFIED BY 'auth_string' ACCOUNT LOCK;
disconnect con1;
disconnect con1;
query_vertical SELECT host,user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='user2';
CREATE USER ACCOUNT UNLOCK user5@localhost;
CREATE USER ACCOUNT LOCK user6@localhost;
ALTER USER ACCOUNT LOCK user2@localhost;
ALTER USER ACCOUNT UNLOCK user2@localhot;
query_vertical SELECT host,user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user3';
query_vertical SELECT host,user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user4';
query_vertical SELECT host,user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user3';
query_vertical SELECT host,user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user4';
query_vertical SELECT user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='u1';
query_vertical SELECT user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='u1';
query_vertical SELECT user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='u2';
query_vertical SELECT user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='u2';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u3';
ALTER USER u3@localhost IDENTIFIED WITH 'sha256_password'                         ACCOUNT LOCK ACCOUNT UNLOCK;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u3';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u4';
ALTER USER u4@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string'                         ACCOUNT UNLOCK;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u4';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user4';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user6';
ALTER USER user6@localhost IDENTIFIED WITH 'mysql_native_password'                            ACCOUNT LOCK ACCOUNT UNLOCK;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user6';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user7';
disconnect con1;
ALTER USER user7@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string_sha256'            PASSWORD EXPIRE NEVER ACCOUNT LOCK;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user7';
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user8';
disconnect con1;
ALTER USER user8@localhost IDENTIFIED WITH 'mysql_native_password' BY 'new_auth_string'                            ACCOUNT UNLOCK PASSWORD EXPIRE;
query_vertical SELECT user,plugin,authentication_string,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='user8';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u5';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u6';
query_vertical SELECT user,plugin,authentication_string,ssl_type,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u6';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u7';
disconnect con1;
ALTER USER u7@localhost IDENTIFIED WITH 'mysql_native_password'                         PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u7';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u8';
disconnect con1;
ALTER USER u8@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string'             REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA'             PASSWORD EXPIRE NEVER ACCOUNT LOCK;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u8';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u9';
ALTER USER u9@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' ACCOUNT UNLOCK;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u9';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u10';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u10';
query_vertical SELECT user,plugin,authentication_string,max_questions,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u11';
query_vertical SELECT user,plugin,authentication_string,max_questions,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u11';
query_vertical SELECT user,plugin,authentication_string,max_questions,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u11';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,max_questions,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u12';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,max_questions,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u12';
query_vertical SELECT user,plugin,authentication_string,max_questions,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u12';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,max_connections,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u13';
query_vertical SELECT user,plugin,authentication_string,max_connections,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u13';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_user_connections,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u14';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_user_connections,password_expired,password_lifetime,account_locked FROM mysql.user WHERE USER='u14';
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='u15';
query_vertical SELECT user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='u16';
query_vertical SELECT user,plugin,authentication_string,account_locked FROM mysql.user WHERE USER='u17';
disconnect con1;
disconnect con1;
disconnect con1;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u18';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u19';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u20';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u21';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u22';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime,account_locked FROM mysql.user WHERE USER='u23';
ALTER  USER u18@localhost,             u19@localhost IDENTIFIED BY 'auth_string',             u20@localhost IDENTIFIED WITH 'sha256_password',             u21@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string',             u22@localhost IDENTIFIED WITH 'mysql_native_password',             u23@localhost IDENTIFIED WITH 'mysql_native_password'                           AS '*318C29553A414C4A571A077BC9E9A9F67D5E5634'                           REQUIRE CIPHER "DHE-RSA-AES256-SHA"                           ISSUER "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA"                           ACCOUNT UNLOCK;
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u18';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u19';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u20';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u21';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u22';
query_vertical SELECT user,plugin,authentication_string,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections,password_expired,password_lifetime, account_locked FROM mysql.user WHERE USER='u23';
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
CREATE DEFINER = u1@localhost TRIGGER test.t1_update_count BEFORE UPDATE ON test.t1 FOR EACH ROW BEGIN   UPDATE test.t2 SET update_count = update_count + 1;
END| DELIMITER ;| DELIMITER |;
CREATE DEFINER = u1@localhost PROCEDURE test.p1() BEGIN   UPDATE test.t1 SET counter= counter + 1;
END| DELIMITER ;| CALL test.p1();
CREATE DEFINER = u1@localhost FUNCTION test.myfunc() RETURNS CHAR(50) BEGIN RETURN 'wl6054_test';
END| DELIMITER ;| GRANT EXECUTE ON PROCEDURE test.p1 TO u2@localhost;
connect(u1_con,localhost,u1,pass);
connect(u2_con,localhost,u2,pass);
CALL test.p1();
disconnect u2_con;
CREATE TABLE t2 AS SELECT INSERT(1133,3,0,22) FROM t1;
CREATE TABLE t2 AS SELECT REPEAT(1,2) FROM t1;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
connect (con1, localhost, root,,);
KILL QUERY @thread_id;
disconnect con1;
CREATE TABLE t1 (a INT) /*!50100 PARTITION BY HASH (a) /* Test    of multi-line    comment */ PARTITIONS 5 */;
RENAME TABLE general_log TO renamed_general_log;
RENAME TABLE test.bug49823 TO general_log;
RENAME TABLE renamed_general_log TO general_log;
SHOW GRANTS FOR some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890;
GRANT PROXY ON root@localhost TO some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890;
GRANT PROXY ON some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890 TO root@localhost;
SHOW GRANTS FOR some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890;
call mtr.add_suppression("2001:db8::6:6");
PREPARE stmt FROM "SHOW COLUMNS FROM t1";
EXECUTE stmt;
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
connect (monitor, localhost, root);
FROM performance_schema.status_by_thread   WHERE VARIABLE_NAME LIKE 'HANDLER_%' AND VARIABLE_VALUE > 0     AND THREAD_ID IN (SELECT thread_id from test.thread_to_monitor);
CREATE TABLE t3 (a int DEFAULT 10,  b varchar(64) DEFAULT "Default",  c varchar(64) DEFAULT "Default",  d int unsigned DEFAULT 9,  e varchar(255) DEFAULT "Default-filler.filler.filler.",  PRIMARY KEY (a,b,c,d)) charset latin1 PARTITION BY RANGE COLUMNS (a, b) SUBPARTITION BY LINEAR KEY (d, c) SUBPARTITIONS 4 (PARTITION pNeg VALUES LESS THAN (0, ""),  PARTITION `p0-9` VALUES LESS THAN (9, MAXVALUE),  PARTITION p10 VALUES LESS THAN (10, MAXVALUE),  PARTITION `p11-100` VALUES LESS THAN (99, MAXVALUE));
LOCK TABLES t3 PARTITION (`p11-100sp0`) WRITE;
LOCK TABLES t3 WRITE;
UNLOCK TABLES;
CREATE PROCEDURE sp_insert_partition(p CHAR(16), a INT, b CHAR(16)) BEGIN   SET @str = CONCAT("INSERT INTO test.t1 PARTITION(", p, ") VALUES (?, ?)");   SET @x = a, @y = b;   PREPARE stmt FROM @str;   EXECUTE stmt USING @x, @y;   DEALLOCATE PREPARE stmt; END|
CREATE PROCEDURE sp_select_partition(p CHAR(16)) BEGIN   SET @str = CONCAT("SELECT * FROM test.t1 PARTITION(", p, ")");   PREPARE stmt FROM @str;   EXECUTE stmt;   DEALLOCATE PREPARE stmt; END|
DO (SELECT a FROM t1);
DO (SELECT @x:= b FROM t1 WHERE a = 5);
DO (SELECT @x:= b FROM t1 WHERE a = 5 or a = 1 ORDER BY b LIMIT 1);
INTO OUTFILE '$MYSQLTEST_VARDIR/tmp/t1.part1';
PREPARE stmt FROM 'UPDATE t1 AS P1 INNER JOIN (SELECT N FROM t1 GROUP BY N HAVING COUNT(M) > 1) AS P2 ON P1.N = P2.N SET P1.M = 2';
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM 'SELECT * FROM t1 WHERE N = 2';
EXECUTE stmt;
INSERT INTO t2 VALUES (SELECT * FROM t1);
CREATE TRIGGER tr1_1_N  BEFORE INSERT ON t1 FOR EACH ROW BEGIN   UPDATE t2 SET a = 8 WHERE a > 3 LIMIT 0; END//
CREATE FUNCTION sf_a_from_t1b_d(s varchar(128))   RETURNS INT DETERMINISTIC   BEGIN   DECLARE i INT;     SELECT a INTO i FROM t1 where b = s;     RETURN i;   END|
CREATE FUNCTION sf_a_from_t1b(s varchar(128))   RETURNS INT   BEGIN   DECLARE i INT;     SELECT a INTO i FROM t1 where b = s;     RETURN i;   END|
while ($query != '') {   while ($subq != '')   {     FLUSH STATUS;
if ($not_select)     {       SELECT * FROM t2;
}     if ($can_be_locked)     {       FLUSH STATUS;
LOCK TABLES t1 read, t2 write;
if ($not_select)       {         SELECT * FROM t2;
}       UNLOCK TABLES;
}     inc $subnr;
}   inc $qnr;
} set @@autocommit= @old_autocommit;
connect(con1,localhost,root,,);
performance_schema.data_locks   WHERE OBJECT_SCHEMA='mysql' AND         OBJECT_NAME='tables' and LOCK_STATUS='WAITING';
disconnect con1;
load index into cache t1, t2 key (primary,b) ignore leaves;
load index into cache t3, t2 key (primary,b) ;
rename table t1 to t1_1, t9 to t9_1 ;
rename table t1 to t1_2, t9 to t9_2 ;
SELECT VARIANCE(b) over w `var`,        AVG(b) OVER w `avg`,        SUM(b) OVER w `sum`,        b,        COUNT(b) OVER w count FROM t1        WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING);
SELECT VARIANCE(b) over w `var`,        AVG(b) OVER w `avg`,        SUM(b) OVER w `sum`,        b,        count(b) OVER w count,        LAST_VALUE(b) OVER w lastval FROM t1        WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING);
DO ST_CROSSES(@g,SUM(SHA(@g))OVER());
DO UNHEX(SUM(@g)OVER());
DO BIT_LENGTH(AVG(@f)OVER());
DO COMPRESS(SUM(' >')OVER());
DO LTRIM(AVG(LOG2(@c))OVER());
DO (~(SUM(@f)OVER()));
DO IS_UUID(SUM(@e)OVER());
DO TO_BASE64(AVG(@d)OVER());
PREPARE stmt FROM 'SELECT NTILE(39) OVER w1 FROM t WINDOW w1 AS(ORDER BY a)';
EXECUTE stmt;
PREPARE stmt FROM 'SELECT NTILE(39) OVER w1 FROM t WINDOW w1 AS(ORDER BY b)';
EXECUTE stmt;
SELECT JSON_ARRAY(JSON_ARRAYAGG(CAST('' AS JSON)) OVER (), '');
PREPARE stmt FROM "SELECT RANK() OVER (ORDER BY a) FROM t1 GROUP BY a";
EXECUTE stmt;
EXECUTE stmt;
CREATE TABLE t1(id INT) PARTITION BY RANGE (id) (PARTITION p0 VALUES LESS THAN (100),  PARTITION pmax VALUES LESS THAN (MAXVALUE));
while ($iteration < 3) {   inc $iteration;
} insert into t1 select col1_idx, col2_idx, col3, col4, 'america', 'america' from t1;
load data infile '../../std_data/loaddata1.dat' ignore into table t1 fields terminated by ',';
load data infile '../../std_data/loaddata1.dat' into table t1 fields terminated by ',' IGNORE 2 LINES;
load data infile '../../std_data/loaddata1.dat' ignore into table t1 fields terminated by ',' LINES STARTING BY ',' (b,c,d);
load data infile '../../std_data/loaddata2.dat' ignore into table t1 fields terminated by ',' enclosed by '''';
load data infile '../../std_data/loaddata3.dat' ignore into table t1 fields terminated by '' enclosed by '' ignore 1 lines;
load data infile '../../std_data/loaddata4.dat' ignore into table t1 fields terminated by '' enclosed by '' lines terminated by '' ignore 1 lines;
disable_query_log;
enable_query_log;
remove_file $MYSQLTEST_VARDIR/tmp/t1;
disable_query_log;
FIELDS TERMINATED BY '' OPTIONALLY ENCLOSED BY '' LINES TERMINATED BY '\r\n' FROM t1;
FIELDS TERMINATED BY '' OPTIONALLY ENCLOSED BY '' LINES TERMINATED BY '\r\n';
enable_query_log;
remove_file $MYSQLTEST_VARDIR/tmp/t1;
load data infile '../../std_data/loaddata_dq.dat' into table t1 fields terminated by ',' enclosed by '"' escaped by '"' (a,b);
cat_file $MYSQLTEST_VARDIR/tmp/t1;
remove_file $MYSQLTEST_VARDIR/tmp/t1;
load data infile '../../std_data/rpl_loaddata.dat' into table t1 (a, @b) set b=@b+10, c=concat("b=",@b);
load data infile '../../std_data/rpl_loaddata.dat' into table t1 (a, @b) set c= if(a is null,"oops",a);
set @c:=123;
load data infile '../../std_data/rpl_loaddata.dat' into table t1 (@a, b) set c= if(@a is null,@c,b);
load data infile '../../std_data/rpl_loaddata.dat' into table t1 (@a, @b);
load data infile '../../std_data/rpl_loaddata.dat' ignore into table t1 set c=b;
load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (a, b) set c="Wow";
load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (a, b) set c=concat(a,"+",b,"+",@c,"+",b,"+",if(c is null,"NIL",c));
load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (a, @b);
load data infile '../../std_data/rpl_loaddata.dat' into table t1 (@dummy,@n) set a= @n, c= (select str from t2 where num=@n);
disable_query_log;
enable_query_log;
remove_file $MYSQLTEST_VARDIR/tmp/t1;
disable_query_log;
enable_query_log;
remove_file $MYSQLTEST_VARDIR/tmp/t2;
disable_query_log;
FIELDS TERMINATED BY '' OPTIONALLY ENCLOSED BY '' LINES TERMINATED BY '\r\n' FROM t2;
FIELDS TERMINATED BY '' OPTIONALLY ENCLOSED BY '' LINES TERMINATED BY '\r\n';
enable_query_log;
remove_file $MYSQLTEST_VARDIR/tmp/t2;
cat_file $MYSQLTEST_VARDIR/tmp/t1;
echo EOF;
remove_file $MYSQLTEST_VARDIR/tmp/t1;
LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v1   FIELDS ESCAPED BY '\\'   TERMINATED BY ','   ENCLOSED BY '"'   LINES TERMINATED BY '\n' (c1, c2);
LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v2   FIELDS ESCAPED BY '\\'   TERMINATED BY ','   ENCLOSED BY '"'   LINES TERMINATED BY '\n' (c1, c2);
LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v2   FIELDS ESCAPED BY '\\'   TERMINATED BY ','   ENCLOSED BY '"'   LINES TERMINATED BY '\n' (c0, c2);
LOAD DATA INFILE '../../std_data/bug35469.dat' INTO TABLE v3   FIELDS ESCAPED BY '\\'   TERMINATED BY ','   ENCLOSED BY '"'   LINES TERMINATED BY '\n' (d1, d2);
LOAD DATA INFILE 't-1' INTO TABLE t1;
LOAD DATA INFILE 't-1' INTO TABLE t1;
remove_file $MYSQLD_DATADIR/test/t-1;
LOAD DATA INFILE 't1.txt' IGNORE INTO TABLE t1 SET col0=col0;
remove_file $MYSQLD_DATADIR/test/t1.txt;
connect (con1,localhost,root,,test);
dirty_close con1;
connect (con1,localhost,root,,test);
disconnect con1;
EVAL SELECT 0xE1C330 INTO OUTFILE 't1.dat';
LOAD DATA INFILE 't1.dat' IGNORE INTO TABLE t1 CHARACTER SET utf8;
remove_file $MYSQLD_DATADIR/test/t1.dat;
LOAD DATA LOCAL INFILE '' REPLACE INTO TABLE v1;
FIELDS TERMINATED BY 't' LINES TERMINATED BY '';
LOAD DATA INFILE '../../std_data/bug20683959loaddata.txt' INTO TABLE t1;
LOAD DATA INFILE '../../std_data/bug20683959loaddata.txt' INTO TABLE t1;
LOAD DATA INFILE 'test.dat' INTO TABLE v(a, d);
LOAD DATA INFILE 'test.dat' INTO TABLE v(@a, @d) SET a= @a, d= @d;
LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1 CHARACTER SET utf8mb4;
LOAD DATA INFILE '../../std_data/loaddata7.dat' INTO TABLE t1 CHARACTER SET gb18030;
LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890;
LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1 ();
LOAD DATA INFILE '../../std_data/loaddata_incomplete_mb.dat' INTO TABLE t1 IGNORE 20 LINES;
LOAD DATA INFILE '../../std_data/loaddata_incomplete_escape.dat' INTO TABLE t1 IGNORE 20 LINES;
CREATE PROCEDURE p1() LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1;
LOAD DATA LOCAL INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t1;
LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t2 FIELDS TERMINATED BY '' LINES TERMINATED BY '';
LOAD DATA INFILE '../../std_data/loaddata_utf8.dat' INTO TABLE t3 (a) SET i = NULL;
LOAD DATA INFILE '../../std_data/x_y_data.csv'   INTO TABLE t1   FIELDS TERMINATED BY ','   (x, y);
LOAD DATA INFILE '../../std_data/x_y_data.csv'   INTO TABLE t1   FIELDS TERMINATED BY ','   (x, y) SET g = ST_SRID(POINT(x, y), 4326);
CREATE TABLE t1 (  json_col JSON , KEY json_col ((CAST(json_col -> '$' AS UNSIGNED ARRAY))) );
SHOW CREATE DATABASE mysqltest1;
SHOW CREATE DATABASE mysqltest2;
show create database mysqltest2;
ALTER DATABASE `` DEFAULT CHARACTER SET latin2;
UNLOCK TABLES;
CREATE TRIGGER post_insert_t1 AFTER INSERT ON t1 FOR EACH ROW BEGIN   INSERT INTO t3 VALUES(5);
END| CREATE TRIGGER post_update_t1 AFTER UPDATE ON t1 FOR EACH ROW BEGIN   INSERT INTO t3 VALUES(4);
END| DELIMITER ;| INSERT IGNORE INTO t1 VALUES(3);
CREATE TRIGGER post_insert_t1 AFTER INSERT ON t1 FOR EACH ROW BEGIN   INSERT IGNORE INTO t3 VALUES (5),(6);
END| CREATE TRIGGER post_update_t1 AFTER UPDATE ON t1 FOR EACH ROW BEGIN   INSERT IGNORE INTO t3 VALUES(4);
END| DELIMITER ;| INSERT INTO t1 VALUES(2);
LOAD DATA INFILE '../../std_data/wl6030_2.dat' INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '"';
LOAD DATA INFILE '../../std_data/wl6030_2.dat' IGNORE INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '"';
LOAD DATA INFILE '../../std_data/rpl_loaddata.dat' INTO TABLE t2 (a, @b) SET b= @b + 2;
CREATE PROCEDURE p1() BEGIN   DECLARE too_few_records CONDITION FOR SQLSTATE '01000';
SIGNAL too_few_records SET MYSQL_ERRNO = 1261;
END | DELIMITER ;| CALL p1();
prepare stmt from " SELECT (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((( 1 )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) " ;
execute stmt;
create function func_overflow() returns int BEGIN   DECLARE x int defaultx=x+1;   SET x=x+2;   SET x=xreturn x; END $$
create trigger trigger_overflow before insert on table_overflow for each rowb := NEW.a;   SET NEW.b := NEW.b + 1;   SET NEW.b := NEW.b + 2;   SET NEW.b := NEW.b
CREATE PROCEDURE proc_35577() BEGIN   DECLARE z_done INT DEFAULT 0;   DECLARE t_done VARCHAR(5000);   outer_loop: LOOP     IF t_done=1  THEN       LEAVE outer_loop;     END IF;     inner_block:BEGIN       DECLARE z_done INT DEFAULT  0;       SET z_done = 0;       inner_loop: LOOP         IF z_done=1  THEN           LEAVE inner_loop;         END IF;         IF (t_done = 'a') THEN           IF (t_done <> 0) THEN             IF ( t_done > 0) THEN               IF (t_done = 'a') THEN                 SET t_done = 'a';               ELSEIF (t_done = 'a') THEN                 SET t_done = 'a';               ELSEIF(t_done = 'a') THEN                 SET t_done = 'a';               ELSEIF(t_done = 'a') THEN                 SET t_done = 'a';               ELSEIF(t_done = 'a') THEN                 SET t_done = 'a';               ELSEIF(t_done = 'a') THEN                 SET t_done = 'a';               ELSEIF(t_done = 'a') THEN                 SET t_done = 'a';               ELSEIF(t_done = 'a') THEN                 SET t_done = 'a';               END IF;             END IF;           END IF;         END IF;       END LOOP inner_loop;     END inner_block;   END LOOP outer_loop; END $$
create procedure p_37269() begin   declare done int default 0;   declare varb int default 0;   declare vara int default 0;   repeat     select now();   until done end repeat;   while varb do     select now();     begin       select now();       repeat         select now();       until done end repeat;       if vara then          select now();         repeat           select now();           loop             select now();           end loop;           repeat             select now();             label1: while varb do               select now();             end while label1;             if vara then                select now();               repeat                 select now();               until done end repeat;               begin                 select now();                 while varb do                   select now();                   label1: while varb do                     select now();                   end while label1;                   if vara then                      select now();                     while varb do                       select now();                       loop                         select now();                       end loop;                       repeat                         select now();                         loop                           select now();                           while varb do                             select now();                           end while;                           repeat                             select now();                             label1: loop                               select now();                               if vara then                                  select now();                               end if;                             end loop label1;                           until done end repeat;                         end loop;                       until done end repeat;                     end while;                   end if;                 end while;               end;             end if;           until done end repeat;         until done end repeat;       end if;     end;   end while; end $$
create procedure p_37228 () BEGIN   DECLARE v INT DEFAULT 123;   IF (v > 1) THEN SET v = 1;    ELSEIF (v < 10) THEN SET v = 10;   ELSEIF (v < 11) THEN SET v = 11;   ELSEIF (v < 12) THEN SET v = 12;   ELSEIF (v < 13) THEN SET v = 13;   ELSEIF (v < 14) THEN SET v = 14;   ELSEIF (v < 15) THEN SET v = 15;   ELSEIF (v < 16) THEN SET v = 16;   ELSEIF (v < 17) THEN SET v = 17;   ELSEIF (v < 18) THEN SET v = 18;   ELSEIF (v < 19) THEN SET v = 19;   ELSEIF (v < 20) THEN SET v = 20;   ELSEIF (v < 21) THEN SET v = 21;   ELSEIF (v < 22) THEN SET v = 22;   ELSEIF (v < 23) THEN SET v = 23;   ELSEIF (v < 24) THEN SET v = 24;   ELSEIF (v < 25) THEN SET v = 25;   ELSEIF (v < 26) THEN SET v = 26;   ELSEIF (v < 27) THEN SET v = 27;   ELSEIF (v < 28) THEN SET v = 28;   ELSEIF (v < 29) THEN SET v = 29;   ELSEIF (v < 30) THEN SET v = 30;   ELSEIF (v < 31) THEN SET v = 31;   ELSEIF (v < 32) THEN SET v = 32;   ELSEIF (v < 33) THEN SET v = 33;   ELSEIF (v < 34) THEN SET v = 34;   ELSEIF (v < 35) THEN SET v = 35;   ELSEIF (v < 36) THEN SET v = 36;   ELSEIF (v < 37) THEN SET v = 37;   ELSEIF (v < 38) THEN SET v = 38;   ELSEIF (v < 39) THEN SET v = 39;   END IF; END $$
if ($check_std_csets) { } if ($check_ucs2_csets) { } if ($check_utf8_csets) { } if ($check_for_object_names) { } CREATE DATABASE db1_charset;
call mtr.add_suppression("filter_rules: *");
call mtr.add_suppression(".*No error message, or error message of non-string type. This is almost certainly a bug!");
call mtr.add_suppression(".*using log_message.. with .*");
call mtr.add_suppression(".*System schema directory does not exist.");
call mtr.add_suppression(".* Simulated");
call mtr.add_suppression(".*aaaaaaaaaaaaa");
if($log_error_ == "stderr") { } FLUSH LOGS;
perl;
use File::stat;
my $file= $ENV{'GREP_FILE'} or die("grep file not set");
my $pattern="^20";
my $stime= $ENV{'GREP_START'};
open(FILE, "$file") or die("Unable to open $file: $!");
while (<FILE>) {      my $line = $_;
my $ts = 0;
if ($stime == 0) {        print "$line";
}      elsif ($line =~ /$pattern/) {        $line =~ /([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])T([0-9][0-9]):([0-9][0-9]):([0-9][0-9])\.([0-9][0-9][0-9][0-9][0-9][0-9])[-+Z][0-9:]* *[0-9]* *?(\[.*)/;
$ts=$1.$2.$3.$4.$5.$6.$7;
if ($ts >= $stime) {          $stime= 0;
}      }    }    close(FILE);
perl;
use File::stat;
my $file= $ENV{'GREP_FILE'} or die("grep file not set");
open(FILE, "$file") or die("Unable to open $file: $!");
while (<FILE>) {      my $line = $_;
$line =~ s/"source_line" : \d+, //;
$line =~ s/"err_code" : \d+, //;
print "$line";
}    close(FILE);
perl;
use File::stat;
my $file= $ENV{'GREP_FILE'} or die("grep file not set");
open(FILE, "$file") or die("Unable to open $file: $!");
while (<FILE>) {      my $line = $_;
$line =~ s/"source_line" : \d+, //;
$line =~ s/"err_code" : \d+, //;
print "$line";
}    close(FILE);
perl;
use File::stat;
my $file= $ENV{'GREP_FILE'} or die("grep file not set");
my $second_run=0;
my $seen_inno=0;
my $post_inno=0;
open(FILE, "$file") or die("Unable to open $file: $!");
while (<FILE>) {      my $line = $_;
if ($line =~ /"ER_SERVER_SHUTDOWN_COMPLETE"/) {        $second_run=1; }      if ($second_run > 0) {        if (!($line =~ /"buffered" : /) && ($line =~ /"subsystem" : "InnoDB"/)) {          $seen_inno++; }        if (($line =~ /"buffered" : /) && ($seen_inno > 0)) {          $post_inno++; }}}    close(FILE);
connect (con1,localhost,root,,);
disconnect con1;
SET cost_value=$row_evaluate_cost      WHERE cost_name="row_evaluate_cost";
SET cost_value=$key_compare_cost      WHERE cost_name="key_compare_cost";
SET cost_value=$memory_temptable_create_cost      WHERE cost_name="memory_temptable_create_cost";
SET cost_value=$memory_temptable_row_cost      WHERE cost_name="memory_temptable_row_cost";
SET cost_value=$disk_temptable_create_cost      WHERE cost_name="disk_temptable_create_cost";
SET cost_value=$disk_temptable_row_cost      WHERE cost_name="disk_temptable_row_cost";
SET cost_value=$memory_block_read_cost      WHERE cost_name="memory_block_read_cost";
SET cost_value=$io_block_read_cost      WHERE cost_name="io_block_read_cost";
connect (con1,localhost,root,,);
disconnect con1;
connect (con1,localhost,root,,);
disconnect con1;
SET cost_value=$row_evaluate_cost      WHERE cost_name="row_evaluate_cost";
SET cost_value=$key_compare_cost      WHERE cost_name="key_compare_cost";
SET cost_value=$memory_temptable_create_cost      WHERE cost_name="memory_temptable_create_cost";
SET cost_value=$memory_temptable_row_cost      WHERE cost_name="memory_temptable_row_cost";
SET cost_value=$disk_temptable_create_cost      WHERE cost_name="disk_temptable_create_cost";
SET cost_value=$disk_temptable_row_cost      WHERE cost_name="disk_temptable_row_cost";
SET cost_value=$memory_block_read_cost      WHERE cost_name="memory_block_read_cost";
SET cost_value=$io_block_read_cost      WHERE cost_name="io_block_read_cost";
connect (con1,localhost,root,,);
disconnect con1;
INSERT INTO t4 SELECT c31, CONCAT(c32,                    REPEAT('a', @max_allowed_packet-1)) FROM t3;
UPDATE t3 SET c32= CONCAT(c32,                 REPEAT('a', @max_allowed_packet-1));
connect (master,localhost,root,,);
connect (user_a,localhost,mysqltest_1,,);
disconnect user_a;
disconnect master;
connect (conn1,localhost,mysqltest1,,);
disconnect conn1;
SHOW GRANTS FOR 'user2'@'%';
SHOW GRANTS FOR 'user2'@'%';
connect (conn1, localhost, user2,,);
disconnect conn1;
create table `t``1`(a int) engine=myisam;
drop table `t``1`, `t 1`;
RETURNS STRING SONAME "$UDF_EXAMPLE_LIB";
RETURNS REAL SONAME "$UDF_EXAMPLE_LIB";
WHERE udf_library='$UDF_EXAMPLE_LIB'   ORDER BY UDF_NAME;
prepare s from "select myfunc_double(?)";
execute s using @one;
deallocate prepare s;
CREATE PROCEDURE `XXX1`(in testval varchar(10)) begin select metaphon(testval); end//
CREATE PROCEDURE `XXX2`() begin declare testval varchar(10); set testval = 'hello'; select metaphon(testval); end//
CREATE DEFINER=CURRENT_USER() FUNCTION should_not_parse RETURNS STRING SONAME "should_not_parse.so";
CREATE DEFINER=someone@somewhere FUNCTION should_not_parse RETURNS STRING SONAME "should_not_parse.so";
CREATE FUNCTION fn(a int) RETURNS int DETERMINISTIC BEGIN     RETURN a;
END || DELIMITER ;|| CREATE VIEW v1 AS SELECT a, fn(MIN(b)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(a AS attr_name) FROM t1;
EXPLAIN SELECT myfunc_int(a AS attr_name) FROM t1;
SELECT a, fn(MIN(b) xx) as c FROM t1 GROUP BY a;
SELECT myfunc_int(fn(MIN(b) xx)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(test.fn(MIN(b) xx)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(fn(MIN(b)) xx) as c FROM t1 GROUP BY a;
SELECT myfunc_int(test.fn(MIN(b)) xx) as c FROM t1 GROUP BY a;
EXPLAIN SELECT myfunc_int(MIN(b) xx) as c FROM t1 GROUP BY a;
EXPLAIN SELECT test.fn(MIN(b)) as c FROM t1 GROUP BY a;
EXPLAIN SELECT myfunc_int(test.fn(MIN(b))) as c FROM t1 GROUP BY a;
SELECT myfunc_int(MIN(b) xx) as c FROM t1 GROUP BY a;
SELECT test.fn(MIN(b)) as c FROM t1 GROUP BY a;
SELECT myfunc_int(test.fn(MIN(b))) as c FROM t1 GROUP BY a;
select myfunc_double(3 AS three);
select myfunc_double(abs(3) AS named_param);
select abs(myfunc_double(3 AS three));
select myfunc_double(abs(3 AS wrong));
select abs(myfunc_double(3) AS wrong);
create function f1(p1 varchar(255)) returns varchar(255) begin   return metaphon(p1); end//
create function f2(p1 varchar(255)) returns double begin   return myfunc_double(p1); end//
create function f3(p1 varchar(255)) returns double begin   return myfunc_int(p1); end//
CREATE TRIGGER check_const_len_trigger BEFORE INSERT ON const_len_bug FOR EACH ROW BEGIN    set NEW.str_const = 'bar';
END | CREATE PROCEDURE check_const_len_sp (IN str_const VARCHAR(4000)) BEGIN DECLARE result VARCHAR(4000);
END | DELIMITER ;| CALL check_const_len_sp("foo");
select test.metaphon("Hello");
connect(con1, localhost, root);
UNLOCK TABLES;
UNLOCK TABLES;
disconnect con1;
RETURNS INTEGER SONAME "$UDF_EXAMPLE_LIB";
execute ps;
execute ps;
DEALLOCATE PREPARE ps;
if ($is_windows) { } if (!$is_windows) { }     SELECT count(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST     WHERE state = "Waiting for table metadata lock" AND id = $con1_id;
disconnect con1;
SONAME "$UDF_EXAMPLE_LIB";
SONAME "$UDF_EXAMPLE_LIB";
if (!$explicit_defaults_for_timestamp) {  insert into t1 values(1,NULL);
} insert into t1 values(2,"2002-03-03");
if (!$explicit_defaults_for_timestamp) {  insert into t1 values(3,NULL);
} SET TIMESTAMP=1236;
create table t1 (t1 timestamp not null default now(), t2 datetime, t3 timestamp NOT NULL DEFAULT '0000-00-00 00:00:00');
create table t1 (t1 timestamp not null default '2003-01-01 00:00:00' on update now(), t2 datetime);
create table t1 (t1 timestamp not null default now() on update now(), t2 datetime);
if (!$explicit_defaults_for_timestamp) {  INSERT INTO t1 (f2,f3) VALUES (NOW(), NULL);
} UPDATE t1 SET f2=NOW(), f3=FROM_UNIXTIME('9999999999') WHERE f1=1;
CALL mtr.add_suppression("Plugin test_plugin_server reported: 'Wrong password supplied for plug_dest'");
query_vertical SELECT PLUGIN_STATUS, PLUGIN_TYPE, PLUGIN_DESCRIPTION   FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME='test_plugin_server';
connect(plug_con,localhost,plug,plug_dest);
connect(plug_con,localhost,plug,plug_dest);
disconnect plug_con;
connect(plug_con,localhost,plug,bad_credentials);
connect(plug_con_wrongp,localhost,plug,plug_dest,,,,,wrong_plugin_name);
disconnect plug_con_wrongp;
connect(plug_con_rightp,localhost,plug,plug_dest,,,,,auth_test_plugin);
disconnect plug_con_rightp;
connect(non_ascii,localhost,Ÿ,plug_dest);
disconnect non_ascii;
REVOKE SELECT on test_grant_db.* FROM joro   INDENTIFIED WITH 'test_plugin_server' AS 'plug_dest';
REVOKE SELECT on test_grant_db.* FROM joro   INDENTIFIED BY 'plug_dest_passwd';
REVOKE SELECT on test_grant_db.* FROM joro   INDENTIFIED BY PASSWORD 'plug_dest_passwd';
connect(grant_plug_con,localhost,grant_plug,grant_plug_dest);
GRANT ALL PRIVILEGES,PROXY ON grant_plug_dest TO grant_plug;
GRANT ALL SELECT,PROXY ON grant_plug_dest TO grant_plug;
connect(grant_plug_dest_con,localhost,grant_plug_dest,grant_plug_dest_passwd);
GRANT PROXY ON ''@'' TO grant_plug;
GRANT PROXY ON grant_plug_dest@localhost TO grant_plug WITH GRANT OPTION;
disconnect grant_plug_dest_con;
GRANT PROXY ON ''@'' TO grant_plug;
GRANT PROXY ON ''@'' TO proxy_admin WITH GRANT OPTION;
connect (proxy_admin_con,localhost,proxy_admin,test);
disconnect proxy_admin_con;
SHOW GRANTS FOR grant_plug;
SHOW GRANTS FOR grant_plug;
SHOW GRANTS FOR test_drop@localhost;
connect(plug_con,localhost,plug,plug_dest);
disconnect plug_con;
connect(plug_con,localhost,plug,plug_dest);
disconnect plug_con;
connect(plug_con,localhost, test_login_user, power_user, confidential_db);
disconnect plug_con;
connect(cleartext_fail_con,localhost,uplain,cleartext_test2,,,,CLEARTEXT);
connect(cleartext_con,localhost,uplain,cleartext_test,,,,CLEARTEXT);
disconnect cleartext_con;
connect(b12610784,localhost,bug12610784,,test);
connect(b12610784,localhost,bug12610784,secret,test);
disconnect b12610784;
GRANT PROXY ON bug12818542_dest@localhost TO bug12818542@localhost;
connect(bug12818542_con,localhost,bug12818542,bug12818542_dest);
disconnect bug12818542_con;
connect(bug12818542_con2,localhost,bug12818542,bug12818542_dest);
disconnect bug12818542_con2;
GRANT PROXY ON bug12818542_dest@localhost TO bug12818542@localhost;
connect(bug12818542_con,localhost,bug12818542,bug12818542_dest);
disconnect bug12818542_con;
connect(bug12818542_con2,localhost,bug12818542,bug12818542_dest);
disconnect bug12818542_con2;
GRANT PROXY ON 'employee'@'localhost' TO 'empl_external'@'localhost';
connect(cleartext_con,localhost,bug20537246,,,,,CLEARTEXT);
disconnect cleartext_con;
GRANT PROXY ON 'employee'@'localhost' TO 'empl_external'@'localhost';
connect(plugin_con, localhost, empl_external, employee);
disconnect plugin_con;
connect(plugin_con, localhost, empl_external, employee);
disconnect plugin_con;
connect(plugin_con, localhost, employee, passkey);
disconnect plugin_con;
connect(plug_user22,localhost,user_name_len_22_01234,user_name_len_22_0dest);
connect(plug_user22,localhost,user_name_len_22_01234,user_name_len_22_0dest);
CREATE USER очень_очень_очень_длинный_юзер__ IDENTIFIED WITH 'test_plugin_server' AS 'очень_очень_очень_длинный_дест__';
CREATE USER очень_очень_очень_длинный_дест__ IDENTIFIED BY 'plug_dest_passwd';
connect(plug_user32,localhost,очень_очень_очень_длинный_юзер__,очень_очень_очень_длинный_дест__);
GRANT PROXY ON очень_очень_очень_длинный_дест__ TO очень_очень_очень_длинный_юзер__;
connect(plug_user32,localhost,очень_очень_очень_длинный_юзер__,очень_очень_очень_длинный_дест__);
disconnect plug_user22;
disconnect plug_user32;
DROP USER очень_очень_очень_длинный_юзер__;
DROP USER очень_очень_очень_длинный_дест__;
CREATE USER очень_очень_очень_длинный_юзер__@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string';
DROP USER очень_очень_очень_длинный_юзер__@localhost;
CREATE USER очень_очень_очень_длинный_юзер__@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string';
DROP USER очень_очень_очень_длинный_юзер__@localhost;
CREATE USER очень_очень_очень_длинный_юзер__@localhost IDENTIFIED WITH 'cleartext_plugin_server' AS 'auth_string';
DROP USER очень_очень_очень_длинный_юзер__@localhost;
CREATE USER очень_очень_очень_длинный_юзер__@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' REQUIRE SSL;
DROP USER очень_очень_очень_длинный_юзер__@localhost;
CREATE USER очень_очень_очень_длинный_юзер__@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string' REQUIRE SSL;
DROP USER очень_очень_очень_длинный_юзер__@localhost;
CREATE USER очень_очень_очень_длинный_юзер__@localhost IDENTIFIED WITH 'cleartext_plugin_server' AS 'auth_string' REQUIRE SSL;
DROP USER очень_очень_очень_длинный_юзер__@localhost;
if (!$require_case_insensitive_file_system) { } USE INFORMATION_SCHEMA;
query_vertical SELECT * FROM information_schema.columns WHERE table_schema = 'information_schema'   AND table_name   = 'ROUTINES' ORDER BY ordinal_position;
CREATE FUNCTION test_func1 (s char(20) RETURNS CHAR(50) RETURN CONCAT('Hello', ,s,'!');
CREATE PROCEDURE testproc (OUT param1 INT)   BEGIN    SELECT 2+2 as param1;   END; //
CREATE PROCEDURE test_proc1 (OUT p_p1 timestamp) BEGIN SELECT 1 ; END; \\
LOAD DATA INFILE '../../std_data/inconsistent_scan.csv' INTO TABLE t1 COLUMNS TERMINATED BY "," IGNORE 1 LINES;
connect(zstd_con, localhost, root,,,,,,,zstd,22);
disconnect zstd_con;
if (!$VALGRIND_TEST) {   if ($is_debug) {     SET GLOBAL debug = "+d,temptable_api";
} } SELECT * FROM information_schema.table_constraints WHERE table_schema = 'mysql' AND table_name != 'ndb_binlog_index' ORDER BY table_schema,table_name,constraint_name COLLATE utf8_general_ci;
if ($is_debug) {   SET GLOBAL debug = default;
} SET SESSION internal_tmp_mem_storage_engine = default;
connect (thread1, localhost, root,,);
connect (thread2, localhost, root,,);
send;
disconnect thread2;
disconnect thread1;
CALL mtr.add_suppression("--character-set-server: 'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.");
write_file $BOOTSTRAP_SQL;
disable_query_log;
while ($1) {  dec $1;
} enable_query_log;
disable_query_log;
while ($1) {  dec $1;
} enable_query_log;
show grants for mysqltest_1@localhost;
show grants for mysqltest_1@localhost;
CALL mtr.add_suppression('Failed to set up SSL because of the following SSL library error');
CALL mtr.add_suppression('Failed to initialize TLS for channel: mysql_main');
INSERT INTO t1 VALUES(default(col1),default(col2));
insert into t1 (charcol) values (repeat('x',256));
insert into t1 (varcharcol) values (repeat('x',256));
insert into t1 (binarycol) values (repeat('x',256));
insert into t1 (varbinarycol) values (repeat('x',256));
insert into t1 (tinytextcol) values (repeat('x',256));
insert into t1 (tinyblobcol) values (repeat('x',256));
create procedure t1 () begin declare exit handler for sqlexception select'a'; insert into t1 values (200); end;|
INSERT INTO t1 VALUES (DEFAULT(i));
INSERT INTO t1 SET j = 1, i = DEFAULT(i);
INSERT INTO t1 VALUES (DEFAULT(i));
INSERT INTO t1 SET j = 1, i = DEFAULT(i);
CREATE TABLE t1 ( Id INTEGER NOT NULL AUTO_INCREMENT, PRIMARY KEY(Id), c1 INTEGER NOT NULL, c2 INTEGER NOT NULL )| CREATE PROCEDURE p1() BEGIN UPDATE t1 SET c1 = c1 / c2;
END| CREATE PROCEDURE p2() BEGIN DECLARE EXIT HANDLER FOR SQLSTATE '23000' # (ER_DUP_ENTRY) BEGIN SELECT 'Duplication handled!';
END;
END| DELIMITER ;| INSERT INTO t1 (Id, c1, c2) VALUES (1, 1, 0);
CREATE TRIGGER t1_BI BEFORE INSERT ON t1 FOR EACH ROW   SET NEW.id := -1;
lock table t1 write;
lock table t1 read;
unlock tables;
lock table t1 read;
unlock tables;
connect(con1, localhost, root,,);
connect(con2, localhost, root,,);
connect(con3, localhost, root,,);
create function f1() returns int  begin   call p1();   return 1; end|
send drop procedure p1;
where state='Waiting for stored procedure metadata lock' and info='drop procedure p1';
send select f1();
where state='Waiting for stored procedure metadata lock' and info='select f1()';
reap;
reap;
send create procedure p1() begin end;
where state='Waiting for stored procedure metadata lock' and info='create procedure p1() begin end';
send select f1();
where state='Waiting for stored procedure metadata lock' and info='select f1()';
reap;
reap;
send alter procedure p1 contains sql;
where state='Waiting for stored procedure metadata lock' and info='alter procedure p1 contains sql';
send select f1();
where state='Waiting for stored procedure metadata lock' and info='select f1()';
reap;
reap;
send drop function f1;
where state='Waiting for stored function metadata lock' and info='drop function f1';
send select f1();
where state='Waiting for stored function metadata lock' and info='select f1()';
reap;
reap;
send create function f1() returns int return 2;
where state='Waiting for stored function metadata lock' and info='create function f1() returns int return 2';
send select f1();
where state='Waiting for stored function metadata lock' and info='select f1()';
reap;
reap;
send alter function f1 contains sql;
where state='Waiting for stored function metadata lock' and info='alter function f1 contains sql';
send select f1();
where state='Waiting for stored function metadata lock' and info='select f1()';
reap;
reap;
send drop function f1;
where state='Waiting for stored function metadata lock' and info='drop function f1';
reap;
send drop function f1;
where state='Waiting for stored function metadata lock' and info='drop function f1';
reap;
create function f1() returns int begin   declare v_out int;   call p1(v_out);   return v_out; end|
send drop procedure p1;
where state='Waiting for stored procedure metadata lock' and info='drop procedure p1';
reap;
send drop function f2;
where state='Waiting for stored function metadata lock' and info='drop function f2';
reap;
lock table v1 read;
send drop function f1;
where state='Waiting for stored function metadata lock' and info='drop function f1';
send drop function f2;
where state='Waiting for stored function metadata lock' and info='drop function f2';
reap;
unlock tables;
reap;
create function f2() returns int begin   if @var is null then     call p1();   end if;   return 1; end|
create procedure p1() begin   select f1() into @var;   execute stmt; end|
prepare stmt from "select f2()";
send alter function f1 comment "comment";
where state='Waiting for stored function metadata lock' and info like 'alter function f1 comment%';
send call p1();
where state='Waiting for stored function metadata lock' and info='select f1() into @var';
reap;
reap;
deallocate prepare stmt;
send alter function f1 comment "comment";
where state='Waiting for stored function metadata lock' and info like 'alter function f1 comment%';
create function f2() returns int begin   if @var is null then     call p1();   end if;   return 1; end|
create procedure p1() begin   select f1() into @var;   select f2() into @var; end|
send call p1();
where state='Waiting for stored function metadata lock' and info='select f1() into @var';
reap;
reap;
create function f3() returns varchar(255)  begin   declare res varchar(255);   declare c cursor for select routine_name from     information_schema.routines where routine_name='f1';   select f1() into @var;   open c;   fetch c into res;   close c;   select f2() into @var;   return res; end|
send select f3();
where state='User lock' and info='select f1() into @var';
reap;
create function f1() returns int begin   call p1();   return 1; end|
create procedure p1()  begin   create view v1 as select 1;   drop view v1;   select f1() into @var;   set @exec_count=@exec_count+1; end|
disconnect con1;
disconnect con2;
disconnect con3;
CREATE PROCEDURE p1() BEGIN   SHOW CREATE PROCEDURE p1;   SELECT get_lock("test", 100000);   SHOW CREATE PROCEDURE p1; END|
connect (con2, localhost, root);
connect (con3, localhost, root);
WHERE state='User lock' and info='SELECT get_lock("test", 100000)';
disconnect con3;
disconnect con2;
connect(con1, localhost, root);
connect(con2, localhost, root);
SELECT db1.f1();
WHERE state= 'Waiting for stored function metadata lock'   AND info='DROP DATABASE db1';
CREATE FUNCTION f1() RETURNS INTEGER BEGIN   CALL db1.p1();   RETURN 1; END|
WHERE state= 'Waiting for stored procedure metadata lock'   AND info='DROP DATABASE db1';
SELECT db1.f1();
WHERE state= 'Waiting for stored function metadata lock'   AND info='DROP DATABASE db1';
SELECT db1.f2();
WHERE state= 'Waiting for stored function metadata lock'   AND info='DROP DATABASE db1';
WHERE state= 'Waiting for schema metadata lock'   AND info='ALTER FUNCTION db1.f1 COMMENT "test"';
disconnect con1;
disconnect con2;
set @a=repeat(' ',20);
disable_query_log;
while ($1) {   while ($2)   {     insert into t1 values(concat(@char,@space),concat(@char,@space),concat(@char,@space));
dec $2;
}   dec $1;
} enable_query_log;
create table t1 (v varchar(10), c char(10), t varchar(50), key using btree (v), key using btree (c), key using btree (t(10))) charset latin1;
disable_query_log;
while ($1) {   while ($2)   {     insert into t1 values(concat(@char,@space),concat(@char,@space),concat(@char,@space));
dec $2;
}   dec $1;
} enable_query_log;
create table t1 (a char(10), unique using btree (a)) charset latin1 engine=heap;
insert into t1 values(repeat('a',65530));
select length(v) from t1 where v=repeat('a',65530);
INSERT INTO t1 VALUES('a','aa',REPEAT('a', 256)),('a','aa',REPEAT('a',256));
SELECT COUNT(*) FROM t1 WHERE c=REPEAT('a',256);
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] Server shutdown in progress");
query_vertical SELECT host,user,plugin FROM mysql.user WHERE USER='user1';
CREATE USER user3@%;
CREATE USER user3@localhost BY 'auth_string' WITH 'sha_256_password';
query_vertical SELECT host,user,plugin FROM mysql.user WHERE USER='user2';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u1';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u2';
CREATE USER user5@localhost IDENTIFIED  AS 'auth_string';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u3';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u4';
disconnect con1;
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='user4';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='user6';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='user7';
disconnect con1;
query_vertical SELECT User,plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='user8';
disconnect con1;
query_vertical SELECT User,plugin,password_expired, password_expired FROM mysql.user WHERE USER='tu1';
query_vertical SELECT User,plugin,password_expired FROM mysql.user WHERE USER='tu2';
query_vertical SELECT User,plugin,password_expired FROM mysql.user WHERE USER='tu3';
query_vertical SELECT User,plugin,ssl_type FROM mysql.user WHERE USER='u5';
query_vertical SELECT User,plugin,ssl_type FROM mysql.user WHERE USER='u6';
query_vertical SELECT User,plugin,ssl_type FROM mysql.user WHERE USER='tu4';
query_vertical SELECT User,plugin,ssl_type FROM mysql.user WHERE USER='tu5';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject FROM mysql.user WHERE USER='u7';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime FROM mysql.user WHERE USER='u8';
disconnect con1;
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject FROM mysql.user WHERE USER='u9';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher,x509_issuer, x509_subject,password_expired,password_lifetime FROM mysql.user WHERE USER='u10';
disconnect con1;
query_vertical SELECT User,plugin,ssl_type,ssl_cipher,x509_issuer, x509_subject,max_questions,max_user_connections FROM mysql.user WHERE USER='tu6';
query_vertical SELECT User,plugin,max_questions FROM mysql.user WHERE USER='u11';
query_vertical SELECT User,plugin,max_questions, password_expired,password_lifetime FROM mysql.user WHERE USER='u12';
query_vertical SELECT User,plugin,max_connections FROM mysql.user WHERE USER='u13';
query_vertical SELECT User,plugin,max_user_connections, password_expired,password_lifetime FROM mysql.user WHERE USER='u14';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u15';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u16';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u17';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime FROM mysql.user WHERE USER='u18';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime FROM mysql.user WHERE USER='u19';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime FROM mysql.user WHERE USER='u20';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime FROM mysql.user WHERE USER='u21';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime FROM mysql.user WHERE USER='u22';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_questions,max_user_connections,password_expired, password_lifetime FROM mysql.user WHERE USER='u23';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u1';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u1';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u2';
ALTER USER u2@localhost IDENTIFIED WITH 'mysql_native_password' PASSWORD EXPIRE NEVER;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u2';
disconnect con1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u3';
ALTER USER u3@localhost IDENTIFIED WITH 'mysql_native_password'                         AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u3';
disconnect con1;
ALTER USER u3@localhost IDENTIFIED WITH 'test_plugin_server' BY 'auth_string';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u3';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u3';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u4';
ALTER USER u4@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u4';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u5';
ALTER USER u5@localhost IDENTIFIED WITH 'sha256_password';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u5';
disconnect con1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u6';
ALTER USER u6@localhost IDENTIFIED WITH 'test_plugin_server'                         AS 'new_auth_string' REQUIRE SSL;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u6';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u7';
ALTER USER u7@localhost IDENTIFIED WITH 'sha256_password' BY 'new_auth_string'                         REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u7';
disconnect con1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u8';
ALTER USER u8@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string'                         REQUIRE CIPHER "DHE-RSA-AES256-SHA";
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u8';
disconnect con1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='tu1';
ALTER USER tu1@localhost IDENTIFIED WITH 'sha256_password'                          REQUIRE CIPHER "DHE-RSA-AES256-SHA";
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='tu1';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u9';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u9';
ALTER USER u9@localhost IDENTIFIED WITH 'test_plugin_server' BY 'auth_string77hg'                         REQUIRE ISSUER "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA";
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u9';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u10';
ALTER USER u10@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string'                          REQUIRE SSL;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u10';
disconnect con1;
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u11';
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u11';
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u12';
ALTER USER u12@localhost IDENTIFIED WITH 'sha256_password'                          WITH MAX_QUERIES_PER_HOUR 8;
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u12';
ALTER USER u12@localhost IDENTIFIED WITH 'test_plugin_server'                          WITH MAX_QUERIES_PER_HOUR 1000;
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u12';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u13';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u13';
disconnect con1;
disconnect con1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u14';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u14';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections,max_questions, password_last_changed,password_lifetime FROM mysql.user WHERE USER='tu2';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections,max_questions, password_last_changed,password_lifetime FROM mysql.user WHERE USER='tu2';
disconnect con1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u15';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u16';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u17';
ALTER USER u15@localhost IDENTIFIED WITH 'sha256_password',            u16@localhost,            u17@localhost IDENTIFIED BY 'new_auth_string'                          PASSWORD EXPIRE DEFAULT;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u15';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u16';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,password_lifetime FROM mysql.user WHERE USER='u17';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, max_questions,password_last_changed,password_lifetime FROM mysql.user WHERE USER BETWEEN 'u18' AND 'u23' order by 1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, max_questions,password_last_changed,password_lifetime FROM mysql.user WHERE USER BETWEEN 'u18' AND 'u23' order by 1;
disconnect con1;
disconnect con1;
disconnect con1;
ALTER USER IDENTIFIED BY 'npwd';
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
ALTER USER USER() IDENTIFIED WITH 'sha256_password';
ALTER USER USER() IDENTIFIED BY 'def', u2@localhost PASSWORD EXPIRE;
ALTER USER USER() IDENTIFIED BY 'def' PASSWORD EXPIRE;
ALTER USER ;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_last_changed,password_lifetime FROM mysql.user WHERE USER='u2';
disconnect con1;
disconnect con1;
ALTER USER u10@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string'            REQUIRE CIPHER "DHE-RSA-AES256-SHA" AND            SUBJECT "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=Client"            ISSUER "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA"            WITH MAX_CONNECTIONS_PER_HOUR 1000            MAX_USER_CONNECTIONS 20 MAX_QUERIES_PER_HOUR 60            MAX_UPDATES_PER_HOUR 100;
ALTER USER u15@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string'                          WITH MAX_CONNECTIONS_PER_HOUR 1000                               MAX_USER_CONNECTIONS 20 MAX_QUERIES_PER_HOUR 60                               MAX_UPDATES_PER_HOUR 100;
query_vertical SELECT user,plugin,ssl_type,ssl_cipher, x509_issuer,x509_subject,max_user_connections, max_questions,max_updates,max_connections FROM mysql.user WHERE USER='user1';
SHOW GRANTS FOR user1@localhost;
SHOW GRANTS FOR user1@localhost;
query_vertical SELECT user,plugin,ssl_type,password_expired, password_lifetime FROM mysql.user where  user='user3';
disconnect con1;
query_vertical SELECT user,plugin,ssl_type, password_expired,password_lifetime FROM mysql.user where  user='user4';
query_vertical SELECT user,plugin,ssl_type, password_expired,password_lifetime FROM mysql.user where  user='user5';
disconnect con1;
query_vertical SELECT user,plugin,ssl_type, password_expired,password_lifetime FROM mysql.user where  user='user4';
disconnect con1;
query_vertical SELECT user,plugin, password_expired FROM mysql.user WHERE USER='user6';
ALTER USER user6@localhost IDENTIFIED WITH 'sha256_password';
query_vertical SELECT user,plugin, password_expired FROM mysql.user WHERE USER='user6';
query_vertical SELECT user,plugin FROM mysql.user WHERE USER='user6';
disconnect con1;
ALTER USER u10@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string'                          REQUIRE SSL;
ALTER USER user11@localhost IDENTIFIED WITH 'sha256_password'                             REQUIRE CIPHER "DHE-RSA-AES256-SHA" AND                             SUBJECT "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=Client"                             ISSUER "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA"                             PASSWORD EXPIRE  DEFAULT ACCOUNT UNLOCK;
ALTER USER user12@localhost IDENTIFIED WITH 'mysql_native_password'                             AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'                             ACCOUNT UNLOCK PASSWORD  EXPIRE INTERVAL 90 DAY;
disconnect con1;
ALTER USER u10@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string'                          REQUIRE SSL;
ALTER USER user11@localhost IDENTIFIED WITH 'sha256_password'            REQUIRE CIPHER "DHE-RSA-AES256-SHA" AND            SUBJECT "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=Client"            ISSUER "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=CA"            PASSWORD EXPIRE  DEFAULT ACCOUNT UNLOCK;
ALTER USER user12@localhost IDENTIFIED WITH 'mysql_native_password'            AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'            ACCOUNT UNLOCK PASSWORD  EXPIRE INTERVAL 90 DAY;
disconnect con1;
ALTER USER u1 IDENTIFIED WITH 'invalid_plugin';
ALTER USER u1 IDENTIFIED WITH 'invalid_plugin' BY 'secret';
ALTER USER u1 IDENTIFIED WITH 'invalid_plugin' AS 'secret';
GRANT PROXY ON bug20364862_dest@localhost TO bug20364862_user@localhost;
CREATE USER user1@47.9.9.9 IDENTIFIED BY 'pass1';
SHOW CREATE USER user1@47.9.9.9;
disconnect con1;
SHOW CREATE USER user1@47.9.9.9;
disconnect con1;
SHOW GRANTS FOR user1@localhost;
SHOW CREATE USER user1@47.9.9.9;
disconnect con1;
SHOW GRANTS FOR user1@localhost;
SHOW GRANTS FOR user1@localhost;
SHOW CREATE USER user1@47.9.9.9;
disconnect con1;
GRANT PROXY ON bug20625566_dest@localhost TO bug20625566_user@localhost;
disconnect con1;
DROP USER user1@localhost, user1@47.9.9.9, user2,           bug20625566_user@localhost, bug20625566_dest@localhost;
connect (con1, localhost, root,,);
CONNECTION con1;
CONNECTION default;
CONNECTION con1;
CONNECTION default;
DISCONNECT con1;
connect (ce, localhost, root,, test);
connect (cq, localhost, root,, test);
if($log_error_ == "stderr") { } FLUSH LOGS;
perl;
use File::stat;
my $file= $ENV{'GREP_FILE'} or die("grep file not set");
my $pattern="^20";
my $stime= $ENV{'GREP_START'};
open(FILE, "$file") or die("Unable to open $file: $!");
while (<FILE>) {      my $line = $_;
my $ts = 0;
if ($stime == 0) {        $line =~ s/"source_line" : \d+, //;
$line =~ s/"err_code" : \d+, //;
print "$line";
}      elsif ($line =~ /$pattern/) {        $line =~ /([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])T([0-9][0-9]):([0-9][0-9]):([0-9][0-9])\.([0-9][0-9][0-9][0-9][0-9][0-9])[-+Z][0-9:]* *[0-9]* *?(\[.*)/;
$ts=$1.$2.$3.$4.$5.$6.$7;
if ($ts >= $stime) {          $stime= 0;
}      }    }    close(FILE);
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
send INSERT INTO t1 VALUES (1);
sleep 1;
UNLOCK TABLES;
reap;
unlock tables;
disconnect con1;
disconnect con2;
connect (a,localhost,root,,);
connect (b,localhost,root,,);
disconnect a;
disconnect b;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
CREATE PROCEDURE p1() BEGIN   UPDATE t1 SET b = CONCAT(b, '+con2')  WHERE a = 1;
END| DELIMITER ;| BEGIN;
while ($bug31310) { } SELECT * FROM t1;
while ($bug31310) { } SELECT * FROM t1;
reap;
disconnect con1;
disconnect con2;
write_file $BOOTSTRAP_SQL;
connect(root_con,localhost,root,,mysql);
remove_file $MYSQLD_LOG;
remove_file $BOOTSTRAP_SQL;
CALL mtr.add_suppression("file *  was not purged because it is the active log file.");
purge master logs before (select adddate(current_timestamp(), interval -4 day));
purge master logs before adddate(current_timestamp(), interval -4 day);
while ($should_work_nesting) {   $start_app;
$end;
dec $should_work_nesting;
} while ($nesting) {   $start_app;
$end;
dec $nesting;
} drop table t1;
CREATE VIEW v1 (a) AS SELECT f1 IN (SELECT f1 FROM t1) FROM t1;
handler t1 open as t1;
handler t1 read a=(1);
handler t1 close;
INSERT INTO t1 VALUES (b'', b'');
CREATE TABLE IF NOT EXISTS t1 ( f1 bit(2) NOT NULL default b'' ) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci;
INSERT INTO t1 VALUES (b'');
show create database `mysqltest1`;
show create database `mysqltest-1`;
show create database `#mysql50#mysqltest-1`;
show create database `mysqltest1`;
show create database `#mysql50#mysqltest-1`;
if ($ENGINE == "") {   exit;
}   ENGINE $ENGINE   PARTITION BY HASH (i) PARTITIONS 2;
ENGINE $ENGINE   PARTITION BY LIST (i) SUBPARTITION BY HASH (i)   (PARTITION p0 VALUES IN (0)    (SUBPARTITION s0,     SUBPARTITION s1,     SUBPARTITION s2),   PARTITION p1 VALUES IN (1)    (SUBPARTITION s3,     SUBPARTITION s4,     SUBPARTITION s5));
ENGINE $ENGINE;
ENGINE $ENGINE;
PARTITION BY HASH (i) PARTITIONS 2;
connect (conn2,localhost,event_user2,,events_conn2_db);
while ($1) {   dec $1;
} connect (conn3,localhost,event_user3,,events_conn3_db);
while ($1) {   dec $1;
} USE events_conn1_test2;
while ($1) {   dec $1;
} SELECT COUNT(*) FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_SCHEMA='events_conn1_test2';
while ($1) {   dec $1;
} SET GLOBAL event_scheduler=on;
while ($1) {   dec $1;
} CREATE DATABASE events_conn1_test2;
while ($1) {   dec $1;
} SELECT COUNT(*) FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_SCHEMA='events_conn1_test2';
reap;
disconnect conn2;
reap;
disconnect conn3;
connect(con1,localhost,test_user2,'azundris2',);
disconnect con1;
CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3',   SOURCE_BIND = 'eth4n',   SOURCE_TLS_CIPHERSUITES = ''   FOR CHANNEL 'chan_jackie';
CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3',   SOURCE_CONNECT_RETRY = 1, SOURCE_HEARTBEAT_PERIOD = 1.01,   SOURCE_LOG_FILE = 'master_log_name', SOURCE_LOG_POS = 0,   SOURCE_SSL = 0, SOURCE_SSL_CA = 'ca_file_name',   SOURCE_SSL_CAPATH = 'ca_directory_name',   SOURCE_SSL_CERT = 'cert_file_name', SOURCE_SSL_KEY = 'key_file_name',   SOURCE_SSL_CIPHER = 'cipher_list', SOURCE_SSL_VERIFY_SERVER_CERT = 1,   SOURCE_SSL_CRL = 'crl_file_name', SOURCE_SSL_CRLPATH = 'crl_directory_name',   IGNORE_SERVER_IDS = (99,100), SOURCE_TLS_VERSION = 'TLSv1.2',   SOURCE_TLS_CIPHERSUITES = NULL,   SOURCE_BIND = 'eth4n', SOURCE_RETRY_COUNT = 7,   SOURCE_DELAY = 4711, SOURCE_AUTO_POSITION = 0 FOR CHANNEL 'chan_jackie';
INTO TABLE test_log FIELDS TERMINATED BY '\n' LINES TERMINATED BY '\n';
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET @saved_binlog_format= @@SESSION.binlog_format;
} CREATE TABLE t1(a int) ENGINE=EXAMPLE;
HANDLER t1 OPEN;
FLUSH TABLE t1;
CREATE PROCEDURE p_install() BEGIN   INSTALL PLUGIN no_such_plugin SONAME 'no_such_object'; END |
CREATE PROCEDURE p_show_vars() BEGIN   SELECT COUNT(*) FROM performance_schema.global_variables; END|
connect(con1, localhost, root,,);
connect(con2, localhost, root,,);
change_user;
disconnect con2;
connect(con2, localhost, root,,);
WHERE INFO='UNINSTALL PLUGIN example' and                      STATE='System lock';
disconnect con1;
disconnect con2;
connect(con1, localhost, root,,);
disconnect con1;
connect(con1,localhost,bug51770,,);
disconnect con1;
if (`SELECT @@global.log_bin AND @@global.binlog_format = 'ROW'`) {   SET SESSION binlog_format= @saved_binlog_format;
} SELECT * FROM performance_schema.global_status WHERE variable_name LIKE 'example_func_example' ORDER BY variable_name;
SELECT @@GLOBAL.example_signed_long_var IN (-2147483648, -9223372036854775808);
SELECT @@GLOBAL.example_signed_long_var IN (2147483647, 9223372036854775807);
SELECT @@GLOBAL.example_signed_long_var IN (2147483647, 9223372036854775807);
SELECT @@GLOBAL.example_signed_long_var IN (2147483647, 9223372036854775807);
SELECT @@SESSION.example_signed_long_thdvar IN (-2147483648, -9223372036854775808);
SELECT @@SESSION.example_signed_long_thdvar IN (2147483647, 9223372036854775807);
SELECT @@SESSION.example_signed_long_thdvar IN (2147483647, 9223372036854775807);
SELECT @@SESSION.example_signed_long_thdvar IN (2147483647, 9223372036854775807);
call mtr.add_suppression("Plugin .* is not to be used as an .early. plugin");
call mtr.add_suppression("Couldn't load plugin named .* with soname ");
CREATE PROCEDURE proc1() BEGIN   SET @dummy = 0;
IF (SELECT f1 FROM t1) THEN     SET @dummy = 1;
END IF;
END| CREATE PROCEDURE proc2() BEGIN   CALL proc1();
END| CREATE PROCEDURE proc3() BEGIN   DECLARE x CHAR(36);
END| CREATE PROCEDURE proc4(x CHAR(36)) BEGIN END| CREATE PROCEDURE proc5() BEGIN   SELECT f1 FROM t1;
END| CREATE PROCEDURE proc6a() BEGIN   IF (SELECT f1 FROM t1) THEN     SET @dummy = 1;
END IF;
IF (SELECT f1 FROM t2) THEN     SET @dummy = 1;
END IF;
END| CREATE PROCEDURE proc6b() BEGIN   SELECT f1 FROM t1;
END| CREATE PROCEDURE proc7(x INT) BEGIN   SELECT f1   FROM t1;
END| CREATE PROCEDURE proc8(x INT) BEGIN   SELECT f1   FROM t1;
IF (SELECT f1 FROM t2) THEN     SET @dummy = 1;
END IF;
END| CREATE PROCEDURE proc9(x INT) BEGIN   SELECT f1   FROM t1;
IF (SELECT f1 FROM t1) THEN     SET @dummy = 1;
END IF;
END| DELIMITER ;| BEGIN;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
CREATE TABLE t1(j json, INDEX mv_idx((CAST(j AS UNSIGNED ARRAY))));
HANDLER table10_innodb_int_autoinc OPEN AS alias1 ;
HANDLER alias1 READ `PRIMARY` NEXT WHERE `col_int_not_null_key` <= 'j' LIMIT 8;
while ($1) {   while ($2)   {     while ($3)     {       while ($equal_records)       {         dec $equal_records;
}       dec $3;
}     dec $2;
}  dec $1;
} ALTER TABLE t1 ENABLE KEYS;
while ($iterations) {   dec $iterations;
} DROP TABLE t1;
if (`select locate('mrr_cost_based', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr_cost_based=off';
} set optimizer_switch = default;
show function code foo;
call mtr.add_suppression("\\[ERROR\\] .*MY-\\d+.* Operating system error number .* in a file operation");
call mtr.add_suppression("\\[ERROR\\] .*MY-\\d+.* The error means the system cannot find the path specified");
call mtr.add_suppression("\\[ERROR\\] .*MY-\\d+.* Cannot open datafile for read-only");
call mtr.add_suppression("\\[ERROR\\] .*MY-\\d+.* Cannot delete tablespace .* because it is not found in the tablespace memory cache");
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd';
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd';
connect (con1, localhost, root);
disconnect con1;
call mtr.add_suppression("Dictionary file not specified");
SELECT @@global.validate_password.policy, @@global.validate_password.length;
SELECT @@global.validate_password.policy;
SELECT @@global.validate_password.length;
CALL mtr.add_suppression("currently unknown variable 'validate_password*");
CALL mtr.add_suppression("currently unknown variable 'validate_password*");
CALL mtr.add_suppression('Following users were specified in CREATE USER IF NOT EXISTS but they already exist');
CALL mtr.add_suppression('Following users were specified in ALTER USER IF EXISTS but they do not exist');
query_vertical SELECT User,plugin,authentication_string,ssl_type, password_expired,password_lifetime FROM mysql.user WHERE USER='user2';
query_vertical SELECT User,plugin,authentication_string,ssl_type, password_expired,password_lifetime FROM mysql.user WHERE USER='user2';
ALTER USER IF EXISTS user2@localhost IDENTIFIED WITH 'mysql_native_password'             AS '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF';
query_vertical SELECT User,plugin,authentication_string,ssl_type, password_expired,password_lifetime FROM mysql.user WHERE USER='user2';
ALTER USER IF EXISTS ne_user2@localhost             IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y';
ALTER USER IF EXISTS user1@localhost,ne_user3@localhost             IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y';
ALTER USER IF EXISTS ne_user2@localhost             IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y';
ALTER USER IF EXISTS user1@localhost,ne_user3@localhost             IDENTIFIED WITH 'mysql_native_password' BY 'auth_string#%y';
while ($1) {   dec $1;
inc $2;
} SELECT count(*) FROM t1;
while ($1) {   while ($2)   {     dec $2;
}   dec $1;
} ALTER TABLE t1 ADD SPATIAL KEY(g);
PREPARE stmt1 FROM "EXPLAIN SELECT /*+ NO_SEMIJOIN(@subq1 FIRSTMATCH, LOOSESCAN)            NO_SEMIJOIN(@subq2 FIRSTMATCH, LOOSESCAN) */ * FROM t1 WHERE t1.a IN (SELECT /*+ QB_NAME(subq1) */ a FROM t3)   AND t1.b IN (SELECT /*+ QB_NAME(subq2) */ a FROM t2)";
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM "EXPLAIN SELECT /*+ NO_SEMIJOIN(@subq1) SEMIJOIN(@subq2 LOOSESCAN) */ * FROM t1 WHERE t1.a IN (SELECT /*+ QB_NAME(subq1) */ a FROM t3                WHERE t3.b IN (SELECT /*+ QB_NAME(subq2) */ a FROM t2))";
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM "EXPLAIN SELECT /*+ NO_SEMIJOIN(@subq1 FIRSTMATCH, LOOSESCAN)            NO_SEMIJOIN(@subq2 FIRSTMATCH, LOOSESCAN) */ * FROM t1 WHERE t1.a IN (SELECT /*+ QB_NAME(subq1) */ a FROM t3)   AND t1.b IN (SELECT /*+ QB_NAME(subq2) */ a FROM t2)";
EXECUTE stmt1;
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
EXPLAIN SELECT a, a IN (SELECT a FROM t1) FROM t2;
EXPLAIN SELECT a, a IN (SELECT /*+ SUBQUERY(MATERIALIZATION) */ a FROM t1) FROM t2;
EXPLAIN SELECT /*+ SUBQUERY(@subq MATERIALIZATION) */ a,        a IN (SELECT /*+ QB_NAME(subq) */ a FROM t1) FROM t2;
PREPARE stmt1 FROM "EXPLAIN SELECT /*+ SUBQUERY(@subq1 MATERIALIZATION)            SUBQUERY(@subq2 INTOEXISTS) */ * FROM t1 WHERE t1.a IN (SELECT /*+ QB_NAME(subq1) */ a FROM t3)   AND t1.b IN (SELECT /*+ QB_NAME(subq2) */ a FROM t2)";
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
EXPLAIN SELECT a, a IN (SELECT a FROM t1) FROM t2;
EXPLAIN SELECT /*+ SUBQUERY(@subq INTOEXISTS) */ a,        a IN (SELECT /*+ QB_NAME(subq) */ a FROM t1) FROM t2;
source include/xplugin_wait_for_interfaces.inc;
WHERE USER != 'event_scheduler'`;
CALL mtr.add_suppression("==[0-9]*== Warning: set address range perms: large range");
reap;
reap;
SELECT @@global.default.key_buffer_size;
SELECT @@global.default.`key_buffer_size`;
SELECT @@global.`default`.`key_buffer_size`;
SELECT @@default.key_buffer_size;
cache index t1,t2 in default;
CREATE FUNCTION f1() RETURNS INT BEGIN SELECT /*+ MAX_EXECUTION_TIME(10) */ 1 INTO @a; RETURN 1; END| DELIMITER ;| DROP FUNCTION f1;
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] You need to use --log-bin to make --binlog-format work.");
SHOW RELAYLOG EVENTS;
STOP SLAVE;
CHANGE REPLICATION SOURCE TO SOURCE_CONNECT_RETRY = 1, SOURCE_HEARTBEAT_PERIOD = 1.01;
CHANGE REPLICATION FILTER REPLICATE_DO_DB=(db1);
CHANGE REPLICATION FILTER REPLICATE_IGNORE_DB=(db1);
CHANGE REPLICATION FILTER REPLICATE_DO_TABLE=(db1.t1);
CHANGE REPLICATION FILTER REPLICATE_IGNORE_TABLE=(db1.t1);
CHANGE REPLICATION FILTER REPLICATE_WILD_DO_TABLE=('db1.t%');
CHANGE REPLICATION FILTER REPLICATE_WILD_IGNORE_TABLE=('db1.t%');
CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB=((db1,db2));
SHOW SLAVE HOSTS;
connect (ssl_con,localhost,root,,,,,SSL);
connect(con1,localhost,kristofer,secret,,,,SSL);
disconnect con1;
connect(con2,localhost,kristofer,secret2,,,,SSL);
SHOW GRANTS FOR 'kristofer'@'localhost';
disconnect con2;
connect(con3,localhost,kristofer,,,,,SSL);
SHOW GRANTS FOR 'kristofer'@'localhost';
disconnect con3;
connect(con4,127.0.0.1,kristofer,,,,,SSL);
connect(con5,127.0.0.1,u1,pass,test,,,SSL);
disconnect con5;
disconnect con6;
disconnect ssl_con;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
disconnect con1;
disconnect con2;
disconnect con3;
connect (con37346,localhost,root,,test,,);
disconnect con37346;
connect (con1, localhost, root);
WHERE state='Waiting for table metadata lock' AND info='OPTIMIZE TABLE t1';
disconnect con1;
connect (con2, localhost, root);
connect (con3, localhost, root);
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
disconnect con2;
disconnect con3;
disconnect con1;
create procedure p() begin   declare utf8_var VARCHAR(128) CHARACTER SET UTF8;   set utf8_var = concat(repeat('A', 128), 'X');   show warnings;   select length(utf8_var), utf8_var; end $$
create procedure p2() begin   declare msg VARCHAR(129) CHARACTER SET UTF8;   set msg = concat(repeat('A', 128), 'X');   select length(msg), msg;   signal sqlstate '55555' set message_text = msg; end $$
create procedure p3() begin   declare name VARCHAR(65) CHARACTER SET UTF8;   set name = concat(repeat('A', 64), 'X');   select length(name), name;   signal sqlstate '55555' set     message_text = 'Message',     table_name = name; end $$
create procedure p() begin   declare utf8_var VARCHAR(128) CHARACTER SET UTF8;   set utf8_var = concat(repeat('A', 128), 'X');   select length(utf8_var), utf8_var; end $$
create procedure p2() begin   declare msg VARCHAR(129) CHARACTER SET UTF8;   set msg = concat(repeat('A', 128), 'X');   select length(msg), msg;   signal sqlstate '55555' set message_text = msg; end $$
create procedure p3() begin   declare name VARCHAR(65) CHARACTER SET UTF8;   set name = concat(repeat('A', 64), 'X');   select length(name), name;   signal sqlstate '55555' set     message_text = 'Message',     table_name = name; end $$
call mtr.add_suppression("\\[Warning\\] \\[[^]]*\\] \\[[^]]*\\] option 'persisted_globals_load': boolean value 'NULL' was not recognized. Set to OFF.");
call mtr.add_suppression("\\[Warning\\] option 'persisted_globals_load': boolean value 'NULL' was not recognized. Set to OFF.");
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} set optimizer_switch=default;
while ($iteration < 6) {   inc $iteration;
} EXPLAIN SELECT * FROM t1 WHERE bit1 =  b'1';
CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DISABLE DO SELECT 1;  SHOW EVENTS;
disable_query_log;
while ($1)  {   dec $1;
} enable_query_log;
connect (con1,localhost,mysqltest_1,,*NO-ONE*,$MASTER_MYPORT,$MASTER_MYSOCK);
select mail_id,  if(folder.f_description!='', folder.f_description, folder.f_name) as folder_name,  date, address_id, phrase, address,  subject from folder, (select  mail.mail_id as mail_id,  date_format(mail.h_date, '%b %e, %Y %h:%i') as date,  mail.folder_id,  sender.address_id as address_id,  sender.phrase as phrase, sender.address as address,    mail.h_subject as subject from    mail left join mxa as mxa_sender on mail.mail_id=mxa_sender.mail_id and mxa_sender.type='from' left join address as sender on mxa_sender.address_id=sender.address_id  mxa as mxa_recipient,   address as recipient, where 1     and mail.mail_id=mxa_recipient.mail_id   and mxa_recipient.address_id=recipient.address_id   and mxa_recipient.type='to'  and  match(sender.phrase, sender.address, sender.comment) against ('jeremy' in boolean mode)   and  match(recipient.phrase, recipient.address, recipient.comment) against ('monty' in boolean mode) order by mail.h_date desc limit 0, 25 ) as query where query.folder_id=folder.folder_id;
delete from (select * from t1);
delete from (select * from t1) as t1, t1 as t2;
insert into  (select * from t1) values (5);
disconnect con1;
JOIN t3 ON tt.f22=t3.f3;
INSERT INTO (SELECT * FROM t1) AS dt VALUES(9, 99);
INSERT INTO (SELECT * FROM t1) AS dt SELECT 9, 99;
DELETE FROM (SELECT * FROM t1) AS dt WHERE a=1;
SELECT SHA(pk) IN (SELECT * FROM (SELECT '' FROM t2) a) FROM t1;
PREPARE s1 FROM 'SELECT * FROM v';
PREPARE s2 FROM 'SELECT * FROM (SELECT * FROM t) AS dt';
EXECUTE s1;
EXECUTE s2;
DEALLOCATE PREPARE s1;  DEALLOCATE PREPARE s2;  DROP VIEW v;
execute s;
deallocate prepare s;
execute s;
deallocate prepare s;
t1_inv_date FROM t1 LEFT JOIN      (SELECT curr.t2_end_date As end_date,              (SELECT prev.t2_end_date               FROM t2 AS prev               WHERE prev.t2_end_date < curr.t2_end_date               ORDER BY prev.t2_end_date DESC LIMIT 1) AS prev_end_date       FROM t2 AS curr       WHERE curr.t2_end_date >= 's:1'      ) AS periods      ON periods.prev_end_date < t1_inv_date AND         periods.end_date >= t1_inv_date;
EXECUTE xx;
EXECUTE xx;
EXECUTE xx;
EXECUTE yy;
EXECUTE yy;
EXECUTE yy;
prepare s from " SELECT field1 FROM (SELECT alias1.c1 AS field1,              alias1.c2 AS field2       FROM t1 AS alias1 RIGHT JOIN t2 AS alias2            ON alias1.pk = alias2.c1       ORDER BY field2) as dt";
execute s;
execute s;
PREPARE s FROM " SELECT dtaa.c AS c FROM (SELECT 1 AS c       FROM (SELECT 1 AS c             FROM t AS ta RIGHT JOIN t AS tb ON ta.u  <= ?             WHERE 1 OR ?             GROUP BY ta.u            ) AS dta            INNER JOIN t AS tbb            ON dta.c = tbb.h      ) AS dtaa      RIGHT JOIN t AS tbbb      ON dtaa.c or w";
SET @a:='77777';
EXECUTE s USING @a,@a;
SET @a:='-77777';
EXECUTE s USING @a,@a;
DEALLOCATE PREPARE s;
call mtr.add_suppression("Column count of mysql.* is wrong. "                          "Expected .*, found .*. "                          "The table is probably corrupted");
CALL mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
send SELECT id FROM t1 WHERE id IN      (SELECT DISTINCT a.id FROM t2 a, t2 b, t2 c, t2 d      GROUP BY ACOS(1/a.id), b.id, c.id, d.id      HAVING a.id BETWEEN 10 AND 20);
source include/show_binlog_events.inc;
source include/show_binlog_events.inc;
PREPARE s FROM 'UPDATE t1 AS a NATURAL JOIN t1 AS b SET a.col_int = 9, b.col_int = 9';
EXECUTE s;
EXECUTE s;
DEALLOCATE PREPARE s;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
LOCK INSTANCE FOR BACKUP;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
UNLOCK INSTANCE;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
disconnect default;
connect (wait_con,localhost,root,,test,,);
connect (default,localhost,root,,test,,);
while (!`select @aborted_clients`) {   sleep 0.1;
dec $retries;
if (!$retries)   {     die Failed to detect that client has been aborted;
} } SELECT 2;
disconnect default;
connect (con1,127.0.0.1,root,,test,$MASTER_MYPORT,);
while (!`select @aborted_clients`) {   sleep 0.1;
dec $retries;
if (!$retries)   {     die Failed to detect that client has been aborted;
} } disconnect wait_con;
disconnect con1;
connect (default,localhost,root,,test,,);
connect(con1,localhost,root,,);
LET $ID= `SELECT connection_id()`;
disconnect con1;
connect(con1,127.0.0.1,root,,,,,TCP,,);
LET $ID= `SELECT connection_id()`;
connect(con2,localhost,root,,);
LET $ID= `SELECT connection_id()`;
disconnect con2;
disconnect con1;
source include/search_pattern.inc;
GET DIAGNOSTICS @n = NUMBER;
GET DIAGNOSTICS CONDITION 1 @err_no = MYSQL_ERRNO, @err_txt = MESSAGE_TEXT;
GET DIAGNOSTICS;
GET DIAGNOSTICS @n = NUMBER;
GET DIAGNOSTICS CONDITION 1 @err_no = MYSQL_ERRNO, @err_txt = MESSAGE_TEXT;
CREATE PROCEDURE p0_proc_with_warning () BEGIN   SELECT CAST('2001-01-01' AS SIGNED INT);
END| CREATE PROCEDURE p1_declare_handler_preserves () BEGIN   DECLARE CONTINUE HANDLER FOR NOT FOUND   BEGIN     /* Nes gadol hayah poh -- first handler should have been called.        DECLARE another handler. This should NOT clear the DA! */     DECLARE red CONDITION FOR 1051;
DECLARE CONTINUE HANDLER FOR red     BEGIN       GET DIAGNOSTICS @n0 = NUMBER;
GET DIAGNOSTICS CONDITION 1 @e0 = MYSQL_ERRNO, @t0 = MESSAGE_TEXT;
END;
/* The important bit here is that there are two diagnostics statements        in a row, so we can show that the first one does not clear the        diagnostics area. */     GET DIAGNOSTICS @n1 = NUMBER;
GET DIAGNOSTICS CONDITION 1 @e1 = MYSQL_ERRNO, @t1 = MESSAGE_TEXT;
END;
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'signal message';
END| CREATE PROCEDURE p2_declare_variable_clears () BEGIN   DECLARE CONTINUE HANDLER FOR NOT FOUND   BEGIN     /* DECLARE a variable. This will clear the diagnostics area, so        the subsequent GET DIAGNOSTICS will fail. It in turn will flag        a warning (not an exception), which will remain unseen, as it        in turn gets cleared by the next statement (SELECT). */     DECLARE v1 INT;
GET DIAGNOSTICS @n2 = NUMBER;
GET DIAGNOSTICS CONDITION 1 @e2 = MYSQL_ERRNO, @t2 = MESSAGE_TEXT;
END;
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'signal message';
END| CREATE PROCEDURE p6_bubble_warning () BEGIN   DECLARE CONTINUE HANDLER FOR NOT FOUND   BEGIN     /* Absurdly high CONDITION number will cause GET DIAG to fail.        As it is the last statement, warning should bubble up to caller. */     GET DIAGNOSTICS CONDITION 99 @e6 = MYSQL_ERRNO, @t6 = MESSAGE_TEXT;
END;
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'signal message';
END| CREATE PROCEDURE p5_declare_variable_clears () BEGIN   DECLARE CONTINUE HANDLER FOR NOT FOUND   BEGIN     /* DECLARE a VARIABLE with a broken DEFAULT. This will throw a        warning at runtime, which GET DIAGNOSTICS will see instead of        the previous condition (the SIGNAL). */     DECLARE v1 INT DEFAULT 'meow';
GET DIAGNOSTICS @n5 = NUMBER;
GET DIAGNOSTICS CONDITION 1 @e5= MYSQL_ERRNO, @t5 = MESSAGE_TEXT;
END;
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'signal message';
END| CREATE PROCEDURE p3_non_diagnostics_stmt_clears () BEGIN   DECLARE CONTINUE HANDLER FOR NOT FOUND   BEGIN     /* Do some stuff before using GET (CURRENT, not STACKED) DIAGNOSTICS.        This will clear the DA.        show that handler was run, even if GET DIAG below fails! */     SET @t3 = 'handler was run, but GET DIAGNOSTICS failed';
GET CURRENT DIAGNOSTICS @n3 = NUMBER;
GET CURRENT DIAGNOSTICS CONDITION 1 @e3 = MYSQL_ERRNO, @t3 = MESSAGE_TEXT;
END;
SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'signal message';
END| CREATE PROCEDURE p4_unhandled_exception_returned () BEGIN   /* This will throw an exception which we do not handle,      so execution will abort, and the caller will see      the error. */   DROP TABLE no_such_table;
END| CREATE PROCEDURE p7_show_warnings () BEGIN   SHOW VARIABLES LIKE 'foo';
END| CREATE PROCEDURE p8a_empty () BEGIN END| CREATE PROCEDURE p8b_show_warnings () BEGIN   SHOW WARNINGS;
END| DELIMITER ;| CALL p0_proc_with_warning;
CREATE FUNCTION f2_unseen_warnings() RETURNS INT BEGIN   /* throw a warning */   SET @@max_heap_table_size= 1;
/* RETURN counts as a statement as per the standard, so clears DA */   RETURN 1;
END| DELIMITER ;| DELIMITER |;
CREATE FUNCTION f3_stacking_warnings() RETURNS TEXT BEGIN   /* throw a warning */   RETURN CAST('2001-01-01' AS SIGNED INT);
END| DELIMITER ;| DELIMITER |;
CREATE FUNCTION f4_show_warnings() RETURNS TEXT BEGIN   SHOW WARNINGS;
RETURN "yeah, not so much";
END| DELIMITER ;| SELECT f2_unseen_warnings();
PREPARE stmt1 FROM 'create table if not exists t1 (f1 int)';
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM 'create table if not exists t1 (f1 int)';
EXECUTE stmt1;
CREATE PROCEDURE p10_ps_with_warning () BEGIN   DECLARE CONTINUE HANDLER FOR 1050 SELECT "a warn place";
EXECUTE stmt1;
END| DELIMITER ;| CALL p10_ps_with_warning ();
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM 'create table if not exists t1 (f1 year)';
EXECUTE stmt1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;
PREPARE stmt1 FROM @sql1;
PREPARE stmt2 FROM 'SHOW WARNINGS';
PREPARE stmt2 FROM 'SHOW ERRORS';
PREPARE stmt2 FROM 'SHOW COUNT(*) WARNINGS';
PREPARE stmt2 FROM 'SHOW COUNT(*) ERRORS';
PREPARE stmt2 FROM 'SELECT @@warning_count';
PREPARE stmt2 FROM 'SELECT @@error_count';
CREATE PROCEDURE peter1 () BEGIN   DECLARE v INTEGER DEFAULT 1234;
DECLARE CONTINUE HANDLER FOR SQLWARNING   BEGIN     SHOW WARNINGS;
END;
END| CREATE PROCEDURE peter2 (INOUT v INTEGER) BEGIN   INSERT INTO gg (smallint_column) VALUES (32769);
GET DIAGNOSTICS v = ROW_COUNT;
END| CREATE PROCEDURE peter3(a DECIMAL(2,2)) BEGIN    DECLARE b DECIMAL(2,2) DEFAULT @var;
END| DELIMITER ;| CALL peter1();
CREATE TABLE t3 (id INT NOT NULL)| CREATE PROCEDURE bug15231_1() BEGIN   DECLARE xid INTEGER;
DECLARE xdone INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET xdone = 1;
END| CREATE PROCEDURE bug15231_2a(INOUT ioid INTEGER) BEGIN   SELECT "Before NOT FOUND condition is triggered" AS '1';
SELECT id INTO ioid FROM t3 WHERE id=ioid;
IF ioid IS NULL THEN     SET ioid=1;
END IF;
END| CREATE PROCEDURE bug15231_2b(INOUT ioid INTEGER) BEGIN   SELECT id INTO ioid FROM t3 WHERE id=ioid;
END| CALL bug15231_1()| DROP PROCEDURE bug15231_1| DROP PROCEDURE bug15231_2a| DROP PROCEDURE bug15231_2b| CREATE PROCEDURE bug15231_3() BEGIN   DECLARE EXIT HANDLER FOR SQLWARNING     SELECT 'Caught it (correct)' AS 'Result';
END| CREATE PROCEDURE bug15231_4() BEGIN   DECLARE x DECIMAL(2,1);
END| CALL bug15231_3()| CREATE PROCEDURE bug15231_5() BEGIN   DECLARE EXIT HANDLER FOR SQLWARNING     SELECT 'Caught it (wrong)' AS 'Result';
END| CREATE PROCEDURE bug15231_6() BEGIN   DECLARE x DECIMAL(2,1);
END| CALL bug15231_5()| CREATE PROCEDURE bug15231_7() BEGIN   DECLARE EXIT HANDLER FOR SQLEXCEPTION     SELECT 'Caught it (right)' AS 'Result';
END| CREATE PROCEDURE bug15231_8() BEGIN   DROP TABLE no_such_table;
END| CALL bug15231_7()| DROP TABLE t3| DROP PROCEDURE bug15231_3| DROP PROCEDURE bug15231_4| DROP PROCEDURE bug15231_5| DROP PROCEDURE bug15231_6| DROP PROCEDURE bug15231_7| DROP PROCEDURE bug15231_8| DELIMITER ;| SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
(`$MYSQL_BINLOG --raw --read-from-remote-server --stop-never --user=root --host=127.0.0.1 --port=$MASTER_MYPORT --result-file=$MYSQL_TMP_DIR/ binlog.000001 ; [ $? -le 1 ]` && $MYSQL -e "use test; INSERT INTO raw_mode_exit VALUES (1);") < /dev/null > /dev/null 2>&1 & SELECT ((@id := id) - id) from information_schema.processlist where processlist.command like '%Binlog%' and state like '%Source has sent%';
kill @id;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
while ($1) {     send ALTER TABLE t1 CHANGE x1 x2 INT;
replace_result x1 xx x2 xx $DEFAULT_ENGINE ENGINE;
reap;
send ALTER TABLE t1 CHANGE x2 x1 INT;
replace_result x1 xx x2 xx $DEFAULT_ENGINE ENGINE;
reap;
dec $1;
} DROP TABLE t1;
disconnect con1;
disconnect con2;
echo $mysql_errno before test;
echo $mysql_errname before test;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
garbage ;
garbage ;
prepare stmt from "select 3 from t1" ;
echo $mysql_errname;
garbage ;
prepare stmt from "select 3 from t1" ;
echo $mysql_errname;
garbage ;
execute stmt;
echo $mysql_errname;
garbage ;
execute stmt;
echo $mysql_errname;
garbage ;
execute __stmt_;
echo $mysql_errname;
garbage ;
deallocate prepare stmt;
echo $mysql_errname;
garbage ;
deallocate prepare __stmt_;
echo $mysql_errname;
garbage ;
echo $mysql_errname;
echo $mysql_errname;
echo $empty is empty;
echo $empty is empty;
garbage ;
echo $mysql_errname;
garbage;
connect (con1,localhost,root,,);
disconnect con1;
echo $empty is empty;
echo $empty is empty;
if (!`SELECT foo from bar`) {   echo "Yes it's empty";
} echo $var2;
echo $var2;
echo $var;
echo $var;
echo $var;
echo $var;
echo $var1;
sleep 4 show status;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
sleep 7 remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
disconnect default disable_query_log;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
disconnect default disable_query_log;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
disconnect default remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
disconnect default # comment remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
echo $x;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
if (1) { } DROP TABLE table_does_not_exist;
if (1) {   DROP TABLE table_does_not_exist;
} if (1) {   if(1)   {   } } DROP TABLE table_does_not_exist;
if (1) {   if(1)   {     DROP TABLE table_does_not_exist;
} } while ($i < 3) {   CREATE TABLE t1 (a INT);
} DROP TABLE t1;
echo MySQL;
echo "MySQL";
echo MySQL: The world''s most popular open source database;
echo "MySQL: The world's most popular open source database";
echo MySQL: The world''s      most popular open      source database;
echo # MySQL: The world''s echo - MySQL: The world''s - most popular open - source database;
echo - MySQL: The world''s echo # MySQL: The - source database;
echo "MySQL: The world's most popular; open source database";
echo "MySQL: The world's most popular ; open source database";
echo "MySQL: The world's most popular ;open source database";
echo echo message echo message;
echo ;
exec $MYSQL     test -e "select 1";
exec $MYSQL test -e "select     2";
as X;
exec $MYSQL test -e "$query";
echo $message;
echo $message;
world''s most  popular open  source database;
echo $message;
echo $message;
echo $message;
- world''s most echo $message;
echo '$message';
echo "$message";
echo $1;
echo $1;
echo $1;
echo $2;
echo $5;
echo $6;
echo $where;
echo $where2;
echo $where3;
echo $where3;
echo $novar1;
echo banana = $cat;
echo Not a banana: $cat;
echo $escape;
echo $escape;
echo $tick;
echo # <whatever> success: $success ;
echo $success ;
echo var2: $var2;
echo var3: $var3;
if (`select length("$var3") > 0`) {   echo length of var3 is longer than 0;
} echo var1;
echo $var1;
echo var2;
echo $var2;
echo var2 again;
echo $var2;
echo var3 two columns with same name;
echo $var3;
echo var4 from query that returns NULL;
echo var5 from query that returns no row;
echo failing query in let;
echo $var2;
echo $a;
echo $a;
echo $a;
remove_file $MYSQLTEST_VARDIR/tmp/let.sql;
remove_file $MYSQLTEST_VARDIR/tmp/recursive.sql;
remove_file $MYSQLTEST_VARDIR/tmp/error.sql;
echo here is the sourced script;
while ($outer) {   dec $outer;
} while ($outer) {   echo outer=$outer ifval=$ifval;
if ($ifval) {     SELECT * from nowhere;
SELECT * FROM nowhere else;
}   dec $outer;
inc $ifval;
} while ($num) {    SELECT 'In loop' AS "";
dec $num;
} echo "hello";
source $MYSQLTEST_VARDIR/tmp/$x.inc;
source $x/tmp/sourced.inc;
sleep 0.5;
sleep 1;
sleep $sleep_var;
inc $i;
echo $i;
inc $i;
echo $i;
inc $i;
echo $i;
inc $i; inc $i; inc $i; --echo $i echo $i;
dec $d;
echo $d;
dec $d;
echo $d;
echo teststop delimiter ;stop echo test2;
echo test3stop echo test4;
if (0) {   delimiter ||;
echo false-inner||   if (0)   {     delimiter *||     echo false-innerer*     delimiter ||*   }   echo false-inner again|| } echo outer;
if (1) {   delimiter /;
echo true-inner/   if (0)   {     delimiter %/     echo true-innerer%   }   echo true-inner again/ } echo true-outer/ delimiter ;/ if ($counter) {   echo Counter is greater than 0, (counter=10);
} if (!$counter) {   echo Counter is not 0, (counter=10);
} if (! $counter) { } echo Counter should still be 10, is $counter;
if($counter) {   echo Counter is greater than 0, (counter=0);
} if (!$counter) {   echo Counter is not 0, (counter=0);
} if (! $counter) {   echo Not space var works;
} if ($counter) {   echo Counter is true, (counter=alpha);
} if ($counter) {   echo oops, space is true;
} if ($counter) {   echo oops, -0 is true;
} while ($counter) {   echo while with string, only once;
} if ($ifvar < 7) {   echo 5<7;
} if ($ifvar< 7) {   echo 5<7 again;
} if ($ifvar<7) {   echo 5<7 still;
} if ($ifvar < $ifvar2) {   echo 5<6;
} if ($ifvar <= 4) {   echo 5<=4;
} if ($ifvar >= 5) {   echo 5>=5;
} if ($ifvar>=5) {   echo 5>=5 again;
} if ($ifvar > 3) {   echo 5>3;
} if ($ifvar == 4) {   echo 5==4;
} if ($ifvar == 5) {   echo 5==5;
} if ($ifvar != 8) {   echo 5!=8;
} if ($ifvar != five) {   echo 5!=five;
} if ($ifvar == `SELECT 3+2`) {   echo 5==3+2;
} if ($ifvar    ==       5) {   echo 5   ==   5;
} if ($ifvar == hello there) {   echo hello == hello there;
} if ($ifvar == hello) {   echo hello == hello;
} if ($ifvar == hell) {   echo hello == hell;
} if ($ifvar    ==    hello) {   echo hello   ==   hello;
} if ($ifvar != goodbye) {   echo hello != goodbye;
} if ($ifvar == ''quoted'') {   echo 'quoted' == ''quoted'';
} if ($ifvar == two words) {   echo two words;
} if ($ifvar == 'two words') {   echo 'two words';
} if ($ifvar == "two words") {   echo "two words";
} if ($ifvar == `SELECT 'two words'`) {   echo two words are two words;
} if (42) {   echo right answer;
} if (0) {   echo wrong answer;
} if (`SELECT 'something'`) {   echo anything goes;
} if ($ifvar == string) {   echo 0 == string;
} if ($ifvar != string) {   echo 0 != string;
} if ($var >= four) {  echo 5>=four;
} remove_file $MYSQL_TMP_DIR/mysqltest.sql;
if ($var ~= 6) {  echo 5~=6;
} remove_file $MYSQL_TMP_DIR/mysqltest.sql;
if (var == text) {  echo Oops I forgot the $;
} remove_file $MYSQL_TMP_DIR/mysqltest.sql;
while ($counter < 5) {   echo counter is $counter;
inc $counter;
} while ($ifvar != stop) {   if ($counter >= 7)   {   }   echo counter is $counter;
inc $counter;
} while ($i) {   echo $i;
dec $i;
} while (!$i) {   echo Testing while with not;
inc $i;
} while ($1) { while ($1) { while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {  while ($1) {   echo $1;
dec $1;
} } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } while (0) echo hej;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
while (0) {echo hej;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
while (0){  echo hej;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
while ($i) {  connect (test_con1,localhost,root,,);
disconnect test_con1;
dec $i;
} echo 200 connects succeeded;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
connect (test_con1,localhost,root,,);
disconnect test_con1;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
connect (test_con1,localhost,root,,);
connect (test_con1,localhost,root,,);
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql;
connect (con1,localhost,root,,);
disconnect con1;
connect (con2,localhost,root,,*NO-ONE*);
disconnect con2;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,*NO-ONE*);
disconnect con2;
disconnect con1;
while ($num) {    failing_statement;
dec $num;
} SELECT 1 as a;
"Here comes a very very long message that     - is longer then 80 characters    and     - consists of several lines";
.      - is longer then 80 characters    and               .      - consists of several lines;
remove_file $MYSQLTEST_VARDIR/tmp/zero_length_file.result;
remove_file $MYSQLTEST_VARDIR/tmp/zero_length_file.reject;
remove_file $MYSQLTEST_VARDIR/tmp/zero_length_file.log;
remove_file $MYSQL_TEST_DIR/r/zero_length_file.reject;
remove_file $MYSQLTEST_VARDIR/tmp/query.sql;
echo Failing multi statement query;
echo Multi statement using expected error;
remove_file $MYSQLTEST_VARDIR/tmp/bug11731.out;
remove_file $MYSQLTEST_VARDIR/log/bug11731.log;
remove_file $MYSQLTEST_VARDIR/tmp/bug11731.sql;
query sleep;
query ;
garbage;
garbage;
garbage;
garbage;
send select * from t1;
reap;
remove_file $MYSQL_TMP_DIR/mysqltest.out;
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.in;
remove_file non_existing_file;
remove_files_wildcard non_existing_dir *;
remove_files_wildcard non_existing_dir non_existing_file;
write_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
Content for test_file1 file_exists $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
cat_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
write_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp END_DELIMITER;
Content for test_file1 contains EOF END_DELIMITER file_exists $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
write_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
Content for test_file1 file_exists $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
append_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
Appended text file_exists $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
append_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
Appended text on nonexisting file remove_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
while ($outer) {   append_file $MYSQLTEST_VARDIR/tmp/app_while.tmp;
These lines should be repeated, if things work as expected   dec $outer;
} cat_file $MYSQLTEST_VARDIR/tmp/app_while.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/app_while.tmp;
Some data for cat_file command of mysqltest cat_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
Some data for diff_file command of mysqltest Some data for diff_file command of mysqltest Some other data for diff_file command of mysqltest Some data for diff_file command of musqltest remove_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
write_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
Content for test_file1 file_exists $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/test_file1.tmp;
file1 copy_file $MYSQLTEST_VARDIR/tmp/file1.tmp $MYSQLTEST_VARDIR/tmp/file2.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file2.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/file1.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/file2.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file1.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file2.tmp;
move_file $MYSQLTEST_VARDIR/tmp/file1.tmp $MYSQLTEST_VARDIR/tmp/file2.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file1.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file2.tmp;
file1 move_file $MYSQLTEST_VARDIR/tmp/file1.tmp $MYSQLTEST_VARDIR/tmp/file2.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file1.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file2.tmp;
file1 move_file $MYSQLTEST_VARDIR/tmp/file1.tmp $MYSQLTEST_VARDIR/tmp/file2.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file1.tmp;
file_exists $MYSQLTEST_VARDIR/tmp/file2.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/file2.tmp;
file1 chmod 0000 $MYSQLTEST_VARDIR/tmp/file1.tmp;
chmod 0777 $MYSQLTEST_VARDIR/tmp/file1.tmp;
remove_file $MYSQLTEST_VARDIR/tmp/file1.tmp;
test2 remove_file $MYSQLTEST_VARDIR/tmp/file1.tmp;
perl;
print "hello\n";
while ($outer) {   if ($ifval) {     perl UNTIL;
my $val= 5;
print "val is $val\n";
UNTIL   }   inc $ifval;
dec $outer;
} create table t1( a int, b char(255), c timestamp);
disable_result_log;
sorted_result;
enable_result_log;
sorted_result;
sorted_result;
sorted_result;
SELECT s.Id FROM s WHERE Id=1 AND u IS NULL)ORDER BY Id DESC;
SELECT s.Id FROM s WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
SELECT s1.Id FROM s1 WHERE Id=1 AND u IS NOT NULL) ORDER BY Id DESC;
SELECT s1.Id FROM s1 WHERE Id=1 AND u != 1) ORDER BY Id DESC;
SELECT s.Id FROM s2 s WHERE Id=1 AND u IS NULL) ORDER BY Id DESC;
SELECT s.Id FROM s3 s WHERE Id=1 AND u IS NOT NULL)             ORDER BY Id DESC;
PREPARE prep_stmt FROM "SELECT t2.f1 FROM (t2 LEFT JOIN t1  ON (1 = ANY (SELECT f1 FROM t1 WHERE 1 IS NULL)))" ;
EXECUTE prep_stmt ;
PREPARE prep_stmt FROM " SELECT t2.f1 FROM t2 LEFT OUTER JOIN (SELECT  * FROM t2 WHERE ('y',1)  IN (SELECT alias1.f1 , 0 FROM t1 AS alias1 LEFT JOIN t2 ON 0)) AS alias ON 0";
EXECUTE prep_stmt ;
PREPARE prep_stmt FROM " SELECT t2.f1 FROM (t2 LEFT OUTER JOIN (SELECT  * FROM t2 WHERE ('y',1)  IN (SELECT alias1.f1 , 0 FROM      (t1 INNER JOIN  (t1 AS alias1 LEFT JOIN t2 ON 0) ON 0))) AS alias ON 0)";
EXECUTE prep_stmt ;
PREPARE prep_stmt FROM "SELECT t2.f1 FROM (t2 LEFT JOIN t1  ON 1 IN (SELECT f1 FROM t1 WHERE FALSE))" ;
EXECUTE prep_stmt ;
SELECT t2.pk FROM     t4     RIGHT JOIN t3 ON t4.col_int_key = t3.pk     RIGHT JOIN t2 ON t3.col_int_key <> t2.pk );
SELECT t2.f2 FROM t1 JOIN (                 t1 AS t2 LEFT JOIN t1 AS t3 USING (f2)         ) ON t3.f2 = t2.f2         WHERE t2.f1 > table1.f2 ) FROM t1 AS table1;
PREPARE st FROM "DELETE outr1.*  FROM t1 AS outr1 RIGHT OUTER JOIN t2 AS outr2       ON outr1.col_int = outr2.col_int  WHERE (0, 3) NOT IN (SELECT innr1.pk AS x, innr1.col_int AS y                       FROM t2 AS innr1                       WHERE outr1.col_int = 25)";
EXECUTE st;
EXECUTE st;
DEALLOCATE PREPARE st;
SELECT * FROM t AS upper JOIN LATERAL (SELECT DISTINCT ROW_NUMBER() OVER () AS rn FROM t  WHERE (t.a > upper.a)) der ;
PREPARE ps FROM ' SELECT (SELECT SUM(sq1_t1.col_int) AS sq1_field1         FROM t3 AS sq1_t1 INNER JOIN t1 AS sq1_t2              ON sq1_t2.col_varchar_key = sq1_t1.col_varchar_key         WHERE sq1_t2.col_varchar < sq1_t2.col_varchar OR               sq1_t2.col_varchar <>  ?        ) AS field1 FROM t5 AS table1 LEFT OUTER JOIN t4 AS table2      ON table2.col_int_key = table1.col_int WHERE table1.pk > ANY        (SELECT sq2_t1.pk AS sq2_field1         FROM t3 AS sq2_t1 STRAIGHT_JOIN t2 AS sq2_t2              ON sq2_t2.col_int_key = sq2_t1.pk         WHERE sq2_t2.col_varchar >= table2.col_varchar AND               sq2_t2.col_varchar <= table1.col_varchar_key        ) AND       table1.pk = ?';
EXECUTE ps USING @var1, @var2;
EXECUTE ps USING @var1, @var2;
EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 1,1);
EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 0,1);
EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT ?,1);
EXECUTE explain_stmt USING @offset_value;
EXECUTE stmt USING @offset_value;
EXISTS (SELECT 1 FROM  t1 AS b WHERE b.c2 = a.c2 LIMIT 0,0);
SET @b := _latin1 'a';
SELECT t1.a FROM   t1,   LATERAL ( SELECT t1.a FROM t1 AS inner_t1 LIMIT 1 ) AS d1 WHERE 1 IN ( SELECT a FROM t1 ) ORDER BY a;
SELECT * FROM (   SELECT a, JSON_ARRAYAGG(a) OVER () AS b FROM t1 ) AS d1 WHERE (a,b) IN (   SELECT a, JSON_ARRAYAGG(a) OVER () AS b FROM t1 );
connect(shm_con,localhost,root,,,,$shm_name,SHM);
disconnect shm_con;
connect(shm_con,localhost,root,,,,$shm_name,SHM);
create table t1 (a int) partition by key(a) partitions 0.2+e1;
create table t1 (a int) partition by key(a) partitions -1;
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by key (a) partitions 3 (partition x1 nodegroup 0,  partition x2 nodegroup 1,  partition x3 nodegroup 2);
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
CREATE TABLE t1 (c1 INT, c2 INT, PRIMARY KEY USING BTREE (c1,c2))   PARTITION BY KEY(c2,c1) PARTITIONS 4;
create procedure p () begin create table t1 (s1 mediumint,s2 mediumint) partition by list (s2) (partition p1 values in (0),  partition p2 values in (1)); end//
call p()//
drop procedure p//
call p()//
drop procedure p//
drop table t1//
alter table t1 rebuild partition;
alter table t1 rebuild partition;
prepare stmt1 from 'create table t1 (s1 int) partition by hash (s1)';
execute stmt1;
execute stmt1;
BEGIN   DECLARE CONTINUE HANDLER FOR sqlexception BEGIN END;   DROP TABLE IF EXISTS t1;   CREATE TABLE t1 (num INT,PRIMARY KEY(num));   START TRANSACTION;     INSERT INTO t1 VALUES(i);     savepoint t1_save;     INSERT INTO t1 VALUES (14);     ROLLBACK to savepoint t1_save;     COMMIT; END|
CALL test.p1(12);
CALL test.p1(13);
create procedure mysqltest_1 () begin   begin     declare continue handler for sqlexception begin end;     update ignore t1 set a = 1 where a = 0;   end;   prepare stmt1 from 'alter table t1';   execute stmt1; end//
call mysqltest_1()//
INSERT INTO t1 VALUES (1, REPEAT('a', 10));
while ($cnt) {   update t1 set s2 = 1;
dec $cnt;
} drop table t1;
ALTER TABLE t1 OPTIMIZE PARTITION p1 EXTENDED;
ALTER TABLE t1 ANALYZE PARTITION p1 EXTENDED;
while ($n) {   insert into t1 (user) values ('mysql');
dec $n;
} show create table t1;
LOCK TABLES t1 WRITE, t1 b READ;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t1 b READ;
UNLOCK TABLES;
FLUSH TABLE t1;
lock tables t1 write, t1 as a read, t1 as b read;
unlock tables;
CALL mtr.add_suppression(".ERROR.  Operating system error number");
CALL mtr.add_suppression(".ERROR.  The error means mysqld does not have the access");
partition by range (a) subpartition by hash (a) (partition p0 VALUES LESS THAN (1) DATA DIRECTORY = '$MYSQL_TMP_DIR'  (SUBPARTITION subpart00, SUBPARTITION subpart01));
(partition p1 VALUES LESS THAN (1) DATA DIRECTORY = '$MYSQL_TMP_DIR'  (SUBPARTITION subpart10, SUBPARTITION subpart11),  partition p2 VALUES LESS THAN (2) DATA DIRECTORY = '$MYSQL_TMP_DIR'  (SUBPARTITION subpart20, SUBPARTITION subpart21));
disable_query_log;
partition by range (i) (  partition p01 values less than (1000)  data directory='$MYSQL_TMP_DIR'  index directory='$MYSQL_TMP_DIR' );
enable_query_log;
PARTITION BY KEY (a) (PARTITION p0 DATA DIRECTORY '$MYSQLD_DATADIR/test');
PARTITION BY KEY (a) (PARTITION p0 INDEX DIRECTORY '$MYSQLD_DATADIR/test');
PARTITION BY RANGE(YEAR(purchased)) SUBPARTITION BY HASH(TO_DAYS(purchased)) ( PARTITION p0 VALUES LESS THAN (1990) ( SUBPARTITION s0a   DATA DIRECTORY = '$MYSQLD_DATADIR/test', SUBPARTITION s0b   DATA DIRECTORY = '$MYSQLD_DATADIR/test' ));
PARTITION BY RANGE(YEAR(purchased)) SUBPARTITION BY HASH(TO_DAYS(purchased)) ( PARTITION p0 VALUES LESS THAN (1990) ( SUBPARTITION s0a   INDEX DIRECTORY = '$MYSQLD_DATADIR/test', SUBPARTITION s0b   INDEX DIRECTORY = '$MYSQLD_DATADIR/test' ));
`ID_EXAMPLE` int(10) unsigned NOT NULL AUTO_INCREMENT,   `DESCRIPTION` varchar(30) NOT NULL,   `LEVEL` smallint(5) unsigned DEFAULT NULL,   PRIMARY KEY (`ID_EXAMPLE`) ) PARTITION BY HASH(ID_EXAMPLE)( PARTITION p0 DATA DIRECTORY = '$MYSQL_TMP_DIR/p0Data', PARTITION p1 DATA DIRECTORY = '$MYSQL_TMP_DIR/p1Data', PARTITION p2 DATA DIRECTORY = '$MYSQL_TMP_DIR/p2Data', PARTITION p3 DATA DIRECTORY = '$MYSQL_TMP_DIR/p3Data' );
LOCK TABLES t1 WRITE, t1 b READ;
UNLOCK TABLES;
SELECT 10,10.0,10.,.1e+2,100.0e-1;
SELECT 1e1,1.e1,1.0e1,1e+1,1.e+1,1.0e+1,1e-1,1.e-1,1.0e-1;
EXECUTE stmt1;
99999999999999999999999999999999999999999999999999999999999999999;
($nine_65)) into @a;
CREATE PROCEDURE p1(IN a FLOAT(255,0), OUT b DOUBLE(12,3)) BEGIN   SELECT 1 INTO b; END||
CREATE PROCEDURE p1(IN a FLOAT UNSIGNED, OUT b DOUBLE UNSIGNED) BEGIN   SELECT 1 INTO b; END||
connect (con1, localhost, root);
disconnect con1;
PREPARE stmt FROM "SELECT t1.id1 AS id, t5.id1 AS ngroupbynsa   FROM t1 INNER JOIN t2 ON t2.id2 = t1.id1        LEFT OUTER JOIN        (t3 INNER JOIN t4 ON t4.id1 = t3.id2 INNER JOIN t5 ON t4.id2 = t5.id1)        ON t3.id2 IS NOT NULL     WHERE t1.id1=2";
EXECUTE stmt;  EXECUTE stmt;  EXECUTE stmt;  EXECUTE stmt;
EXECUTE stmt;  EXECUTE stmt;  EXECUTE stmt;  EXECUTE stmt;
if ($use_optimizer_trace) { SET SESSION optimizer_trace="enabled=on";
} EXPLAIN SELECT a,b,c FROM t1 WHERE b = 2 AND a = 2 AND  c > 0 AND c < 100;
if ($use_optimizer_trace) { SELECT TRACE FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
} SELECT a,b,c FROM t1 WHERE b = 2 AND a = 2 AND  c > 0 AND c < 100;
if ($use_optimizer_trace) { SELECT TRACE FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
} SELECT a,b,c FROM t1 WHERE (b = 2 OR a = 2) AND  c > 0 AND c < 100;
if ($use_optimizer_trace) { SELECT TRACE FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
} SELECT a,b,c FROM t1 WHERE (b >= 2 OR a >= 2) AND  c > 0 AND c < 100;
show status like 'Slow_queries'||||
drop table t1||||
insert into t1 values (repeat(0x201f, 10));
insert into t1 values (repeat(0x2020, 10));
insert into t1 values (repeat(0x2021, 10));
INSERT INTO t1 VALUES (1, REPEAT('a',59), REPEAT('a',512));
INSERT INTO t1 VALUES (2, REPEAT('a',59), REPEAT('a',512));
select extract(YEAR_MONTH FROM "1999-01-02");
select extract(DAY_HOUR FROM "1999-01-02 10:11:12");
select extract(DAY_MINUTE FROM "02 10:11:12");
select extract(DAY_SECOND FROM "225 10:11:12");
select extract(HOUR_MINUTE FROM "10:11:12");
select extract(HOUR_SECOND FROM "10:11:12");
select extract(MINUTE_SECOND FROM "10:11:12");
select strcmp(date_format(date_sub(localtimestamp(), interval 3 hour),"%T"), utc_time())=0;
select strcmp(date_format(date_sub(localtimestamp(), interval 3 hour),"%Y-%m-%d"), utc_date())=0;
select strcmp(date_format(utc_timestamp(),"%T"), utc_time())=0;
select strcmp(date_format(utc_timestamp(),"%Y-%m-%d"), utc_date())=0;
select strcmp(concat(utc_date(),' ',utc_time()),utc_timestamp())=0;
explain select period_add("9602",-12),period_diff(199505,"9404"),from_days(to_days("960101")),dayofmonth("1997-01-02"), month("1997-01-02"), monthname("1972-03-04"),dayofyear("0000-00-00"),HOUR("1997-03-03 23:03:22"),MINUTE("23:03:22"),SECOND(230322),QUARTER(980303),WEEK("1998-03-03"),yearweek("2000-01-01",1),week(19950101,1),year("98-02-03"),weekday(curdate())-weekday(now()),dayname("1962-03-03"),unix_timestamp(),sec_to_time(time_to_sec("0:30:47")/6.21),curtime(),utc_time(),curdate(),utc_date(),utc_timestamp(),date_format("1997-01-02 03:04:05", "%M %W %D %Y %y %m %d %h %i %s %w"),from_unixtime(unix_timestamp("1994-03-02 10:11:12")),"1997-12-31 23:59:59" + INTERVAL 1 SECOND,"1998-01-01 00:00:00" - INTERVAL 1 SECOND,INTERVAL 1 DAY + "1997-12-31", extract(YEAR FROM "1999-01-02 10:11:12"),date_add("1997-12-31 23:59:59",INTERVAL 1 SECOND);
create trigger t_before before insert on t1 for each row begin   set new.b = t_slow_sysdate(); end //
create procedure t_sysdate() begin   select sysdate() into @a;   do sleep(2);   select sysdate() into @b;   select @a != @b; end; //
DO  STR_TO_DATE((''), FROM_DAYS(@@GLOBAL.SQL_MODE));
DO WEEK((DATE_ADD((CAST(0 AS DATE)), INTERVAL 1 YEAR_MONTH)), 5);
query_vertical SELECT   DATE('20091000'),   STR_TO_DATE('200910','%Y%m'),   LAST_DAY('2009-10-00'),   LAST_DAY(DATE('2009-10-00')),   LAST_DAY(DATE'2009-10-00'),   LAST_DAY(STR_TO_DATE('200910','%Y%m')),   WEEK('2009-10-00'),   WEEK(DATE('2009-10-00')),   WEEK(DATE'2009-10-00'),   WEEK(STR_TO_DATE('200910','%Y%m')),   WEEKOFYEAR('2009-10-00'),   WEEKOFYEAR(DATE('2009-10-00')),   WEEKOFYEAR(DATE'2009-10-00'),   WEEKOFYEAR(STR_TO_DATE('200910','%Y%m')),   DAYOFYEAR('2009-10-00'),   DAYOFYEAR(DATE('2009-10-00')),   DAYOFYEAR(DATE'2009-10-00'),   DAYOFYEAR(STR_TO_DATE('200910','%Y%m')),   WEEKDAY('2009-10-00'),   WEEKDAY(DATE('2009-10-00')),   WEEKDAY(DATE'2009-10-00'),   WEEKDAY(STR_TO_DATE('200910','%Y%m')),   TO_DAYs('2009-10-00'),   TO_DAYs(DATE('2009-10-00')),   TO_DAYs(DATE'2009-10-00'),   TO_DAYs(STR_TO_DATE('200910','%Y%m'));
query_vertical SELECT   DATE('00000100'),   STR_TO_DATE('000001','%Y%m'),   LAST_DAY('0000-01-00'),   LAST_DAY(DATE('0000-01-00')),   LAST_DAY(DATE'0000-01-00'),   LAST_DAY(STR_TO_DATE('000001','%Y%m')),   WEEK('0000-01-00'),   WEEK(DATE('0000-01-00')),   WEEK(DATE'0000-01-00'),   WEEK(STR_TO_DATE('000001','%Y%m')),   WEEKOFYEAR('0000-01-00'),   WEEKOFYEAR(DATE('0000-01-00')),   WEEKOFYEAR(DATE'0000-01-00'),   WEEKOFYEAR(STR_TO_DATE('000001','%Y%m')),   DAYOFYEAR('0000-01-00'),   DAYOFYEAR(DATE('0000-01-00')),   DAYOFYEAR(DATE'0000-01-00'),   DAYOFYEAR(STR_TO_DATE('000001','%Y%m')),   WEEKDAY('0000-01-00'),   WEEKDAY(DATE('0000-01-00')),   WEEKDAY(DATE'0000-01-00'),   WEEKDAY(STR_TO_DATE('000001','%Y%m')),   TO_DAYs('0000-01-00'),   TO_DAYs(DATE('0000-01-00')),   TO_DAYs(DATE'0000-01-00'),   TO_DAYs(STR_TO_DATE('000001','%Y%m'));
DO MBRContains(1, if(0, coalesce(NULL), now()));
DO maketime(~0, 49, 0.123456789);
DO is_used_lock(ifnull(now(), CASE 1 WHEN 1 THEN NULL END));
CREATE VIEW v1 AS SELECT NOW(6), CURTIME(4), LOCALTIME(3), CURRENT_TIME(2), CURRENT_TIMESTAMP(0), LOCALTIMESTAMP(1), UTC_TIME(4), UTC_TIMESTAMP(4);
DO DAYOFYEAR(SEC_TO_TIME((~(((RELEASE_ALL_LOCKS())-((1)))))));
DO DAYOFYEAR(((MBRDISJOINT(0xbc,1))OR(WEEK(SEC_TO_TIME(419824656)))));
DO DAYOFYEAR(SEC_TO_TIME(OCT(BIT_AND(JSON_REPLACE((23533),'key3',NULL)))));
DO DAYOFYEAR(MAKETIME(((0x965a)^((@g :=(1 IS NULL)))),                       EXP(39988664861.65638662152600787509),                       ((STD(@f))LIKE(1))));
DO DAYOFYEAR(MAKETIME('1981-06-27 11:16:09.211343', (((NOT(ST_DISTANCE_SPHERE(POINT(4472,28027), POINT(28061,-9007199254740996),-644021130))))<=>(@c)),(1)));
DO DAYOFYEAR(MAKETIME(ROUND(-23797,'6588-01-08'),                       COERCIBILITY(BIT_COUNT(RTRIM((~(                       INET6_NTOA(0xa04810f0839d318fa075bd)))))),                       ((ST_ASWKT(1))OR(1))));
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
UNLOCK TABLES;
send SELECT * FROM t1 FOR UPDATE; # blocked by con1 sleep 1;
send FLUSH TABLES WITH READ LOCK; # blocked by con2 COMMIT; # should not be blocked by con3 reap;
reap;
UNLOCK TABLES;
SHOW CREATE DATABASE test;
disconnect con1;
disconnect con2;
disconnect con3;
CALL mtr.add_suppression("Enabling keys got errno");
exec echo 1 > $MYSQLD_DATADIR/test/t1.MYI ;
LOCK TABLES t1 READ;
UNLOCK TABLES;
select repeat('a',2000);
connect (con1,localhost,root,,);
disconnect con1;
connect (con2,localhost,root,,);
select length(repeat('a',2000));
disconnect con2;
UPDATE t1 SET c12= REPEAT('ab', @max_allowed_packet);
UPDATE IGNORE t1 SET c12= REPEAT('ab', @max_allowed_packet);
UPDATE t1, t2 SET c12= REPEAT('ab', @max_allowed_packet),     c22= 'ab';
UPDATE IGNORE t1, t2 SET c12= REPEAT('ab', @max_allowed_packet),     c22= 'ab';
INSERT INTO t1 VALUES (101, REPEAT('ab', @max_allowed_packet));
INSERT INTO t1 SELECT 101, REPEAT('ab', @max_allowed_packet);
INSERT IGNORE INTO t1 SELECT 101, REPEAT('ab', @max_allowed_packet);
REPLACE INTO t1 VALUES (102, REPEAT('ab', @max_allowed_packet));
REPLACE INTO t1 SET c11= 102,     c12= REPEAT('ab', @max_allowed_packet);
REPLACE INTO t1 SELECT 102, REPEAT('ab', @max_allowed_packet);
DELETE FROM t1 WHERE c12 <=> REPEAT('ab', @max_allowed_packet);
DELETE FROM t1, t2 USING t1 INNER JOIN t2 WHERE t1.c11 = t2.c21 AND       t2.c22 <=> REPEAT('ab', @max_allowed_packet);
DELETE IGNORE FROM t1, t2 USING t1 INNER JOIN t2 WHERE t1.c11 = t2.c21 AND       t2.c22 <=> REPEAT('ab', @max_allowed_packet);
UPDATE t1 SET c12= REPEAT('ab', @max_allowed_packet);
INSERT INTO t1 VALUES (101, REPEAT('ab', @max_allowed_packet));
INSERT INTO t1 SELECT 102, REPEAT('ab', @max_allowed_packet);
DELETE FROM t1 WHERE c12 <=> REPEAT('ab', @max_allowed_packet);
LOCK TABLES t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLES t1 WRITE, t2 WRITE;
UNLOCK TABLES;
LOCK TABLE t4 WRITE;
UNLOCK TABLES;
LOCK TABLES t2 WRITE, t1 WRITE;
UNLOCK TABLES;
disconnect con1;
query_get_value(SHOW EXTENDED TABLES FROM test, Tables_in_test, 1);
connect (addconroot, localhost, root,,);
connect (addconroot2, localhost, root,,);
source include/show_binlog_events.inc;
disconnect addconroot;
disconnect addconroot2;
select * from t1 where MATCH(a,b) AGAINST ("indexes" IN BOOLEAN MODE WITH QUERY EXPANSION);
lock tables t1 write;
unlock tables;
remove_file $MYSQLTEST_VARDIR/tmp/bug29323.sql;
[client] database=db1 remove_file $MYSQLTEST_VARDIR/tmp/bug10608.cnf;
[client] loose-database=db2 remove_file $MYSQLTEST_VARDIR/tmp/bug10608.cnf;
[client] host = 127.0.0.1 [client] host = 127.0.0.1 CREATE USER testadmin_user1;
write_file $file;
!includedir /nonexistent write_file $file2;
!include /nonexistent exec $MYSQLADMIN --defaults-file=$file -uroot -h localhost --password="" -S $MASTER_MYSOCK -P $MASTER_MYPORT --show-warnings ping 2>&1 ;
exec $MYSQLADMIN --defaults-file=$file2 -uroot -h localhost --password="" -S $MASTER_MYSOCK -P $MASTER_MYPORT --show-warnings ping 2>&1 ;
remove_file $file;
remove_file $file2;
call mtr.add_suppression("Plugin validate_password reported: .Dictionary file not specified.");
source $passwd_file;
connect(root_con,localhost,root,$new_pwd,mysql);
if ($cnt != $mysql_cnt) { SELECT TABLE_NAME,COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS   WHERE TABLE_SCHEMA='mysql' ORDER BY TABLE_NAME,ORDINAL_POSITION;
} SELECT user, host, plugin, LENGTH(authentication_string)   FROM mysql.user ORDER BY user;
disconnect root_con;
remove_file $PASSWD_FILE;
remove_file $MYSQLD_LOG;
while ($c) { if ($c == 1) { set optimizer_switch='semijoin=on,firstmatch=off,loosescan=off,duplicateweedout=off,materialization=on,subquery_materialization_cost_based=off';
} dec $c;
while ($i <= $table_count) {     while ($j <= $table_count)     {        if ($i != $j)        {           if ($i == 11)           {                 DELETE FROM t11 WHERE c1='2015-04-14 09:22:33';
}                                               (SELECT 1 FROM t$j WHERE ASCII(c1) = 50);
if ($i == 11)           {                 INSERT INTO t11 SET c1='2015-04-14 09:22:33';
}        }        inc $j;
}     inc $i;
} SET TIMESTAMP=UNIX_TIMESTAMP(20140413000000);
} DROP TABLE t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
CREATE PROCEDURE sp1() BEGIN    DECLARE v1, v2, v3, v4 DECIMAL(28,12);   DECLARE v3_2, v4_2 DECIMAL(28, 12);   DECLARE counter INT;   SET v1 = 1;   SET v2 = 2;   SET v3 = 1000000000000;   SET v4 = 2000000000000;   SET counter = 0;   WHILE counter < 100000 DO    SET v1 = v1 + 0.000000000001;    SET v2 = v2 - 0.000000000001;    SET v3 = v3 + 1;    SET v4 = v4 - 1;    SET counter = counter + 1;    END WHILE;   SET v3_2 = v3 * 0.000000000001;   SET v4_2 = v4 * 0.000000000001;   SELECT v1, v2, v3, v3_2, v4, v4_2; END//
call sp1()//
if ( !$VERSION_TOKEN ) {   skip Locking service plugin requires the environment variable \$VERSION_TOKEN to be set (normally done by mtr);
} UPDATE performance_schema.setup_instruments SET enabled = 'NO', timed = 'YES';
DO version_tokens_set('vt1=11;vt2=22;vt3=33;vt4=44;vt5=55');
DO version_tokens_lock_exclusive('vt3', 'vt5', 'vt1', 0);
DO version_tokens_lock_exclusive('vt3', 'vt5', 'vt1', 4);
disconnect con2;
DO version_tokens_unlock();
while ($1) {   SET @rnd= RAND();
} SET @orig_myisam_sort_buffer_size = @@session.myisam_sort_buffer_size;
if($log_error_ == "stderr") { } FLUSH LOGS;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
connect (con0,localhost,root,,);
connect (con1,localhost,user_1,,);
connect (con2,localhost,user_1,,);
connect (con3,localhost,user_1,,);
connect (con4,localhost,user_1,,);
connect (con5,localhost,user_1,,);
disconnect con1;
disconnect con2;
disconnect con3;
disconnect con4;
disconnect con5;
connect (con1,localhost,mysqltest1,,);
disconnect con1;
set global init_connect="create procedure p1(x int)\ begin\   select count(*) from t1;\   select * from t1;\   set @x = x;
end";
connect (con1,localhost,mysqltest1,,);
disconnect con1;
connect (con1,localhost,mysqltest1,,);
disconnect con1;
connect (con1,localhost,mysqltest1,,);
disconnect con1;
create procedure p1(out sum int) begin   declare n int default 0;   declare c cursor for select * from t1;   declare exit handler for not found     begin       close c;       set sum = n;     end;   open c;   loop     begin       declare x int;       fetch c into x;       if x > 3 then         set n = n + x;       end if;     end;   end loop; end|
connect (con1,localhost,mysqltest1,,);
disconnect con1;
create procedure p1(tbl char(10), v int) begin   set @s = concat('insert into ', tbl, ' values (?)');   set @v = v;   prepare stmt1 from @s;   execute stmt1 using @v;   deallocate prepare stmt1; end|
connect (con1,localhost,mysqltest1,,);
disconnect con1;
create function f1() returns int begin   declare n int;   select count(*) into n from t1;   return n; end|
connect (con1,localhost,mysqltest1,,);
disconnect con1;
connect (con1,localhost,mysqltest1,,);
disconnect con1;
connect (con1,localhost,mysqltest1,,);
disconnect con1;
connect (con1,localhost,mysqltest1,,);
disconnect con0;
disconnect con1;
call mtr.add_suppression("\\[Warning\\] \\[.*\\] init_connect variable is ignored for user:.* host: localhost due to expired password.");
connect (con1,localhost,user1,,);
disconnect con1;
connect (con2,localhost,anonymous,,);
disconnect con2;
CALL mtr.add_suppression("Failed to initialize TLS for channel: mysql_admin");
CALL mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
if($log_error_file == "stderr") { } SELECT CURRENT_USER();
source include/func_aes_block.inc;
CREATE FUNCTION round_to_step(i INT, n INT) RETURNS INT BEGIN   DECLARE step INT;   SELECT * INTO step FROM t_step;   RETURN FLOOR((i % (step * n) + 0.1) / step); END//
while ($count) {          VALUES (@tzid, $transition_unix_time,                  $transition_unix_time % @step6 = 0);
dec $count;
} CREATE TABLE t1 (count INT, unix_time INT, local_time INT, comment CHAR(80));
CREATE FUNCTION f1(comment CHAR(80)) RETURNS INT BEGIN   DECLARE orig_tz CHAR(64);   DECLARE unix_time INT;   DECLARE local_now DATETIME;   DECLARE utc_now DATETIME;   DECLARE local_time INT;   SET unix_time= UNIX_TIMESTAMP();   SET local_now= FROM_UNIXTIME(unix_time);   SET orig_tz= @@TIME_ZONE;   SET TIME_ZONE = '+00:00';   SET utc_now= FROM_UNIXTIME(unix_time);   SET TIME_ZONE= orig_tz;   SET local_time = unix_time + TIMESTAMPDIFF(SECOND, utc_now, local_now);   SET unix_time= round_to_step(unix_time, 6);   SET local_time= round_to_step(local_time, 6);   INSERT INTO t1 VALUES ((SELECT count FROM t2),                          unix_time, local_time, comment);   RETURN 0; END//
while ($count) {   SELECT SLEEP(@step);
WHEN 5 THEN f1(CONCAT("Second pass after backward -2 step shift,",                              " e2 should not be executed"))        WHEN 4 THEN f1(CONCAT("Second pass after backward -2 step shift,",                              " e2 should not be executed"))        WHEN 2 THEN f1(CONCAT("Forward +2 step shift, local 0, 1 are skipped,",                              " e2 should be executed"))        ELSE f1("e2 should be executed")        END;
dec $count;
} SET GLOBAL EVENT_SCHEDULER= OFF;
STARTS FROM_UNIXTIME($now - @step) DO          INSERT INTO t1 VALUES            ("e1", NOW(), round_to_step(UNIX_TIMESTAMP() - $now, 4) - 1);
STARTS FROM_UNIXTIME($now + @step) DO          INSERT INTO t1 VALUES            ("e2", NOW(), round_to_step(UNIX_TIMESTAMP() - $now, 4) - 1);
while ($count) {   dec $count;
} ANALYZE TABLE t1;
ENGINE = $type ;
prepare stmt1 from ' select s from t2 where match (s) against (?) ' ;
execute stmt1 using @arg00 ;
prepare stmt1 from ' SELECT s FROM t2 where match (s) against (concat(?,''digger'')) ';
execute stmt1 using @arg00 ;
PREPARE x FROM 'INSERT INTO t1 VALUES (1), (2)';
EXECUTE x;
EXECUTE x;
set @a:=1;
LOCK TABLE t1 WRITE;
call mtr.add_suppression("Failed to set up SSL because of the following SSL library error");
call mtr.add_suppression("Failed to initialize TLS for channel: mysql_main");
connect (ssl_con,localhost,root,,,,,SSL);
disconnect ssl_con;
connect (ssl_con,localhost,root,,,,,SSL);
connect (ssl_new_con,localhost,root,,,,,SSL);
if ($the_same == 1) {   die the not-after values must be different;
} SHOW STATUS LIKE 'Ssl_cipher';
disconnect ssl_con;
disconnect ssl_new_con;
connect (ssl_con,localhost,root,,,,,SSL);
if ($the_same == 0) {   die the old non-after must still be active;
} disconnect ssl_con;
connect (ssl_con,localhost,test_connection_admin,,,,,SSL);
disconnect ssl_con;
connect (ssl_con,localhost,root,,,,,SSL);
disconnect ssl_con;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
LOCK TABLES t3 WRITE ;
UNLOCK TABLES;
create table t2 (primary key (auto)) select auto+1 as auto,1 as t1, 'a' as t2, repeat('a',256) as t3, binary repeat('b',256) as t4, repeat('a',4096) as t5, binary repeat('b',4096) as t6, '' as t7, binary '' as t8 from t1;
'$MYSQLD_DATADIR/mysqltest_db1/t1.TRG'  FROM patch;
disconnect wl2818_definer_con;
TYPE=TRIGGERNAME trigger_table=t1 TYPE=TRIGGERNAME trigger_table=t1 TYPE=TRIGGERNAME trigger_table=t1 TYPE=TRIGGERNAME trigger_table=t1 TYPE=TRIGGERNAME trigger_table=t1 TYPE=TRIGGERS triggers='CREATE DEFINER=`root`@`localhost` TRIGGER tr11 BEFORE INSERT ON t1 FOR EACH ROW DELETE FROM t3' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr12 AFTER INSERT ON t1 FOR EACH ROW DELETE FROM t3' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr13 BEFORE DELETE ON t1 FOR EACH ROW DELETE FROM t1 a USING t1 a' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr14 AFTER DELETE ON t1 FOR EACH ROW DELETE FROM non_existing_table' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr15 BEFORE UPDATE ON t1 FOR EACH ROW DELETE FROM non_existing_table a USING non_existing_table a' sql_modes=0 0 0 0 0 definers='root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' TYPE=TRIGGERS triggers='Not allowed syntax here, and trigger name cant be extracted either.' sql_modes=0 definers='root@localhost' FLUSH TABLE t1;
FLUSH TABLE t2;
connect (user_a,localhost,mysqltest_1,,);
disconnect user_a;
connect (user_b,localhost,mysqltest_1,,);
disconnect user_b;
connect (user_c,localhost,mysqltest_1,,);
disconnect user_c;
connect (user1,localhost,mysqltest_1,,);
disconnect user1;
show grants for mysqltest_1@localhost;
show grants for mysqltest_2@localhost;
connect (user2,localhost,mysqltest_1,,);
disconnect user2;
show grants for mysqltest_1@localhost;
connect (mrbad, localhost, mysqltest_1,,mysqltest);
disconnect mrbad;
connect (mrugly, localhost, mysqltest_1,,mysqltest);
disconnect mrugly;
connect (con8,127.0.0.1,root,,test,$MASTER_MYPORT,);
disconnect con8;
connect (con9,127.0.0.1,root,,test,$MASTER_MYPORT,);
disconnect con9;
connect (con10,localhost,mysqltest_1,,);
disconnect con10;
show grants for 'mysqltest_1';
show grants for 'mysqltest_2';
show grants for 'mysqltest_1';
show grants for 'mysqltest_1';
show grants for 'mysqltest_1';
show grants for 'mysqltest_1';
show grants for 'mysqltest_1';
drop user 'mysqltest_2' identified by 'Mysqltest-2';
show grants for '%@b'@'b';
show grants for '%@b'@'b';
show grants for '%@b'@'b';
show grants for '%@a'@'a';
connect (user3,localhost,mysqltest_2,,);
disconnect user3;
connect (user4,localhost,mysqltest_3,,);
disconnect user4;
connect (n1,127.0.0.1,mysqltest_1,,mysqltest_1,$MASTER_MYPORT,$MASTER_MYSOCK);
disconnect n1;
connect (b12302,127.0.0.1,mysqltest_1,,mysqltest_1,$MASTER_MYPORT,);
disconnect b12302;
connect (b12302_2,127.0.0.1,mysqltest_1,,mysqltest_1,$MASTER_MYPORT,);
disconnect b12302_2;
connect (n5,localhost,test,,test,$MASTER_MYPORT,$MASTER_MYSOCK);
disconnect n5;
connect (con2root,localhost,root,,);
connect (con3root,localhost,root,,);
lock table mysql.user write;
send flush privileges;
send grant all on *.* to 'mysqltest_1'@'localhost';
unlock tables;
reap;
reap;
lock table mysql.user write;
send set password for 'mysqltest_1'@'localhost' = '';
send revoke all on *.* from 'mysqltest_1'@'localhost';
unlock tables;
reap;
reap;
disconnect con2root;
disconnect con3root;
connect (con1,localhost,mysqltest_1,,TESTDB);
disconnect con1;
connect (bug13310,localhost,'a@',,test);
CREATE FUNCTION f2 () RETURNS INT BEGIN DECLARE v INT; SELECT s1 FROM t2 INTO v; RETURN v; END//
disconnect bug13310;
connect (user1,localhost,mysqltest_u1,,mysqltest_1);
disconnect user1;
connect (con18600_1,localhost,mysqltest_1,,);
connect (con3,localhost,mysqltest_2,,);
disconnect con3;
disconnect con18600_1;
connect (conn1,localhost,mysqltest1,,);
disconnect conn1;
CREATE TEMPORARY TABLE t6(a INT) ENGINE = MERGE UNION = ();
ALTER TABLE t6 UNION = ();
SET @a := (SELECT COUNT(*) FROM t1);
LOCK TABLES t1 READ;
UNLOCK TABLES;
RENAME TABLE t3 TO t3_1;
HANDLER t1 OPEN;
HANDLER t1 READ NEXT;
HANDLER t1 CLOSE;
DO (SELECT COUNT(*) FROM t1);
PREPARE stmt1 FROM 'SELECT * FROM t1 ORDER BY a';
PREPARE stmt2 FROM 'SELECT * FROM t2 ORDER BY a';
EXECUTE stmt1;
EXECUTE stmt2;
DEALLOCATE PREPARE stmt1;
DEALLOCATE PREPARE stmt2;
ALTER TABLE mysqltest_db2.t2_2 UNION = ();
INSERT INTO all_types VALUES (   NULL,     # BOOLEAN   NULL,     # BIT   NULL,     # TINYINT   NULL,     # SMALLINT   NULL,     # MEDIUMINT   NULL,     # INTEGER   NULL,     # BIGINT   NULL,     # TINYINT_UNSIGNED   NULL,     # SMALLINT_UNSIGNED   NULL,     # MEDIUMINT_UNSIGNED   NULL,     # INTEGER_UNSIGNED   NULL,     # BIGINT_UNSIGNED   NULL,     # FLOAT   NULL,     # DOUBLE   NULL,     # DECIMAL(65, 2)   NULL,     # DATE   NULL,     # TIME   NULL,     # YEAR   NULL,     # DATETIME   NULL,     # TIMESTAMP   NULL,     # CHAR   NULL,     # VARCHAR   NULL,     # TINYTEXT   NULL,     # TEXT   NULL,     # MEDIUMTEXT   NULL,     # LONGTEXT   NULL,     # BINARY   NULL,     # VARBINARY   NULL,     # TINYBLOB   NULL,     # BLOB   NULL,     # MEDIUMBLOB   NULL,     # LONGBLOB   NULL,     # ENUM   NULL);    # SET INSERT INTO all_types VALUES (   FALSE,                                                               # BOOLEAN   b'0000000000000000000000000000000000000000000000000000000000000000', # BIT   -128,                                                                # TINYINT   -32768,                                                              # SMALLINT   -8388608,                                                            # MEDIUMINT   -2147483648,                                                         # INTEGER   -9223372036854775808,                                                # BIGINT   0,                                                                   # TINYINT_UNSIGNED   0,                                                                   # SMALLINT_UNSIGNED   0,                                                                   # MEDIUMINT_UNSIGNED   0,                                                                   # INTEGER_UNSIGNED   0,                                                                   # BIGINT_UNSIGNED   -3.402823466E+38,                                                    # FLOAT   -1.7976931348623157E+308,                                            # DOUBLE   -999999999999999999999999999999999999999999999999999999999999999.99, # DECIMAL(65, 2)   '1000-01-01',                                                        # DATE   '-838:59:59.000000',                                                 # TIME   1901,                                                                # YEAR   '1000-01-01 00:00:00',                                               # DATETIME   '1970-01-02 00:00:01',                                               # TIMESTAMP   '',                                                                  # CHAR   '',                                                                  # VARCHAR   '',                                                                  # TINYTEXT   '',                                                                  # TEXT   '',                                                                  # MEDIUMTEXT   '',                                                                  # LONGTEXT   '',                                                                  # BINARY   '',                                                                  # VARBINARY   '',                                                                  # TINYBLOB   '',                                                                  # BLOB   '',                                                                  # MEDIUMBLOB   '',                                                                  # LONGBLOB   'red',                                                               # ENUM   '');                                                                 # SET INSERT INTO all_types VALUES (   TRUE,                                                                # BOOLEAN   b'1111111111111111111111111111111111111111111111111111111111111111', # BIT   127,                                                                 # TINYINT   32767,                                                               # SMALLINT   8388607,                                                             # MEDIUMINT   2147483647,                                                          # INTEGER   9223372036854775807,                                                 # BIGINT   255,                                                                 # TINYINT_UNSIGNED   65535,                                                               # SMALLINT_UNSIGNED   16777215,                                                            # MEDIUMINT_UNSIGNED   4294967295,                                                          # INTEGER_UNSIGNED   18446744073709551615,                                                # BIGINT_UNSIGNED   3.402823466E+38,                                                     # FLOAT   1.7976931348623157E+308,                                             # DOUBLE   999999999999999999999999999999999999999999999999999999999999999.99,  # DECIMAL(65, 2)   '9999-12-31',                                                        # DATE   '838:59:59.000000',                                                  # TIME   2155,                                                                # YEAR   '9999-12-31 23:59:59',                                               # DATETIME   '2038-01-19 03:14:07',                                               # TIMESTAMP   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # CHAR   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # VARCHAR   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # TINYTEXT   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # TEXT   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # MEDIUMTEXT   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # LONGTEXT   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # BINARY   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # VARBINARY   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # TINYBLOB   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # BLOB   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # MEDIUMBLOB   'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',                     # LONGBLOB   'purple',                                                            # ENUM   'three');                                                            # SET SELECT COUNT(*) AS should_be_0 FROM information_schema.COLUMN_STATISTICS;
ANALYZE TABLE foo UPDATE HISTOGRAM ON foo WITH -1 BUCKETS;
ANALYZE TABLE foo UPDATE HISTOGRAM ON tbl.col WITH 100 BUCKETS;
ANALYZE TABLE foo UPDATE HISTOGRAM ON db.tbl.col WITH 100 BUCKETS;
LOCK TABLES t2 READ;
UNLOCK TABLES;
LOCK TABLES t2 READ;
UNLOCK TABLES;
RENAME TABLE t1 TO t1_renamed;
RENAME TABLE t1 TO t1_renamed;
PREPARE ps FROM 'ANALYZE TABLE t UPDATE HISTOGRAM ON x WITH 10 BUCKETS';
EXECUTE ps;
EXECUTE ps;
RENAME TABLE foo.tbl TO bar.tbl2;
CREATE TRIGGER ai AFTER INSERT ON t1 FOR EACH ROW SET @a:= NEW.at;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
source include/restart_mysqld.inc;
drop table if exists t1,t2,t3,t4,t9,`t1a``b`,v1,v2,v3,v4,v5,v6;
drop view if exists t1,t2,`t1a``b`,v1,v2,v3,v4,v5,v6;
create view v1 (c,d,e,f) as select a,b, a in (select a+2 from t1), a = all (select a from t1) from t1;
create view v1 (c,d,e,f) as select a,b, a in (select a+2 from t1), a = all (select a from t1) from t1;
create or replace view v1 (c,d,e,f) as select a,b, a in (select a+2 from t1), a = all (select a from t1) from t1;
create table `t1a``b` (col1 char(2));
drop table `t1a``b`;
PREPARE stmt FROM 'UPDATE v1 SET a = ?';
EXECUTE stmt USING @v0;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM 'insert into v1 values (?)';
EXECUTE stmt USING @v0;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM 'insert into v1 (a) values (?)';
EXECUTE stmt USING @v0;
DEALLOCATE PREPARE stmt;
prepare stmt1 from "select distinct a from v1 limit 2";
execute stmt1;
execute stmt1;
deallocate prepare stmt1;
create function `f``1` () returns int return 5;
create view v1 as select test.`f``1` ();
drop function `f``1`;
rename table v1 to mysqltest.v1;
rename table v1 to v2;
rename table v3 to v1, v2 to t1;
handler v1 open as xx;
prepare stmt1 from "update v1,t1 set v1.s1=? where t1.s1=v1.s1";
execute stmt1 using @arg;
execute stmt1 using @arg;
deallocate prepare stmt1;
lock tables t1 read, v1 read;
unlock tables;
prepare stmt1 from "select * from v2;";
execute stmt1;
execute stmt1;
deallocate prepare stmt1;
load data infile '../../std_data/loaddata2.dat' into table v1 fields terminated by ',' enclosed by '''';
load data infile '../../std_data/loaddata2.dat' ignore into table v1 fields terminated by ',' enclosed by '''';
load data infile '../../std_data/loaddata3.dat' into table v1 fields terminated by '' enclosed by '' ignore 1 lines;
load data infile '../../std_data/loaddata3.dat' ignore into table v1 fields terminated by '' enclosed by '' ignore 1 lines;
load data infile '../../std_data/loaddata2.dat' into table v1 fields terminated by ',' enclosed by '''';
load data infile '../../std_data/loaddata2.dat' ignore into table v1 fields terminated by ',' enclosed by '''';
prepare stmt1 from "select * from t3 left join v4 on (t3.a = v4.a);";
execute stmt1;
execute stmt1;
deallocate prepare stmt1;
prepare stmt1 from "update v3 set a= ? where a=?";
execute stmt1 using @a,@b;
execute stmt1 using @a,@b;
deallocate prepare stmt1;
prepare stmt1 from "insert into v3(a) values (?);";
execute stmt1 using @a;
execute stmt1 using @a;
deallocate prepare stmt1;
prepare stmt1 from "insert into v3(a) select ?;";
execute stmt1 using @a;
execute stmt1 using @a;
deallocate prepare stmt1;
create procedure p1() begin select * from v1; end//
create table t1 (a timestamp default now());
create table t2 (b timestamp default now());
CREATE PROCEDURE p1 ( ) BEGIN         DO (SELECT  @next := IFNULL(max(bug_table_seq),0) + 1 FROM v1);         INSERT INTO t1 VALUES (1); END //
create procedure p1() create view v1 as select * from t1;
prepare stmt1 from "select count(*) from v1 where x = ?";
execute stmt1 using @parm1;
execute stmt1 using @parm1;
create procedure p1 () deterministic begin create view v1 as select 1; end; //
CREATE FUNCTION f1() RETURNS INTEGER BEGIN   DECLARE retn INTEGER;
SELECT Meaning FROM v1 INTO retn;
RETURN retn;
END // DELIMITER ;// CREATE VIEW v2 AS SELECT f1();
rename table v2 to t1;
create function f1() returns int begin   declare mx int;   select max(a) from t1 into mx;   return mx; end//
rename table v2 to t1;
SELECT TRIM(BOTH 'y' FROM s) FROM t1;
CREATE VIEW v1 AS SELECT TRIM(BOTH 'y' FROM s) FROM t1;
SELECT TRIM(LEADING 'y' FROM s) FROM t1;
CREATE VIEW v1 AS SELECT TRIM(LEADING 'y' FROM s) FROM t1;
SELECT TRIM(TRAILING 'y' FROM s) FROM t1;
CREATE VIEW v1 AS SELECT TRIM(TRAILING 'y' FROM s) FROM t1;
connect (root,localhost,root,,bug21261DB);
connect (user21261, localhost, user21261,, bug21261DB);
disconnect root;
disconnect user21261;
CREATE FUNCTION f1() RETURNS INT BEGIN   INSERT INTO v1 VALUES (0);   RETURN 0; END |
CREATE FUNCTION f2() RETURNS INT BEGIN   INSERT INTO v2 VALUES (0);   RETURN 0; END |
PREPARE t FROM 'UPDATE v1 SET c=3';
EXECUTE t;
EXECUTE t;
PREPARE t FROM 'UPDATE v2 SET c=3';
EXECUTE t;
EXECUTE t;
CREATE VIEW v1 AS SELECT * FROM t1 FORCE KEY (PRIMARY,b) ORDER BY a;
CREATE VIEW v2 AS SELECT * FROM t1 USE KEY () ORDER BY a;
prepare stmt from "select * from v2 where a = 1";
execute stmt;
SELECT * FROM t1 USE INDEX (PRIMARY) WHERE c1=2;
SELECT * FROM v1 USE INDEX (PRIMARY) WHERE c1=2;
SELECT * FROM v1 FORCE INDEX (PRIMARY) WHERE c1=2;
SELECT * FROM v1 IGNORE INDEX (PRIMARY) WHERE c1=2;
RENAME TABLE `t-1` TO `t-2`;
RENAME TABLE `v-1` TO `v-2`;
create procedure p() begin   declare continue handler for sqlexception begin end;   create view a as select 1; end|
CREATE VIEW v1 AS SELECT 1 FROM t1 GROUP BY SUBSTRING(1 FROM (SELECT 3 FROM t1 WHERE a >= ANY(SELECT 1)));
CREATE VIEW v1 AS SELECT 1 IN (1 LIKE 2,0) AS f;
UNLOCK TABLES;
connect (con2, localhost, root);
connect (con3, localhost, root);
disconnect con2;
disconnect con3;
INSERT INTO t2 VALUES (   NULL,   repeat('x', 600),   3,   repeat('y', 600),   repeat('z', 600) );
(SELECT * FROM t2) AS dt;
(SELECT * FROM t1 WHERE b=a*10) AS dt;
(SELECT a, SUM(b) AS s, COUNT(*) AS c FROM t1 GROUP BY a ORDER BY a) AS dt;
(SELECT DISTINCT a FROM t1) AS dt;
(SELECT * FROM t1 LIMIT 3 OFFSET 3) AS dt;
(SELECT DISTINCT a FROM t1 UNION ALL SELECT a FROM t2) AS dt;
(SELECT * FROM t1 WHERE (SELECT a FROM t1 LIMIT 1) = b/10) AS dt;
(SELECT * FROM t1 WHERE a IN (SELECT a FROM t2 WHERE a % 2 = 0)) AS dt;
(SELECT a, (SELECT a FROM t2 WHERE a=t1.a)  FROM t1 WHERE b IN (SELECT a*10 FROM t2)) AS dt;
(SELECT a, (SELECT a FROM t2) FROM t1 WHERE b=a*10) AS dt;
(SELECT a, b FROM t1 WHERE b IN (SELECT a*10 FROM t2)) AS dt;
SELECT a, b, a IN (SELECT 1 FROM t2 WHERE a=6) AS s FROM t1;
SELECT a, b, a IN (SELECT COUNT(*) FROM t2) AS c FROM t1;
SELECT a IN (SELECT a FROM t2 WHERE a=FLOOR(COUNT(t1.a)/2)) AS s FROM t1;
SELECT COUNT(*) AS a, a IN (SELECT a FROM t2 WHERE a=FLOOR(COUNT(t1.a)/2)) AS s FROM t1;
SELECT a, COUNT(*) AS c, a IN (SELECT a FROM t2 WHERE a=COUNT(t1.a)) AS s FROM t1 GROUP BY a;
PREPARE s FROM "set @a:=(SELECT 1 FROM t1,v2);";
EXECUTE s;
EXECUTE s;
PREPARE s1 FROM   "SELECT (SELECT MAX(i)) AS field1    FROM (SELECT * FROM t) AS table1" ;
EXECUTE s1;
PREPARE s2 FROM   "SELECT (SELECT MAX(i)) AS field1    FROM v AS table1" ;
EXECUTE s2;
DEALLOCATE PREPARE s1;
DEALLOCATE PREPARE s2;
PREPARE X FROM 'CREATE VIEW bug22108567_v1 AS SELECT 1 FROM (SELECT 1) AS D1';
EXECUTE X;
RENAME TABLE t1 TO t2, v1 TO v2;
RENAME TABLE t3 TO t1, t4 TO t2;
PREPARE stmt FROM "CREATE VIEW v1 AS SELECT * FROM                    JSON_TABLE('[]', '$[*]' COLUMNS (c1 INT PATH '$.x')) AS jt";
EXECUTE stmt;
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
PREPARE stmt FROM "CREATE VIEW v1 AS WITH RECURSIVE cte (n) AS                     (                       SELECT 1                       UNION ALL                       SELECT n + 1 FROM cte WHERE n < 5                     )                     SELECT * FROM cte";
EXECUTE stmt;
EXECUTE stmt;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
call sys.create_synonym_db("INFORMATION_SCHEMA", "I_S");
CREATE VIEW v AS SELECT INSERT('a', 1, 1, YEAR(UNHEX('w'))) AS c;
if ($ENGINE == "") {   exit;
}   ENGINE $ENGINE   PARTITION BY HASH (i) PARTITIONS 2;
ENGINE $ENGINE   PARTITION BY LIST (i) SUBPARTITION BY HASH (i)   (PARTITION p0 VALUES IN (0)    (SUBPARTITION s0,     SUBPARTITION s1,     SUBPARTITION s2),   PARTITION p1 VALUES IN (1)    (SUBPARTITION s3,     SUBPARTITION s4,     SUBPARTITION s5));
ENGINE $ENGINE;
ENGINE $ENGINE;
PARTITION BY HASH (i) PARTITIONS 2;
source include/not_windows.inc;
exec $MYSQLD --defaults-file=/path/with/no/extension --print-defaults 2>$MDF_LOG;
exec $MYSQLD --defaults-file=/path/with.ext --print-defaults 2>$MDF_LOG;
exec $MYSQLD --defaults-file=relative/path/with.ext --print-defaults 2>$MDF_LOG;
exec $MYSQLD --defaults-file=relative/path/without/extension --print-defaults 2>$MDF_LOG;
exec $MYSQLD --defaults-file=with.ext --print-defaults 2>$MDF_LOG;
exec $MYSQLD --defaults-file=no_extension --print-defaults 2>$MDF_LOG;
perl;
my $dir = $ENV{'MYSQLTEST_VARDIR'};
open ( OUTPUT, ">$dir/tmp/zoneinfocheck.inc") ;
@path=();
if(-d "/usr/share/zoneinfo"){   $path[1] = "/usr/share/zoneinfo";
}elsif(-d "/usr/share/lib/zoneinfo"){   $path[1] = "/usr/share/lib/zoneinfo";
}else{    system("whereis zoneinfo");
if ($?==0) {       @path = split (/\s+/, `whereis zoneinfo`);
} } if (defined($path[1])) {    if (-e "$path[1]/Japan") {       print OUTPUT "let zoneinfo_japan_path = $path[1]/Japan;\n";
}    if (-d "$path[1]/Europe") {       print OUTPUT "let zoneinfo_europe_path = $path[1]/Europe;\n";
}    if (-e "$path[1]/right/Europe/Moscow") {       print OUTPUT "let zoneinfo_leap_moscow_path= $path[1]/right/Europe/Moscow;\n",    } } close (OUTPUT);
if (!$zoneinfo_japan_path) {  } if (!$zoneinfo_europe_path) {  } CREATE DATABASE test_zone;
if ($zoneinfo_leap_moscow_path) {   SELECT (count(*) > 1) AS OK FROM time_zone_leap_second;
} if (!$zoneinfo_leap_moscow_path) {   SELECT (count(*) = 0) AS OK FROM time_zone_leap_second;      } SELECT (count(*) > 0) FROM time_zone;
begin   $body end//
call test.longprocedure(@value); select @value;
while ($1) {   dec $1;
} select count(*) from t1;
create procedure p1() begin   declare done integer default 0;   declare vf1 char(100) ;   declare vf2 mediumint;   declare vf3 int ;   declare vf4 real ;   declare vf5 numeric ;   declare cur1 cursor for select f1,f2,f3,f4,f5 from t1;     declare continue handler for sqlstate '02000' set done = 1;    open cur1;   while done <> 1 do     fetch cur1 into vf1, vf2, vf3, vf4, vf5;     if not done then       insert into t2 values (vf1, vf2, vf3, vf4, vf5);     end if;   end while;   close cur1; end|
connect (addconroot1, localhost, root,,);
connect (addconroot2, localhost, root,,);
connect (addconwithoutdb, localhost, root,,*NO-ONE*);
create trigger trg before insert on t1 for each row set @a:=1;
set @a:=0;
create trigger trg before insert on t1 for each row set @a:=new.i;
create trigger trg before insert on t1 for each row  begin    if isnull(new.j) then     set new.j:= new.i * 10;   end if; end|
insert into t1 (i) values (1)|
insert into t1 (i,j) values (2, 3)|
select * from t1|
drop trigger trg|
drop table t1|
create trigger trg after insert on t1 for each row    set @a:= if(@a,concat(@a, ":", new.i), new.i);
set @a:="";
create trigger trg before update on t1 for each row  begin   declare loc_err varchar(255);   if abs(new.balance - old.balance) > 1000 then     set new.balance:= old.balance;     set loc_err := concat("Too big change for aid = ", new.aid);     set @update_failed:= if(@update_failed, concat(@a, ":", loc_err), loc_err);   end if; end|
set @update_failed:=""|
update t1 set balance=1500|
drop trigger trg|
drop table t1|
create trigger trg after update on t1 for each row    set @total_change:=@total_change + new.i - old.i;
set @total_change:=0;
create trigger trg before delete on t1 for each row    set @del_sum:= @del_sum + old.i;
set @del_sum:= 0;
create trigger trg after delete on t1 for each row set @del:= 1;
set @del:= 0;
create trigger trg1 before insert on t1 for each row  begin   if new.j > 10 then     set new.j := 10;   end if; end|
create trigger trg2 before update on t1 for each row  begin   if old.i % 2 = 0 then     set new.j := -1;   end if; end|
create trigger trg3 after update on t1 for each row  begin   if new.j = -1 then     set @fired:= "Yes";   end if; end|
set @fired:="";
create trigger t1_bi before insert on t1 for each row   set @log:= concat(@log, "(BEFORE_INSERT: new=(id=", new.id, ", data=", new.data,"))");
create trigger t1_ai after insert on t1 for each row   set @log:= concat(@log, "(AFTER_INSERT: new=(id=", new.id, ", data=", new.data,"))");
create trigger t1_bu before update on t1 for each row   set @log:= concat(@log, "(BEFORE_UPDATE: old=(id=", old.id, ", data=", old.data,                                         ") new=(id=", new.id, ", data=", new.data,"))");
create trigger t1_au after update on t1 for each row   set @log:= concat(@log, "(AFTER_UPDATE: old=(id=", old.id, ", data=", old.data,                                        ") new=(id=", new.id, ", data=", new.data,"))");
create trigger t1_bd before delete on t1 for each row   set @log:= concat(@log, "(BEFORE_DELETE: old=(id=", old.id, ", data=", old.data,"))");
create trigger t1_ad after delete on t1 for each row   set @log:= concat(@log, "(AFTER_DELETE: old=(id=", old.id, ", data=", old.data,"))");
set @log:= "";
set @log:= "";
set @log:= "";
set @log:= "";
set @log:= "";
create trigger t1_bi before insert on t1 for each row begin   if exists (select id from t3 where id=new.fk) then     insert into t2 values (concat("INSERT INTO t1 id=", new.id, " data='", new.data, "' fk=", new.fk));   else     insert into t2 values (concat("INSERT INTO t1 FAILED id=", new.id, " data='", new.data, "' fk=", new.fk));     set new.id= NULL;   end if; end|
create trigger t1_bi before insert on t1 for each row begin   if new.id > f1() then     set new.id:= f1();   end if; end|
create trigger trg before insert on t1 for each row set @a:= old.i;
create trigger trg before delete on t1 for each row set @a:= new.i;
create trigger trg before update on t1 for each row set old.i:=1;
create trigger trg before delete on t1 for each row set new.i:=1;
create trigger trg after update on t1 for each row set new.i:=1;
create trigger trg before update on t1 for each row set new.j:=1;
create trigger trg before update on t1 for each row set @a:=old.j;
create trigger trg before insert on t2 for each row set @a:=1;
create trigger trg before insert on t1 for each row set @a:=1;
create trigger trg after insert on t1 for each row set @a:=1;
create trigger trg before insert on t3 for each row set @a:=1;
create trigger trg2 before insert on t3 for each row set @a:=1;
create trigger trg before insert on v1 for each row set @a:=1;
create trigger trg before insert on t1 for each row set @a:=1;
create trigger trg1 before delete on t1 for each row set @del_before:= @del_before + old.i;
create trigger trg2 after delete on t1 for each row set @del_after:= @del_after + old.i;
set @del_before:=0, @del_after:= 0;
create trigger trg1 before insert on t1 for each row set @a:= 1;
create trigger trg1 before insert on mysqltest.t1 for each row set @a:= 1;
create trigger test.trg1 before insert on t1 for each row set @a:= 1;
create trigger trg1 before update on t1 for each row set @a:= @a + new.j - old.j;
create trigger trg2 after update on t1 for each row set @b:= "Fired";
set @a:= 0, @b:= "";
set @a:= 0, @b:= "";
create trigger trg3 before delete on t1 for each row set @c:= @c + old.j;
create trigger trg4 before delete on t2 for each row set @d:= @d + old.i;
create trigger trg5 after delete on t1 for each row set @e:= "After delete t1 fired";
create trigger trg6 after delete on t2 for each row set @f:= "After delete t2 fired";
set @c:= 0, @d:= 0, @e:= "", @f:= "";
create table t1 (i int, j int default 10)|
create table t2 (i int)|
insert into t2 values (1), (2)|
create trigger trg1 before insert on t1 for each row  begin   if new.i = 1 then     set new.j := 1;   end if; end|
create trigger trg2 after insert on t1 for each row set @a:= 1|
set @a:= 0|
insert into t1 (i) select * from t2|
select * from t1|
select @a|
drop table t1, t2|
create trigger trg2 after insert on t1 for each row set @b:= "Fired";  set @b:="";
load data infile '../../std_data/rpl_loaddata.dat' into table t1 (@a, i);
set @b:="";
load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (i, j);
create trigger bi before insert on t1 for each row set @a:= new.bt;
create trigger bu before update on t1 for each row set @a:= new.bt;
create trigger bd before delete on t1 for each row set @a:= old.bt;
load data infile '../../std_data/loaddata5.dat' into table t1 fields terminated by '' enclosed by '' (i, k);
create trigger t1_ai after insert on t1 for each row reset master;
create trigger t1_ai after insert on t1 for each row reset slave;
create trigger t1_ai after insert on t1 for each row flush hosts;
create trigger t1_ai after insert on t1 for each row flush tables with read lock;
create trigger t1_ai after insert on t1 for each row flush logs;
create trigger t1_ai after insert on t1 for each row flush status;
create trigger t1_ai after insert on t1 for each row flush user_resources;
create trigger t1_ai after insert on t1 for each row flush tables;
create trigger t1_ai after insert on t1 for each row flush privileges;
create procedure p1() flush tables;
create procedure p1() reset master;
create procedure p1() reset slave;
create procedure p1() flush hosts;
create procedure p1() flush privileges;
create procedure p1() flush tables with read lock;
create procedure p1() flush tables;
create procedure p1() flush logs;
create procedure p1() flush status;
create procedure p1() flush user_resources;
create trigger t1_whoupdated before update on t1 for each row begin   declare user varchar(32);   declare i int;   select user() into user;   set NEW.username = user;   select count(*) from ((select 1) union (select 2)) as d1 into i; end|
create trigger tr1 before insert on t1 for each row  begin    set new.c2= '2004-04-01';   select 'hello'; end|
create procedure bug11587(x char(16)) begin   select "hello";   select "hello again"; end|
create trigger tr1 before insert on t1 for each row  begin    call bug11587(new.c2);   set new.c2= '2004-04-02'; end|
lock tables t2 write;
send insert into t1 values ((select max(id) from t2)), (2);
create trigger t1_trg before insert on t1 for each row set NEW.id:= 1;
unlock tables;
reap;
lock tables t2 write;
send insert into t1 values ((select max(id) from t2)), (4);
unlock tables;
reap;
lock tables t2 write;
send insert into t1 values ((select max(f) from v1)), (6);
unlock tables;
reap;
lock tables t2 write;
send update t1, t2 set t1.id=10 where t1.id=t2.id;
unlock tables;
reap;
lock tables t2 write;
send update v1 set id1= 11;
unlock tables;
reap;
prepare stmt1 from "insert into t1 values (10)";
execute stmt1;
deallocate prepare stmt1;
prepare stmt1 from "insert into t1 values (10)";
execute stmt1;
deallocate prepare stmt1;
CREATE PROCEDURE `p1`() begin   insert into t1 values (1);
end// create trigger trg before insert on t1 for each row  begin    declare done int default 0;
end// DELIMITER ;// CALL p1();
create trigger t1_bi before insert on test.t1 for each row set @a:=0;
create trigger test.t1_bi before insert on t1 for each row set @a:=0;
create trigger t1_bi before insert on t1 for each row set @a:=new.id;
create trigger t1_ai after insert on test.t1 for each row set @b:=new.id;
rename table t1 to t2;
create trigger t1_bi before insert on t1 for each row set @a:=new.id;
rename table t1 to test.t2;
create trigger t1_ai after insert on t1 for each row   set @a:= (select max(a) from t1);
create trigger t2_ai after insert on t2 for each row   set @a:= (select max(a) from t2);
load data infile '../../std_data/words.dat' into table t1 (a);
load data infile '../../std_data/words.dat' into table t1 (a) set b:= f1();
create trigger t1_ai after insert on t1 for each row begin   declare sn numeric(15,2);   select sum(n) into sn from t1 where i=new.i;   replace into t2 values(new.i, sn); end|
connect (con1,localhost,root,,);
disconnect con1;
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW BEGIN   CALL p1(NEW.i1);   CALL p2(NEW.i1); END//
create trigger wont_work after update on mysql.user for each row begin  set @a:= 1; end|
use mysql|
create trigger wont_work after update on event for each row begin  set @a:= 1; end|
use test|
SET sql_mode='TRADITIONAL'|
create table t1 (id int(10) not null primary key, v int(10) )|
create table t2 (id int(10) not null primary key, v int(10) )|
create table t3 (id int(10) not null primary key, v int(10) )|
create table t4 (c int)|
create trigger t4_bi before insert on t4 for each row set @t4_bi_called:=1|
create trigger t4_bu before update on t4 for each row set @t4_bu_called:=1|
insert into t1 values(10, 10)|
set @a:=1/0|
select 1/0 from t1|
create trigger t1_bi before insert on t1 for each row set @a:=1/0|
insert into t1 values(20, 20)|
drop trigger t1_bi|
create trigger t1_bi before insert on t1 for each row begin   insert into t2 values (new.id, new.v);   update t2 set v=v+1 where id= new.id;   replace t3 values (new.id, 0);   update t2, t3 set t2.v=new.v, t3.v=new.v where t2.id=t3.id;   create temporary table t5 select * from t1;   delete from t5;   insert into t5 select * from t1;   insert into t4 values (0);   set @check= (select count(*) from t5);   update t4 set c= @check;   drop temporary table t5;   set @a:=1/0; end|
set @check=0, @t4_bi_called=0, @t4_bu_called=0|
insert into t1 values(30, 30)|
select @check, @t4_bi_called, @t4_bu_called|
create trigger t1_bi before insert on t1 for each row set @a:= f1() + 10;
create trigger t1_bi before insert on t1 for each row set NEW.b := "In trigger t1_bi";
CREATE TRIGGER fubar_change   AFTER UPDATE ON t1     FOR EACH ROW       BEGIN         INSERT INTO t2 (fubar_id, last_change_time)           SELECT DISTINCT NEW.id AS fubar_id, NOW() AS last_change_time             FROM t1 WHERE (id = NEW.id) AND (OLD.c != NEW.c)         ON DUPLICATE KEY UPDATE           last_change_time =             IF((fubar_id = NEW.id)AND(OLD.c != NEW.c),NOW(),last_change_time);
END | DELIMITER ;| INSERT INTO t1 (id,a, b,c,d) VALUES  (1,'a','b','c',now()),(2,'a','b','c',now());
CREATE TRIGGER trgA AFTER INSERT ON bug21825_A FOR EACH ROW BEGIN   INSERT INTO bug21825_B (id) values (1); END//
CREATE PROCEDURE bug22580_proc_2() BEGIN   DROP TABLE IF EXISTS bug22580_tmp;
END|| CREATE PROCEDURE bug22580_proc_1() BEGIN   CALL bug22580_proc_2();
END|| CREATE TRIGGER t1bu BEFORE UPDATE ON bug22580_t1 FOR EACH ROW  BEGIN   CALL bug22580_proc_1();
END|| DELIMITER ;|| INSERT INTO bug22580_t1 VALUES (1,1);
CREATE TRIGGER trg27006_a_insert AFTER INSERT ON t1 FOR EACH ROW BEGIN     insert into t2 values (NULL,new.val);
END | CREATE TRIGGER trg27006_a_update AFTER UPDATE ON t1 FOR EACH ROW BEGIN     insert into t2 values (NULL,new.val);
END | DELIMITER ;| INSERT INTO t1(val) VALUES ('test1'),('test2');
create trigger t1_ai after insert on t1 for each row set @a := 7;
set @a:="";
disconnect addconroot1;
disconnect addconroot2;
disconnect addconwithoutdb;
create trigger trg_bug28502_au before update on t2 for each row begin   if (new.id is not null) then     update t1 set count= count + 1 where id = old.id;   end if; end|
lock table t1 write;
unlock tables;
disconnect connection_insert;
CREATE TRIGGER t_insert AFTER INSERT ON t2 FOR EACH ROW BEGIN UPDATE t1,t2 SET date_insert=NOW() WHERE t1.a=t2.b AND t2.a=NEW.a; END | DELIMITER ;| INSERT INTO t2 (a,b) VALUES (1,2);
CREATE TRIGGER t_insert AFTER INSERT ON t2 FOR EACH ROW BEGIN UPDATE t1,t2 SET date_insert=NOW(),b=b+1 WHERE t1.a=t2.b AND t2.a=NEW.a; END | DELIMITER ;| INSERT INTO t2 (a,b) VALUES (3,5);
lock tables t1 read;
unlock tables;
lock tables t1 read;
unlock tables;
lock tables t1 write;
unlock tables;
CREATE TRIGGER tr1 BEFORE INSERT ON t2 FOR EACH ROW  BEGIN    UPDATE a_nonextisting_table SET a = 1; END//
CREATE TRIGGER trg1 AFTER INSERT ON t2 FOR EACH ROW BEGIN   SELECT 1 FROM t1 c WHERE     (@bug51650 IS NULL OR @bug51650 != c.b) AND c.b = NEW.a LIMIT 1 INTO @foo; END//
CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN   DECLARE a CHAR;   SELECT 'ab' INTO a;   SELECT 'ab' INTO a;   SELECT 'a' INTO a; END|
CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN   DECLARE trg1 CHAR;   SELECT 'ab' INTO trg1; END|
CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROW BEGIN   DECLARE trg2 CHAR;   SELECT 'ab' INTO trg2; END|
create trigger t1_bi before insert on t1 for each row set @a:=1;
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW BEGIN   DECLARE v TEXT;   SET v = 'aaa';   SET NEW.c = v; END|
CREATE TRIGGER t2_ai AFTER INSERT ON t2 FOR EACH ROW    UPDATE t3 ms, t1 d SET ms.value='No'   WHERE ms.domain_id =      (SELECT max(id) FROM t1 WHERE domain='example.com')    AND ms.mailaccount_id IS NULL    AND ms.program='spamfilter'    AND ms.keey='scan_incoming'; |
CREATE TRIGGER t1_bi BEFORE INSERT ON t1 FOR EACH ROW  BEGIN   CREATE TEMPORARY TABLE t2 AS SELECT NEW.a, NEW.b;   INSERT INTO t2(a) VALUES (10);   INSERT INTO t2 VALUES (100, 500);   INSERT INTO t2(a) VALUES (1000); END |
CREATE TRIGGER t1_au AFTER UPDATE ON t1 FOR EACH ROW START SLAVE;
CREATE TRIGGER t1_au AFTER UPDATE ON t1 FOR EACH ROW STOP SLAVE;
CREATE TRIGGER t1_au AFTER UPDATE ON t1 FOR EACH ROW CREATE SERVER s FOREIGN DATA WRAPPER mysql OPTIONS (USER 'Remote',                                                     HOST '192.168.1.106',                                                     DATABASE 'test');
CREATE TRIGGER t1_bu BEFORE UPDATE ON t1 FOR EACH ROW ALTER SERVER s OPTIONS (password '1');
CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW DROP SERVER IF EXISTS s;
CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW ALTER DATABASE db1 CHARACTER SET latin1;
CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW ALTER USER 'u1'@'localhost' PASSWORD EXPIRE;
CREATE TRIGGER tr1 AFTER UPDATE ON t1 FOR EACH ROW CHANGE REPLICATION SOURCE TO SOURCE_SSL = 0;
CREATE TRIGGER post_update_t1 AFTER UPDATE ON t1 FOR EACH ROW BEGIN   INSERT INTO t2 VALUES("POST UPDATE TRIGGER FOR UPDATE IGNORE ON t1 FIRED");
END| DELIMITER ;| UPDATE IGNORE t1 SET a=2 WHERE a=1;
RENAME TABLE t1 TO t1Renamed;
LOCK TABLE s1.v1 WRITE;
UNLOCK TABLES;
SHOW GRANTS FOR mysqltest_u1@localhost;
connect (definer,localhost,mysqltest_dfn,,mysqltest_db1);
connect (invoker,localhost,mysqltest_inv,,mysqltest_db1);
disconnect definer;
disconnect invoker;
connect (flush,localhost,root,,test,,);
lock tables t1 write;
unlock tables;
unlock tables;
disconnect flush;
connect (con1,localhost,no_rights,,);
disconnect con1;
connect (con_user_22,localhost,user_name_len_22_01234,,test);
connect (con_user_32,localhost,user_name_len_32_012345678901234,,test);
set @a:=0;
CREATE TRIGGER trigger_for_normal_insert BEFORE INSERT ON t1 FOR EACH ROW SET @x:= NEW.a;
CREATE TABLE t1(a DATETIME NOT NULL DEFAULT NOW(), b INT);
CREATE TRIGGER trigger_for_insert_select BEFORE INSERT ON t1 FOR EACH ROW SET @x:= NEW.a;
CREATE TRIGGER trigger_for_normal_replace BEFORE INSERT ON t1 FOR EACH ROW SET @x:= NEW.a;
CREATE TABLE t1(a DATETIME NOT NULL DEFAULT NOW(), b INT);
CREATE TRIGGER trigger_for_replace_select BEFORE INSERT ON t1 FOR EACH ROW SET @x:= NEW.a;
CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP                  ON UPDATE NOW(), b INT DEFAULT 1 );
CREATE TRIGGER trigger_before_update BEFORE UPDATE ON t1 FOR EACH ROW SET @x:= NEW.a;
CREATE TRIGGER trigger_before_update BEFORE UPDATE ON t1 FOR EACH ROW SET @x:= NEW.a;
CREATE TRIGGER trigger_before_update_with_join BEFORE UPDATE ON t1 FOR EACH ROW SET @x:= NEW.a;
CREATE TABLE t1( a TIMESTAMP NOT NULL DEFAULT NOW(), b INT );
CREATE TRIGGER trigger_for_load_infile BEFORE INSERT ON t1 FOR EACH ROW SET @x:= NEW.a;
LOAD DATA INFILE 't1.dat' INTO TABLE t1(b);
remove_file $MYSQLD_DATADIR/test/t1.dat;
CREATE TRIGGER update_after_update AFTER UPDATE ON t2 FOR EACH ROW BEGIN   UPDATE t1 SET t1.fld2 = t1.fld2 + 1   WHERE t1.fld1 = NEW.fld1;
END$$ DELIMITER ;$$ SELECT * FROM t1;
CREATE TRIGGER update_before_update BEFORE UPDATE ON t2 FOR EACH ROW BEGIN   UPDATE t1 SET t1.fld2 = t1.fld2 + 1   WHERE t1.fld1 = NEW.fld1;
END$$ DELIMITER ;$$ SELECT * FROM t1;
CREATE TRIGGER очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_e        BEFORE INSERT ON t1 FOR EACH ROW SET @sum= @sum + NEW.f1;
CREATE TRIGGER очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é        BEFORE INSERT ON t1 FOR EACH ROW SET @sum= @sum + NEW.f1;
CREATE TRIGGER очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_E        BEFORE INSERT ON t1 FOR EACH ROW SET @sum= @sum + NEW.f1;
SHOW CREATE TRIGGER очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é;
DROP TRIGGER очень_очень_очень_очень_очень_очень_очень_очень_длинная_строка_é;
write_file $INIT_SQL;
enable_connect_log;
connect (con_nonsuper, localhost, nonsuper,, test);
enable_reconnect;
connect (con_super, localhost, root,, test);
enable_reconnect;
replace_result $MYSQLD_LOG MYSQLD_LOG $INIT_SQL INIT_SQL;
source include/restart_mysqld.inc;
source include/wait_until_connected_again.inc;
replace_result $MYSQLD_LOG MYSQLD_LOG $INIT_SQL INIT_SQL;
source include/restart_mysqld.inc;
source include/wait_until_connected_again.inc;
replace_result $MYSQLD_LOG MYSQLD_LOG $INIT_SQL INIT_SQL;
source include/restart_mysqld.inc;
source include/wait_until_connected_again.inc;
replace_result $MYSQLD_LOG MYSQLD_LOG $INIT_SQL INIT_SQL;
source include/restart_mysqld.inc;
source include/wait_until_connected_again.inc;
source include/search_pattern.inc;
copy_file $MYSQLTEST_VARDIR/std_data/upgrade/data_$VERSION.zip $MYSQL_TMP_DIR/data_$VERSION.zip;
file_exists $MYSQL_TMP_DIR/data_$VERSION.zip;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
replace_result $MYSQLD_LOG MYSQLD_LOG $MYSQLD_DATADIR MYSQLD_DATADIR;
source include/restart_mysqld.inc;
source include/wait_until_connected_again.inc;
source include/shutdown_mysqld.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
replace_result $MYSQLD_LOG MYSQLD_LOG $MYSQLD_DATADIR MYSQLD_DATADIR;
source include/start_mysqld.inc;
source include/wait_until_connected_again.inc;
source include/shutdown_mysqld.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
replace_result $MYSQLD_LOG MYSQLD_LOG $MYSQLD_DATADIR MYSQLD_DATADIR;
source include/start_mysqld.inc;
source include/wait_until_connected_again.inc;
source include/shutdown_mysqld.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
exec $MYSQLD --datadir=$MYSQLD_DATADIR --innodb-read-only=1 --log-error=$MYSQLD_LOG --secure-file-priv="";
source include/search_pattern.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
remove_file $MYSQL_TMP_DIR/data_$VERSION.zip;
copy_file $MYSQLTEST_VARDIR/std_data/upgrade/data_$VERSION.zip $MYSQL_TMP_DIR/data_$VERSION.zip;
file_exists $MYSQL_TMP_DIR/data_$VERSION.zip;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
replace_result $MYSQLD_LOG MYSQLD_LOG $MYSQLD_DATADIR MYSQLD_DATADIR;
source include/start_mysqld.inc;
source include/wait_until_connected_again.inc;
source include/shutdown_mysqld.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
replace_result $MYSQLD_LOG MYSQLD_LOG $MYSQLD_DATADIR MYSQLD_DATADIR;
source include/start_mysqld.inc;
source include/wait_until_connected_again.inc;
source include/shutdown_mysqld.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
replace_result $MYSQLD_LOG MYSQLD_LOG $MYSQLD_DATADIR MYSQLD_DATADIR;
source include/start_mysqld.inc;
source include/wait_until_connected_again.inc;
source include/shutdown_mysqld.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec unzip -qo $MYSQL_TMP_DIR/data_$VERSION.zip -d $MYSQL_TMP_DIR;
exec $MYSQLD --datadir=$MYSQLD_DATADIR --innodb-read-only=1 --log-error=$MYSQLD_LOG --secure-file-priv="";
source include/search_pattern.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
remove_file $MYSQL_TMP_DIR/data_$VERSION.zip;
exec $MYSQLD --datadir=$MYSQLD_DATADIR --read-only=1 --log-error=$MYSQLD_LOG --initialize-insecure;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec $MYSQLD --datadir=$MYSQLD_DATADIR --super-read-only=1 --log-error=$MYSQLD_LOG --initialize-insecure;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec $MYSQLD --datadir=$MYSQLD_DATADIR --transaction-read-only=1 --log-error=$MYSQLD_LOG --initialize-insecure;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
exec $MYSQLD --datadir=$MYSQLD_DATADIR --innodb-read-only=1 --log-error=$MYSQLD_LOG --initialize-insecure;
source include/search_pattern.inc;
force-rmdir $MYSQL_TMP_DIR/data_$VERSION;
disconnect con_nonsuper;
disconnect con_super;
enable_reconnect;
source include/start_mysqld.inc;
source include/wait_until_connected_again.inc;
remove_file $INIT_SQL;
RENAME TABLE t1 to t2;
RENAME TABLE t2 to t1;
while ($j) {   ANALYZE TABLE t1;
inc $i;
dec $j;
} while ($j) {   ANALYZE TABLE t1;
dec $i;
dec $j;
} alter table t1 change v v varchar(254), drop key v;
echo "WL6369 Explain for Connection";
source include/func_aes_block.inc;
SHOW GRANTS FOR some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890X;
SHOW GRANTS FOR some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890;
SHOW GRANTS FOR some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890;
SHOW GRANTS FOR some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890;
GRANT PROXY ON root@localhost TO some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890;
GRANT PROXY ON some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890 TO root@localhost;
lock tables t1 write;
unlock tables;
lock tables t1 write;
unlock tables;
analyze table t1 extended;
optimize table t1 extended;
CREATE PROCEDURE p() ANALYZE TABLE v UPDATE HISTOGRAM ON w;
WHERE VARIABLE_NAME LIKE 'HANDLER_%' AND VARIABLE_VALUE >0;
if (!$require_case_insensitive_file_system) { } set @orig_sql_mode= @@sql_mode;
select c,table_name from v1 inner join information_schema.TABLES v2 on (v1.c=v2.table_name) where v1.c rlike "t[1-5]{1}$" order by c;
select c,table_name from v1 left join information_schema.TABLES v2 on (v1.c=v2.table_name) where v1.c rlike "t[1-5]{1}$" order by c;
select c, v2.table_name from v1 right join information_schema.TABLES v2 on (v1.c=v2.table_name) where v1.c rlike "t[1-5]{1}$" order by c;
select table_name from information_schema.TABLES where table_schema = "mysqltest" and table_name rlike "t[1-5]{1}$" order by table_name;
connect (user3,localhost,mysqltest_2,,);
connect (user4,localhost,mysqltest_3,,mysqltest);
disconnect user4;
create procedure sel2() begin   select * from t1;   select * from t2; end|
connect (user1,localhost,mysqltest_1,,);
connect (user2,localhost,mysqltest_1,,);
disconnect user1;
disconnect user3;
select * from information_schema.views where TABLE_SCHEMA != 'sys' and TABLE_NAME rlike "v[0-4]{1}$" order by table_name;
disconnect user2;
create procedure px5 () begin declare v int; declare c cursor for select version from information_schema.tables where table_schema <> 'information_schema'; open c; fetch c into v; select v; close c; end;//
call px5()//
call px5()//
create procedure p108 () begin declare c cursor for select data_type from information_schema.columns;  open c; open c; end;//
call p108()//
while ($tab_count) {      EVAL CREATE TABLE t_$tab_count (f1 BIGINT);
dec $tab_count ;
} SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES;
while ($tab_count) {      EVAL DROP TABLE t_$tab_count;
dec $tab_count ;
} drop view a2, a1;
connect (user10261,localhost,mysqltest_4,,);
disconnect user10261;
create trigger trg1 before insert on t1 for each row begin   if new.j > 10 then     set new.j := 10;   end if; end|
create trigger trg2 before update on t1 for each row begin   if old.i % 2 = 0 then     set new.j := -1;   end if; end|
create trigger trg3 after update on t1 for each row begin   if new.j = -1 then     set @fired:= "Yes";   end if; end|
connect (con1,localhost,user1,,mysqltest);
connect (con2,localhost,user2,,mysqltest);
connect (con3,localhost,user3,,mysqltest);
connect (con4,localhost,user4,,);
disconnect con1;
disconnect con2;
disconnect con3;
disconnect con4;
show create database information_schema;
connect (con5,localhost,root,,*NO-ONE*);
disconnect con5;
CREATE PROCEDURE p1 () BEGIN   SELECT 'foo' FROM DUAL; END |
CREATE FUNCTION func1() RETURNS BIGINT BEGIN   RETURN ( SELECT COUNT(*) FROM information_schema.views WHERE TABLE_SCHEMA != 'sys' AND            TABLE_SCHEMA != 'information_schema'); END//
connect (con16681,localhost,mysqltest_1,,test);
disconnect con16681;
set @a:= '.';
connect (conn1, localhost, mysql_bug20230,,);
disconnect conn1;
CREATE FUNCTION get_value()   RETURNS TEXT   DETERMINISTIC BEGIN   DECLARE col1, col2, col3, col4, col6 CHAR(255);
DECLARE default_val VARCHAR(65532) CHARACTER SET latin1;
DECLARE done INT DEFAULT 0;
DECLARE cur1 CURSOR FOR SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_KEY, COLUMN_DEFAULT, EXTRA FROM INFORMATION_SCHEMA.COLUMNS where TABLE_NAME='bug23037';
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
OPEN cur1;
FETCH cur1 INTO col1, col2, col3, col4, default_val, col6;
CLOSE cur1;
RETURN default_val;
end| DELIMITER ;| SELECT COLUMN_NAME, MD5(COLUMN_DEFAULT), LENGTH(COLUMN_DEFAULT)   FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='bug23037'   ORDER BY COLUMN_NAME;
connect (con27629,localhost,mysqltest_1,,mysqltest);
disconnect con27629;
connect (con3148,localhost,user3148,,test);
disconnect con3148;
CREATE EVENT event_status  ON SCHEDULE AT NOW()  ON COMPLETION NOT PRESERVE  DO BEGIN   CREATE TABLE server_status   SELECT variable_name   FROM performance_schema.global_status   WHERE variable_name LIKE 'ABORTED_CONNECTS' OR   variable_name LIKE 'BINLOG_CACHE_DISK_USE';
END$$ DELIMITER ;$$ SELECT variable_name FROM server_status;
create function f1() returns int begin   insert into t1 (a) values (1);   return 0; end|
connect (conn1, localhost, root,,);
send select * from information_schema.tables where 1=sleep(100000);
where state='User sleep' and info='select * from information_schema.tables where 1=sleep(100000)';
disable_query_log;
enable_query_log;
disconnect conn1;
where state='User sleep' and info='select * from information_schema.tables where 1=sleep(100000)';
connect (conn1, localhost, root,,);
send select * from information_schema.columns where 1=sleep(100000);
where state='User sleep' and info='select * from information_schema.columns where 1=sleep(100000)';
disable_query_log;
enable_query_log;
disconnect conn1;
where state='User sleep' and info='select * from information_schema.columns where 1=sleep(100000)';
connect (nonpriv_con, localhost, nonpriv,,);
disconnect nonpriv_con;
connect (con3726_1,localhost,root,,test);
lock table t2 read;
connect (con3726_2,localhost,root,,test);
unlock tables;
disconnect con3726_1;
disconnect con3726_2;
create view information_schema.v1;
RENAME TABLE v1 to v2, information_schema.processlist to t2;
LOCK TABLES t1 READ, information_schema.processlist READ;
disconnect con7;
lock table t1 read;
connect(con1, localhost, root,,);
send flush tables;
unlock tables;
reap;
disconnect con1;
lock tables t2 read;
connect (con12828477_1, localhost, root,,mysqltest);
connect (con12828477_2, localhost, root,,mysqltest);
connect (con12828477_3, localhost, root,,mysqltest);
rename table t0 to t4;
unlock tables;
disconnect con12828477_1;
disconnect con12828477_2;
disconnect con12828477_3;
CREATE PROCEDURE information_schema.is() BEGIN END;
connect (con_user22,localhost,user_name_len_22_01234,,test);
CREATE USER очень_очень_очень_длинный_юзер__@localhost;
GRANT SELECT ON *.* TO очень_очень_очень_длинный_юзер__@localhost;
connect (con_user32_utf8,localhost,очень_очень_очень_длинный_юзер__,,test);
disconnect con_user22;
disconnect con_user32_utf8;
DROP USER очень_очень_очень_длинный_юзер__@localhost;
LOCK TABLE v1 READ;
connect(con1, localhost, root,,);
send FLUSH TABLES;
UNLOCK TABLES;
reap;
disconnect con1;
PREPARE stmt FROM 'SELECT CAN_ACCESS_TABLE("test", "t1") AS f1, COLUMN_NAME AS F2  FROM INFORMATION_SCHEMA.COLUMNS';
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
connect (conn1,localhost,root,,*NO-ONE*);
disconnect conn1;
LOCK TABLE mysql.user READ;
UNLOCK TABLES;
UNLOCK TABLES;
create trigger t1_bi before insert on t1 for each row begin  set new.a := upper(new.a);  set new.b := new.b + 3; end|
CREATE TRIGGER bef_insert BEFORE INSERT ON t2 FOR EACH ROW BEGIN    DECLARE CONTINUE HANDLER FOR 1062 BEGIN END;
END// DELIMITER ;// START TRANSACTION;
disconnect con2;
LOCK INSTANCE FOR BACKUP;
CREATE TABLESPACE testtablespace ADD DATAFILE 'ts.ibd' ENGINE=InnoDB;
UNLOCK INSTANCE;
CREATE TABLESPACE testtablespace ADD DATAFILE 'ts.ibd' ENGINE=InnoDB;
LOCK INSTANCE FOR BACKUP;
UNLOCK INSTANCE;
connect (con_main,localhost,root);
change_user test_nopw;
change_user test_newpw, newpw;
change_user root;
change_user test_nopw,,test;
change_user test_newpw,newpw,test;
change_user root,,test;
disconnect con_main;
while ($i) {   dec $i;
} if ($after != $before){   SHOW GLOBAL STATUS LIKE 'com_select';
die The value of com_select changed during change_user;
} echo Value of com_select did not change;
PREPARE stmt1 FROM ' EXPLAIN SELECT a FROM t1 ORDER BY b ';
EXECUTE stmt1;
PREPARE stmt1 FROM ' EXPLAIN SELECT a FROM t1 WHERE a > ? ORDER BY b ';
EXECUTE stmt1 USING @arg00;
(   a INT, b VARCHAR(30),   PRIMARY KEY(a) ) ENGINE = $type ;
(   c1  tinYINT, c2  SMALLINT, c3  MEDIUMINT, c4  INT,   c5  INTEGER, c6  BIGINT, c7  FLOAT, c8  DOUBLE,   c9  DOUBLE PRECISION, c10 REAL, c11 DECIMAL(7, 4), c12 NUMERIC(8, 4),   c13 DATE, c14 DATETIME, c15 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP   ON UPDATE CURRENT_TIMESTAMP, c16 TIME,   c17 YEAR, c18 TINYINT, c19 BOOL, c20 CHAR,   c21 CHAR(10), c22 VARCHAR(30), c23 VARCHAR(100), c24 VARCHAR(100),   c25 VARCHAR(100), c26 VARCHAR(100), c27 VARCHAR(100), c28 VARCHAR(100),   c29 VARCHAR(100), c30 VARCHAR(100), c31 ENUM('one', 'two', 'three'),   c32 SET('monday', 'tuesday', 'wednesday'),   PRIMARY KEY(c1) ) ENGINE = $type ;
RENAME TABLE t1 TO t1_1, t9 TO t9_1 ;
RENAME TABLE t1 TO t1_2, t9 TO t9_2 ;
connect (locker,localhost,root,,);
connect (locker2,localhost,root,,);
connect (reader,localhost,root,,);
connect (writer,localhost,root,,);
send update t1 set n = 2 and get_lock('mysqltest_lock', 100);
send update low_priority t1 set n = 4;
send select n from t1;
reap;
reap;
reap;
send select n from t1 where get_lock('mysqltest_lock', 100);
send update low_priority t1 set n = 4;
reap;
reap;
lock table t1 read;
unlock tables;
lock table t2 read;
unlock tables;
lock table t1 read;
lock tables t1 read, t2 write;
unlock tables;
unlock tables;
lock table t1 write, t2 write;
send insert t1 select * from t2;
unlock tables;
reap;
lock table t1 write, t2 write, t1 as t1_2 write, t2 as t2_2 write;
send insert t1 select * from t2;
unlock tables;
reap;
lock tables t1 write;
unlock tables;
LOCK TABLES columns_priv WRITE, db WRITE, user WRITE;
send SELECT user.Select_priv FROM user, db WHERE user.user = db.user LIMIT 1;
UNLOCK TABLES;
reap;
LOCK TABLE t1 WRITE;
send FLUSH TABLES WITH READ LOCK;
UNLOCK TABLES;
reap;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
send FLUSH TABLES WITH READ LOCK;
UNLOCK TABLES;
reap;
UNLOCK TABLES;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
send DROP DATABASE mysqltest_1;
UNLOCK TABLES;
reap;
disconnect con1;
disconnect con2;
lock tables t1 write;
send alter table t1 auto_increment=0;
send alter table t1 auto_increment=0;
unlock tables;
reap;
reap;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connect (con3,localhost,root,,);
connect (con4,localhost,root,,);
connect (con5,localhost,root,,);
lock tables t1 write;
send flush tables with read lock;
send select * from t2 for update;
unlock tables;
unlock tables;
disconnect con5;
disconnect con4;
disconnect con3;
disconnect con2;
disconnect con1;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
send update t2 set a = 1;
flush table t2;
unlock tables;
send lock tables t2 write;
flush table t2;
unlock tables;
unlock tables;
disconnect con2;
disconnect con1;
send select * from t1 where get_lock('mysqltest_lock', 100);
send update t1 set i= 10;
send select * from t1;
where state = "Waiting for table level lock" and                 info = "update t1 set i= 10"`;
handler t1 open;
disconnect locker;
disconnect locker2;
disconnect reader;
disconnect writer;
connect (flush,localhost,root,,test,,);
lock tables t1 write;
connect (insert,localhost,root,,test,,);
unlock tables;
unlock tables;
disconnect flush;
disconnect insert;
connect (flush,localhost,root,,test,,);
lock tables t1 write;
unlock tables;
disconnect flush;
connect (blocker,localhost,root,,);
send select * from t1 where get_lock('mysqltest_lock', 100);
connect (waiter,localhost,root,,);
send update t1 set a= 2;
disconnect blocker;
disconnect waiter;
connect (flush,localhost,root,,test,,);
lock tables t1 write;
disconnect flush;
connect (con46272,localhost,root,,test,,);
disconnect con46272;
connect (con2,localhost,root);
LOCK TABLES v1 WRITE, t1 READ;
FLUSH TABLE t1;
disconnect con2;
LOCK TABLES t1 WRITE;
FLUSH TABLE t1;                                    # Assertion happened here UNLOCK TABLES;
connect (con2,localhost,root);
LOCK TABLES t1 WRITE, v1 READ;
FLUSH TABLE t1;
disconnect con2;
LOCK TABLES t1 WRITE;
FLUSH TABLE t1;                                    # Assertion happened here DROP TABLE t1;
connect (con50913,localhost,root);
disconnect con50913;
connect(con2, localhost, root,,);
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t1 READ;
UNLOCK TABLES;
connect(con3, localhost, root);
LOCK TABLE t1 READ;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
disconnect con2;
disconnect con3;
connect (con1, localhost, root, , );
connect (con2, localhost, root, , );
lock table t3 read;
unlock tables;
disconnect con1;
disconnect con2;
LOCK TABLE t1 WRITE;
connect (con1, localhost, root);
disconnect con1;
UNLOCK TABLES;
CREATE TRIGGER bi_t5 BEFORE INSERT ON t5 FOR EACH ROW SET @a:= (SELECT COUNT(*) FROM t1);
CREATE TRIGGER bi_t6 BEFORE INSERT ON t6 FOR EACH ROW SET @a:= (SELECT COUNT(*) FROM t2);
LOCK TABLE t1 READ, t2 READ;
connect (con1, localhost, root);
UNLOCK TABLES;
connect (con2, localhost, root);
LOCK TABLES t1 READ, t2 READ;
UNLOCK TABLES;
LOCK TABLE t1 READ, t2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 READ;
UNLOCK TABLES;
LOCK TABLES t2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 READ;
LOCK TABLES t1 READ, t2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 READ;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
LOCK TABLE t2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE t1 WRITE, t2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE v1 READ, v2 READ;
UNLOCK TABLES;
LOCK TABLES v1 READ, v2 READ;
UNLOCK TABLES;
LOCK TABLE v1 READ, v2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v1 READ;
UNLOCK TABLES;
LOCK TABLES v2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 READ;
LOCK TABLES v1 READ, v2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v1 READ;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v2 READ;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v3 WRITE, v4 WRITE;
UNLOCK TABLES;
LOCK TABLES v3 WRITE, v4 WRITE;
UNLOCK TABLES;
LOCK TABLES v3 WRITE, v4 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v3 WRITE;
UNLOCK TABLES;
LOCK TABLES v4 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 READ;
LOCK TABLES v3 WRITE, v4 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v3 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v4 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE v1 WRITE;
UNLOCK TABLES;
LOCK TABLE v2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE v1 WRITE, v2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v1 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES v2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t5 WRITE, t6 WRITE;
UNLOCK TABLES;
LOCK TABLES v3 WRITE, t6 WRITE;
UNLOCK TABLES;
LOCK TABLES t5 WRITE, t6 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t5 WRITE;
UNLOCK TABLES;
LOCK TABLES t6 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 READ, t2 READ;
LOCK TABLES t5 WRITE, t6 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t5 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t6 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t2 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE t7 WRITE;
UNLOCK TABLES;
LOCK TABLE t8 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLE t7 WRITE, t8 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t7 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
LOCK TABLES t8 WRITE;
UNLOCK TABLES;
UNLOCK TABLES;
disconnect con1;
disconnect con2;
LOCK TABLE t1 READ LOCAL;
connect (con1, localhost, root);
UNLOCK TABLES;
LOCK TABLE v1 READ LOCAL;
UNLOCK TABLES;
LOCK TABLE v2 READ LOCAL;
UNLOCK TABLES;
LOCK TABLE v2 READ LOCAL;
UNLOCK TABLES;
LOCK TABLE t2 READ LOCAL;
UNLOCK TABLES;
LOCK TABLE t2 READ LOCAL;
UNLOCK TABLES;
LOCK TABLE v3 READ LOCAL;
UNLOCK TABLES;
LOCK TABLE v3 READ LOCAL;
UNLOCK TABLES;
disconnect con1;
connect (blocker, localhost, root);
connect (con_insert, localhost, root);
connect (con_replace, localhost, root);
connect (con_update, localhost, root);
connect (con_update_multi, localhost, root);
connect (con_delete, localhost, root);
connect (con_delete_multi, localhost, root);
connect (con_load, localhost, root);
connect (con_view, localhost, root);
connect (con_trigger, localhost, root);
connect (con_merge, localhost, root);
UNLOCK TABLES;
UNLOCK TABLES;
disconnect blocker;
disconnect con_insert;
disconnect con_replace;
disconnect con_update;
disconnect con_update_multi;
disconnect con_delete;
disconnect con_delete_multi;
disconnect con_load;
disconnect con_view;
disconnect con_trigger;
disconnect con_merge;
connect (con1,localhost,root,,test,,);
connect (con2,localhost,root,,test,,);
connect (con3,localhost,root,,test,,);
lock tables t1 write, t3 read;
unlock tables;
disconnect con1;
disconnect con2;
disconnect con3;
disable_warnings;
enable_warnings;
exec $MYSQL_BINLOG suite/binlog/std_data/bug32407.001 | $MYSQL;
error ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT;
error 1;
exec $MYSQL_BINLOG --base64-output=never suite/binlog/std_data/bug32407.001;
error 1149;
error ER_UNKNOWN_ERROR;
call mtr.add_suppression("Slave SQL.*master suffers from this bug: http:..bugs.mysql.com.bug.php.id=37426.* Error_code: MY-013127");
call mtr.add_suppression("Slave SQL.*Table definition on master and slave does not match: Column 1 size mismatch.* Error_code: 1535");
call mtr.add_suppression("Slave SQL.*Column 1 of table .test.char128_utf8. cannot be converted.* Error_code: MY-013146");
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u1';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u2';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u3';
query_vertical SELECT User,plugin FROM mysql.user WHERE USER='u4';
query_vertical SELECT User,plugin,ssl_type FROM mysql.user WHERE USER='u5';
query_vertical SELECT User,plugin,ssl_type FROM mysql.user WHERE USER='u6';
query_vertical SELECT User,plugin,ssl_type,             ssl_cipher,x509_issuer,x509_subject,password_expired,password_lifetime FROM mysql.user WHERE USER='u7';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher,x509_issuer,x509_subject FROM mysql.user WHERE USER='u8';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher,x509_issuer,x509_subject FROM mysql.user WHERE USER='u9';
query_vertical SELECT User,plugin,ssl_type,ssl_cipher,x509_issuer,x509_subject FROM mysql.user WHERE USER='u10';
query_vertical SELECT User,plugin,max_questions FROM mysql.user WHERE USER='u11';
query_vertical SELECT User,plugin,max_questions FROM mysql.user WHERE USER='u12';
query_vertical SELECT User,plugin,max_connections FROM mysql.user WHERE USER='u13';
query_vertical SELECT User,plugin,max_user_connections,           password_expired,password_lifetime FROM mysql.user WHERE USER='u14';
query_vertical SELECT User,plugin,password_expired,password_lifetime FROM mysql.user WHERE USER BETWEEN 'u15' AND 'u17' ORDER BY User;
query_vertical SELECT User,plugin,ssl_type,ssl_cipher,x509_issuer,x509_subject,        max_questions,max_user_connections,password_expired,password_lifetime        FROM mysql.user WHERE USER BETWEEN 'u18' AND 'u21' ORDER BY User;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u1';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u1';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u2';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u2';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u3';
ALTER USER u3@localhost IDENTIFIED WITH 'mysql_native_password';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u3';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u4';
ALTER USER u4@localhost IDENTIFIED WITH 'mysql_native_password'            BY 'auth_string';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u4';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u5';
ALTER USER u5@localhost IDENTIFIED WITH 'sha256_password';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u5';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u6';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u6';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u7';
ALTER USER u7@localhost IDENTIFIED WITH 'mysql_native_password'             REQUIRE ISSUER 'issuer';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u7';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u8';
ALTER USER u8@localhost IDENTIFIED WITH 'mysql_native_password'             REQUIRE CIPHER "DHE-RSA-AES256-SHA";
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u8';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u9';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u9';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u10';
ALTER USER u10@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string'             REQUIRE SSL;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u10';
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u11';
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u11';
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u12';
ALTER USER u12@localhost IDENTIFIED WITH 'sha256_password' WITH MAX_QUERIES_PER_HOUR 8;
query_vertical SELECT User,max_questions FROM mysql.user WHERE USER='u12';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u13';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER='u13';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, password_lifetime FROM mysql.user WHERE USER='u14';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, password_lifetime FROM mysql.user WHERE USER='u14';
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER BETWEEN 'u15' AND 'u17' order by 1;
ALTER USER u15@localhost IDENTIFIED WITH 'sha256_password',            u16@localhost,            u17@localhost IDENTIFIED BY 'new_auth_string'            PASSWORD EXPIRE DEFAULT;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired, password_lifetime FROM mysql.user WHERE USER BETWEEN 'u15' AND 'u17' order by 1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, max_questions,password_lifetime FROM mysql.user WHERE USER BETWEEN 'u18' AND 'u21' order by 1;
query_vertical SELECT User,ssl_type,ssl_cipher,x509_issuer,x509_subject, plugin,password_expired,max_user_connections, max_questions,password_lifetime FROM mysql.user WHERE USER BETWEEN 'u18' AND 'u21' order by 1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
ALTER USER USER() IDENTIFIED WITH 'sha256_password';
ALTER USER USER() IDENTIFIED BY 'def', u2@localhost PASSWORD EXPIRE;
ALTER USER USER() IDENTIFIED BY 'def' PASSWORD EXPIRE;
ALTER USER ;
disconnect con1;
ALTER USER u2@localhost IDENTIFIED WITH 'sha256_password';
ALTER USER u8@localhost IDENTIFIED WITH 'mysql_native_password' BY 'auth_string';
disconnect con_20553132_u1;
ALTER USER 20553132_u2@localhost IDENTIFIED BY 'abcd', 20553132_u1@localhost IDENTIFIED WITH 'mysql_native_password' BY 'hijk' PASSWORD EXPIRE DEFAULT;
disconnect con_20553132_u1;
disconnect con_20553132_u1;
disconnect con_20553132_u3;
disconnect con_20553132_u3;
ALTER USER u1 IDENTIFIED BY PASSWORD '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF';
ALTER USER u1 IDENTIFIED BY PASSWORD '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'       PASSWORD EXPIRE;
ALTER USER u1 IDENTIFIED BY PASSWORD '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'       WITH MAX_QUERIES_PER_HOUR 2 MAX_USER_CONNECTIONS 2;
ALTER USER u1 IDENTIFIED BY PASSWORD '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'       REQUIRE CIPHER "DHE-RSA-AES256-SHA" AND       SUBJECT "/C=SE/ST=Stockholm/L=Stockholm/O=Oracle/OU=MySQL/CN=Client";
ALTER USER u1 IDENTIFIED BY PASSWORD '*67092806AE91BFB6BE72DE6C7BE2B7CCA8CFA9DF'       PASSWORD EXPIRE DEFAULT;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con1;
disconnect con2;
connect (con1,localhost,root,,);
disconnect con1;
explain select id, not (a=1 is true) from t1 ;
select id, not (a=1 is true) from t1 ;
explain select id, not (a=1 is false) from t1 ;
select id, not (a=1 is false) from t1 ;
explain select id, not (a=1 is unknown) from t1 ;
select id, not (a=1 is unknown) from t1 ;
if (`select locate('semijoin', @@optimizer_switch) > 0`)  {   set optimizer_switch='semijoin=off';
} if (`select locate('materialization', @@optimizer_switch) > 0`)  {   set optimizer_switch='materialization=off';
} if (`select locate('index_condition_pushdown', @@optimizer_switch) > 0`)  {   set optimizer_switch='index_condition_pushdown=off';
} if (`select locate('mrr', @@optimizer_switch) > 0`)  {   set optimizer_switch='mrr=off';
} set optimizer_switch=default;
write_file $BOOTSTRAP_SQL;
connect(root_con,localhost,root,,mysql);
disconnect root_con;
remove_file $MYSQLD_LOG;
remove_file $BOOTSTRAP_SQL;
CALL mtr.add_suppression('You need to use --log-bin to make --binlog-format work.');
UNLOCK TABLES;
IMPORT TABLE FROM 's2/t1*.sdi';
connect (con_noschema,localhost,root,,*NO-ONE*);
IMPORT TABLE FROM 't1_*.sdi';
IMPORT TABLE FROM 's1/t1_*.sdi';
disconnect con_noschema;
IMPORT TABLE FROM 't1*.sdi';
IMPORT TABLE FROM 'pattern_which_matches_nothing';
IMPORT TABLE FROM 't1.MYD';
IMPORT TABLE FROM 't1.sdi';
UNLOCK TABLES;
IMPORT TABLE FROM 't1_*.sdi';
IMPORT TABLE FROM 't1_*.sdi';
LOCK TABLES t1 WRITE;
connect (importcon,localhost,root,,);
IMPORT TABLE FROM 't1_*.sdi';
disconnect importcon;
UNLOCK TABLES;
IMPORT TABLE FROM 't1_.sdi';
connect (con_noimport,localhost,noimportforyou,,);
IMPORT TABLE FROM 's1/t1_*.sdi';
disconnect con_noimport;
connect (con_noimport,localhost,noimportforyou,,);
IMPORT TABLE FROM 's1/t1_*.sdi';
disconnect con_noimport;
connect (con_noimport,localhost,noimportforyou,,s1);
IMPORT TABLE FROM 't1_*.sdi';
disconnect con_noimport;
connect (con_noimport,localhost,noimportforyou,,s1);
IMPORT TABLE FROM 't1_*.sdi';
disconnect con_noimport;
connect (con_noimport,localhost,noimportforyou,,s1);
IMPORT TABLE FROM 't1_*.sdi';
disconnect con_noimport;
connect (con_noimport,localhost,noimportforyou,,s1);
IMPORT TABLE FROM 't1_*.sdi';
disconnect con_noimport;
UNLOCK TABLES;
IMPORT TABLE FROM 't1_*.sdi', 't2_*.sdi';
UNLOCK TABLES;
IMPORT TABLE FROM 't1_.sdi';
UNLOCK TABLES;
IMPORT TABLE FROM 's1/t1*.sdi';
UNLOCK TABLES;
CALL mtr.add_suppression("Problem while dropping database. Can't remove database directory .* Please remove it manually.");
IMPORT TABLE FROM 's1/t1*.sdi';
UNLOCK TABLES;
IMPORT TABLE FROM 't_case.sdi';
write_file $BOOTSTRAP_SQL;
IMPORT TABLE FROM 't_case.sdi';
UNLOCK TABLES;
IMPORT TABLE FROM 't1_*.sdi';
IMPORT TABLE FROM '';
UNLOCK TABLES;
IMPORT TABLE FROM 't1_*.sdi';
IMPORT TABLE FROM 'test/t1*.sdi';
DO AVG((SELECT POINT(@x, POINT(115, 219)) IS NULL));
DO AVG((SELECT POINT(@x, POINT(115, 219)) IS NULL)) OVER ();
call mtr.add_suppression("\\[ERROR\\] .*MY-\\d+.* Table `test`.`t1` .* Partition.* InnoDB internal");
LOCK TABLE t1 WRITE;
UNLOCK TABLES;
if (0) { SET NAMES utf8;
CREATE TABLE `t``\""e` (a INT, PRIMARY KEY (a)) ENGINE=InnoDB PARTITION BY RANGE (a) SUBPARTITION BY HASH (a) (PARTITION `p0``\""e` VALUES LESS THAN (100)  (SUBPARTITION `sp0``\""e`,   SUBPARTITION `sp1``\""e`),  PARTITION `p1``\""e` VALUES LESS THAN (MAXVALUE)  (SUBPARTITION `sp2``\""e`,   SUBPARTITION `sp3``\""e`));
INSERT INTO `t``\""e` VALUES (0), (2), (6), (10), (14), (18), (22);
connect(con1,localhost,root,,);
SEND;
WHERE ID = $id_1 AND STATE = 'Searching rows for update';
REAP;
disconnect con1;
DROP TABLE `t``\""e`;
SET @old_default_week_format := @@default_week_format;
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(YEAR_MONTH FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_HOUR FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_MINUTE FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_SECOND FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(HOUR_MINUTE FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(HOUR_SECOND FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(MINUTE_SECOND FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(DAY_MICROSECOND FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(MINUTE_MICROSECOND FROM a));
CREATE TABLE t1 (a TIME) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a));
CREATE TABLE t1 (a DATE) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a));
CREATE TABLE t1 (a DATETIME) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a));
CREATE TABLE t1 (a VARCHAR(10)) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a));
CREATE TABLE t1 (a INT) PARTITION BY HASH (EXTRACT(SECOND_MICROSECOND FROM a));
CREATE TABLE t1 (c TIMESTAMP) PARTITION BY RANGE (TO_DAYS(c)) (PARTITION p0 VALUES LESS THAN (10000),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
ALTER TABLE t2 PARTITION BY RANGE (TO_DAYS(c)) (PARTITION p0 VALUES LESS THAN (10000),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
CREATE TABLE t1 (c TIMESTAMP) PARTITION BY RANGE COLUMNS(c) (PARTITION p0 VALUES LESS THAN ('2000-01-01 00:00:00'),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
ALTER TABLE t2 PARTITION BY RANGE COLUMNS(c) (PARTITION p0 VALUES LESS THAN ('2000-01-01 00:00:00'),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
CREATE TABLE t1 (c TIMESTAMP) PARTITION BY RANGE (c) (PARTITION p0 VALUES LESS THAN ('2000-01-01 00:00:00'),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
CREATE TABLE t1 (c TIMESTAMP) PARTITION BY RANGE (UNIX_TIMESTAMP(c)) (PARTITION p0 VALUES LESS THAN ('2000-01-01 00:00:00'),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
CREATE TABLE t1 (c TIMESTAMP) PARTITION BY RANGE (UNIX_TIMESTAMP(c)) (PARTITION p0 VALUES LESS THAN (UNIX_TIMESTAMP('2000-01-01 00:00:00')),  PARTITION p1 VALUES LESS THAN (MAXVALUE));
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd';
CREATE TABLESPACE ts2 ADD DATAFILE 'ts2.ibd';
CREATE TABLESPACE ts3 ADD DATAFILE 'ts3.ibd';
CREATE TABLE t1 (   a int ) PARTITION BY RANGE (a) (   PARTITION p0 VALUES LESS THAN (1),   PARTITION p1 VALU ES LESS THAN (2) );
partition by list (a) partitions 3 (partition x1 values in (1,2,9,4) tablespace ts1,  partition x2 values in (3, 11, 5, 7) tablespace ts2,  partition x3 values in (16, 8, 5+19, 70-43) tablespace ts3);
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by key (a+2) partitions 3 (partition x1 tablespace ts1,  partition x2 tablespace ts2,  partition x3 tablespace ts3);
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by key (a) partitions 3 (partition tablespace ts1,  partition x2 tablespace ts2,  partition x3 tablespace ts3);
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by range (a) subpartition by key (a+b) (partition x1 values less than (1) (subpartition x11, subpartition x12),  partition x2 values less than (2) (subpartition x21, subpartition x22));
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by list (a) partitions 2 (partition x1 values less than 4,  partition x2 values less than (5));
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by list (a) subpartition by hash (a+b) subpartitions 3 ( partition x1 values in (1,2,4)   ( subpartition x11 nodegroup 0,     subpartition x12 nodegroup 1),   partition x2 values in (3,5,6)   ( subpartition x21 nodegroup 0,     subpartition x22 nodegroup 1) );
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by list (a) subpartition by hash (a+b) ( partition x1 values in (1)   ( subpartition x11 nodegroup 0,     subpartition xextra,     subpartition x12 nodegroup 1),   partition x2 values in (2)   ( subpartition x21 nodegroup 0,     subpartition x22 nodegroup 1) );
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by key (a) subpartition by list (a+b) ( partition x1   ( subpartition x11,     subpartition x12),    partition x2    ( subpartition x21,      subpartition x22) );
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key (a,b)) partition by key (a) subpartition by list (a+b) ( partition x1   ( subpartition x11 values in (0),     subpartition x12 values in (1)),   partition x2   ( subpartition x21 values in (0),     subpartition x22 values in (1)) );
CREATE TABLE t1 ( a int not null, b int not null, c int not null, primary key(a,b)) partition by list (a) partitions 2 (partition x1 values in 4,  partition x2 values in (5));
CALL mtr.add_suppression(" corrupted: row in wrong partition: ");
CREATE TABLE t1(a DATETIME) PARTITION BY HASH (EXTRACT(HOUR_MICROSECOND FROM a));
send UNINSTALL COMPONENT "file://component_example_component1", "file://component_example_component3", "file://component_example_component2";
connect(con1, localhost, root,,);
disconnect con1;
connect (con1,localhost,root,,test,,);
connect (con2,localhost,root,,test,,);
connect (con3,localhost,root,,test,,);
lock tables t2 read;
unlock tables;
disconnect con1;
disconnect con2;
disconnect con3;
connect(mdl_con1,localhost,root,,);
connect(mdl_con2,localhost,root,,);
connect(mdl_con3,localhost,root,,);
handler t1 open;
handler t1 open t;
handler t close;
lock table t1 read;
unlock tables;
lock table t1 write;
unlock tables;
handler t1 close;
rename table t2 to t1;
handler t1 open;
handler t1 close;
handler t1 open;
lock table t1 write;
handler t1 close;
unlock tables;
handler t1 open;
handler t1 close;
lock table t1 read;
unlock tables;
lock table t1 write;
unlock tables;
rename table t2 to t1;
lock table t1 write;
unlock tables;
handler t1 open;
handler t1 close;
lock table t1 read;
unlock tables;
unlock tables;
rename table t2 to t1;
handler t1 open;
handler t1 close;
unlock tables;
unlock tables;
rename table t2 to t1;
handler t1 open;
handler t1 close;
unlock tables;
unlock tables;
rename table t2 to t1;
handler t1 open;
handler t1 close;
lock tables t1 read;
unlock tables;
unlock tables;
rename table t2 to t1;
lock table t1 read;
handler t1 open;
handler t1 close;
unlock tables;
lock table t1 read;
unlock tables;
lock table t1 read;
lock table t1 read;
unlock tables;
unlock tables;
unlock tables;
lock table t1 read;
unlock tables;
rename table t2 to t1;
lock table t1 read;
unlock tables;
handler t1 open;
handler t1 close;
lock tables t1 read;
unlock tables;
unlock tables;
rename table t2 to t1;
lock table t1 write;
handler t1 open;
handler t1 close;
unlock tables;
lock table t1 write;
unlock tables;
lock table t1 write;
unlock tables;
lock table t1 write;
unlock tables;
lock table t1 write;
unlock tables;
unlock tables;
lock table t1 write;
unlock tables;
unlock tables;
lock table t1 write;
unlock tables;
rename table t2 to t1;
lock tables t2 read;
unlock tables;
handler t1 close;
lock tables t2 read;
unlock tables;
lock tables t2 read;
unlock tables;
lock tables t2 read;
unlock tables;
lock tables t2 read;
unlock tables;
lock tables t2 read;
unlock tables;
lock tables t2 read;
unlock tables;
unlock tables;
lock tables t2 read;
unlock tables;
unlock tables;
lock tables t2 read;
unlock tables;
rename table t3 to t1;
lock table t1 read;
handler t1 open t;
handler t close;
unlock tables;
unlock tables;
lock table t1 read;
unlock tables;
lock table t1 read;
handler t1 open t;
handler t close;
lock table t1 read;
unlock tables;
unlock tables;
handler t1 open t;
handler t close;
unlock tables;
unlock tables;
handler t1 open t;
handler t close;
handler t1 open t;
handler t close;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
unlock tables;
handler t1 close;
unlock tables;
handler t1 open;
handler t1 close;
unlock tables;
lock table t2 write;
unlock tables;
lock table t2 write;
unlock tables;
unlock tables;
unlock tables;
rename table t3 to t2;
rename table t3 to t2;
disconnect mdl_con1;
disconnect mdl_con2;
disconnect mdl_con3;
connect(handler_con1,localhost,root,,);
connect(handler_con2,localhost,root,,);
handler t1 open;
lock table t1 write;
unlock tables;
handler t1 close;
handler t1 open;
lock table t1 write, t2 read;
send alter table t1 drop column j;
handler t1 close;
unlock tables;
handler t1 open;
lock table t1 write;
handler t1 close;
unlock tables;
handler t1 open;
lock table t1 write, t2 write;
handler t1 close;
unlock tables;
handler t1 open;
lock table t1 write, t2 read local;
send alter table t1 add column j int;
handler t1 close;
unlock tables;
handler t1 open;
handler t2 open;
lock table t1 write, t2 read local;
unlock tables;
handler t1 close;
handler t2 close;
disconnect handler_con1;
disconnect handler_con2;
connect(deadlock_con1,localhost,root,,);
connect(deadlock_con2,localhost,root,,);
connect(deadlock_con3,localhost,root,,);
lock table t1 write;
unlock tables;
unlock tables;
send flush tables t1, t2 with read lock;
reap;
unlock tables;
reap;
send flush tables t1, t2 with read lock;
send select * from t1 where i in (select j from t2 for update);
reap;
unlock tables;
reap;
send select * from t2, t1;
send flush tables t2 with read lock;
send drop tables t1, t2;
reap;
unlock tables;
reap;
reap;
unlock table;
rename table t3 to t0, t2 to t3, t1 to t2, t0 to t1;
disconnect deadlock_con1;
disconnect deadlock_con2;
disconnect deadlock_con3;
connect(con1,localhost,root,,);
connect(con2,localhost,root,,);
send flush tables t1, t2 with read lock;
send flush tables;
reap;
unlock tables;
reap;
disconnect con1;
disconnect con2;
connect (con1root,localhost,root,,test,,);
connect (con2root,localhost,root,,test,,);
lock tables t4 read;
where state= 'Waiting for table metadata lock' and                              info='rename table t3 to t5, t4 to t3';
where state= 'Waiting for table metadata lock' and                              info='insert into t1 values (1)';
unlock tables;
disconnect con1root;
disconnect con2root;
connect(con2, localhost, root,,);
disconnect con2;
connect (con46044, localhost, root,,);
connect (con46044_2, localhost, root,,);
lock tables t1 read;
unlock tables;
unlock tables;
lock tables t1 write;
unlock tables;
lock tables t1 write;
unlock tables;
lock tables t3 write;
unlock tables;
disconnect con46044;
disconnect con46044_2;
connect (con46273,localhost,root,,test,,);
disconnect con46273;
connect (con46673, localhost, root,,);
unlock tables;
disconnect con46673;
connect (con2, localhost, root);
UNLOCK TABLES;
UNLOCK TABLES;
disconnect con2;
call mtr.add_suppression("Wait on a lock was aborted due to a pending exclusive lock");
connect (con1,localhost,root);
connect (con2,localhost,root);
connect (con3,localhost,root);
HANDLER t1 OPEN;
HANDLER t1 CLOSE;
disconnect con1;
disconnect con2;
disconnect con3;
connect (con50913_1,localhost,root);
connect (con50913_2,localhost,root);
disconnect con50913_1;
disconnect con50913_2;
connect (con1,localhost,root);
connect (con2,localhost,root);
connect (con3,localhost,root);
disconnect con1;
disconnect con2;
disconnect con3;
connect (con1,localhost,root,,test,,);
connect (con2,localhost,root,,test,,);
connect (con3,localhost,root,,test,,);
LOCK TABLES t1 WRITE;
send TRUNCATE TABLE t1;
send FLUSH TABLES t1;
WHERE state='Waiting for table metadata lock' AND info='TRUNCATE TABLE t1';
reap;
UNLOCK TABLES;
reap;
reap;
disconnect con1;
disconnect con2;
disconnect con3;
connect (con2, localhost, root);
connect (con3, localhost, root);
WHERE state='Waiting for schema metadata lock' AND info='CREATE DATABASE db1';
WHERE state='Waiting for schema metadata lock'   AND info='ALTER DATABASE db1 DEFAULT CHARACTER SET utf8';
WHERE state='Waiting for schema metadata lock' AND info='DROP DATABASE db1';
WHERE state='Waiting for schema metadata lock' AND info='DROP DATABASE db1';
WHERE state='Waiting for schema metadata lock'   AND info='ALTER DATABASE db1 DEFAULT CHARACTER SET utf8';
WHERE state='Waiting for schema metadata lock' AND         info='CREATE TABLE db1.t1 (a INT)';
WHERE state='Waiting for schema metadata lock' AND         info='RENAME TABLE db1.t1 TO test.t1';
WHERE state='Waiting for schema metadata lock' AND         info='RENAME TABLE test.t2 TO db1.t2';
WHERE state='Waiting for schema metadata lock' AND info='DROP TABLE db1.t1';
disconnect con2;
disconnect con3;
connect(con2, localhost, root);
connect(con3, localhost, root);
FLUSH TABLE WITH READ LOCK;
WHERE state='Waiting for global read lock'   AND info='CREATE TABLE db1.t2(a INT)';
UNLOCK TABLES;
FLUSH TABLE WITH READ LOCK;
WHERE state='Waiting for global read lock'   AND info='ALTER DATABASE db1 DEFAULT CHARACTER SET utf8';
UNLOCK TABLES;
FLUSH TABLE WITH READ LOCK;
FLUSH TABLE WITH READ LOCK;
UNLOCK TABLES;
UNLOCK TABLES;
disconnect con2;
disconnect con3;
connect(con1, localhost, root);
connect(con2, localhost, root);
disconnect con1;
disconnect con2;
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
connect (con0,localhost,root,,test,,);
connect (con1,localhost,root,,test,,);
disconnect con0;
disconnect con1;
connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
disconnect con2;
disconnect con1;
connect (master,localhost,root,,);
connect (sample,localhost,sample,password,d1);
disconnect sample;
disconnect master;
connect (con1,localhost,user_1,,d1);
disconnect con1;
connect (con1,localhost,user_1,,db1);
connect (con2,localhost,USER_1,,db1);
disconnect con1;
disconnect con2;
RENAME TABLE t1 TO T1;
perl;
my $log= $ENV{'MYSQLD_LOG'} or die;
open(FILE, "$log") or die;
my $c_w= grep(/Different lower_case_table_names settings/gi,<FILE>);
print "#    Found lower_case_table_names error $c_w times.\n";
close(FILE);
GRANT PROXY ON 'employee'@'localhost' TO 'empl_external'@'localhost';
disconnect employee_con;
create table `t``1`(a int) engine=myisam;
drop table `t``1`, `t 1`;
CREATE TABLE `t1` (   `a b` INT,   `c"d` INT,   `e``f` INT,   PRIMARY KEY (`a b`, `c"d`, `e``f`) ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
CREATE TRIGGER `testref` BEFORE INSERT ON `test1` FOR EACH ROW BEGIN INSERT INTO test2 SET a2 = NEW.a1; END  // DELIMITER ;// INSERT INTO `test1` VALUES (1);
CREATE TRIGGER `test trig` BEFORE INSERT ON `t1 test` FOR EACH ROW BEGIN INSERT INTO `t2 test` SET a2 = NEW.a1; END  // DELIMITER ;// INSERT INTO `t1 test` VALUES (1);
CREATE TRIGGER `trig` BEFORE INSERT ON `test` FOR EACH ROW BEGIN END | DELIMITER ;| ALTER DATABASE `test-database` CHARACTER SET latin1 COLLATE latin1_swedish_ci;
CREATE PROCEDURE simpleproc1 (OUT param1 INT) BEGIN   SELECT COUNT(*) INTO param1 FROM t1;
END// DELIMITER ;// DELIMITER //;
CREATE PROCEDURE simpleproc2 (OUT param1 INT) BEGIN   SELECT COUNT(*) INTO param1 FROM t2;
END// DELIMITER ;// SET GLOBAL EVENT_SCHEDULER = OFF;
CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792;
CREATE EVENT e2 ON SCHEDULE EVERY 1 SECOND DO DROP DATABASE BUG52792;
CREATE TRIGGER trig1 BEFORE INSERT ON t2   FOR EACH ROW BEGIN     INSERT INTO t2 VALUES(1);
END;
| DELIMITER ;| DELIMITER |;
CREATE TRIGGER trig2 AFTER INSERT ON t2   FOR EACH ROW BEGIN     INSERT INTO t2 VALUES(1, ']]>');
END;
| DELIMITER ;| CREATE VIEW v1 AS SELECT * FROM t1;
connect (conn_1, localhost, user1, , BUG52792, $MASTER_MYPORT, $MASTER_MYSOCK);
disconnect conn_1;
SELECT id, sex, LEAD(id, -1) RESPECT NULLS OVER () FROM t1;
SELECT id, sex, LEAD(id, 'a') RESPECT NULLS OVER () FROM t1;
SELECT id, sex, LEAD(id, NULL) RESPECT NULLS OVER () FROM t1;
PREPARE p FROM "SELECT id, sex, LEAD(id, ?) OVER () FROM t1";
EXECUTE p USING @p1;
EXECUTE p USING @p1;
EXECUTE p USING @p1;
PREPARE p FROM "SELECT id, sex, LEAD(id+?, ?, ?) RESPECT NULLS OVER () FROM t1";
EXECUTE p USING @p1, @p2, @p3;
EXECUTE p USING @p1, @p2, @p3;
DROP PREPARE p;
DO TO_SECONDS(LAG(POINT(2.804466E+307,-2032),75) OVER());
DO IS_IPV4(TIMESTAMP(LAG(-19131 ,188) OVER(),@F));
DO WEEKOFYEAR(LAG(-16726 ,247)RESPECT NULLS OVER());
DO DAYOFYEAR(LEAD(-6653420797178186265 ,29)OVER());
DO YEARWEEK(LEAD(FOUND_ROWS(),250)OVER());
DO DAYOFYEAR(LAG('] .| /= ',63) OVER());
DO IFNULL((DAYNAME(LEAD(STDDEV(@F),162) OVER())),(0xD73E));
DO TO_DAYS(LEAD(((LOCATE(0xA812,0xE8DE))OR(@G)),148)OVER());
DO WEEKOFYEAR(LEAD(('5183-10-18 06:15:35.076079')SOUNDS LIKE(0x9E335D89),68)OVER());
DO DAYOFYEAR(LEAD(ROW_COUNT(),177)OVER());
DO MONTHNAME(LAG(' =',74) OVER());
DO SHA(BIN(MONTHNAME(LEAD(UNCOMPRESSED_LENGTH(SHA1("")),224)OVER())));
DO (((NOT(1)))^(HOUR(MONTHNAME(LEAD(DATABASE(),89)OVER()))));
DO MONTHNAME(LEAD(CHARSET(CONVERT((MOD(CURTIME(4),STDDEV(NULL)))USING CP850)),12) OVER());
DO LAST_DAY(LAG(NULL,113) OVER());
DO LAST_DAY(LEAD(-2201 ,98)RESPECT NULLS OVER());
DO OCTET_LENGTH(((LAST_DAY(LEAD(-28178,163)OVER()))OR(COLLATION(@E))));
DO LAST_DAY(LAG('*',36)RESPECT NULLS OVER());
DO LAST_DAY(LEAD( _CP932 '',241)OVER(RANGE UNBOUNDED PRECEDING));
DO ((CAST((LEAD(NULL,152) OVER()) AS TIME))*(1));
DO CAST((LAG(SHA(STDDEV('-0E%_')),224) OVER()) AS TIME);
DO CAST((LAG(_UJIS '8CA} ',144) OVER()) AS TIME);
DO CAST((LAG(-16520,156) OVER()) AS TIME);
DO CAST((LEAD(-6011,202) OVER()) AS TIME);
DO CAST((LEAD(0x45,104) OVER())AS TIME);
DO CAST((LAG(POLYGON( LINESTRING( POINT(4099,17421),                                   POINT(22259,-5875.0796),                                   POINT(30179,6542),                                   POINT(12331,-18840)),                                   LINESTRING( POINT( 8162.2539,-29332),                                               POINT(24157,-23393),                                               POINT(268435459,-26835),                                               POINT(3.933871E+307,-25808)),                                   LINESTRING( POINT(30360,-1049),                                               POINT(15405,5.816757E+307),                                               POINT( 3717.3555,1.599730E+308),                                               POINT(-23002,-19077))),                       70)          OVER())         AS DATETIME );
DO UNIX_TIMESTAMP(      LAG(ROUND(((UTC_TIME()) OR                 ((NOT (INET6_ATON(IS_IPV4(((MAKETIME(-10966,                                                      233,                                                      2795.439453))                                            OR(MAKEDATE(-3030,19)))))))))),          140) OVER());
DO LAST_DAY(SQRT(CAST((LAG(REPEAT('B',64),91)OVER())AS DATETIME)));
DO CAST((LEAD(-197994311,60)OVER())AS DATETIME);
DO IFNULL((NULL ),(UNIX_TIMESTAMP(LEAD(NULL,12)RESPECT NULLS OVER())));
DO ((CONVERT((VARIANCE(-18951))USING CP866)) <=     (JSON_ARRAY(LEAD(CAST((35184372088833)AS DATETIME),126)OVER())));
DO ((LAG(LAST_DAY("]<$*_#[DB!^+ : 3"),89) OVER (RANGE UNBOUNDED PRECEDING)) >     (CONVERT(("1985-10-19 03:36:29.304455" -               INTERVAL(0x1446C5A2627FB06D88DC63D66B36DF) DAY_MICROSECOND)              USING BIG5)));
CREATE USER u1@192.129.12.11;
CREATE DEFINER = u1@192.129.12.11 VIEW v3 as SELECT * FROM t1;
DROP USER u1@192.129.12.11;
if($log_error_ == "stderr") { } FLUSH LOGS;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
SELECT @@global.syseventlog.tag;
CALL mtr.add_suppression("--character-set-server: 'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.");
CREATE TRIGGER trg_bi BEFORE INSERT ON th1 FOR EACH ROW BEGIN   INSERT IGNORE INTO th2 SELECT 1 FROM th1   WHERE MATCH(a) AGAINST ( 'test'   IN BOOLEAN MODE);
END $ DELIMITER ;$ SET @@debug='+d,simulate_bug18831513';
LOCK TABLES t1 WRITE;
UNLOCK TABLES;
